------------------------------------------------------
-- Export file for user RPV                         --
-- Created by Administrator on 30-03-2020, 23:08:10 --
------------------------------------------------------

set define off
spool schema_packs_rpv_classico.log

prompt
prompt Creating table ACESSO_URL
prompt =========================
prompt
create table RPV.ACESSO_URL
(
  http    VARCHAR2(100),
  forms   VARCHAR2(50),
  reports VARCHAR2(50),
  data    VARCHAR2(10)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table AGENDAMENTOS
prompt ===========================
prompt
create table RPV.AGENDAMENTOS
(
  id_agendamentos NUMBER not null,
  num_doc_viagem  VARCHAR2(20) not null,
  data            DATE not null,
  id_posto        NUMBER(4),
  password        VARCHAR2(10),
  id_periodo      VARCHAR2(2),
  num_form_web    NUMBER not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table RPV.AGENDAMENTOS
  add constraint AGENDAMENTOS_PK primary key (ID_AGENDAMENTOS)
  using index 
  tablespace TS_RPV_1
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table AJ_TRIG
prompt ======================
prompt
create table RPV.AJ_TRIG
(
  linha NUMBER,
  texto LONG
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 72K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table ANEXOS
prompt =====================
prompt
create table RPV.ANEXOS
(
  nome_fich  VARCHAR2(20) not null,
  descr      VARCHAR2(80),
  tip_form   VARCHAR2(1) not null,
  ano_form   NUMBER(4) not null,
  num_form   NUMBER(7) not null,
  cod_ser_i  VARCHAR2(3),
  num_ord_i  NUMBER(2),
  ord_form_i NUMBER(2),
  anexo_id   NUMBER(1) not null,
  tip_i      VARCHAR2(1),
  fich       BLOB,
  fich_true  VARCHAR2(100)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.FK_ANEXOS_01 on RPV.ANEXOS (ANO_FORM, NUM_FORM, COD_SER_I, NUM_ORD_I, ORD_FORM_I)
  tablespace TS_RPV_1
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create unique index RPV.PK_ANEXOS on RPV.ANEXOS (NOME_FICH)
  tablespace TS_RPV_1
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table ARTIGOS
prompt ======================
prompt
create table RPV.ARTIGOS
(
  cod_art VARCHAR2(2) not null,
  des_art VARCHAR2(50) not null
)
tablespace TS_RPV_1
  pctfree 5
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
alter table RPV.ARTIGOS
  add constraint ARTIGOS_PK primary key (COD_ART)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 1032K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table AUDIT_CONS_NSIS
prompt ==============================
prompt
create table RPV.AUDIT_CONS_NSIS
(
  ano_form     NUMBER(4) not null,
  num_form     NUMBER(7) not null,
  nome         VARCHAR2(500) not null,
  apelido      VARCHAR2(500) not null,
  dat_nasc     VARCHAR2(10) not null,
  resultado    VARCHAR2(4) not null,
  dat_consulta VARCHAR2(20) not null,
  cri_uti      VARCHAR2(20)
)
tablespace TS_RPV_1
  pctfree 5
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 10M
    minextents 1
    maxextents unlimited
  );
comment on table RPV.AUDIT_CONS_NSIS
  is 'Consultas efectuadas ao NSIS através SIS4ALL';
comment on column RPV.AUDIT_CONS_NSIS.ano_form
  is 'Ano do formulário';
comment on column RPV.AUDIT_CONS_NSIS.num_form
  is 'Numero interno do formulário';
comment on column RPV.AUDIT_CONS_NSIS.nome
  is 'Nome do requerente';
comment on column RPV.AUDIT_CONS_NSIS.apelido
  is 'Apelido do requerente';
comment on column RPV.AUDIT_CONS_NSIS.dat_nasc
  is 'Data de nascimento do requerente';
comment on column RPV.AUDIT_CONS_NSIS.resultado
  is 'Resultado da pesquisa';
comment on column RPV.AUDIT_CONS_NSIS.dat_consulta
  is 'Data da consulta';
comment on column RPV.AUDIT_CONS_NSIS.cri_uti
  is 'Utilizador que fez a consulta';

prompt
prompt Creating table AUTORIDADES_VISMAIL
prompt ==================================
prompt
create table RPV.AUTORIDADES_VISMAIL
(
  cod_pais_sch VARCHAR2(3) not null,
  country      VARCHAR2(4) not null,
  location     VARCHAR2(150) not null,
  name         VARCHAR2(100) not null,
  type         VARCHAR2(4),
  cri_uti      VARCHAR2(20),
  cri_dat      DATE
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table PAIS
prompt ===================
prompt
create table RPV.PAIS
(
  cod_pais        VARCHAR2(3) not null,
  des_pais        VARCHAR2(50) not null,
  pais_sch        VARCHAR2(1) default 'N' not null,
  disponivel      VARCHAR2(1),
  pais_ue_eee_ch  VARCHAR2(1),
  cod_pais_nsis   VARCHAR2(1),
  cod_pais_nsisii VARCHAR2(4)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.PAIS.cod_pais
  is 'Código do País';
comment on column RPV.PAIS.des_pais
  is 'Desrição do País';
comment on column RPV.PAIS.pais_sch
  is 'País de Schengen ? (S/N)';
alter table RPV.PAIS
  add constraint PAIS_PK primary key (COD_PAIS)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.PAIS
  add check ( pais_sch IN ( 'S' , 'N' )  );
alter table RPV.PAIS
  add check ( pais_sch IN ( 'S' , 'N' )  );
alter table RPV.PAIS
  add check ( pais_sch IN ( 'S' , 'N' )  );
alter table RPV.PAIS
  add check ( pais_sch IN ( 'S' , 'N' )  );
alter table RPV.PAIS
  add check ( pais_sch IN ( 'S' , 'N' )  );
alter table RPV.PAIS
  add check ( pais_sch IN ( 'S' , 'N' )  );
alter table RPV.PAIS
  add check ( pais_sch IN ( 'S' , 'N' )  );
alter table RPV.PAIS
  add check ( pais_sch IN ( 'S' , 'N' )  );
alter table RPV.PAIS
  add check ( pais_sch IN ( 'S' , 'N' )  );
alter table RPV.PAIS
  add check ( pais_sch IN ( 'S' , 'N' )  );
alter table RPV.PAIS
  add check ( pais_sch IN ( 'S' , 'N' )  );
alter table RPV.PAIS
  add check ( pais_sch IN ( 'S' , 'N' )  );
alter table RPV.PAIS
  add check ( pais_sch IN ( 'S' , 'N' )  );
alter table RPV.PAIS
  add check ( pais_sch IN ( 'S' , 'N' )  );
alter table RPV.PAIS
  add check ( pais_sch IN ( 'S' , 'N' )  );
alter table RPV.PAIS
  add check ( pais_sch IN ( 'S' , 'N' )  );
alter table RPV.PAIS
  add check ( pais_sch IN ( 'S' , 'N' )  );
alter table RPV.PAIS
  add check ( pais_sch IN ( 'S' , 'N' )  );
alter table RPV.PAIS
  add check ( pais_sch IN ( 'S' , 'N' )  );
alter table RPV.PAIS
  add check ( pais_sch IN ( 'S' , 'N' )  );
alter table RPV.PAIS
  add check ( pais_sch IN ( 'S' , 'N' )  );
alter table RPV.PAIS
  add check ( pais_sch IN ( 'S' , 'N' )  );
alter table RPV.PAIS
  add check ( pais_sch IN ( 'S' , 'N' )  );
alter table RPV.PAIS
  add check ( pais_sch IN ( 'S' , 'N' )  );
alter table RPV.PAIS
  add check ( pais_sch IN ( 'S' , 'N' )  );
alter table RPV.PAIS
  add check ( pais_sch IN ( 'S' , 'N' )  );

prompt
prompt Creating table BIOMETRIA_INFO
prompt =============================
prompt
create table RPV.BIOMETRIA_INFO
(
  num_recibo     NUMBER(10) not null,
  nome           VARCHAR2(25) not null,
  apelido        VARCHAR2(50) not null,
  dat_nasc       VARCHAR2(10) not null,
  sexo           VARCHAR2(1) not null,
  cod_nac        VARCHAR2(3) not null,
  num_doc_viagem VARCHAR2(20) not null,
  num_vin        VARCHAR2(19),
  usado          VARCHAR2(1) not null,
  ano_form       NUMBER(4),
  num_form       NUMBER(7),
  tipo           NUMBER(1) not null,
  obs_na         VARCHAR2(120),
  bio            BLOB,
  foto           BLOB,
  cod_art        VARCHAR2(2) not null,
  cri_dat        DATE not null,
  cri_uti        VARCHAR2(30) not null,
  assinatura     BLOB,
  pdf_file       BLOB,
  pdf_file2      BLOB,
  pdf_file3      BLOB,
  pdf_file4      BLOB,
  aceita_pdf     VARCHAR2(1)
)
tablespace TS_RPV_1
  pctfree 5
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 50M
    minextents 1
    maxextents unlimited
  );
create index RPV.BIOMETRIA_INFO_I on RPV.BIOMETRIA_INFO (ANO_FORM, NUM_FORM)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 1M
    minextents 1
    maxextents unlimited
  );
create index RPV.BIOMETRIA_INFO_III on RPV.BIOMETRIA_INFO (DAT_NASC, NUM_DOC_VIAGEM)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 1M
    minextents 1
    maxextents unlimited
  );
alter table RPV.BIOMETRIA_INFO
  add constraint BIOMETRIA_INFO_PK primary key (NUM_RECIBO)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
alter table RPV.BIOMETRIA_INFO
  add constraint BIOMETRIA_INFO_COD_ART_FK foreign key (COD_ART)
  references RPV.ARTIGOS (COD_ART);
alter table RPV.BIOMETRIA_INFO
  add constraint BIOMETRIA_INFO_COD_PAIS_FK foreign key (COD_NAC)
  references RPV.PAIS (COD_PAIS);
alter table RPV.BIOMETRIA_INFO
  add constraint BIOMETRIA_INFO_SEXO_CHECK
  check (SEXO IN ('M','F'));
alter table RPV.BIOMETRIA_INFO
  add constraint BIOMETRIA_INFO_TIPO_CHECK
  check (TIPO IN (0,1,2,3));
alter table RPV.BIOMETRIA_INFO
  add constraint BIOMETRIA_INFO_USADO_CHECK
  check (USADO IN ('N','S'));

prompt
prompt Creating table CARGO_UTI
prompt ========================
prompt
create table RPV.CARGO_UTI
(
  cod_carg VARCHAR2(6) not null,
  des_carg VARCHAR2(50) not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.CARGO_UTI.cod_carg
  is 'Código de Cargo do Utilizador';
comment on column RPV.CARGO_UTI.des_carg
  is 'Descrição do Cargo do Utilizador';
alter table RPV.CARGO_UTI
  add constraint CARGUTI_PK primary key (COD_CARG)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CATEGORIA
prompt ========================
prompt
create table RPV.CATEGORIA
(
  cod_categ   VARCHAR2(5) not null,
  des_categ   VARCHAR2(35) not null,
  responsavel VARCHAR2(30) default 'Embaixador'
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.CATEGORIA.cod_categ
  is 'Código de Categoria do Posto';
comment on column RPV.CATEGORIA.des_categ
  is 'Descrição da Categoria do Posto';
comment on column RPV.CATEGORIA.responsavel
  is 'Título do Responsável';
alter table RPV.CATEGORIA
  add constraint CATEG_PK primary key (COD_CATEG)
  using index 
  tablespace TS_RPV_1
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CG_FORM_HELP
prompt ===========================
prompt
create table RPV.CG_FORM_HELP
(
  hlp_appln       VARCHAR2(30) not null,
  hlp_index       VARCHAR2(100) not null,
  hlp_modtab_name VARCHAR2(30),
  hlp_generated   VARCHAR2(1),
  hlp_seq         NUMBER(5) not null,
  hlp_text        VARCHAR2(70),
  hlp_type        VARCHAR2(1) not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CG_REF_CODES
prompt ===========================
prompt
create table RPV.CG_REF_CODES
(
  rv_low_value    VARCHAR2(240) not null,
  rv_high_value   VARCHAR2(240),
  rv_abbreviation VARCHAR2(240),
  rv_domain       VARCHAR2(100) not null,
  rv_meaning      VARCHAR2(240),
  rv_type         VARCHAR2(10)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 112K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table DIRECCAO_SEF
prompt ===========================
prompt
create table RPV.DIRECCAO_SEF
(
  cod_direc NUMBER(1) not null,
  des_direc VARCHAR2(50) not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.DIRECCAO_SEF
  add constraint DIRECCAOSEF_PK primary key (COD_DIREC)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CONCELHO_SEF
prompt ===========================
prompt
create table RPV.CONCELHO_SEF
(
  cod_conc  NUMBER(4) not null,
  des_conc  VARCHAR2(60) not null,
  cod_direc NUMBER(1) not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 24K
    minextents 1
    maxextents unlimited
  );
alter table RPV.CONCELHO_SEF
  add constraint CONCELHOSEF_PK primary key (COD_CONC)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.CONCELHO_SEF
  add constraint CONCELHO_SEF_FK foreign key (COD_DIREC)
  references RPV.DIRECCAO_SEF (COD_DIREC);

prompt
prompt Creating table CONSULTA_SCH
prompt ===========================
prompt
create table RPV.CONSULTA_SCH
(
  cod_cons_sch VARCHAR2(6) not null,
  des_cons_sch VARCHAR2(50) not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.CONSULTA_SCH.cod_cons_sch
  is 'Codigo da Consulta de SCHENGEN';
comment on column RPV.CONSULTA_SCH.des_cons_sch
  is 'Descriçao da Consulta de SCHENGEN';
alter table RPV.CONSULTA_SCH
  add constraint CONSCH_PK primary key (COD_CONS_SCH)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table PAIS_SCH
prompt =======================
prompt
create table RPV.PAIS_SCH
(
  cod_pais_sch VARCHAR2(3) not null,
  sigla_pais   VARCHAR2(2) not null,
  telefone     VARCHAR2(20),
  fax          VARCHAR2(20),
  morada       VARCHAR2(120),
  alias        VARCHAR2(20) not null,
  end_envio    VARCHAR2(120),
  end_recep    VARCHAR2(120)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.PAIS_SCH.cod_pais_sch
  is 'Código do País';
comment on column RPV.PAIS_SCH.sigla_pais
  is 'Sigla do País (SCHENGEN)';
comment on column RPV.PAIS_SCH.telefone
  is 'Número de telefone';
comment on column RPV.PAIS_SCH.fax
  is 'Número do Fax';
comment on column RPV.PAIS_SCH.morada
  is 'Morada';
alter table RPV.PAIS_SCH
  add constraint SCH_PK primary key (COD_PAIS_SCH)
  using index 
  tablespace TS_RPV_1
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CONSULTA_SCH_DET
prompt ===============================
prompt
create table RPV.CONSULTA_SCH_DET
(
  cod_cons_sch VARCHAR2(6) not null,
  cod_pais     VARCHAR2(3) not null,
  cod_pais_sch VARCHAR2(3) not null,
  tip_valid    VARCHAR2(1) not null,
  tip_restr    VARCHAR2(1),
  cri_dat      VARCHAR2(20) not null,
  cri_uti      VARCHAR2(30) not null,
  alt_dat      VARCHAR2(20),
  alt_uti      VARCHAR2(30)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.CONSULTA_SCH_DET.cod_cons_sch
  is 'Codigo da Consulta de SCHENGEN';
comment on column RPV.CONSULTA_SCH_DET.cod_pais
  is 'Código do País';
comment on column RPV.CONSULTA_SCH_DET.cod_pais_sch
  is 'Código do País';
comment on column RPV.CONSULTA_SCH_DET.tip_valid
  is 'Validação das Restrições (Automática/Manual)';
comment on column RPV.CONSULTA_SCH_DET.tip_restr
  is 'Restrições às consultas a Schengen';
comment on column RPV.CONSULTA_SCH_DET.cri_dat
  is 'Data de Criação do Registo.';
comment on column RPV.CONSULTA_SCH_DET.cri_uti
  is 'Utilizador que realizou a  Criação do Registo.';
comment on column RPV.CONSULTA_SCH_DET.alt_dat
  is 'Data deAlteração do Registo.';
comment on column RPV.CONSULTA_SCH_DET.alt_uti
  is 'Utilizador que realizou a Última Alteração';
create index RPV.CONSCHDET_CONSCH_FK_I on RPV.CONSULTA_SCH_DET (COD_CONS_SCH)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.CONSCHDET_PAIS_FK_I on RPV.CONSULTA_SCH_DET (COD_PAIS)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.CONSCHDET_SCH_FK_I on RPV.CONSULTA_SCH_DET (COD_PAIS_SCH)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.CONSULTA_SCH_DET
  add constraint CONSCHDET_CONSCH_FK foreign key (COD_CONS_SCH)
  references RPV.CONSULTA_SCH (COD_CONS_SCH);
alter table RPV.CONSULTA_SCH_DET
  add constraint CONSCHDET_PAIS_FK foreign key (COD_PAIS)
  references RPV.PAIS (COD_PAIS);
alter table RPV.CONSULTA_SCH_DET
  add constraint CONSCHDET_SCH_FK foreign key (COD_PAIS_SCH)
  references RPV.PAIS_SCH (COD_PAIS_SCH);

prompt
prompt Creating table SERVICO
prompt ======================
prompt
create table RPV.SERVICO
(
  cod_ser      VARCHAR2(3) not null,
  des_ser      VARCHAR2(50) not null,
  con_lis      VARCHAR2(1) default 'N' not null,
  permi_anular VARCHAR2(1) default 'S' not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.SERVICO.cod_ser
  is 'Código de Serviço';
comment on column RPV.SERVICO.con_lis
  is 'Consulta a este Serviço por Listagem ?';
comment on column RPV.SERVICO.permi_anular
  is 'Pode ser Anulado ? (S/N)';
alter table RPV.SERVICO
  add constraint SER_PK primary key (COD_SER)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.SERVICO
  add check ( permi_anular IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( con_lis IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( permi_anular IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( con_lis IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( permi_anular IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( con_lis IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( permi_anular IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( permi_anular IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( con_lis IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( permi_anular IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( con_lis IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( con_lis IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( permi_anular IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( con_lis IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( permi_anular IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( con_lis IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( permi_anular IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( permi_anular IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( con_lis IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( permi_anular IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( con_lis IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( permi_anular IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( con_lis IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( permi_anular IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( con_lis IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( permi_anular IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( con_lis IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( con_lis IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( permi_anular IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( con_lis IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( permi_anular IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( con_lis IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( permi_anular IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( con_lis IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( permi_anular IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( con_lis IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( permi_anular IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( con_lis IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( permi_anular IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( con_lis IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( permi_anular IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( con_lis IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( permi_anular IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( con_lis IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( permi_anular IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( con_lis IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( con_lis IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( permi_anular IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( con_lis IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( permi_anular IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( con_lis IN ( 'S' , 'N' )  );
alter table RPV.SERVICO
  add check ( permi_anular IN ( 'S' , 'N' )  );

prompt
prompt Creating table T_VISTO
prompt ======================
prompt
create table RPV.T_VISTO
(
  tip_vis             VARCHAR2(2) not null,
  des_vis             VARCHAR2(50) not null,
  dur_est             NUMBER(3) not null,
  dur_est_temp        VARCHAR2(1) default 'D' not null,
  dur_est_fix         VARCHAR2(1) default 'N' not null,
  vali_vis            NUMBER(4) default 90 not null,
  vali_vis_temp       VARCHAR2(1) default 'D' not null,
  con_sch             VARCHAR2(1) default 'S' not null,
  vali_vis_fix        VARCHAR2(1) default 'N' not null,
  inf_comp            VARCHAR2(1) default 'N' not null,
  num_dias_inf        NUMBER(2),
  vvtl                VARCHAR2(1) default 'N' not null,
  multi_pais          VARCHAR2(1) default 'S' not null,
  des_multi_pais      VARCHAR2(50),
  des_conj            VARCHAR2(1) default 'Y' not null,
  des_desc            VARCHAR2(1) default 'X' not null,
  cri_dat             VARCHAR2(20) default 'sysdate' not null,
  cri_uti             VARCHAR2(30) not null,
  alt_dat             VARCHAR2(20) default 'sysdate',
  alt_uti             VARCHAR2(30),
  disponivel          VARCHAR2(1),
  des_multi_pais_temp VARCHAR2(50),
  vis_visa            VARCHAR2(1),
  reapr               VARCHAR2(1)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.T_VISTO.tip_vis
  is 'Tipo de Visto';
comment on column RPV.T_VISTO.dur_est
  is 'Duração de Estada';
comment on column RPV.T_VISTO.dur_est_temp
  is 'Medida da Duração de Estada (Dia/Mes/Ano)';
comment on column RPV.T_VISTO.vali_vis
  is 'Nº Dias de Validade (Pedido)';
comment on column RPV.T_VISTO.con_sch
  is 'Consulta Schengen ? (S/N)';
comment on column RPV.T_VISTO.inf_comp
  is 'Necessita Informação Complementar ? (S/N)';
comment on column RPV.T_VISTO.num_dias_inf
  is 'Nº Dias para a Recepção da Informação';
comment on column RPV.T_VISTO.vvtl
  is 'Tipo de Visto com VVTL associado ?';
comment on column RPV.T_VISTO.multi_pais
  is 'Indicação do Descritivo para Multi-Paises';
comment on column RPV.T_VISTO.des_multi_pais
  is 'Descrição para Multi-Paises';
comment on column RPV.T_VISTO.des_conj
  is 'Descrição para Conjuge';
comment on column RPV.T_VISTO.des_desc
  is 'Descrição para Descendentes';
comment on column RPV.T_VISTO.cri_dat
  is 'Data de Criação do Registo.';
comment on column RPV.T_VISTO.cri_uti
  is 'Utilizador que realizou a  Criação do Registo.';
comment on column RPV.T_VISTO.alt_dat
  is 'Data deAlteração do Registo.';
comment on column RPV.T_VISTO.alt_uti
  is 'Utilizador que realizou a Última Alteração';
create index RPV.TIPVIS_INF_COMP_FK_I on RPV.T_VISTO (INF_COMP)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.T_VISTO
  add constraint TIPVIS_PK primary key (TIP_VIS)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.T_VISTO
  add check ( dur_est_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( vali_vis_temp IN ( 'D' , 'M' , 'A' )  );
alter table RPV.T_VISTO
  add check ( con_sch IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( vali_vis_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( inf_comp IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( vvtl IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( multi_pais IN ( 'S' , 'I' )  );
alter table RPV.T_VISTO
  add check ( dur_est_temp IN ( 'D' , 'M' , 'A' )  );
alter table RPV.T_VISTO
  add check ( dur_est_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( vali_vis_temp IN ( 'D' , 'M' , 'A' )  );
alter table RPV.T_VISTO
  add check ( con_sch IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( vali_vis_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( inf_comp IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( vvtl IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( multi_pais IN ( 'S' , 'I' )  );
alter table RPV.T_VISTO
  add check ( inf_comp IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( dur_est_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( dur_est_temp IN ( 'D' , 'M' , 'A' )  );
alter table RPV.T_VISTO
  add check ( dur_est_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( vali_vis_temp IN ( 'D' , 'M' , 'A' )  );
alter table RPV.T_VISTO
  add check ( con_sch IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( vali_vis_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( inf_comp IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( vvtl IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( multi_pais IN ( 'S' , 'I' )  );
alter table RPV.T_VISTO
  add check ( con_sch IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( inf_comp IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( con_sch IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( inf_comp IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( dur_est_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( con_sch IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( inf_comp IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( dur_est_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( dur_est_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( con_sch IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( con_sch IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( inf_comp IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( dur_est_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( con_sch IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( inf_comp IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( dur_est_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( con_sch IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( inf_comp IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( dur_est_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( con_sch IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( inf_comp IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( dur_est_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( dur_est_temp IN ( 'D' , 'M' , 'A' )  );
alter table RPV.T_VISTO
  add check ( inf_comp IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( dur_est_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( dur_est_temp IN ( 'D' , 'M' , 'A' )  );
alter table RPV.T_VISTO
  add check ( dur_est_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( vali_vis_temp IN ( 'D' , 'M' , 'A' )  );
alter table RPV.T_VISTO
  add check ( con_sch IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( vali_vis_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( inf_comp IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( vvtl IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( multi_pais IN ( 'S' , 'I' )  );
alter table RPV.T_VISTO
  add check ( con_sch IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( inf_comp IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( con_sch IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( inf_comp IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( dur_est_temp IN ( 'D' , 'M' , 'A' )  );
alter table RPV.T_VISTO
  add check ( dur_est_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( vali_vis_temp IN ( 'D' , 'M' , 'A' )  );
alter table RPV.T_VISTO
  add check ( con_sch IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( vali_vis_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( inf_comp IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( dur_est_temp IN ( 'D' , 'M' , 'A' )  );
alter table RPV.T_VISTO
  add check ( dur_est_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( vali_vis_temp IN ( 'D' , 'M' , 'A' )  );
alter table RPV.T_VISTO
  add check ( con_sch IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( vali_vis_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( inf_comp IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( vvtl IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( multi_pais IN ( 'S' , 'I' )  );
alter table RPV.T_VISTO
  add check ( con_sch IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( inf_comp IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( dur_est_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( dur_est_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( con_sch IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( inf_comp IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( dur_est_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( con_sch IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( inf_comp IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( con_sch IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( inf_comp IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( dur_est_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( vvtl IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( multi_pais IN ( 'S' , 'I' )  );
alter table RPV.T_VISTO
  add check ( con_sch IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( inf_comp IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( dur_est_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( dur_est_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( con_sch IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( inf_comp IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( dur_est_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( con_sch IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( inf_comp IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( con_sch IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( inf_comp IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( dur_est_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( dur_est_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( con_sch IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( inf_comp IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( dur_est_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( dur_est_fix IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO
  add check ( con_sch IN ( 'S' , 'N' )  );

prompt
prompt Creating table CONSULTA_SER
prompt ===========================
prompt
create table RPV.CONSULTA_SER
(
  cod_pais VARCHAR2(3) not null,
  cod_ser  VARCHAR2(3) not null,
  tip_vis  VARCHAR2(2) not null,
  cri_dat  VARCHAR2(20) default 'sysdate' not null,
  cri_uti  VARCHAR2(30) not null,
  alt_dat  VARCHAR2(20) default 'sysdate',
  alt_uti  VARCHAR2(30)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.CONSULTA_SER.cod_pais
  is 'Código do País';
comment on column RPV.CONSULTA_SER.cod_ser
  is 'Código de Serviço';
comment on column RPV.CONSULTA_SER.tip_vis
  is 'Tipo de Visto';
comment on column RPV.CONSULTA_SER.cri_dat
  is 'Data de Criação do Registo.';
comment on column RPV.CONSULTA_SER.cri_uti
  is 'Utilizador que realizou a  Criação do Registo.';
comment on column RPV.CONSULTA_SER.alt_dat
  is 'Data deAlteração do Registo.';
comment on column RPV.CONSULTA_SER.alt_uti
  is 'Utilizador que realizou a Última Alteração';
create index RPV.SERCON_PAIS_FK_I on RPV.CONSULTA_SER (COD_PAIS)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.SERCON_SER_FK_I on RPV.CONSULTA_SER (COD_SER)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.SERCON_TIPVIS_FK_I on RPV.CONSULTA_SER (TIP_VIS)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.CONSULTA_SER
  add constraint SERCON_PK primary key (COD_PAIS, TIP_VIS, COD_SER)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.CONSULTA_SER
  add constraint SERCON_PAIS_FK foreign key (COD_PAIS)
  references RPV.PAIS (COD_PAIS);
alter table RPV.CONSULTA_SER
  add constraint SERCON_SER_FK foreign key (COD_SER)
  references RPV.SERVICO (COD_SER);
alter table RPV.CONSULTA_SER
  add constraint SERCON_TIPVIS_FK foreign key (TIP_VIS)
  references RPV.T_VISTO (TIP_VIS);

prompt
prompt Creating table TRATA_POSTO
prompt ==========================
prompt
create table RPV.TRATA_POSTO
(
  cod_trat VARCHAR2(5) not null,
  des_trat VARCHAR2(10) not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.TRATA_POSTO.cod_trat
  is 'Código do Tratamento no Posto';
comment on column RPV.TRATA_POSTO.des_trat
  is 'Descrição do Tratamento no Posto';
alter table RPV.TRATA_POSTO
  add constraint TRAT_PK primary key (COD_TRAT)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table POSTO
prompt ====================
prompt
create table RPV.POSTO
(
  cod_pos           NUMBER(4) not null,
  des_pos           VARCHAR2(50) not null,
  cid_pos           VARCHAR2(25) not null,
  cod_pais          VARCHAR2(3) not null,
  cod_categ         VARCHAR2(5) not null,
  cod_trat          VARCHAR2(5) not null,
  telefone          VARCHAR2(20),
  mem_fax           VARCHAR2(5),
  fax_pos           VARCHAR2(20),
  morada            VARCHAR2(120),
  circ_aut          VARCHAR2(1) default 'N' not null,
  alias             VARCHAR2(20),
  end_envio         VARCHAR2(120),
  end_recep         VARCHAR2(120),
  anexos            VARCHAR2(1),
  data_arranque_vis DATE,
  loa_id            VARCHAR2(10),
  posto_vvtl        VARCHAR2(1),
  prefix_vis        NUMBER(4)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 40K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.POSTO.cod_pos
  is 'Código do Posto';
comment on column RPV.POSTO.des_pos
  is 'Descrição do Posto';
comment on column RPV.POSTO.cid_pos
  is 'Cidade de localização do Posto';
comment on column RPV.POSTO.cod_pais
  is 'Código do País';
comment on column RPV.POSTO.cod_categ
  is 'Código de Categoria do Posto';
comment on column RPV.POSTO.cod_trat
  is 'Código do Tratamento no Posto';
comment on column RPV.POSTO.telefone
  is 'Número de telefone';
comment on column RPV.POSTO.mem_fax
  is 'Código da Memória do Fax';
comment on column RPV.POSTO.fax_pos
  is 'Fax do Posto';
comment on column RPV.POSTO.morada
  is 'Morada do posto';
comment on column RPV.POSTO.circ_aut
  is 'Circuito Automático ? (S/N)';
comment on column RPV.POSTO.alias
  is 'Caixa do Correio';
create index RPV.POS_CATEG_FK_I on RPV.POSTO (COD_CATEG)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.POS_PAIS_FK_I on RPV.POSTO (COD_PAIS)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.POS_TRAT_FK_I on RPV.POSTO (COD_TRAT)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.POSTO
  add constraint POS_PK primary key (COD_POS)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.POSTO
  add constraint POS_CATEG_FK foreign key (COD_CATEG)
  references RPV.CATEGORIA (COD_CATEG);
alter table RPV.POSTO
  add constraint POS_PAIS_FK foreign key (COD_PAIS)
  references RPV.PAIS (COD_PAIS);
alter table RPV.POSTO
  add constraint POS_TRAT_FK foreign key (COD_TRAT)
  references RPV.TRATA_POSTO (COD_TRAT);
alter table RPV.POSTO
  add check ( circ_aut IN ( 'S' , 'N' )  );
alter table RPV.POSTO
  add check ( circ_aut IN ( 'S' , 'N' )  );
alter table RPV.POSTO
  add check ( circ_aut IN ( 'S' , 'N' )  );
alter table RPV.POSTO
  add check ( circ_aut IN ( 'S' , 'N' )  );
alter table RPV.POSTO
  add check ( circ_aut IN ( 'S' , 'N' )  );
alter table RPV.POSTO
  add check ( circ_aut IN ( 'S' , 'N' )  );
alter table RPV.POSTO
  add check ( circ_aut IN ( 'S' , 'N' )  );
alter table RPV.POSTO
  add check ( circ_aut IN ( 'S' , 'N' )  );
alter table RPV.POSTO
  add check ( circ_aut IN ( 'S' , 'N' )  );
alter table RPV.POSTO
  add check ( circ_aut IN ( 'S' , 'N' )  );
alter table RPV.POSTO
  add check ( circ_aut IN ( 'S' , 'N' )  );
alter table RPV.POSTO
  add check ( circ_aut IN ( 'S' , 'N' )  );
alter table RPV.POSTO
  add check ( circ_aut IN ( 'S' , 'N' )  );
alter table RPV.POSTO
  add check ( circ_aut IN ( 'S' , 'N' )  );
alter table RPV.POSTO
  add check ( circ_aut IN ( 'S' , 'N' )  );
alter table RPV.POSTO
  add check ( circ_aut IN ( 'S' , 'N' )  );
alter table RPV.POSTO
  add check ( circ_aut IN ( 'S' , 'N' )  );
alter table RPV.POSTO
  add check ( circ_aut IN ( 'S' , 'N' )  );
alter table RPV.POSTO
  add check ( circ_aut IN ( 'S' , 'N' )  );
alter table RPV.POSTO
  add check ( circ_aut IN ( 'S' , 'N' )  );
alter table RPV.POSTO
  add check ( circ_aut IN ( 'S' , 'N' )  );
alter table RPV.POSTO
  add check ( circ_aut IN ( 'S' , 'N' )  );
alter table RPV.POSTO
  add check ( circ_aut IN ( 'S' , 'N' )  );
alter table RPV.POSTO
  add check ( circ_aut IN ( 'S' , 'N' )  );
alter table RPV.POSTO
  add check ( circ_aut IN ( 'S' , 'N' )  );
alter table RPV.POSTO
  add check ( circ_aut IN ( 'S' , 'N' )  );

prompt
prompt Creating table CONTADOR_POSTO
prompt =============================
prompt
create table RPV.CONTADOR_POSTO
(
  cod_pos    NUMBER(4) not null,
  ano        NUMBER(4) not null,
  num_form   NUMBER(6) default 1 not null,
  num_form_b NUMBER(14) default 1 not null,
  num_form_e NUMBER(14) default 1 not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.CONTADOR_POSTO.cod_pos
  is 'Código do Posto';
comment on column RPV.CONTADOR_POSTO.ano
  is 'Ano dos Contadores';
comment on column RPV.CONTADOR_POSTO.num_form
  is 'Numero do Último Formulário';
comment on column RPV.CONTADOR_POSTO.num_form_b
  is 'Numero do Último Formulário B';
comment on column RPV.CONTADOR_POSTO.num_form_e
  is 'Numero do Último Formulário E';
create index RPV.CONTPOS_POS_FK_I on RPV.CONTADOR_POSTO (COD_POS)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.CONTADOR_POSTO
  add constraint CONTPOS_PK primary key (COD_POS, ANO)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.CONTADOR_POSTO
  add constraint CONTPOS_POS_FK foreign key (COD_POS)
  references RPV.POSTO (COD_POS);

prompt
prompt Creating table TABELAS_VIS
prompt ==========================
prompt
create table RPV.TABELAS_VIS
(
  cod_tabela  VARCHAR2(50) not null,
  desc_tabela VARCHAR2(100) not null,
  cri_uti     VARCHAR2(20) not null,
  cri_dat     DATE not null,
  alt_uti     VARCHAR2(20),
  alt_dat     DATE,
  cod_vis     VARCHAR2(50) not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 1M
    minextents 1
    maxextents unlimited
  );
create unique index RPV.COD_VIS_I on RPV.TABELAS_VIS (COD_VIS)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 504K
    minextents 1
    maxextents unlimited
  );
alter table RPV.TABELAS_VIS
  add primary key (COD_TABELA)
  using index 
  tablespace TS_RPV_1
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CONVERSAO_VIS
prompt ============================
prompt
create table RPV.CONVERSAO_VIS
(
  valor_rpv VARCHAR2(50) not null,
  valor_vis VARCHAR2(20) not null,
  tipo      VARCHAR2(50) not null,
  cri_uti   VARCHAR2(20) not null,
  cri_dat   DATE not null,
  alt_uti   VARCHAR2(20),
  alt_dat   DATE,
  usar      VARCHAR2(1)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 2M
    minextents 1
    maxextents unlimited
  );
alter table RPV.CONVERSAO_VIS
  add constraint PK_CONVERSAO_VIS primary key (VALOR_RPV, TIPO)
  disable;
alter table RPV.CONVERSAO_VIS
  add constraint CONVERSAO_VIS_FK foreign key (TIPO)
  references RPV.TABELAS_VIS (COD_TABELA);

prompt
prompt Creating table CORRIGE_VIS
prompt ==========================
prompt
create table RPV.CORRIGE_VIS
(
  codigo          NUMBER(6) not null,
  ano_form        NUMBER(4) not null,
  num_form        NUMBER(7) not null,
  cri_dat         DATE not null,
  tratada         VARCHAR2(1) not null,
  id_rec_vis      NUMBER(17) not null,
  cod_comm_vistos NUMBER(3)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 10M
    minextents 1
    maxextents unlimited
  );
create index RPV.CORRIGE_VIS_I on RPV.CORRIGE_VIS (TRATADA)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
alter table RPV.CORRIGE_VIS
  add constraint CORRIGE_VIS_PK primary key (CODIGO)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MOTIVO_ESTADA
prompt ============================
prompt
create table RPV.MOTIVO_ESTADA
(
  cod_esta VARCHAR2(2) not null,
  des_esta VARCHAR2(30) not null,
  activo   VARCHAR2(1)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.MOTIVO_ESTADA.cod_esta
  is 'Código do Motivo de Estada';
comment on column RPV.MOTIVO_ESTADA.des_esta
  is 'Descrição do Motivo da Estada';
alter table RPV.MOTIVO_ESTADA
  add constraint MOTESTA_PK primary key (COD_ESTA)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table PARECER
prompt ======================
prompt
create table RPV.PARECER
(
  cod_pare      VARCHAR2(2) not null,
  des_pare      VARCHAR2(50) not null,
  pare_conc     VARCHAR2(1) default 'N' not null,
  emi_vin       VARCHAR2(1) default 'N' not null,
  lista_valores VARCHAR2(1)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.PARECER.cod_pare
  is 'Código de Parecer';
comment on column RPV.PARECER.des_pare
  is 'Descrição do Parecer';
comment on column RPV.PARECER.pare_conc
  is 'Parecer Conclusivo ? (S/N)';
comment on column RPV.PARECER.emi_vin
  is 'Emite Vinheta ? (S/N)';
alter table RPV.PARECER
  add constraint PARE_PK primary key (COD_PARE)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( emi_vin IN ( 'S' , 'N' )  );
alter table RPV.PARECER
  add check ( pare_conc IN ( 'S' , 'N' )  );

prompt
prompt Creating table PROFISSAO
prompt ========================
prompt
create table RPV.PROFISSAO
(
  cod_prof VARCHAR2(2) not null,
  des_prof VARCHAR2(70) not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.PROFISSAO.cod_prof
  is 'Código de Profissão';
comment on column RPV.PROFISSAO.des_prof
  is 'Descrição da Profissão';
alter table RPV.PROFISSAO
  add constraint PROF_PK primary key (COD_PROF)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table DOCUMENTO
prompt ========================
prompt
create table RPV.DOCUMENTO
(
  cod_doc  VARCHAR2(3) not null,
  des_doc  VARCHAR2(120) not null,
  doc_viag VARCHAR2(1) not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.DOCUMENTO.cod_doc
  is 'Código de Documento';
comment on column RPV.DOCUMENTO.des_doc
  is 'Descrição do Documento';
comment on column RPV.DOCUMENTO.doc_viag
  is 'Documento de Viagem ? (S/N)';
alter table RPV.DOCUMENTO
  add constraint DOCS_PK primary key (COD_DOC)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.DOCUMENTO
  add check ( doc_viag IN ( 'S' , 'N' )  );
alter table RPV.DOCUMENTO
  add check ( doc_viag IN ( 'S' , 'N' )  );
alter table RPV.DOCUMENTO
  add check ( doc_viag IN ( 'S' , 'N' )  );
alter table RPV.DOCUMENTO
  add check ( doc_viag IN ( 'S' , 'N' )  );
alter table RPV.DOCUMENTO
  add check ( doc_viag IN ( 'S' , 'N' )  );
alter table RPV.DOCUMENTO
  add check ( doc_viag IN ( 'S' , 'N' )  );
alter table RPV.DOCUMENTO
  add check ( doc_viag IN ( 'S' , 'N' )  );
alter table RPV.DOCUMENTO
  add check ( doc_viag IN ( 'S' , 'N' )  );
alter table RPV.DOCUMENTO
  add check ( doc_viag IN ( 'S' , 'N' )  );
alter table RPV.DOCUMENTO
  add check ( doc_viag IN ( 'S' , 'N' )  );
alter table RPV.DOCUMENTO
  add check ( doc_viag IN ( 'S' , 'N' )  );
alter table RPV.DOCUMENTO
  add check ( doc_viag IN ( 'S' , 'N' )  );
alter table RPV.DOCUMENTO
  add check ( doc_viag IN ( 'S' , 'N' )  );
alter table RPV.DOCUMENTO
  add check ( doc_viag IN ( 'S' , 'N' )  );
alter table RPV.DOCUMENTO
  add check ( doc_viag IN ( 'S' , 'N' )  );
alter table RPV.DOCUMENTO
  add check ( doc_viag IN ( 'S' , 'N' )  );
alter table RPV.DOCUMENTO
  add check ( doc_viag IN ( 'S' , 'N' )  );
alter table RPV.DOCUMENTO
  add check ( doc_viag IN ( 'S' , 'N' )  );
alter table RPV.DOCUMENTO
  add check ( doc_viag IN ( 'S' , 'N' )  );
alter table RPV.DOCUMENTO
  add check ( doc_viag IN ( 'S' , 'N' )  );
alter table RPV.DOCUMENTO
  add check ( doc_viag IN ( 'S' , 'N' )  );
alter table RPV.DOCUMENTO
  add check ( doc_viag IN ( 'S' , 'N' )  );
alter table RPV.DOCUMENTO
  add check ( doc_viag IN ( 'S' , 'N' )  );
alter table RPV.DOCUMENTO
  add check ( doc_viag IN ( 'S' , 'N' )  );
alter table RPV.DOCUMENTO
  add check ( doc_viag IN ( 'S' , 'N' )  );
alter table RPV.DOCUMENTO
  add check ( doc_viag IN ( 'S' , 'N' )  );

prompt
prompt Creating table FORMULARIO
prompt =========================
prompt
create table RPV.FORMULARIO
(
  ano_form               NUMBER(4) not null,
  num_form               NUMBER(7) not null,
  dur_esta               NUMBER(3) not null,
  tip_form               VARCHAR2(1) not null,
  ref_form_2             VARCHAR2(14) not null,
  ref_form_3             VARCHAR2(2) not null,
  apel                   VARCHAR2(50) not null,
  apel_outr              VARCHAR2(50),
  nome                   VARCHAR2(25) not null,
  sexo                   VARCHAR2(1) not null,
  dat_nasc               VARCHAR2(10) not null,
  loc_nasc               VARCHAR2(35) not null,
  apel_conj              VARCHAR2(50),
  nome_conj              VARCHAR2(25),
  dat_nasc_conj          VARCHAR2(10),
  nat_conj               VARCHAR2(35),
  filia                  VARCHAR2(50),
  num_doc_viag           VARCHAR2(20) not null,
  dest_prin              VARCHAR2(70) not null,
  fron_1_ent             VARCHAR2(50),
  nome_refer_1           VARCHAR2(50),
  nome_refer_2           VARCHAR2(50),
  num_ent                VARCHAR2(1) not null,
  dat_ent                VARCHAR2(10) not null,
  dat_sai                VARCHAR2(10) not null,
  dat_ped                VARCHAR2(10),
  dat_ped_sch            VARCHAR2(10),
  reapr                  VARCHAR2(1) not null,
  repres                 VARCHAR2(1) not null,
  dat_ini_praz           DATE not null,
  dat_lim_resp           DATE,
  mod_in                 VARCHAR2(1) not null,
  form_reg               VARCHAR2(1) not null,
  tip_urg                VARCHAR2(1) not null,
  cod_pare               VARCHAR2(1),
  obs_pare_aut           VARCHAR2(120),
  cod_pos                NUMBER(4),
  cod_prof               VARCHAR2(2),
  cod_doc                VARCHAR2(3) not null,
  cod_esta_1             VARCHAR2(2),
  cod_esta_2             VARCHAR2(2),
  cod_esta_3             VARCHAR2(2),
  tip_vis_ped            VARCHAR2(2) not null,
  tip_vis_conced         VARCHAR2(2),
  cod_pare_pos           NUMBER(1),
  cod_pais_nac_orig      VARCHAR2(3) not null,
  cod_pais_nac_1         VARCHAR2(3) not null,
  cod_pais_nac_2         VARCHAR2(3),
  cod_pais_nac_3         VARCHAR2(3),
  cod_pais_emi_doc       VARCHAR2(3),
  cod_pais_sch_ref       VARCHAR2(3) not null,
  cod_pais_sch_dest_prin VARCHAR2(3),
  cod_pais_sch_repres    VARCHAR2(3),
  vin_para               VARCHAR2(50),
  cri_dat                VARCHAR2(20) not null,
  entregou_docs          VARCHAR2(1),
  cri_uti                VARCHAR2(30) not null,
  chegaram_docs          VARCHAR2(1),
  alt_dat                VARCHAR2(20),
  alt_uti                VARCHAR2(30),
  autoriz_expr           VARCHAR2(1),
  ped_normal             VARCHAR2(1),
  apel_conj_sol          VARCHAR2(50),
  apel_ue                VARCHAR2(50),
  nome_ue                VARCHAR2(25),
  dat_nasc_ue            VARCHAR2(10),
  cod_pais_nac_ue        VARCHAR2(3),
  passaporte_ue          VARCHAR2(20),
  parentesco_ue          VARCHAR2(20),
  num_proc               NUMBER(5),
  data_marcacao          DATE,
  foto_associada         VARCHAR2(3),
  apel_tut               VARCHAR2(50),
  nome_tut               VARCHAR2(25),
  cod_pais_nac_tut       VARCHAR2(3),
  endereco_tut           VARCHAR2(50),
  bio                    VARCHAR2(1),
  dat_bio                VARCHAR2(10),
  visto_3_anos           VARCHAR2(1),
  nome_refer_3           VARCHAR2(50),
  dest_prin_2            VARCHAR2(70),
  dest_prin_3            VARCHAR2(70),
  emite_vin              VARCHAR2(1),
  cod_mot_canc           VARCHAR2(1),
  num_recibo             VARCHAR2(10),
  aud_previa             VARCHAR2(1),
  ind_grupo              VARCHAR2(1),
  grupo_estado           VARCHAR2(1),
  cri_dat_est            VARCHAR2(10),
  consulta_vis           VARCHAR2(1),
  consulta_nsis          VARCHAR2(5),
  analisado_vis          VARCHAR2(1),
  verifica_indef         VARCHAR2(1),
  email_req              VARCHAR2(50),
  email_tut              VARCHAR2(50),
  telefone_tut           NUMBER(15),
  info_mot_esta          VARCHAR2(120),
  ult_num_vin            VARCHAR2(12),
  enviou_alerta_verde    VARCHAR2(1)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 72872K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.FORMULARIO.ano_form
  is 'Ano do Pedido';
comment on column RPV.FORMULARIO.num_form
  is 'Numero do Pedido';
comment on column RPV.FORMULARIO.dur_esta
  is 'Duração de Estada';
comment on column RPV.FORMULARIO.tip_form
  is 'Tipo de Formulário';
comment on column RPV.FORMULARIO.ref_form_2
  is '2ª Referência do Pedido (Identificação do Registo)';
comment on column RPV.FORMULARIO.ref_form_3
  is '3ª Referência do Pedido (Vistos Colectivos)';
comment on column RPV.FORMULARIO.apel
  is 'Apelido';
comment on column RPV.FORMULARIO.apel_outr
  is 'Outros Apelidos';
comment on column RPV.FORMULARIO.nome
  is 'Nomes Próprios';
comment on column RPV.FORMULARIO.sexo
  is 'Sexo';
comment on column RPV.FORMULARIO.dat_nasc
  is 'Data de Nascimento';
comment on column RPV.FORMULARIO.loc_nasc
  is 'Local de Nascimento';
comment on column RPV.FORMULARIO.apel_conj
  is 'Apelido do Conjuge';
comment on column RPV.FORMULARIO.nome_conj
  is 'Nome do Conjuge';
comment on column RPV.FORMULARIO.dat_nasc_conj
  is 'Data de Nascimento do Conjuge';
comment on column RPV.FORMULARIO.nat_conj
  is 'Naturalidade do Conjuge';
comment on column RPV.FORMULARIO.filia
  is 'Filiação';
comment on column RPV.FORMULARIO.num_doc_viag
  is 'Numero do Documento de Viagem (Passaporte)';
comment on column RPV.FORMULARIO.dest_prin
  is 'Destino Principal';
comment on column RPV.FORMULARIO.fron_1_ent
  is 'Fronteira da 1ª Entrada';
comment on column RPV.FORMULARIO.nome_refer_1
  is 'Nomes de Referências';
comment on column RPV.FORMULARIO.nome_refer_2
  is 'Nomes de Referências';
comment on column RPV.FORMULARIO.num_ent
  is 'Nº Entradas';
comment on column RPV.FORMULARIO.dat_ent
  is 'Data de Entrada';
comment on column RPV.FORMULARIO.dat_sai
  is 'Data de Saída';
comment on column RPV.FORMULARIO.dat_ped
  is 'Data do Pedido';
comment on column RPV.FORMULARIO.dat_ped_sch
  is 'Data do Pedido SCHEGEN';
comment on column RPV.FORMULARIO.reapr
  is 'Em Reapreciação ? (S/N)';
comment on column RPV.FORMULARIO.repres
  is 'Em Representação ? (S/N)';
comment on column RPV.FORMULARIO.dat_ini_praz
  is 'Data Início contagem do Prazo';
comment on column RPV.FORMULARIO.dat_lim_resp
  is 'Data Limite de Resposta';
comment on column RPV.FORMULARIO.mod_in
  is 'Modo de Inserção do Formulário';
comment on column RPV.FORMULARIO.form_reg
  is 'Formula"rio Enviado / Recebido';
comment on column RPV.FORMULARIO.tip_urg
  is 'Tipo de Urgência do Formulário';
comment on column RPV.FORMULARIO.cod_pare
  is 'Parecer das Autoridades';
comment on column RPV.FORMULARIO.obs_pare_aut
  is 'Observações sobre Parecer das Autoridades';
comment on column RPV.FORMULARIO.cod_pos
  is 'Código do Posto';
comment on column RPV.FORMULARIO.cod_prof
  is 'Código de Profissão';
comment on column RPV.FORMULARIO.cod_doc
  is 'Código de Documento';
comment on column RPV.FORMULARIO.cod_esta_1
  is 'Código do Motivo de Estada 1';
comment on column RPV.FORMULARIO.cod_esta_2
  is 'Código do Motivo de Estada 2';
comment on column RPV.FORMULARIO.cod_esta_3
  is 'Código do Motivo de Estada 3';
comment on column RPV.FORMULARIO.tip_vis_ped
  is 'Tipo de Visto';
comment on column RPV.FORMULARIO.tip_vis_conced
  is 'Tipo de Visto';
comment on column RPV.FORMULARIO.cod_pare_pos
  is 'Código do Parecer do Posto';
comment on column RPV.FORMULARIO.cod_pais_nac_orig
  is 'Código do País';
comment on column RPV.FORMULARIO.cod_pais_nac_1
  is 'Código do País';
comment on column RPV.FORMULARIO.cod_pais_nac_2
  is 'Código do País';
comment on column RPV.FORMULARIO.cod_pais_nac_3
  is 'Código do País';
comment on column RPV.FORMULARIO.cod_pais_emi_doc
  is 'Código do País';
comment on column RPV.FORMULARIO.cod_pais_sch_ref
  is 'Código do País';
comment on column RPV.FORMULARIO.cod_pais_sch_dest_prin
  is 'Código do País';
comment on column RPV.FORMULARIO.cod_pais_sch_repres
  is 'Código do País';
comment on column RPV.FORMULARIO.cri_dat
  is 'Data de Criação do Registo.';
comment on column RPV.FORMULARIO.cri_uti
  is 'Utilizador que realizou a  Criação do Registo.';
comment on column RPV.FORMULARIO.alt_dat
  is 'Data deAlteração do Registo.';
comment on column RPV.FORMULARIO.alt_uti
  is 'Utilizador que realizou a Última Alteração';
comment on column RPV.FORMULARIO.apel_tut
  is 'apelido do tutor';
comment on column RPV.FORMULARIO.nome_tut
  is 'nome do tutor';
comment on column RPV.FORMULARIO.cod_pais_nac_tut
  is 'nacionalidade do tutor';
comment on column RPV.FORMULARIO.endereco_tut
  is 'endereco do tutor';
comment on column RPV.FORMULARIO.bio
  is 'se tem recolhidas as impressoes digitais';
comment on column RPV.FORMULARIO.dat_bio
  is 'data da recolha das impressoes digitais';
comment on column RPV.FORMULARIO.visto_3_anos
  is 'se tem visto concedido nos ultimos 3 anos';
comment on column RPV.FORMULARIO.nome_refer_3
  is 'nome de referencia de empresa';
comment on column RPV.FORMULARIO.ind_grupo
  is 'Indicador de registo de formulario pertencer a grupo';
comment on column RPV.FORMULARIO.grupo_estado
  is 'Estado no grupo:1=ainda sem grupo,2=incluido num grupo';
create index RPV.FOR_CONSULTA_VIS_I on RPV.FORMULARIO (COD_PARE_POS, CONSULTA_VIS)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 1M
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_CONSULTA_VIS_II on RPV.FORMULARIO (CONSULTA_VIS, CONSULTA_NSIS)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 1M
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_DAT_NASC_I on RPV.FORMULARIO (REF_FORM_2, DAT_NASC)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_DOCS_FK_I on RPV.FORMULARIO (COD_DOC)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 6416K
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_EMITE_VIN on RPV.FORMULARIO (REF_FORM_2, EMITE_VIN)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 10M
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_EST_1 on RPV.FORMULARIO (CRI_DAT_EST)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_GRUPO_I on RPV.FORMULARIO (COD_POS, GRUPO_ESTADO)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_MOTESTA1_FK_I on RPV.FORMULARIO (COD_ESTA_1)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 4280K
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_MOTESTA2_FK_I on RPV.FORMULARIO (COD_ESTA_2)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_MOTESTA3_FK_I on RPV.FORMULARIO (COD_ESTA_3)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_NUM_DOC_VIAG_NASC_I on RPV.FORMULARIO (NUM_DOC_VIAG)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_NUM_RECIBO_I on RPV.FORMULARIO (NUM_RECIBO)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 4280K
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_PAIS_EMI_DOC_FK_I on RPV.FORMULARIO (COD_PAIS_EMI_DOC)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 6416K
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_PAIS_NAC_ACT_1_FK_I on RPV.FORMULARIO (COD_PAIS_NAC_1)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 6416K
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_PAIS_NAC_ACT_2_FK_I on RPV.FORMULARIO (COD_PAIS_NAC_2)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_PAIS_NAC_ACT_3_FK_I on RPV.FORMULARIO (COD_PAIS_NAC_3)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_PAIS_NAC_ORIG_FK_I on RPV.FORMULARIO (COD_PAIS_NAC_ORIG)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 6416K
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_PARE_FK_I on RPV.FORMULARIO (COD_PARE)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 4280K
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_PAREPOS_FK_I on RPV.FORMULARIO (COD_PARE_POS)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 6416K
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_POS_FK_I on RPV.FORMULARIO (COD_POS)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 6416K
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_PROF_FK_I on RPV.FORMULARIO (COD_PROF)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 4280K
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_REFF2_I on RPV.FORMULARIO (REF_FORM_2)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_SCH_DES_PRIN_FK_I on RPV.FORMULARIO (COD_PAIS_SCH_DEST_PRIN)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 1912K
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_SCH_PAIS_REPRES_FK_I on RPV.FORMULARIO (COD_PAIS_SCH_REPRES)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_SCH_REF_FK_I on RPV.FORMULARIO (COD_PAIS_SCH_REF)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 4280K
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_TESTE_REP_I on RPV.FORMULARIO (CRI_DAT)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_TESTE2_REP_I on RPV.FORMULARIO (DAT_PED)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_TIPVIS_CONCED_FK_I on RPV.FORMULARIO (TIP_VIS_CONCED)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 6416K
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_TIPVIS_PED_FK_I on RPV.FORMULARIO (TIP_VIS_PED)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 6416K
    minextents 1
    maxextents unlimited
  );
alter table RPV.FORMULARIO
  add constraint FOR_PK primary key (ANO_FORM, NUM_FORM)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 4280K
    minextents 1
    maxextents unlimited
  );
alter table RPV.FORMULARIO
  add constraint FOR_REF_UNIQ unique (COD_PAIS_SCH_REF, REF_FORM_2, REF_FORM_3)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 14416K
    minextents 1
    maxextents unlimited
  );
alter table RPV.FORMULARIO
  add constraint FOR_DOCS_FK foreign key (COD_DOC)
  references RPV.DOCUMENTO (COD_DOC);
alter table RPV.FORMULARIO
  add constraint FOR_MOTESTA1_FK foreign key (COD_ESTA_1)
  references RPV.MOTIVO_ESTADA (COD_ESTA);
alter table RPV.FORMULARIO
  add constraint FOR_MOTESTA2_FK foreign key (COD_ESTA_2)
  references RPV.MOTIVO_ESTADA (COD_ESTA);
alter table RPV.FORMULARIO
  add constraint FOR_MOTESTA3_FK foreign key (COD_ESTA_3)
  references RPV.MOTIVO_ESTADA (COD_ESTA);
alter table RPV.FORMULARIO
  add constraint FOR_PAIS_EMI_DOC_FK foreign key (COD_PAIS_EMI_DOC)
  references RPV.PAIS (COD_PAIS);
alter table RPV.FORMULARIO
  add constraint FOR_PAIS_NAC_ORIG_FK foreign key (COD_PAIS_NAC_ORIG)
  references RPV.PAIS (COD_PAIS);
alter table RPV.FORMULARIO
  add constraint FOR_PAIS_NAC_1_FK foreign key (COD_PAIS_NAC_1)
  references RPV.PAIS (COD_PAIS);
alter table RPV.FORMULARIO
  add constraint FOR_PAIS_NAC_2_FK foreign key (COD_PAIS_NAC_2)
  references RPV.PAIS (COD_PAIS);
alter table RPV.FORMULARIO
  add constraint FOR_PAIS_NAC_3_FK foreign key (COD_PAIS_NAC_3)
  references RPV.PAIS (COD_PAIS);
alter table RPV.FORMULARIO
  add constraint FOR_PARE_FK foreign key (COD_PARE)
  references RPV.PARECER (COD_PARE);
alter table RPV.FORMULARIO
  add constraint FOR_POS_FK foreign key (COD_POS)
  references RPV.POSTO (COD_POS);
alter table RPV.FORMULARIO
  add constraint FOR_PROF_FK foreign key (COD_PROF)
  references RPV.PROFISSAO (COD_PROF);
alter table RPV.FORMULARIO
  add constraint FOR_SCH_DEST_PRIN_FK foreign key (COD_PAIS_SCH_DEST_PRIN)
  references RPV.PAIS_SCH (COD_PAIS_SCH);
alter table RPV.FORMULARIO
  add constraint FOR_SCH_PAÍS_REPRES_FK foreign key (COD_PAIS_SCH_REPRES)
  references RPV.PAIS_SCH (COD_PAIS_SCH);
alter table RPV.FORMULARIO
  add constraint FOR_SCH_REF_FK foreign key (COD_PAIS_SCH_REF)
  references RPV.PAIS_SCH (COD_PAIS_SCH);
alter table RPV.FORMULARIO
  add constraint FOR_TIPVIS_CONCED_FK foreign key (TIP_VIS_CONCED)
  references RPV.T_VISTO (TIP_VIS);
alter table RPV.FORMULARIO
  add constraint FOR_TIPVIS_PED_FK foreign key (TIP_VIS_PED)
  references RPV.T_VISTO (TIP_VIS);
alter table RPV.FORMULARIO
  add constraint FORMULARIO_FOTO_C
  check (foto_associada IN ( 'S','N','N/A'));
alter table RPV.FORMULARIO
  add check (reapr in ('S','N','X'));
alter table RPV.FORMULARIO
  add check ( repres IN ( 'S' , 'N' )  );
alter table RPV.FORMULARIO
  add check ( entregou_docs IN ( 'S' , 'N' )  );
alter table RPV.FORMULARIO
  add check ( chegaram_docs IN ( 'S' , 'N' )  );
alter table RPV.FORMULARIO
  add check (aud_previa in ('N','P','R','X'));

prompt
prompt Creating table FORM_P
prompt =====================
prompt
create table RPV.FORM_P
(
  ano_form           NUMBER(4) not null,
  num_form           NUMBER(7) not null,
  apel_nasc          VARCHAR2(50),
  est_civ            NUMBER(1),
  dat_emi_doc        VARCHAR2(10),
  loc_emi_doc        VARCHAR2(50),
  vali_doc_viag      DATE,
  ender_estad        VARCHAR2(70),
  indef_ant          VARCHAR2(1),
  ped_retid          VARCHAR2(1),
  dat_sys            DATE default sysdate,
  ender_perma        VARCHAR2(50),
  ender_act          VARCHAR2(50),
  aut_regre          VARCHAR2(1),
  tit_resid_num      VARCHAR2(20),
  tit_resid_vali     VARCHAR2(10),
  vis_regre_num      VARCHAR2(20),
  vis_regre_vali     DATE,
  ent_patr           VARCHAR2(50),
  ender_prof         VARCHAR2(50),
  ender_refer_1      VARCHAR2(50),
  ender_refer_2      VARCHAR2(50),
  tip_aut            VARCHAR2(20),
  num_aut            VARCHAR2(20),
  vali_aut           DATE,
  meio_subs          VARCHAR2(120),
  dat_sch_1          DATE,
  dat_sch_2          DATE,
  dat_sch_3          DATE,
  dat_loc_ped        VARCHAR2(70),
  meio_trans         VARCHAR2(50),
  outr_indi          VARCHAR2(120),
  cid_pos            VARCHAR2(25),
  obs_pare_pos       VARCHAR2(120),
  num_form_pos       NUMBER(6),
  dat_prorr          DATE,
  ped_retid_obs      VARCHAR2(70),
  cod_pais_conj      VARCHAR2(3),
  cod_pais_emi_aut   VARCHAR2(3),
  cod_pais_nasc      VARCHAR2(3),
  cod_pais_dest      VARCHAR2(3),
  cod_pais_sch_ref_1 VARCHAR2(3),
  cod_pais_sch_ref_2 VARCHAR2(3),
  num_filho          NUMBER(2),
  viag_conj          VARCHAR2(1),
  aut_pais_dest      VARCHAR2(1),
  cri_dat            VARCHAR2(20) default 'sysdate' not null,
  cri_uti            VARCHAR2(30) not null,
  alt_dat            VARCHAR2(20) default 'sysdate',
  alt_uti            VARCHAR2(30),
  doc_apr            VARCHAR2(120),
  existe_vin         VARCHAR2(1),
  cod_ser_1          VARCHAR2(3),
  cod_ser_2          VARCHAR2(3),
  cod_ser_3          VARCHAR2(3),
  ped_normal         VARCHAR2(1) default 'S',
  cons_central       VARCHAR2(1),
  cod_conc           NUMBER(4),
  num_ident          VARCHAR2(20),
  telef_ref          NUMBER(15),
  email              VARCHAR2(50),
  financia           VARCHAR2(120),
  telefone           NUMBER(15),
  num_proc           NUMBER(5),
  cod_obs_pare_pos   VARCHAR2(7),
  ender_estad_3      VARCHAR2(70),
  telef_ref_3        VARCHAR2(15),
  email_3            VARCHAR2(50),
  cod_conc_3         NUMBER(4)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 48592K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.FORM_P.ano_form
  is 'Ano do Pedido';
comment on column RPV.FORM_P.num_form
  is 'Numero do Pedido';
comment on column RPV.FORM_P.apel_nasc
  is 'Apelido de Nascimento';
comment on column RPV.FORM_P.est_civ
  is 'Estado Civil';
comment on column RPV.FORM_P.dat_emi_doc
  is 'Data de Emissão do Documento de Viagem';
comment on column RPV.FORM_P.loc_emi_doc
  is 'Local de Emissão do Documento de Viagem';
comment on column RPV.FORM_P.vali_doc_viag
  is 'Validade do Documento de Viagem';
comment on column RPV.FORM_P.ender_estad
  is 'Endereços Estada';
comment on column RPV.FORM_P.indef_ant
  is 'Indeferido Anteriormente ? (S/N)';
comment on column RPV.FORM_P.ped_retid
  is 'Pedido Retido ? (S/N)';
comment on column RPV.FORM_P.dat_sys
  is 'Data de Sistema na introdução do Formulário';
comment on column RPV.FORM_P.ender_perma
  is 'Endereço Permanente';
comment on column RPV.FORM_P.ender_act
  is 'Endereço Actual';
comment on column RPV.FORM_P.aut_regre
  is 'Autorização de regresso País residência ? (S/N)';
comment on column RPV.FORM_P.tit_resid_num
  is 'Numero do Título de Residência';
comment on column RPV.FORM_P.tit_resid_vali
  is 'Fim de Validade do Título de Residência';
comment on column RPV.FORM_P.vis_regre_num
  is 'Numero do Visto de Regresso';
comment on column RPV.FORM_P.vis_regre_vali
  is 'Fim de Validade do Visto de Regresso';
comment on column RPV.FORM_P.ent_patr
  is 'Entidade Patronal';
comment on column RPV.FORM_P.ender_prof
  is 'Endereço Profissional';
comment on column RPV.FORM_P.ender_refer_1
  is 'Endereços de Referências';
comment on column RPV.FORM_P.ender_refer_2
  is 'Endereços de Referências';
comment on column RPV.FORM_P.tip_aut
  is 'Tipo de Autorização';
comment on column RPV.FORM_P.num_aut
  is 'Numero da Autorização';
comment on column RPV.FORM_P.vali_aut
  is 'Validade da Autorização';
comment on column RPV.FORM_P.meio_subs
  is 'Meios de Subsistência';
comment on column RPV.FORM_P.dat_sch_1
  is 'Data de Estado anteriores em Schengen - 1';
comment on column RPV.FORM_P.dat_sch_2
  is 'Data de Estado anteriores em Schengen - 2';
comment on column RPV.FORM_P.dat_sch_3
  is 'Data de Estado anteriores em Schengen - 3';
comment on column RPV.FORM_P.dat_loc_ped
  is 'Data e Locais de Pedidos de Visto';
comment on column RPV.FORM_P.meio_trans
  is 'Meios de Transporte';
comment on column RPV.FORM_P.outr_indi
  is 'Outra indicações';
comment on column RPV.FORM_P.cid_pos
  is 'Cidade do Posto onde foi feito o Pedido';
comment on column RPV.FORM_P.obs_pare_pos
  is 'Observações sobre Parecer do Posto';
comment on column RPV.FORM_P.num_form_pos
  is 'Numero de Formulário no Posto';
comment on column RPV.FORM_P.dat_prorr
  is 'Data Prorrogada para Resposta';
comment on column RPV.FORM_P.ped_retid_obs
  is 'Observções de Pedido Retido';
comment on column RPV.FORM_P.cod_pais_conj
  is 'Código do País';
comment on column RPV.FORM_P.cod_pais_emi_aut
  is 'Código do País';
comment on column RPV.FORM_P.cod_pais_nasc
  is 'Código do País';
comment on column RPV.FORM_P.cod_pais_dest
  is 'Código do País';
comment on column RPV.FORM_P.cod_pais_sch_ref_1
  is 'Código do País';
comment on column RPV.FORM_P.cod_pais_sch_ref_2
  is 'Código do País';
comment on column RPV.FORM_P.cri_dat
  is 'Data de Criação do Registo.';
comment on column RPV.FORM_P.cri_uti
  is 'Utilizador que realizou a  Criação do Registo.';
comment on column RPV.FORM_P.alt_dat
  is 'Data deAlteração do Registo.';
comment on column RPV.FORM_P.alt_uti
  is 'Utilizador que realizou a Última Alteração';
comment on column RPV.FORM_P.ender_estad_3
  is 'endereco de referencia de empresa';
comment on column RPV.FORM_P.telef_ref_3
  is 'telefone de referencia de empresa';
comment on column RPV.FORM_P.email_3
  is 'email de referencia de empresa';
create index RPV.FORMP_PAIS_EMISSOR_AUTORIZAÇ_1 on RPV.FORM_P (COD_PAIS_EMI_AUT)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.FORMP_PAIS_FK_I on RPV.FORM_P (COD_PAIS_CONJ)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 176K
    minextents 1
    maxextents unlimited
  );
create index RPV.FORMP_PAIS_PAÍS_DESTINO_FK_I on RPV.FORM_P (COD_PAIS_DEST)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 4280K
    minextents 1
    maxextents unlimited
  );
create index RPV.FORMP_PAIS_PAÍS_NASCIMENTO_FK_ on RPV.FORM_P (COD_PAIS_NASC)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 6416K
    minextents 1
    maxextents unlimited
  );
create index RPV.FORMP_SCH_FK_I on RPV.FORM_P (COD_PAIS_SCH_REF_1)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 264K
    minextents 1
    maxextents unlimited
  );
create index RPV.FORMP_SCH_NACIONALIDADE_REFE_1 on RPV.FORM_P (COD_PAIS_SCH_REF_2)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.FORM_P
  add constraint FORMP_PK primary key (ANO_FORM, NUM_FORM)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 4280K
    minextents 1
    maxextents unlimited
  );
alter table RPV.FORM_P
  add constraint FORMP_CONCELHOSEF_FK foreign key (COD_CONC)
  references RPV.CONCELHO_SEF (COD_CONC);
alter table RPV.FORM_P
  add constraint FORMP_FK foreign key (ANO_FORM, NUM_FORM)
  references RPV.FORMULARIO (ANO_FORM, NUM_FORM);
alter table RPV.FORM_P
  add constraint FORMP_PAIS_CONJ_FK foreign key (COD_PAIS_CONJ)
  references RPV.PAIS (COD_PAIS);
alter table RPV.FORM_P
  add constraint FORMP_PAIS_DEST_FK foreign key (COD_PAIS_DEST)
  references RPV.PAIS (COD_PAIS);
alter table RPV.FORM_P
  add constraint FORMP_PAIS_EMI_AUT_FK foreign key (COD_PAIS_EMI_AUT)
  references RPV.PAIS (COD_PAIS);
alter table RPV.FORM_P
  add constraint FORMP_PAIS_NASC_FK foreign key (COD_PAIS_NASC)
  references RPV.PAIS (COD_PAIS);
alter table RPV.FORM_P
  add constraint FORMP_SCH_REF1_FK foreign key (COD_PAIS_SCH_REF_1)
  references RPV.PAIS (COD_PAIS);
alter table RPV.FORM_P
  add constraint FORMP_SCH_REF2_FK foreign key (COD_PAIS_SCH_REF_2)
  references RPV.PAIS (COD_PAIS);
alter table RPV.FORM_P
  add constraint FORM_P_ESTCIV_C
  check (est_civ IN ( 1 , 2 , 3 , 4 , 5 , 6, 7));
alter table RPV.FORM_P
  add check ( indef_ant IN ( 'S' , 'N' )  );
alter table RPV.FORM_P
  add check ( ped_retid IN ( 'S' , 'N' )  );
alter table RPV.FORM_P
  add check ( aut_regre IN ( 'S' , 'N' )  );
alter table RPV.FORM_P
  add check ( viag_conj IN ( 'S' , 'N' )  );
alter table RPV.FORM_P
  add check ( aut_pais_dest IN ( 'S' , 'N' )  );

prompt
prompt Creating table DESCENDENTE
prompt ==========================
prompt
create table RPV.DESCENDENTE
(
  ano_form      NUMBER(4) not null,
  num_form      NUMBER(7) not null,
  num_desc      NUMBER(2) not null,
  apel_desc     VARCHAR2(50) not null,
  nome_desc     VARCHAR2(25) not null,
  dat_nasc_desc VARCHAR2(10) default 'sysdate' not null,
  loc_nasc_desc VARCHAR2(35),
  cod_pais      VARCHAR2(3)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 264K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.DESCENDENTE.ano_form
  is 'Ano do Pedido';
comment on column RPV.DESCENDENTE.num_form
  is 'Numero do Pedido';
comment on column RPV.DESCENDENTE.num_desc
  is 'Numero do Descendente (Relativo a um Formulário)';
comment on column RPV.DESCENDENTE.apel_desc
  is 'Apelido do Descendente';
comment on column RPV.DESCENDENTE.nome_desc
  is 'Nome do Descendente';
comment on column RPV.DESCENDENTE.dat_nasc_desc
  is 'Data de Nascimento do Descendente';
comment on column RPV.DESCENDENTE.loc_nasc_desc
  is 'Local de Nascimento do Descendente';
comment on column RPV.DESCENDENTE.cod_pais
  is 'Código do País';
create index RPV.DESCEN_FORMP_FK_I on RPV.DESCENDENTE (ANO_FORM, NUM_FORM)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 176K
    minextents 1
    maxextents unlimited
  );
create index RPV.DESCEN_PAIS_FK_I on RPV.DESCENDENTE (COD_PAIS)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 40K
    minextents 1
    maxextents unlimited
  );
alter table RPV.DESCENDENTE
  add constraint DESCEN_PK primary key (ANO_FORM, NUM_FORM, NUM_DESC)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 176K
    minextents 1
    maxextents unlimited
  );
alter table RPV.DESCENDENTE
  add constraint DESCEN_FORMP_FK foreign key (ANO_FORM, NUM_FORM)
  references RPV.FORM_P (ANO_FORM, NUM_FORM);
alter table RPV.DESCENDENTE
  add constraint DESCEN_PAIS_FK foreign key (COD_PAIS)
  references RPV.PAIS (COD_PAIS);

prompt
prompt Creating table DESCENDENTE_WEB
prompt ==============================
prompt
create table RPV.DESCENDENTE_WEB
(
  num_form_web  NUMBER(10) not null,
  num_desc      NUMBER(2) not null,
  apel_desc     VARCHAR2(50) not null,
  nome_desc     VARCHAR2(25) not null,
  dat_nasc_desc VARCHAR2(10) not null
)
tablespace TS_RPV_1
  pctfree 5
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 1032K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.DESCENDENTE_WEB.num_form_web
  is 'Numero do Pedido';
comment on column RPV.DESCENDENTE_WEB.num_desc
  is 'Numero do Descendente (Relativo a um Formulário)';
comment on column RPV.DESCENDENTE_WEB.apel_desc
  is 'Apelido do Descendente';
comment on column RPV.DESCENDENTE_WEB.nome_desc
  is 'Nome do Descendente';
comment on column RPV.DESCENDENTE_WEB.dat_nasc_desc
  is 'Data de Nascimento do Descendente';
alter table RPV.DESCENDENTE_WEB
  add constraint DESCEN_WEB_PK primary key (NUM_FORM_WEB, NUM_DESC)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 24K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table DIARIO
prompt =====================
prompt
create table RPV.DIARIO
(
  data VARCHAR2(10)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table FORM_SCH
prompt =======================
prompt
create table RPV.FORM_SCH
(
  ano_form     NUMBER(4) not null,
  num_form     NUMBER(7) not null,
  cod_pais     VARCHAR2(3) not null,
  dat_lim_resp DATE not null,
  dat_pare_sch DATE,
  dat_prorr    DATE,
  cod_pare     VARCHAR2(1),
  vvtl         VARCHAR2(1),
  cri_dat      VARCHAR2(20) not null,
  cri_uti      VARCHAR2(30) not null,
  alt_dat      VARCHAR2(20),
  alt_uti      VARCHAR2(30)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.FORM_SCH.ano_form
  is 'Ano do Pedido';
comment on column RPV.FORM_SCH.num_form
  is 'Numero do Pedido';
comment on column RPV.FORM_SCH.cod_pais
  is 'Código do País';
comment on column RPV.FORM_SCH.dat_lim_resp
  is 'Data Limite de Resposta';
comment on column RPV.FORM_SCH.dat_pare_sch
  is 'Data do Parecer de SCHEGEN';
comment on column RPV.FORM_SCH.dat_prorr
  is 'Data Prorrogada para Resposta';
comment on column RPV.FORM_SCH.cod_pare
  is 'Código de Parecer';
comment on column RPV.FORM_SCH.vvtl
  is 'É feito um update se o formulario passa a VVTL';
comment on column RPV.FORM_SCH.cri_dat
  is 'Data de Criação do Registo.';
comment on column RPV.FORM_SCH.cri_uti
  is 'Utilizador que realizou a  Criação do Registo.';
comment on column RPV.FORM_SCH.alt_dat
  is 'Data deAlteração do Registo.';
comment on column RPV.FORM_SCH.alt_uti
  is 'Utilizador que realizou a Última Alteração';
create index RPV.FORMSCH_FOR_FK_I on RPV.FORM_SCH (ANO_FORM, NUM_FORM)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.FORMSCH_PARE_FK_I on RPV.FORM_SCH (COD_PARE)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.FORMSCH_SCH_FK_I on RPV.FORM_SCH (COD_PAIS)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.FORM_SCH
  add constraint FORMSCH_PK primary key (ANO_FORM, NUM_FORM, COD_PAIS)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.FORM_SCH
  add constraint FORMSCH_FOR_FK foreign key (ANO_FORM, NUM_FORM)
  references RPV.FORMULARIO (ANO_FORM, NUM_FORM);
alter table RPV.FORM_SCH
  add constraint FORMSCH_PARE_FK foreign key (COD_PARE)
  references RPV.PARECER (COD_PARE);
alter table RPV.FORM_SCH
  add constraint FORMSCH_SCH_FK foreign key (COD_PAIS)
  references RPV.PAIS_SCH (COD_PAIS_SCH);
alter table RPV.FORM_SCH
  add check ( vvtl IN ( 'S' , 'N' )  );

prompt
prompt Creating table FORM_B
prompt =====================
prompt
create table RPV.FORM_B
(
  ref_form_b   VARCHAR2(19) not null,
  ord_form_b   NUMBER(2) not null,
  dat_resp     DATE not null,
  praz_sup     NUMBER(2),
  cod_pare     VARCHAR2(1) not null,
  obs          VARCHAR2(120),
  dir_comm     VARCHAR2(1) not null,
  ano_form     NUMBER(4),
  num_form     NUMBER(7),
  ano_form_sch NUMBER(4),
  num_form_sch NUMBER(7),
  cod_pais_sch VARCHAR2(3),
  cri_dat      VARCHAR2(20) default 'sysdate' not null,
  cri_uti      VARCHAR2(30) not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 21616K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.FORM_B.ref_form_b
  is 'Referência do Formulário';
comment on column RPV.FORM_B.ord_form_b
  is 'Numero de Ordem do Formulário B';
comment on column RPV.FORM_B.dat_resp
  is 'Data de Resposta';
comment on column RPV.FORM_B.praz_sup
  is 'Prazo Suplementar';
comment on column RPV.FORM_B.cod_pare
  is 'Código de Parecer';
comment on column RPV.FORM_B.obs
  is 'Observações';
comment on column RPV.FORM_B.ano_form
  is 'Ano do Pedido';
comment on column RPV.FORM_B.num_form
  is 'Numero do Pedido';
comment on column RPV.FORM_B.ano_form_sch
  is 'Ano do Pedido';
comment on column RPV.FORM_B.num_form_sch
  is 'Numero do Pedido';
comment on column RPV.FORM_B.cod_pais_sch
  is 'Código do País';
comment on column RPV.FORM_B.cri_dat
  is 'Data de Criação do Registo.';
comment on column RPV.FORM_B.cri_uti
  is 'Utilizador que realizou a  Criação do Registo.';
create index RPV.FORMB_FOR_FK_I on RPV.FORM_B (ANO_FORM, NUM_FORM)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 9616K
    minextents 1
    maxextents unlimited
  );
create index RPV.FORMB_FORMSCH_FK_I on RPV.FORM_B (ANO_FORM_SCH, NUM_FORM_SCH, COD_PAIS_SCH)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.FORMB_PARE_FK_I on RPV.FORM_B (COD_PARE)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 6416K
    minextents 1
    maxextents unlimited
  );
alter table RPV.FORM_B
  add constraint FORMB_PK primary key (REF_FORM_B, ORD_FORM_B)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 14416K
    minextents 1
    maxextents unlimited
  );
alter table RPV.FORM_B
  add constraint FORMB_FOR_FK foreign key (ANO_FORM, NUM_FORM)
  references RPV.FORMULARIO (ANO_FORM, NUM_FORM);
alter table RPV.FORM_B
  add constraint FORMB_FORMSCH_FK foreign key (ANO_FORM_SCH, NUM_FORM_SCH, COD_PAIS_SCH)
  references RPV.FORM_SCH (ANO_FORM, NUM_FORM, COD_PAIS);
alter table RPV.FORM_B
  add constraint FORMB_PARE_FK foreign key (COD_PARE)
  references RPV.PARECER (COD_PARE)
  disable;
alter table RPV.FORM_B
  add check ( dir_comm IN ( 'E' , 'R' )  );

prompt
prompt Creating table FORM_E
prompt =====================
prompt
create table RPV.FORM_E
(
  ref_form_e   VARCHAR2(19) not null,
  ord_form_e   NUMBER(2) not null,
  tip_form     VARCHAR2(1) not null,
  cod_err      VARCHAR2(1) not null,
  cod_err_sup  NUMBER(3),
  ano_form     NUMBER(4),
  num_form     NUMBER(7),
  ano_form_sch NUMBER(4),
  num_form_sch NUMBER(7),
  cod_pais     VARCHAR2(3),
  ref_form_b   VARCHAR2(19),
  ord_form_b   NUMBER(2),
  cri_dat      VARCHAR2(20) not null,
  cri_uti      VARCHAR2(30) not null,
  cod_err_log  NUMBER(2)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.FORM_E.ref_form_e
  is 'Referência do Erro';
comment on column RPV.FORM_E.ord_form_e
  is 'Numero de Sequência relativamente ao Formulário';
comment on column RPV.FORM_E.tip_form
  is 'Tipo de Formulário';
comment on column RPV.FORM_E.cod_err
  is 'Código de Erro';
comment on column RPV.FORM_E.cod_err_sup
  is 'Código de Erro Suplementar (Nº campo com erro)';
comment on column RPV.FORM_E.ano_form
  is 'Ano do Pedido';
comment on column RPV.FORM_E.num_form
  is 'Numero do Pedido';
comment on column RPV.FORM_E.ano_form_sch
  is 'Ano do Pedido';
comment on column RPV.FORM_E.num_form_sch
  is 'Numero do Pedido';
comment on column RPV.FORM_E.cod_pais
  is 'Código do País';
comment on column RPV.FORM_E.ref_form_b
  is 'Referência do Formulário';
comment on column RPV.FORM_E.ord_form_b
  is 'Numero de Ordem do Formulário B';
comment on column RPV.FORM_E.cri_dat
  is 'Data de Criação do Registo.';
comment on column RPV.FORM_E.cri_uti
  is 'Utilizador que realizou a  Criação do Registo.';
comment on column RPV.FORM_E.cod_err_log
  is 'Tipo de erro lógico.';
create index RPV.FORME_FOR_FK_I on RPV.FORM_E (ANO_FORM, NUM_FORM)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create unique index RPV.FORME_FORMB_FK_I on RPV.FORM_E (REF_FORM_B, ORD_FORM_B)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.FORME_FORMSCH_FK_I on RPV.FORM_E (ANO_FORM_SCH, NUM_FORM_SCH, COD_PAIS)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.FORM_E
  add constraint FORME_PK primary key (REF_FORM_E, ORD_FORM_E)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.FORM_E
  add constraint FORME_FOR_FK foreign key (ANO_FORM, NUM_FORM)
  references RPV.FORMULARIO (ANO_FORM, NUM_FORM)
  disable;
alter table RPV.FORM_E
  add constraint FORME_FORMB_FK foreign key (REF_FORM_B, ORD_FORM_B)
  references RPV.FORM_B (REF_FORM_B, ORD_FORM_B)
  disable;
alter table RPV.FORM_E
  add constraint FORME_FORMSCH_FK foreign key (ANO_FORM_SCH, NUM_FORM_SCH, COD_PAIS)
  references RPV.FORM_SCH (ANO_FORM, NUM_FORM, COD_PAIS)
  disable;
alter table RPV.FORM_E
  add check ( cod_err_log IN ( 1 , 2 , 3 , 4 , 5 )  );

prompt
prompt Creating table PARECER_POSTO
prompt ============================
prompt
create table RPV.PARECER_POSTO
(
  cod_pare_pos     NUMBER(1) not null,
  des_pare_pos     VARCHAR2(50) not null,
  pare_conc_pos    VARCHAR2(1) default 'N' not null,
  cons_ser         VARCHAR2(1) default 'N' not null,
  cod_pare         VARCHAR2(1),
  tem_obs          VARCHAR2(1),
  exclusivo_repres VARCHAR2(1),
  exclusivo_sch    VARCHAR2(1),
  valido           VARCHAR2(1)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.PARECER_POSTO.cod_pare_pos
  is 'Código do Parecer do Posto';
comment on column RPV.PARECER_POSTO.des_pare_pos
  is 'Descrição do Parecer do Posto';
comment on column RPV.PARECER_POSTO.pare_conc_pos
  is 'Parecer Conclusivo ? (S/N)';
comment on column RPV.PARECER_POSTO.cons_ser
  is 'Consulta Serviços ? (S/N)';
comment on column RPV.PARECER_POSTO.cod_pare
  is 'Código de Parecer';
create index RPV.PAREPOS_PARE_FK_I on RPV.PARECER_POSTO (COD_PARE)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.PARECER_POSTO
  add constraint PAREPOS_PK primary key (COD_PARE_POS)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.PARECER_POSTO
  add constraint PAREPOS_PARE_FK foreign key (COD_PARE)
  references RPV.PARECER (COD_PARE);
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( cons_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_POSTO
  add check ( pare_conc_pos IN ( 'S' , 'N' )  );

prompt
prompt Creating table FORM_R
prompt =====================
prompt
create table RPV.FORM_R
(
  ano_form     NUMBER(4) not null,
  num_form     NUMBER(7) not null,
  ord_form_r   NUMBER(2) not null,
  dat_reapr    DATE default sysdate not null,
  dat_resp     DATE,
  cod_pare     VARCHAR2(1),
  cri_dat      VARCHAR2(20) not null,
  cri_uti      VARCHAR2(30) not null,
  alt_dat      VARCHAR2(20),
  alt_uti      VARCHAR2(30),
  docs         VARCHAR2(1),
  justifica    VARCHAR2(120),
  cod_pare_pos NUMBER(1)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 40K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.FORM_R.ano_form
  is 'Ano do Pedido';
comment on column RPV.FORM_R.num_form
  is 'Numero do Pedido';
comment on column RPV.FORM_R.ord_form_r
  is 'Numero de Sequência de Reapreciação';
comment on column RPV.FORM_R.dat_reapr
  is 'Data do Pedido de Reapreciação';
comment on column RPV.FORM_R.dat_resp
  is 'Data de Resposta ao Pedido de Reapreciação';
comment on column RPV.FORM_R.cod_pare
  is 'Código de Parecer';
comment on column RPV.FORM_R.cri_dat
  is 'Data de Criação do Registo.';
comment on column RPV.FORM_R.cri_uti
  is 'Utilizador que realizou a  Criação do Registo.';
comment on column RPV.FORM_R.alt_dat
  is 'Data deAlteração do Registo.';
comment on column RPV.FORM_R.alt_uti
  is 'Utilizador que realizou a Última Alteração';
comment on column RPV.FORM_R.cod_pare_pos
  is 'C¢digo do Parecer do Posto de Reapreciação';
create index RPV.FORMR_FOR_FK_I on RPV.FORM_R (ANO_FORM, NUM_FORM)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 24K
    minextents 1
    maxextents unlimited
  );
create index RPV.FORMR_PARE_FK_I on RPV.FORM_R (COD_PARE)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.FORM_R
  add constraint FORMR_PK primary key (ANO_FORM, NUM_FORM, ORD_FORM_R)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 24K
    minextents 1
    maxextents unlimited
  );
alter table RPV.FORM_R
  add constraint FORMR_PARE_FK foreign key (COD_PARE)
  references RPV.PARECER (COD_PARE);
alter table RPV.FORM_R
  add constraint FORM_R_PAREPOS_FK foreign key (COD_PARE_POS)
  references RPV.PARECER_POSTO (COD_PARE_POS);
alter table RPV.FORM_R
  add check (DOCS IN ('S','N'));

prompt
prompt Creating table FORM_Z
prompt =====================
prompt
create table RPV.FORM_Z
(
  ano_form       NUMBER(4) not null,
  num_form       NUMBER(7) not null,
  dat_conced_ped DATE not null,
  cod_pos        NUMBER(4)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 264K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.FORM_Z.ano_form
  is 'Ano do Pedido';
comment on column RPV.FORM_Z.num_form
  is 'Numero do Pedido';
comment on column RPV.FORM_Z.dat_conced_ped
  is 'Pode conceder Visto na data (Salvo despacho em contrário)';
comment on column RPV.FORM_Z.cod_pos
  is 'Código do Posto';
alter table RPV.FORM_Z
  add constraint FORM_Z_PK primary key (ANO_FORM, NUM_FORM)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 264K
    minextents 1
    maxextents unlimited
  );
alter table RPV.FORM_Z
  add constraint FORM_Z_FOR_FK foreign key (ANO_FORM, NUM_FORM)
  references RPV.FORMULARIO (ANO_FORM, NUM_FORM);

prompt
prompt Creating table POSTO_REDIR
prompt ==========================
prompt
create table RPV.POSTO_REDIR
(
  num_form      NUMBER(7) not null,
  ano_form      NUMBER(4) not null,
  ord_pos_redir NUMBER(2) not null,
  cod_pos       NUMBER(4) not null,
  dat_redir     DATE default sysdate,
  cri_dat       VARCHAR2(20) default 'sysdate' not null,
  cri_uti       VARCHAR2(30) not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.POSTO_REDIR.num_form
  is 'Numero do Pedido';
comment on column RPV.POSTO_REDIR.ano_form
  is 'Ano do Pedido';
comment on column RPV.POSTO_REDIR.ord_pos_redir
  is 'Sequência de Redirecionamento p/ Formulário';
comment on column RPV.POSTO_REDIR.cod_pos
  is 'Código do Posto';
comment on column RPV.POSTO_REDIR.dat_redir
  is 'Data de Redireccionamento';
comment on column RPV.POSTO_REDIR.cri_dat
  is 'Data de Criação do Registo.';
comment on column RPV.POSTO_REDIR.cri_uti
  is 'Utilizador que realizou a  Criação do Registo.';
create index RPV.POSRED_FOR_FK_I on RPV.POSTO_REDIR (ANO_FORM, NUM_FORM)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.POSRED_POS_FK_I on RPV.POSTO_REDIR (COD_POS)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.POSTO_REDIR
  add constraint POSRED_PK primary key (ANO_FORM, NUM_FORM, ORD_POS_REDIR)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.POSTO_REDIR
  add constraint POSRED_FOR_FK foreign key (ANO_FORM, NUM_FORM)
  references RPV.FORMULARIO (ANO_FORM, NUM_FORM)
  disable;
alter table RPV.POSTO_REDIR
  add constraint POSRED_POS_FK foreign key (COD_POS)
  references RPV.POSTO (COD_POS);

prompt
prompt Creating table REQUISICAO
prompt =========================
prompt
create table RPV.REQUISICAO
(
  cod_pos  NUMBER(4) not null,
  ano_req  NUMBER(4) not null,
  num_req  NUMBER(3) not null,
  dat_req  DATE not null,
  qt_req   NUMBER(4) not null,
  qt_satis NUMBER(4),
  est_req  VARCHAR2(1) default 'P' not null,
  cri_dat  VARCHAR2(20) not null,
  cri_uti  VARCHAR2(30) not null,
  alt_dat  VARCHAR2(20),
  alt_uti  VARCHAR2(30)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.REQUISICAO.cod_pos
  is 'Código do Posto';
comment on column RPV.REQUISICAO.ano_req
  is 'Ano da Requisição';
comment on column RPV.REQUISICAO.num_req
  is 'Numero da Requisição (no Ano)';
comment on column RPV.REQUISICAO.dat_req
  is 'Data da Requisição';
comment on column RPV.REQUISICAO.qt_req
  is 'Quantidade Requesitada';
comment on column RPV.REQUISICAO.qt_satis
  is 'Quantidade Satisfeita';
comment on column RPV.REQUISICAO.est_req
  is 'Estado da Requisição';
comment on column RPV.REQUISICAO.cri_dat
  is 'Data de Criação do Registo.';
comment on column RPV.REQUISICAO.cri_uti
  is 'Utilizador que realizou a  Criação do Registo.';
comment on column RPV.REQUISICAO.alt_dat
  is 'Data deAlteração do Registo.';
comment on column RPV.REQUISICAO.alt_uti
  is 'Utilizador que realizou a Última Alteração';
create index RPV.REQ_POS_FK_I on RPV.REQUISICAO (COD_POS)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.REQUISICAO
  add constraint REQ_PK primary key (NUM_REQ, ANO_REQ, COD_POS)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.REQUISICAO
  add constraint REQ_POS_FK foreign key (COD_POS)
  references RPV.POSTO (COD_POS);
alter table RPV.REQUISICAO
  add check ( qt_req BETWEEN 1 AND 9999 );
alter table RPV.REQUISICAO
  add check ( qt_satis BETWEEN 1 AND 9999 );

prompt
prompt Creating table LOTE_VIN
prompt =======================
prompt
create table RPV.LOTE_VIN
(
  ano_lote       NUMBER(4) not null,
  num_lote       NUMBER(6) not null,
  cod_pos        NUMBER(4) not null,
  ano_req        NUMBER(4) not null,
  num_req        NUMBER(3) not null,
  est_lote       VARCHAR2(1) default 'P' not null,
  dat_est        DATE not null,
  lim_min        NUMBER(8) not null,
  lim_max        NUMBER(8) not null,
  cri_dat        VARCHAR2(20) not null,
  cri_uti        VARCHAR2(30) not null,
  ult_num        NUMBER(8),
  ult_dat        DATE,
  session_id     VARCHAR2(10),
  uti_session_id VARCHAR2(6)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.LOTE_VIN.ano_lote
  is 'Ano do Lote de Vinhetas';
comment on column RPV.LOTE_VIN.num_lote
  is 'Numero do Lote de Vinhetas';
comment on column RPV.LOTE_VIN.cod_pos
  is 'Código do Posto';
comment on column RPV.LOTE_VIN.ano_req
  is 'Ano da Requisição';
comment on column RPV.LOTE_VIN.num_req
  is 'Numero da Requisição (no Ano)';
comment on column RPV.LOTE_VIN.est_lote
  is 'Estado do Lote';
comment on column RPV.LOTE_VIN.dat_est
  is 'Data do Estado';
comment on column RPV.LOTE_VIN.lim_min
  is 'Limite Minimo do Lote';
comment on column RPV.LOTE_VIN.lim_max
  is 'Limite Máximo do Lote';
comment on column RPV.LOTE_VIN.cri_dat
  is 'Data de Criação do Registo.';
comment on column RPV.LOTE_VIN.cri_uti
  is 'Utilizador que realizou a  Criação do Registo.';
comment on column RPV.LOTE_VIN.ult_num
  is 'Último Numero Utilizado';
comment on column RPV.LOTE_VIN.ult_dat
  is 'Data do Último Numero';
create index RPV.LOTVIN_REQ_FK_I on RPV.LOTE_VIN (NUM_REQ, ANO_REQ, COD_POS)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.LOTE_VIN
  add constraint LOTVIN_PK primary key (NUM_LOTE, ANO_LOTE)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.LOTE_VIN
  add constraint LOTVIN_REQ_FK foreign key (NUM_REQ, ANO_REQ, COD_POS)
  references RPV.REQUISICAO (NUM_REQ, ANO_REQ, COD_POS);
alter table RPV.LOTE_VIN
  add check ( ano_lote BETWEEN 1990 AND 9999 );
alter table RPV.LOTE_VIN
  add check ( num_lote BETWEEN 1 AND 999999 );

prompt
prompt Creating table VINHETA
prompt ======================
prompt
create table RPV.VINHETA
(
  num_vin      VARCHAR2(9) not null,
  num_form     NUMBER(7) not null,
  ano_form     NUMBER(4) not null,
  doc_viag     VARCHAR2(3) not null,
  tip_vis      VARCHAR2(2) not null,
  est_vin      VARCHAR2(1) not null,
  dat_emi      VARCHAR2(10),
  dat_ini      VARCHAR2(10) not null,
  dat_fin      VARCHAR2(10) not null,
  num_ent      VARCHAR2(1) not null,
  dur_esta     VARCHAR2(3) not null,
  cri_dat      VARCHAR2(20) not null,
  cri_uti      VARCHAR2(30) not null,
  cod_pos      NUMBER(4),
  num_lote     NUMBER(6),
  ano_lote     NUMBER(4),
  ref_decisao  VARCHAR2(19) not null,
  aver_vin     VARCHAR2(120),
  alt_dat      VARCHAR2(20),
  alt_uti      VARCHAR2(30),
  num_doc_viag VARCHAR2(20) not null,
  vin_para     VARCHAR2(50),
  cri_dat_est  VARCHAR2(10),
  manual       VARCHAR2(1)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 60
  initrans 1
  maxtrans 255
  storage
  (
    initial 32400K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.VINHETA.num_vin
  is 'Numero da Vinheta';
comment on column RPV.VINHETA.num_form
  is 'Numero do Pedido';
comment on column RPV.VINHETA.ano_form
  is 'Ano do Pedido';
comment on column RPV.VINHETA.doc_viag
  is 'Documento de Viagem (Passaporte)';
comment on column RPV.VINHETA.tip_vis
  is 'Tipo de Visto';
comment on column RPV.VINHETA.est_vin
  is 'Estado da Vinheta';
comment on column RPV.VINHETA.dat_emi
  is 'Data de Emissão da Vinheta';
comment on column RPV.VINHETA.dat_ini
  is 'Data de Inicio de Validade';
comment on column RPV.VINHETA.dat_fin
  is 'Data de Fim de Validade';
comment on column RPV.VINHETA.num_ent
  is 'Nº Entradas';
comment on column RPV.VINHETA.dur_esta
  is 'Duração da Estada';
comment on column RPV.VINHETA.cri_dat
  is 'Data de Criação do Registo.';
comment on column RPV.VINHETA.cri_uti
  is 'Utilizador que realizou a  Criação do Registo.';
comment on column RPV.VINHETA.cod_pos
  is 'Código de Posto';
comment on column RPV.VINHETA.num_lote
  is 'Numero do Lote de Vinhetas';
comment on column RPV.VINHETA.ano_lote
  is 'Ano do Lote de Vinhetas';
comment on column RPV.VINHETA.aver_vin
  is 'Averbamentos';
comment on column RPV.VINHETA.alt_dat
  is 'Data deAlteração do Registo.';
comment on column RPV.VINHETA.alt_uti
  is 'Utilizador que realizou a Última Alteração';
create index RPV.VIN_DOCS_FK_I on RPV.VINHETA (DOC_VIAG)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 6416K
    minextents 1
    maxextents unlimited
  );
create index RPV.VIN_EST_1 on RPV.VINHETA (CRI_DAT_EST)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
create index RPV.VIN_FOR_FK_I on RPV.VINHETA (ANO_FORM, NUM_FORM)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 6416K
    minextents 1
    maxextents unlimited
  );
create index RPV.VIN_LOTVIN_FK_I on RPV.VINHETA (NUM_LOTE, ANO_LOTE)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 6416K
    minextents 1
    maxextents unlimited
  );
create index RPV.VIN_POS_FK_I on RPV.VINHETA (COD_POS)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 4280K
    minextents 1
    maxextents unlimited
  );
create index RPV.VIN_TESTE_REP_I on RPV.VINHETA (CRI_DAT)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
create index RPV.VIN_TIPVIS_FK_I on RPV.VINHETA (TIP_VIS)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 6416K
    minextents 1
    maxextents unlimited
  );
alter table RPV.VINHETA
  add constraint VIN_PK primary key (NUM_VIN)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 4280K
    minextents 1
    maxextents unlimited
  );
alter table RPV.VINHETA
  add constraint VIN_UNIQUE unique (NUM_VIN, ANO_FORM, NUM_FORM)
  using index 
  tablespace TS_RPV_1
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 6416K
    minextents 1
    maxextents unlimited
  );
alter table RPV.VINHETA
  add constraint VIN_DOCS_FK foreign key (DOC_VIAG)
  references RPV.DOCUMENTO (COD_DOC);
alter table RPV.VINHETA
  add constraint VIN_FOR_FK foreign key (ANO_FORM, NUM_FORM)
  references RPV.FORMULARIO (ANO_FORM, NUM_FORM);
alter table RPV.VINHETA
  add constraint VIN_LOTVIN_FK foreign key (NUM_LOTE, ANO_LOTE)
  references RPV.LOTE_VIN (NUM_LOTE, ANO_LOTE);
alter table RPV.VINHETA
  add constraint VIN_POS_FK foreign key (COD_POS)
  references RPV.POSTO (COD_POS);
alter table RPV.VINHETA
  add constraint VIN_TIPVIS_FK foreign key (TIP_VIS)
  references RPV.T_VISTO (TIP_VIS);

prompt
prompt Creating table ENVIO
prompt ====================
prompt
create table RPV.ENVIO
(
  tip_form_envio         VARCHAR2(1) not null,
  ref_ped_envio          VARCHAR2(19) not null,
  num_msg_envio          NUMBER(2) not null,
  tip_dest               VARCHAR2(1) not null,
  importanc_envio        VARCHAR2(1) not null,
  assunto                VARCHAR2(50) not null,
  dat_envio              DATE,
  uti_envio              VARCHAR2(30),
  est_envio              VARCHAR2(1) not null,
  tip_envio              VARCHAR2(1),
  endereco_envio         VARCHAR2(120),
  dr_ndr                 VARCHAR2(1),
  dat_dr                 DATE,
  dr_resp                VARCHAR2(120),
  seq_envio              NUMBER(38),
  req_ano_req            NUMBER(4),
  req_num_req            NUMBER(3),
  req_cod_pos            NUMBER(4),
  formi_cod_ser          VARCHAR2(3),
  formi_ano_form         NUMBER(4),
  formi_num_form         NUMBER(7),
  formi_num_ord          NUMBER(2),
  formi_ord_form_i       NUMBER(2),
  for_ano_form           NUMBER(4),
  for_num_form           NUMBER(7),
  forme_ref_form_e       VARCHAR2(19),
  forme_ord_form_e       NUMBER(2),
  formr_ano_form         NUMBER(4),
  formr_num_form         NUMBER(7),
  formr_ord_form_r       NUMBER(2),
  formb_ref_form_b       VARCHAR2(19),
  formb_ord_form_b       NUMBER(2),
  vin_num_vin            VARCHAR2(9),
  formsch_ano_form       NUMBER(4),
  formsch_num_form       NUMBER(7),
  formsch_cod_pais       VARCHAR2(3),
  formz_ano_form         NUMBER(4),
  formz_num_form         NUMBER(7),
  posred_ano_form        NUMBER(4),
  posred_num_form        NUMBER(7),
  posred_ord_pos_redir   NUMBER(2),
  lote_ano_lote          NUMBER(4),
  lote_num_lote          NUMBER(6),
  formap_ano_form        NUMBER(4),
  formap_num_form        NUMBER(7),
  grupo_id_grupo         NUMBER(10),
  notificacao_ref_form_2 VARCHAR2(14)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 72872K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.ENVIO.tip_form_envio
  is 'Tipo de Formulário';
comment on column RPV.ENVIO.ref_ped_envio
  is 'Referência do Formulário';
comment on column RPV.ENVIO.num_msg_envio
  is 'Numero da Mensagem de Envio';
comment on column RPV.ENVIO.tip_dest
  is 'Tipo de Destino';
comment on column RPV.ENVIO.importanc_envio
  is 'Importância (na Comunicação)';
comment on column RPV.ENVIO.assunto
  is 'Assunto';
comment on column RPV.ENVIO.dat_envio
  is 'Data de Envio';
comment on column RPV.ENVIO.est_envio
  is 'Estado de Envio';
comment on column RPV.ENVIO.tip_envio
  is 'Tipo de envio';
comment on column RPV.ENVIO.endereco_envio
  is 'Alias para Envio';
comment on column RPV.ENVIO.dr_ndr
  is 'Delivery Report ? (S/N)';
comment on column RPV.ENVIO.dat_dr
  is 'Data do Delivery Report';
comment on column RPV.ENVIO.dr_resp
  is 'Resposta do Delivery Report';
comment on column RPV.ENVIO.seq_envio
  is 'Sequência de envio para a listagem';
comment on column RPV.ENVIO.req_ano_req
  is 'Ano da Requisição';
comment on column RPV.ENVIO.req_num_req
  is 'Numero da Requisição (no Ano)';
comment on column RPV.ENVIO.req_cod_pos
  is 'Código do Posto';
comment on column RPV.ENVIO.formi_cod_ser
  is 'Código de Serviço';
comment on column RPV.ENVIO.formi_ano_form
  is 'Ano do Pedido';
comment on column RPV.ENVIO.formi_num_form
  is 'Numero do Pedido';
comment on column RPV.ENVIO.formi_num_ord
  is 'Numero Sequêncial (para Reapreciações)';
comment on column RPV.ENVIO.formi_ord_form_i
  is 'Numero de Sequência do Pedido';
comment on column RPV.ENVIO.for_ano_form
  is 'Ano do Pedido';
comment on column RPV.ENVIO.for_num_form
  is 'Numero do Pedido';
comment on column RPV.ENVIO.forme_ref_form_e
  is 'Referência do Erro';
comment on column RPV.ENVIO.forme_ord_form_e
  is 'Numero de Sequência relativamente ao Formulário';
comment on column RPV.ENVIO.formr_ano_form
  is 'Ano do Pedido';
comment on column RPV.ENVIO.formr_num_form
  is 'Numero do Pedido';
comment on column RPV.ENVIO.formr_ord_form_r
  is 'Numero de Sequência de Reapreciação';
comment on column RPV.ENVIO.formb_ref_form_b
  is 'Referência do Formulário';
comment on column RPV.ENVIO.formb_ord_form_b
  is 'Numero de Ordem do Formulário B';
comment on column RPV.ENVIO.vin_num_vin
  is 'Numero da Vinheta';
comment on column RPV.ENVIO.formsch_ano_form
  is 'Ano do Pedido';
comment on column RPV.ENVIO.formsch_num_form
  is 'Numero do Pedido';
comment on column RPV.ENVIO.formsch_cod_pais
  is 'Código do País';
comment on column RPV.ENVIO.formz_ano_form
  is 'Ano do Pedido';
comment on column RPV.ENVIO.formz_num_form
  is 'Numero do Pedido';
comment on column RPV.ENVIO.posred_ano_form
  is 'Ano do Pedido';
comment on column RPV.ENVIO.posred_num_form
  is 'Numero do Pedido';
comment on column RPV.ENVIO.posred_ord_pos_redir
  is 'Sequência de Redirecionamento p/ Formulário';
create index RPV.ENVIAR_FOR_FK_I on RPV.ENVIO (FOR_ANO_FORM, FOR_NUM_FORM)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 14416K
    minextents 1
    maxextents unlimited
  );
create index RPV.ENVIAR_FORMAP_FK_I on RPV.ENVIO (FORMAP_ANO_FORM, FORMAP_NUM_FORM)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 24K
    minextents 1
    maxextents unlimited
  );
create index RPV.ENVIAR_FORMB_FK_I on RPV.ENVIO (FORMB_REF_FORM_B, FORMB_ORD_FORM_B)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.ENVIAR_FORME_FK_I on RPV.ENVIO (FORME_REF_FORM_E, FORME_ORD_FORM_E)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.ENVIAR_FORMI_FK_I on RPV.ENVIO (FORMI_ANO_FORM, FORMI_NUM_FORM, FORMI_COD_SER, FORMI_NUM_ORD, FORMI_ORD_FORM_I)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 24K
    minextents 1
    maxextents unlimited
  );
create index RPV.ENVIAR_FORMR_FK_I on RPV.ENVIO (FORMR_ANO_FORM, FORMR_NUM_FORM, FORMR_ORD_FORM_R)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 24K
    minextents 1
    maxextents unlimited
  );
create index RPV.ENVIAR_FORMSCH_FK_I on RPV.ENVIO (FORMSCH_ANO_FORM, FORMSCH_NUM_FORM, FORMSCH_COD_PAIS)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.ENVIAR_FORM_Z_FK_I on RPV.ENVIO (FORMZ_ANO_FORM, FORMZ_NUM_FORM)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.ENVIAR_POSRED_FK_I on RPV.ENVIO (POSRED_ANO_FORM, POSRED_NUM_FORM, POSRED_ORD_POS_REDIR)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.ENVIAR_REQ_FK_I on RPV.ENVIO (REQ_NUM_REQ, REQ_ANO_REQ, REQ_COD_POS)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.ENVIAR_VIN_FK_I on RPV.ENVIO (VIN_NUM_VIN)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 6416K
    minextents 1
    maxextents unlimited
  );
create index RPV.ENVIO_NOTIFICACAO_I on RPV.ENVIO (NOTIFICACAO_REF_FORM_2)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 1M
    minextents 1
    maxextents unlimited
  );
alter table RPV.ENVIO
  add constraint ENVIAR_PK primary key (TIP_FORM_ENVIO, REF_PED_ENVIO, NUM_MSG_ENVIO)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 21616K
    minextents 1
    maxextents unlimited
  );
alter table RPV.ENVIO
  add constraint ENVIAR_FOR_FK foreign key (FOR_ANO_FORM, FOR_NUM_FORM)
  references RPV.FORMULARIO (ANO_FORM, NUM_FORM)
  disable;
alter table RPV.ENVIO
  add constraint ENVIAR_FORMB_FK foreign key (FORMB_REF_FORM_B, FORMB_ORD_FORM_B)
  references RPV.FORM_B (REF_FORM_B, ORD_FORM_B)
  disable;
alter table RPV.ENVIO
  add constraint ENVIAR_FORME_FK foreign key (FORME_REF_FORM_E, FORME_ORD_FORM_E)
  references RPV.FORM_E (REF_FORM_E, ORD_FORM_E)
  disable;
alter table RPV.ENVIO
  add constraint ENVIAR_FORMR_FK foreign key (FORMR_ANO_FORM, FORMR_NUM_FORM, FORMR_ORD_FORM_R)
  references RPV.FORM_R (ANO_FORM, NUM_FORM, ORD_FORM_R)
  disable;
alter table RPV.ENVIO
  add constraint ENVIAR_FORMSCH_FK foreign key (FORMSCH_ANO_FORM, FORMSCH_NUM_FORM, FORMSCH_COD_PAIS)
  references RPV.FORM_SCH (ANO_FORM, NUM_FORM, COD_PAIS)
  disable;
alter table RPV.ENVIO
  add constraint ENVIAR_FORM_Z_FK foreign key (FORMZ_ANO_FORM, FORMZ_NUM_FORM)
  references RPV.FORM_Z (ANO_FORM, NUM_FORM)
  disable;
alter table RPV.ENVIO
  add constraint ENVIAR_POSRED_FK foreign key (POSRED_ANO_FORM, POSRED_NUM_FORM, POSRED_ORD_POS_REDIR)
  references RPV.POSTO_REDIR (ANO_FORM, NUM_FORM, ORD_POS_REDIR);
alter table RPV.ENVIO
  add constraint ENVIAR_REQ_FK foreign key (REQ_NUM_REQ, REQ_ANO_REQ, REQ_COD_POS)
  references RPV.REQUISICAO (NUM_REQ, ANO_REQ, COD_POS)
  disable;
alter table RPV.ENVIO
  add constraint ENVIAR_VIN_FK foreign key (VIN_NUM_VIN)
  references RPV.VINHETA (NUM_VIN)
  disable;
alter table RPV.ENVIO
  add check ( dr_ndr IN ( 'S' , 'N' )  );

prompt
prompt Creating table ERRORDESCRIPTION
prompt ===============================
prompt
create table RPV.ERRORDESCRIPTION
(
  messageid  VARCHAR2(50),
  tipo       VARCHAR2(2),
  descrerror VARCHAR2(4),
  errorelem  VARCHAR2(3),
  cri_uti    VARCHAR2(20),
  cri_dat    DATE
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TAREFA
prompt =====================
prompt
create table RPV.TAREFA
(
  cod_taref  VARCHAR2(8) not null,
  des_taref  VARCHAR2(50) not null,
  tip_valid  VARCHAR2(1) not null,
  tip_realiz VARCHAR2(1) not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.TAREFA.cod_taref
  is 'Código da Tarefa';
comment on column RPV.TAREFA.des_taref
  is 'Descrição da Tarefa';
comment on column RPV.TAREFA.tip_valid
  is 'Tipo de Validação';
comment on column RPV.TAREFA.tip_realiz
  is 'Tipo de Realização';
alter table RPV.TAREFA
  add constraint TAREF_PK primary key (COD_TAREF)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.TAREFA
  add check ( tip_realiz IN ( 'O' , 'P' )  );
alter table RPV.TAREFA
  add check ( tip_valid BETWEEN 'A' AND 'A'   OR tip_valid BETWEEN 'M' AND 'M' );
alter table RPV.TAREFA
  add check ( tip_valid BETWEEN 'A' AND 'A'   OR tip_valid BETWEEN 'M' AND 'M' );
alter table RPV.TAREFA
  add check ( tip_realiz BETWEEN 'O' AND 'O'   OR tip_realiz BETWEEN 'P' AND 'P' );
alter table RPV.TAREFA
  add check ( tip_valid BETWEEN 'A' AND 'A'   OR tip_valid BETWEEN 'M' AND 'M' );
alter table RPV.TAREFA
  add check ( tip_realiz BETWEEN 'O' AND 'O'   OR tip_realiz BETWEEN 'P' AND 'P' );
alter table RPV.TAREFA
  add check ( tip_valid BETWEEN 'A' AND 'A'   OR tip_valid BETWEEN 'M' AND 'M' );
alter table RPV.TAREFA
  add check ( tip_realiz BETWEEN 'O' AND 'O'   OR tip_realiz BETWEEN 'P' AND 'P' );
alter table RPV.TAREFA
  add check ( tip_realiz BETWEEN 'O' AND 'O'   OR tip_realiz BETWEEN 'P' AND 'P' );
alter table RPV.TAREFA
  add check ( tip_valid BETWEEN 'A' AND 'A'   OR tip_valid BETWEEN 'M' AND 'M' );
alter table RPV.TAREFA
  add check ( tip_valid BETWEEN 'A' AND 'A'   OR tip_valid BETWEEN 'M' AND 'M' );
alter table RPV.TAREFA
  add check ( tip_realiz BETWEEN 'O' AND 'O'   OR tip_realiz BETWEEN 'P' AND 'P' );
alter table RPV.TAREFA
  add check ( tip_valid BETWEEN 'A' AND 'A'   OR tip_valid BETWEEN 'M' AND 'M' );
alter table RPV.TAREFA
  add check ( tip_realiz BETWEEN 'O' AND 'O'   OR tip_realiz BETWEEN 'P' AND 'P' );
alter table RPV.TAREFA
  add check ( tip_valid IN ( 'A' , 'M' )  );
alter table RPV.TAREFA
  add check ( tip_valid BETWEEN 'A' AND 'A'   OR tip_valid BETWEEN 'M' AND 'M' );
alter table RPV.TAREFA
  add check ( tip_realiz BETWEEN 'O' AND 'O'   OR tip_realiz BETWEEN 'P' AND 'P' );
alter table RPV.TAREFA
  add check ( tip_realiz BETWEEN 'O' AND 'O'   OR tip_realiz BETWEEN 'P' AND 'P' );
alter table RPV.TAREFA
  add check ( tip_valid BETWEEN 'A' AND 'A'   OR tip_valid BETWEEN 'M' AND 'M' );
alter table RPV.TAREFA
  add check ( tip_valid BETWEEN 'A' AND 'A'   OR tip_valid BETWEEN 'M' AND 'M' );
alter table RPV.TAREFA
  add check ( tip_realiz BETWEEN 'O' AND 'O'   OR tip_realiz BETWEEN 'P' AND 'P' );
alter table RPV.TAREFA
  add check ( tip_valid BETWEEN 'A' AND 'A'   OR tip_valid BETWEEN 'M' AND 'M' );
alter table RPV.TAREFA
  add check ( tip_realiz BETWEEN 'O' AND 'O'   OR tip_realiz BETWEEN 'P' AND 'P' );
alter table RPV.TAREFA
  add check ( tip_valid IN ( 'A' , 'M' )  );
alter table RPV.TAREFA
  add check ( tip_realiz IN ( 'O' , 'P' )  );
alter table RPV.TAREFA
  add check ( tip_valid IN ( 'A' , 'M' )  );
alter table RPV.TAREFA
  add check ( tip_realiz IN ( 'O' , 'P' )  );
alter table RPV.TAREFA
  add check ( tip_valid BETWEEN 'A' AND 'A'   OR tip_valid BETWEEN 'M' AND 'M' );
alter table RPV.TAREFA
  add check ( tip_realiz BETWEEN 'O' AND 'O'   OR tip_realiz BETWEEN 'P' AND 'P' );
alter table RPV.TAREFA
  add check ( tip_realiz BETWEEN 'O' AND 'O'   OR tip_realiz BETWEEN 'P' AND 'P' );
alter table RPV.TAREFA
  add check ( tip_valid BETWEEN 'A' AND 'A'   OR tip_valid BETWEEN 'M' AND 'M' );
alter table RPV.TAREFA
  add check ( tip_realiz BETWEEN 'O' AND 'O'   OR tip_realiz BETWEEN 'P' AND 'P' );
alter table RPV.TAREFA
  add check ( tip_valid IN ( 'A' , 'M' )  );
alter table RPV.TAREFA
  add check ( tip_realiz IN ( 'O' , 'P' )  );
alter table RPV.TAREFA
  add check ( tip_valid IN ( 'A' , 'M' )  );
alter table RPV.TAREFA
  add check ( tip_realiz IN ( 'O' , 'P' )  );
alter table RPV.TAREFA
  add check ( tip_valid BETWEEN 'A' AND 'A'   OR tip_valid BETWEEN 'M' AND 'M' );
alter table RPV.TAREFA
  add check ( tip_realiz BETWEEN 'O' AND 'O'   OR tip_realiz BETWEEN 'P' AND 'P' );
alter table RPV.TAREFA
  add check ( tip_realiz BETWEEN 'O' AND 'O'   OR tip_realiz BETWEEN 'P' AND 'P' );
alter table RPV.TAREFA
  add check ( tip_valid BETWEEN 'A' AND 'A'   OR tip_valid BETWEEN 'M' AND 'M' );
alter table RPV.TAREFA
  add check ( tip_valid BETWEEN 'A' AND 'A'   OR tip_valid BETWEEN 'M' AND 'M' );
alter table RPV.TAREFA
  add check ( tip_realiz BETWEEN 'O' AND 'O'   OR tip_realiz BETWEEN 'P' AND 'P' );
alter table RPV.TAREFA
  add check ( tip_valid IN ( 'A' , 'M' )  );
alter table RPV.TAREFA
  add check ( tip_realiz IN ( 'O' , 'P' )  );
alter table RPV.TAREFA
  add check ( tip_valid BETWEEN 'A' AND 'A'   OR tip_valid BETWEEN 'M' AND 'M' );
alter table RPV.TAREFA
  add check ( tip_realiz BETWEEN 'O' AND 'O'   OR tip_realiz BETWEEN 'P' AND 'P' );
alter table RPV.TAREFA
  add check ( tip_valid BETWEEN 'A' AND 'A'   OR tip_valid BETWEEN 'M' AND 'M' );
alter table RPV.TAREFA
  add check ( tip_realiz BETWEEN 'O' AND 'O'   OR tip_realiz BETWEEN 'P' AND 'P' );
alter table RPV.TAREFA
  add check ( tip_realiz BETWEEN 'O' AND 'O'   OR tip_realiz BETWEEN 'P' AND 'P' );
alter table RPV.TAREFA
  add check ( tip_valid BETWEEN 'A' AND 'A'   OR tip_valid BETWEEN 'M' AND 'M' );
alter table RPV.TAREFA
  add check ( tip_valid BETWEEN 'A' AND 'A'   OR tip_valid BETWEEN 'M' AND 'M' );
alter table RPV.TAREFA
  add check ( tip_realiz BETWEEN 'O' AND 'O'   OR tip_realiz BETWEEN 'P' AND 'P' );

prompt
prompt Creating table EST_TAREFA
prompt =========================
prompt
create table RPV.EST_TAREFA
(
  cod_est    VARCHAR2(3) not null,
  tip_vis    VARCHAR2(2) not null,
  cod_taref  VARCHAR2(8) not null,
  form_reg   VARCHAR2(1) not null,
  ord_exe    NUMBER(2) not null,
  tip_valid  VARCHAR2(1) not null,
  tip_realiz VARCHAR2(1) not null,
  cri_dat    VARCHAR2(20) default 'sysdate' not null,
  cri_uti    VARCHAR2(30) not null,
  alt_dat    VARCHAR2(20) default 'sysdate',
  alt_uti    VARCHAR2(30)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 40K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.EST_TAREFA.cod_est
  is 'Estado do Formulário';
comment on column RPV.EST_TAREFA.tip_vis
  is 'Tipo de Visto';
comment on column RPV.EST_TAREFA.cod_taref
  is 'Código da Tarefa';
comment on column RPV.EST_TAREFA.form_reg
  is 'Formulário Enviado / Recebido';
comment on column RPV.EST_TAREFA.ord_exe
  is 'Ordem de Execusão';
comment on column RPV.EST_TAREFA.tip_valid
  is 'Tipo de Validação';
comment on column RPV.EST_TAREFA.tip_realiz
  is 'Tipo de Realização';
comment on column RPV.EST_TAREFA.cri_dat
  is 'Data de Criação do Registo.';
comment on column RPV.EST_TAREFA.cri_uti
  is 'Utilizador que realizou a  Criação do Registo.';
comment on column RPV.EST_TAREFA.alt_dat
  is 'Data deAlteração do Registo.';
comment on column RPV.EST_TAREFA.alt_uti
  is 'Utilizador que realizou a Última Alteração';
create index RPV.ESTTAREF_TAREF_FK_I on RPV.EST_TAREFA (COD_TAREF)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 40K
    minextents 1
    maxextents unlimited
  );
create index RPV.ESTTAREF_TIPVIS_FK_I on RPV.EST_TAREFA (TIP_VIS)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 24K
    minextents 1
    maxextents unlimited
  );
alter table RPV.EST_TAREFA
  add constraint ESTTAREF_PK primary key (COD_EST, TIP_VIS, FORM_REG, COD_TAREF)
  disable;
alter table RPV.EST_TAREFA
  add constraint ESTTAREF_TAREF_FK foreign key (COD_TAREF)
  references RPV.TAREFA (COD_TAREF);
alter table RPV.EST_TAREFA
  add constraint ESTTAREF_TIPVIS_FK foreign key (TIP_VIS)
  references RPV.T_VISTO (TIP_VIS);

prompt
prompt Creating table FERIADOS_POSTO
prompt =============================
prompt
create table RPV.FERIADOS_POSTO
(
  cod_pos     NUMBER(4) not null,
  dat_feriado DATE not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.FERIADOS_POSTO.cod_pos
  is 'Cdigo do Posto';
comment on column RPV.FERIADOS_POSTO.dat_feriado
  is 'Data de Feriado';
alter table RPV.FERIADOS_POSTO
  add constraint PK_FERIADOS_POSTO primary key (COD_POS, DAT_FERIADO)
  using index 
  tablespace TS_RPV_1
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table FORM_AP
prompt ======================
prompt
create table RPV.FORM_AP
(
  ano_form     NUMBER(4) not null,
  num_form     NUMBER(7) not null,
  estado       VARCHAR2(1) not null,
  dat_notif    DATE not null,
  dat_lim_resp DATE not null,
  dat_resp     DATE,
  justifica    VARCHAR2(120),
  docs         VARCHAR2(1),
  not1         VARCHAR2(1000),
  not2         VARCHAR2(1000),
  not3         VARCHAR2(1000),
  not4         VARCHAR2(1000),
  not5         VARCHAR2(1000),
  not6         VARCHAR2(1000),
  not7         VARCHAR2(1000),
  cri_dat      VARCHAR2(20) not null,
  cri_uti      VARCHAR2(30) not null,
  alt_dat      VARCHAR2(20),
  alt_uti      VARCHAR2(30)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
alter table RPV.FORM_AP
  add constraint FORMAP_PK primary key (ANO_FORM, NUM_FORM)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 1M
    minextents 1
    maxextents unlimited
  );
alter table RPV.FORM_AP
  add check (ESTADO in ('P','R','X'));
alter table RPV.FORM_AP
  add check (DOCS in ('S','N'));

prompt
prompt Creating table FORM_DOC
prompt =======================
prompt
create table RPV.FORM_DOC
(
  ano_form NUMBER(4) not null,
  num_form NUMBER(7) not null,
  cod_doc  VARCHAR2(3) not null,
  entregou VARCHAR2(1),
  chegou   VARCHAR2(1)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 6416K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.FORM_DOC.ano_form
  is 'Ano do Pedido';
comment on column RPV.FORM_DOC.num_form
  is 'Numero do Pedido';
comment on column RPV.FORM_DOC.cod_doc
  is 'Código de Documento';
create index RPV.FORDOCS_DOCS_FK_I on RPV.FORM_DOC (COD_DOC)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 4280K
    minextents 1
    maxextents unlimited
  );
create index RPV.FORDOCS_FORMP_FK_I on RPV.FORM_DOC (ANO_FORM, NUM_FORM)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 6416K
    minextents 1
    maxextents unlimited
  );
alter table RPV.FORM_DOC
  add constraint FORDOCS_PK primary key (ANO_FORM, NUM_FORM, COD_DOC)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 6416K
    minextents 1
    maxextents unlimited
  );
alter table RPV.FORM_DOC
  add constraint FORDOCS_DOCS_FK foreign key (COD_DOC)
  references RPV.DOCUMENTO (COD_DOC);
alter table RPV.FORM_DOC
  add constraint FORDOCS_FORMP_FK foreign key (ANO_FORM, NUM_FORM)
  references RPV.FORM_P (ANO_FORM, NUM_FORM);
alter table RPV.FORM_DOC
  add check ( entregou IN ( 'S' , 'N' )  );
alter table RPV.FORM_DOC
  add check ( chegou IN ( 'S' , 'N' )  );

prompt
prompt Creating table FORM_ERRADO
prompt ==========================
prompt
create table RPV.FORM_ERRADO
(
  ord_form_e             NUMBER(2) not null,
  ref_form_e             VARCHAR2(19) not null,
  ano_form               NUMBER(4) not null,
  num_form               NUMBER(7) not null,
  tip_form               VARCHAR2(1) not null,
  ref_form_2             VARCHAR2(14) not null,
  ref_form_3             VARCHAR2(2) not null,
  apel                   VARCHAR2(50) not null,
  apel_nasc              VARCHAR2(50) not null,
  apel_outr              VARCHAR2(50) not null,
  nome                   VARCHAR2(25) not null,
  sexo                   VARCHAR2(1) not null,
  dat_nasc               DATE not null,
  loc_nasc               VARCHAR2(35) not null,
  est_civ                NUMBER(1) not null,
  apel_conj              VARCHAR2(50) not null,
  nome_conj              VARCHAR2(25) not null,
  dat_nasc_conj          DATE not null,
  nat_conj               VARCHAR2(35) not null,
  filia                  VARCHAR2(50) not null,
  num_doc_viag           VARCHAR2(20) not null,
  dat_emi_doc            DATE not null,
  loc_emi_doc            VARCHAR2(50) not null,
  vali_doc_viag          DATE not null,
  ender_perma            VARCHAR2(50),
  ender_act              VARCHAR2(50),
  aut_regre              VARCHAR2(1),
  tit_resid_num          VARCHAR2(20),
  tit_resid_vali         DATE,
  vis_regre_num          VARCHAR2(20),
  vis_regre_vali         DATE,
  ent_patr               VARCHAR2(50),
  ender_prof             VARCHAR2(50),
  dest_prin              VARCHAR2(70) not null,
  fron_1_ent             VARCHAR2(50) not null,
  nome_refer             VARCHAR2(50) not null,
  ender_refer            VARCHAR2(50),
  ender_estad            VARCHAR2(70) not null,
  num_ent                VARCHAR2(1) not null,
  dat_ent                DATE not null,
  dat_sai                DATE not null,
  dur_esta               VARCHAR2(3) not null,
  tip_aut                VARCHAR2(20),
  num_aut                VARCHAR2(20),
  vali_aut               DATE,
  meio_subs              VARCHAR2(120),
  dat_sch_1              DATE,
  dat_sch_2              DATE,
  dat_sch_3              DATE,
  dat_loc_ped            VARCHAR2(70),
  meio_trans             VARCHAR2(50),
  outr_indi              VARCHAR2(120),
  cid_pos                VARCHAR2(25),
  dat_ped                DATE not null,
  doc_apr                VARCHAR2(120),
  obs_pare_pos           VARCHAR2(50),
  pare_aut               VARCHAR2(1) not null,
  obs_pare_aut           VARCHAR2(50),
  num_form_pos           NUMBER(6),
  reapr                  VARCHAR2(1) not null,
  repres                 VARCHAR2(1) not null,
  dat_ped_sch            DATE not null,
  dat_ini_praz           DATE not null,
  dat_lim_resp           DATE not null,
  dat_prorr              DATE,
  indef_ant              VARCHAR2(1) not null,
  ped_retid              VARCHAR2(1) not null,
  ped_retid_obs          VARCHAR2(70),
  mod_in                 VARCHAR2(1),
  for_reg                VARCHAR2(1) not null,
  dat_sys                DATE not null,
  tip_urg                VARCHAR2(1) not null,
  cri_dat                VARCHAR2(20) not null,
  cri_uti                VARCHAR2(30) not null,
  cod_pos                NUMBER(4),
  cod_pare_pos           VARCHAR2(1),
  cod_prof               VARCHAR2(2),
  cod_doc                VARCHAR2(3),
  cod_esta               VARCHAR2(2),
  tip_vis_ped            VARCHAR2(2),
  tip_vis_conced         VARCHAR2(2),
  cod_pais_nac_orig      VARCHAR2(3),
  cod_pais_nac_1         VARCHAR2(3),
  cod_pais_nac_2         VARCHAR2(3),
  cod_pais_nac_3         VARCHAR2(3),
  cod_pais_emi_doc       VARCHAR2(3),
  cod_pais_sch_ref       VARCHAR2(3),
  cod_pais_sch_dest_prin VARCHAR2(3),
  cod_pais_sch_repres    VARCHAR2(3),
  cod_pais_conj          VARCHAR2(3),
  cod_pais_emi_aut       VARCHAR2(3),
  cod_pais_nasc          VARCHAR2(3),
  cod_pais_dest          VARCHAR2(3),
  cod_pais_sch_ref_1     VARCHAR2(3),
  cod_pais_sch_ref_2     VARCHAR2(3)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.FORM_ERRADO.ord_form_e
  is 'Numero de Sequência relativamente ao Formulário';
comment on column RPV.FORM_ERRADO.ref_form_e
  is 'Referência do Erro';
comment on column RPV.FORM_ERRADO.ano_form
  is 'Ano do Pedido';
comment on column RPV.FORM_ERRADO.num_form
  is 'Numero do Pedido';
comment on column RPV.FORM_ERRADO.tip_form
  is 'Tipo de Formulário';
comment on column RPV.FORM_ERRADO.ref_form_2
  is '2ª Referência do Pedido (Identificação do Registo)';
comment on column RPV.FORM_ERRADO.ref_form_3
  is '3ª Referência do Pedido (Vistos Colectivos)';
comment on column RPV.FORM_ERRADO.apel
  is 'Apelido';
comment on column RPV.FORM_ERRADO.apel_nasc
  is 'Apelido de Nascimento';
comment on column RPV.FORM_ERRADO.apel_outr
  is 'Outros Apelidos';
comment on column RPV.FORM_ERRADO.nome
  is 'Nomes Próprios';
comment on column RPV.FORM_ERRADO.sexo
  is 'Sexo';
comment on column RPV.FORM_ERRADO.dat_nasc
  is 'Data de Nascimento';
comment on column RPV.FORM_ERRADO.loc_nasc
  is 'Local de Nascimento';
comment on column RPV.FORM_ERRADO.est_civ
  is 'Estado Civil';
comment on column RPV.FORM_ERRADO.apel_conj
  is 'Apelido do Conjuge';
comment on column RPV.FORM_ERRADO.nome_conj
  is 'Nome do Conjuge';
comment on column RPV.FORM_ERRADO.dat_nasc_conj
  is 'Data de Nascimento do Conjuge';
comment on column RPV.FORM_ERRADO.nat_conj
  is 'Naturalidade do Conjuge';
comment on column RPV.FORM_ERRADO.filia
  is 'Filiação';
comment on column RPV.FORM_ERRADO.num_doc_viag
  is 'Numero do Documento de Viagem (Passaporte)';
comment on column RPV.FORM_ERRADO.dat_emi_doc
  is 'Data de Emissão do Documento de Viagem';
comment on column RPV.FORM_ERRADO.loc_emi_doc
  is 'Local de Emissão do Documento de Viagem';
comment on column RPV.FORM_ERRADO.vali_doc_viag
  is 'Validade do Documento de Viagem';
comment on column RPV.FORM_ERRADO.ender_perma
  is 'Endereço Permanente';
comment on column RPV.FORM_ERRADO.ender_act
  is 'Endereço Actual';
comment on column RPV.FORM_ERRADO.aut_regre
  is 'Autorização de regresso País residência ? (S/N)';
comment on column RPV.FORM_ERRADO.tit_resid_num
  is 'Numero do Título de Residência';
comment on column RPV.FORM_ERRADO.tit_resid_vali
  is 'Fim de Validade do Título de Residência';
comment on column RPV.FORM_ERRADO.vis_regre_num
  is 'Numero do Visto de Regresso';
comment on column RPV.FORM_ERRADO.vis_regre_vali
  is 'Fim de Validade do Visto de Regresso';
comment on column RPV.FORM_ERRADO.ent_patr
  is 'Entidade Patronal';
comment on column RPV.FORM_ERRADO.ender_prof
  is 'Endereço Profissional';
comment on column RPV.FORM_ERRADO.dest_prin
  is 'Destino Principal';
comment on column RPV.FORM_ERRADO.fron_1_ent
  is 'Fronteira da 1ª Entrada';
comment on column RPV.FORM_ERRADO.nome_refer
  is 'Nomes de Referências';
comment on column RPV.FORM_ERRADO.ender_refer
  is 'Endereços de Referências';
comment on column RPV.FORM_ERRADO.ender_estad
  is 'Endereços Estada';
comment on column RPV.FORM_ERRADO.num_ent
  is 'Nº Entradas';
comment on column RPV.FORM_ERRADO.dat_ent
  is 'Data de Entrada';
comment on column RPV.FORM_ERRADO.dat_sai
  is 'Data de Saída';
comment on column RPV.FORM_ERRADO.dur_esta
  is 'Duração da Estada';
comment on column RPV.FORM_ERRADO.tip_aut
  is 'Tipo de Autorização';
comment on column RPV.FORM_ERRADO.num_aut
  is 'Numero da Autorização';
comment on column RPV.FORM_ERRADO.vali_aut
  is 'Validade da Autorização';
comment on column RPV.FORM_ERRADO.meio_subs
  is 'Meios de Subsistência';
comment on column RPV.FORM_ERRADO.dat_sch_1
  is 'Data de Estado anteriores em Schengen - 1';
comment on column RPV.FORM_ERRADO.dat_sch_2
  is 'Data de Estado anteriores em Schengen - 2';
comment on column RPV.FORM_ERRADO.dat_sch_3
  is 'Data de Estado anteriores em Schengen - 3';
comment on column RPV.FORM_ERRADO.dat_loc_ped
  is 'Data e Locais de Pedidos de Visto';
comment on column RPV.FORM_ERRADO.meio_trans
  is 'Meios de Transporte';
comment on column RPV.FORM_ERRADO.outr_indi
  is 'Outra indicações';
comment on column RPV.FORM_ERRADO.cid_pos
  is 'Cidade do Posto onde foi feito o Pedido';
comment on column RPV.FORM_ERRADO.dat_ped
  is 'Data do Pedido';
comment on column RPV.FORM_ERRADO.doc_apr
  is 'Documentos Apresentados';
comment on column RPV.FORM_ERRADO.obs_pare_pos
  is 'Observações sobre Parecer do Posto';
comment on column RPV.FORM_ERRADO.pare_aut
  is 'Parecer das Autoridades';
comment on column RPV.FORM_ERRADO.obs_pare_aut
  is 'Observações relativas ao Parecer das Autoridades';
comment on column RPV.FORM_ERRADO.num_form_pos
  is 'Numero de Formulário no Posto';
comment on column RPV.FORM_ERRADO.reapr
  is 'Em Reapreciação ? (S/N)';
comment on column RPV.FORM_ERRADO.repres
  is 'Em Representação ? (S/N)';
comment on column RPV.FORM_ERRADO.dat_ped_sch
  is 'Data do Pedido SCHEGEN';
comment on column RPV.FORM_ERRADO.dat_ini_praz
  is 'Data Início contagem do Prazo';
comment on column RPV.FORM_ERRADO.dat_lim_resp
  is 'Data Limite de Resposta';
comment on column RPV.FORM_ERRADO.dat_prorr
  is 'Data Prorrogada para Resposta';
comment on column RPV.FORM_ERRADO.indef_ant
  is 'Indeferido Anteriormente ? (S/N)';
comment on column RPV.FORM_ERRADO.ped_retid
  is 'Pedido Retido ? (S/N)';
comment on column RPV.FORM_ERRADO.ped_retid_obs
  is 'Observções de Pedido Retido';
comment on column RPV.FORM_ERRADO.mod_in
  is 'Modo de Inserção do Formulário';
comment on column RPV.FORM_ERRADO.for_reg
  is 'Formula"rio Enviado / Recebido';
comment on column RPV.FORM_ERRADO.dat_sys
  is 'Data de Sistema na introdução do Formulário';
comment on column RPV.FORM_ERRADO.tip_urg
  is 'Tipo de Urgência do Formulário';
comment on column RPV.FORM_ERRADO.cri_dat
  is 'Data de Criação do Registo.';
comment on column RPV.FORM_ERRADO.cri_uti
  is 'Utilizador que realizou a  Criação do Registo.';
alter table RPV.FORM_ERRADO
  add constraint FORERR_PK primary key (REF_FORM_E, ORD_FORM_E)
  using index 
  tablespace TS_RPV_1
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.FORM_ERRADO
  add constraint FORERR_FORME_FK foreign key (REF_FORM_E, ORD_FORM_E)
  references RPV.FORM_E (REF_FORM_E, ORD_FORM_E);

prompt
prompt Creating table FORM_EST
prompt =======================
prompt
create table RPV.FORM_EST
(
  ano_form     NUMBER(4) not null,
  num_form     NUMBER(7) not null,
  cod_est      VARCHAR2(3) not null,
  tip_vis      VARCHAR2(2) not null,
  form_reg     VARCHAR2(1) not null,
  cod_taref    VARCHAR2(8) not null,
  seq_insercao VARCHAR2(38) not null,
  realiz       VARCHAR2(1) not null,
  dat_realiz   DATE,
  alt_dat      DATE,
  alt_uti      VARCHAR2(30)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 109296K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.FORM_EST.ano_form
  is 'Ano do Pedido';
comment on column RPV.FORM_EST.num_form
  is 'Numero do Pedido';
comment on column RPV.FORM_EST.cod_est
  is 'Estado do Formulário';
comment on column RPV.FORM_EST.tip_vis
  is 'Tipo de Visto';
comment on column RPV.FORM_EST.form_reg
  is 'Formulário Enviado / Recebido';
comment on column RPV.FORM_EST.cod_taref
  is 'Código da Tarefa';
comment on column RPV.FORM_EST.seq_insercao
  is 'Sequência de inserção';
comment on column RPV.FORM_EST.realiz
  is 'Realizado ? (S/N)';
comment on column RPV.FORM_EST.dat_realiz
  is 'Data de Realização';
comment on column RPV.FORM_EST.alt_dat
  is 'Data deAlteração do Registo.';
comment on column RPV.FORM_EST.alt_uti
  is 'Utilizador que realizou a Última Alteração';
create index RPV.FOREST_DAT_REALIZ_I on RPV.FORM_EST (DAT_REALIZ)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
create index RPV.FOREST_ESTTAREF_FK_I on RPV.FORM_EST (COD_EST, TIP_VIS, FORM_REG, COD_TAREF)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 72872K
    minextents 1
    maxextents unlimited
  );
create index RPV.FOREST_FOR_FK_I on RPV.FORM_EST (ANO_FORM, NUM_FORM)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 48592K
    minextents 1
    maxextents unlimited
  );
alter table RPV.FORM_EST
  add constraint FOREST_PK primary key (NUM_FORM, ANO_FORM, COD_EST, TIP_VIS, FORM_REG, COD_TAREF, SEQ_INSERCAO)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 109296K
    minextents 1
    maxextents unlimited
  );
alter table RPV.FORM_EST
  add constraint FOREST_FOR_FK foreign key (ANO_FORM, NUM_FORM)
  references RPV.FORMULARIO (ANO_FORM, NUM_FORM);
alter table RPV.FORM_EST
  add check ( realiz IN ( 'S' , 'N' )  );

prompt
prompt Creating table PARECER_SER
prompt ==========================
prompt
create table RPV.PARECER_SER
(
  tip_vis       VARCHAR2(2) not null,
  cod_pare_ser  VARCHAR2(1) not null,
  des_pare_ser  VARCHAR2(50) not null,
  pare_conc_ser VARCHAR2(1) default 'N' not null,
  cri_dat       VARCHAR2(20) default 'sysdate' not null,
  cri_uti       VARCHAR2(30) not null,
  alt_dat       VARCHAR2(20) default 'sysdate',
  alt_uti       VARCHAR2(30),
  cod_pare      VARCHAR2(1) not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.PARECER_SER.tip_vis
  is 'Tipo de Visto';
comment on column RPV.PARECER_SER.cod_pare_ser
  is 'Código de Parecer dos Serviços';
comment on column RPV.PARECER_SER.des_pare_ser
  is 'Descrição do Parecer';
comment on column RPV.PARECER_SER.pare_conc_ser
  is 'Parecer Conclusivo ? (S/N)';
comment on column RPV.PARECER_SER.cri_dat
  is 'Data de Criação do Registo.';
comment on column RPV.PARECER_SER.cri_uti
  is 'Utilizador que realizou a  Criação do Registo.';
comment on column RPV.PARECER_SER.alt_dat
  is 'Data deAlteração do Registo.';
comment on column RPV.PARECER_SER.alt_uti
  is 'Utilizador que realizou a Última Alteração';
comment on column RPV.PARECER_SER.cod_pare
  is 'Código de Parecer';
create index RPV.PARESER_PARE_FK_I on RPV.PARECER_SER (COD_PARE)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.PARESER_TIPVIS_FK_I on RPV.PARECER_SER (TIP_VIS)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.PARECER_SER
  add constraint PARESER_PK primary key (TIP_VIS, COD_PARE_SER)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.PARECER_SER
  add constraint PARESER_PARE_FK foreign key (COD_PARE)
  references RPV.PARECER (COD_PARE);
alter table RPV.PARECER_SER
  add constraint PARESER_TIPVIS_FK foreign key (TIP_VIS)
  references RPV.T_VISTO (TIP_VIS);
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );
alter table RPV.PARECER_SER
  add check ( pare_conc_ser IN ( 'S' , 'N' )  );

prompt
prompt Creating table FORM_SER
prompt =======================
prompt
create table RPV.FORM_SER
(
  ano_form      NUMBER(4) not null,
  num_form      NUMBER(7) not null,
  cod_ser       VARCHAR2(3) not null,
  num_ord       NUMBER(2) not null,
  num_ord_formr NUMBER(2),
  dat_lote      DATE,
  ord_lote      NUMBER(3),
  tip_vis       VARCHAR2(2),
  cod_pare_ser  VARCHAR2(1),
  dat_lim_resp  DATE not null,
  dat_pare_ser  DATE default sysdate,
  dat_prorr     DATE,
  ped_pos       VARCHAR2(1) not null,
  devido_a      VARCHAR2(120),
  cri_dat       VARCHAR2(20) default 'sysdate' not null,
  cri_uti       VARCHAR2(30) not null,
  alt_dat       VARCHAR2(20) default 'sysdate',
  alt_uti       VARCHAR2(30),
  cons_ped_pos  VARCHAR2(1),
  autoriz_expr  VARCHAR2(1)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.FORM_SER.ano_form
  is 'Ano do Pedido';
comment on column RPV.FORM_SER.num_form
  is 'Numero do Pedido';
comment on column RPV.FORM_SER.cod_ser
  is 'Código de Serviço';
comment on column RPV.FORM_SER.num_ord
  is 'Numero Sequêncial (para Reapreciações)';
comment on column RPV.FORM_SER.dat_lote
  is 'Data do Lote';
comment on column RPV.FORM_SER.ord_lote
  is 'Numero de Sequência do Lote';
comment on column RPV.FORM_SER.tip_vis
  is 'Tipo de Visto';
comment on column RPV.FORM_SER.cod_pare_ser
  is 'Código de Parecer dos Serviços';
comment on column RPV.FORM_SER.dat_lim_resp
  is 'Data Limite de Resposta';
comment on column RPV.FORM_SER.dat_pare_ser
  is 'Data do Parecer do Serviço';
comment on column RPV.FORM_SER.dat_prorr
  is 'Data Prorrogada para Resposta';
comment on column RPV.FORM_SER.ped_pos
  is 'Consulta a Pedido do Posto ? (S/N)';
comment on column RPV.FORM_SER.devido_a
  is 'Razão da consulta';
comment on column RPV.FORM_SER.cri_dat
  is 'Data de Criação do Registo.';
comment on column RPV.FORM_SER.cri_uti
  is 'Utilizador que realizou a  Criação do Registo.';
comment on column RPV.FORM_SER.alt_dat
  is 'Data deAlteração do Registo.';
comment on column RPV.FORM_SER.alt_uti
  is 'Utilizador que realizou a Última Alteração';
create index RPV.FORMSERCON_FOR_FK_I on RPV.FORM_SER (ANO_FORM, NUM_FORM)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.FORMSERCON_PARESER_FK_I on RPV.FORM_SER (TIP_VIS, COD_PARE_SER)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.FORMSERCON_SER_FK_I on RPV.FORM_SER (COD_SER)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.FORM_SER
  add constraint FORMSERCON_PK primary key (ANO_FORM, NUM_FORM, COD_SER, NUM_ORD)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.FORM_SER
  add constraint FORMSERCON_FOR_FK foreign key (ANO_FORM, NUM_FORM)
  references RPV.FORMULARIO (ANO_FORM, NUM_FORM);
alter table RPV.FORM_SER
  add constraint FORMSERCON_PARESER_FK foreign key (TIP_VIS, COD_PARE_SER)
  references RPV.PARECER_SER (TIP_VIS, COD_PARE_SER);
alter table RPV.FORM_SER
  add constraint FORMSERCON_SER_FK foreign key (COD_SER)
  references RPV.SERVICO (COD_SER);
alter table RPV.FORM_SER
  add check ( ped_pos IN ( 'S' , 'N' )  );

prompt
prompt Creating table FORM_I
prompt =====================
prompt
create table RPV.FORM_I
(
  cod_ser     VARCHAR2(3) not null,
  ano_form    NUMBER(4) not null,
  num_form    NUMBER(7) not null,
  num_ord     NUMBER(2) not null,
  ord_form_i  NUMBER(2) not null,
  dat_inf     DATE default sysdate not null,
  obs         VARCHAR2(250) not null,
  cri_dat     VARCHAR2(20) default 'sysdate' not null,
  deve_aguard VARCHAR2(1),
  cri_uti     VARCHAR2(30) not null,
  tip_i       VARCHAR2(1) not null,
  docs_resp   VARCHAR2(1),
  docs_fax    VARCHAR2(1)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 10352K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.FORM_I.cod_ser
  is 'Código de Serviço';
comment on column RPV.FORM_I.ano_form
  is 'Ano do Pedido';
comment on column RPV.FORM_I.num_form
  is 'Numero do Pedido';
comment on column RPV.FORM_I.num_ord
  is 'Numero Sequêncial (para Reapreciações)';
comment on column RPV.FORM_I.ord_form_i
  is 'Numero de Sequência do Pedido';
comment on column RPV.FORM_I.dat_inf
  is 'Data do Pedido de Informação';
comment on column RPV.FORM_I.obs
  is 'Texto Livre';
comment on column RPV.FORM_I.cri_dat
  is 'Data de Criação do Registo.';
comment on column RPV.FORM_I.cri_uti
  is 'Utilizador que realizou a  Criação do Registo.';
create index RPV.FORMI_FORMSERCON_FK_I on RPV.FORM_I (ANO_FORM, NUM_FORM, COD_SER, NUM_ORD)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 176K
    minextents 1
    maxextents unlimited
  );
alter table RPV.FORM_I
  add constraint FORMI_PK primary key (COD_SER, ANO_FORM, NUM_FORM, NUM_ORD, ORD_FORM_I, TIP_I)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 184K
    minextents 1
    maxextents unlimited
  );
alter table RPV.FORM_I
  add constraint FORMI_FORMSERCON_FK foreign key (ANO_FORM, NUM_FORM, COD_SER, NUM_ORD)
  references RPV.FORM_SER (ANO_FORM, NUM_FORM, COD_SER, NUM_ORD)
  disable;
alter table RPV.FORM_I
  add check ( deve_aguard IN ( 'S' , 'N' )  );

prompt
prompt Creating table FORM_P_JN
prompt ========================
prompt
create table RPV.FORM_P_JN
(
  jn_operation       CHAR(3) not null,
  jn_oracle_user     VARCHAR2(30) not null,
  jn_datetime        DATE not null,
  jn_notes           VARCHAR2(240),
  jn_appln           VARCHAR2(30),
  jn_session         NUMBER(38),
  ano_form           NUMBER(4),
  num_form           NUMBER(7),
  apel_nasc          VARCHAR2(50),
  est_civ            NUMBER(1),
  dat_emi_doc        VARCHAR2(10),
  loc_emi_doc        VARCHAR2(50),
  vali_doc_viag      DATE,
  ender_estad        VARCHAR2(70),
  indef_ant          VARCHAR2(1),
  ped_retid          VARCHAR2(1),
  dat_sys            DATE default sysdate,
  ender_perma        VARCHAR2(50),
  ender_act          VARCHAR2(50),
  aut_regre          VARCHAR2(1),
  tit_resid_num      VARCHAR2(20),
  tit_resid_vali     VARCHAR2(10),
  vis_regre_num      VARCHAR2(20),
  vis_regre_vali     DATE,
  ent_patr           VARCHAR2(50),
  ender_prof         VARCHAR2(50),
  ender_refer_1      VARCHAR2(50),
  ender_refer_2      VARCHAR2(50),
  tip_aut            VARCHAR2(20),
  num_aut            VARCHAR2(20),
  vali_aut           DATE,
  meio_subs          VARCHAR2(120),
  dat_sch_1          DATE,
  dat_sch_2          DATE,
  dat_sch_3          DATE,
  dat_loc_ped        VARCHAR2(70),
  meio_trans         VARCHAR2(50),
  outr_indi          VARCHAR2(120),
  cid_pos            VARCHAR2(25),
  obs_pare_pos       VARCHAR2(50),
  num_form_pos       NUMBER(6),
  dat_prorr          DATE,
  ped_retid_obs      VARCHAR2(70),
  cod_pais_conj      VARCHAR2(3),
  cod_pais_emi_aut   VARCHAR2(3),
  cod_pais_nasc      VARCHAR2(3),
  cod_pais_dest      VARCHAR2(3),
  cod_pais_sch_ref_1 VARCHAR2(3),
  cod_pais_sch_ref_2 VARCHAR2(3),
  num_filho          NUMBER(2),
  viag_conj          VARCHAR2(1),
  aut_pais_dest      VARCHAR2(1),
  cri_dat            VARCHAR2(20) default 'sysdate',
  cri_uti            VARCHAR2(30),
  alt_dat            VARCHAR2(20) default 'sysdate',
  alt_uti            VARCHAR2(30)
)
tablespace TS_RPV_1
  pctfree 0
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table RPV.FORM_P_JN
  is 'Journal table for form_p';
alter table RPV.FORM_P_JN
  add check ( est_civ IN ( 1 , 2 , 3 , 4 , 5 )  );
alter table RPV.FORM_P_JN
  add check ( indef_ant IN ( 'S' , 'N' )  );
alter table RPV.FORM_P_JN
  add check ( ped_retid IN ( 'S' , 'N' )  );
alter table RPV.FORM_P_JN
  add check ( aut_regre IN ( 'S' , 'N' )  );
alter table RPV.FORM_P_JN
  add check ( viag_conj IN ( 'S' , 'N' )  );
alter table RPV.FORM_P_JN
  add check ( aut_pais_dest IN ( 'S' , 'N' )  );

prompt
prompt Creating table PERIODOS
prompt =======================
prompt
create table RPV.PERIODOS
(
  id_periodo   NUMBER(2) not null,
  desc_periodo VARCHAR2(10)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 72K
    minextents 1
    maxextents unlimited
  );
alter table RPV.PERIODOS
  add constraint PERIODOS_PK primary key (ID_PERIODO)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 72K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table FORMULARIO_WEB
prompt =============================
prompt
create table RPV.FORMULARIO_WEB
(
  num_form_web           VARCHAR2(11) not null,
  dur_esta               NUMBER(3),
  apel                   VARCHAR2(50) not null,
  apel_nasc              VARCHAR2(50),
  nome                   VARCHAR2(25) not null,
  sexo                   VARCHAR2(1),
  dat_nasc               VARCHAR2(10) not null,
  loc_nasc               VARCHAR2(35),
  apel_conj              VARCHAR2(50),
  nome_conj              VARCHAR2(25),
  dat_nasc_conj          VARCHAR2(10),
  nat_conj               VARCHAR2(35),
  filia                  VARCHAR2(50),
  num_doc_viag           VARCHAR2(20) not null,
  dest_prin              VARCHAR2(70),
  fron_1_ent             VARCHAR2(50),
  nome_refer_1           VARCHAR2(50),
  num_ent                VARCHAR2(1),
  dat_ent                VARCHAR2(10),
  dat_sai                VARCHAR2(10),
  dat_ped                VARCHAR2(10),
  dat_ped_sch            VARCHAR2(10),
  cod_pos                NUMBER(4),
  cod_prof               VARCHAR2(2),
  cod_doc                VARCHAR2(3),
  cod_esta_1             VARCHAR2(2),
  cod_esta_2             VARCHAR2(2),
  cod_esta_3             VARCHAR2(2),
  tip_vis_ped            VARCHAR2(2) not null,
  cod_pais_nac_orig      VARCHAR2(3),
  cod_pais_nac_1         VARCHAR2(3) not null,
  cod_pais_nac_2         VARCHAR2(3),
  cod_pais_nac_3         VARCHAR2(3),
  cod_pais_emi_doc       VARCHAR2(3),
  cod_pais_sch_ref       VARCHAR2(3),
  cod_pais_sch_dest_prin VARCHAR2(3),
  cod_pais_sch_repres    VARCHAR2(3),
  cri_dat                VARCHAR2(20) default sysdate not null,
  apel_conj_sol          VARCHAR2(50),
  apel_ue                VARCHAR2(50),
  nome_ue                VARCHAR2(25),
  dat_nasc_ue            VARCHAR2(10),
  cod_pais_nac_ue        VARCHAR2(3),
  passaporte_ue          VARCHAR2(20),
  parentesco_ue          VARCHAR2(20),
  tratado                VARCHAR2(1) default 'N' not null,
  email_req              VARCHAR2(50),
  num_ident              VARCHAR2(20),
  cod_pais_nac           VARCHAR2(3),
  est_civ                NUMBER(1),
  dat_emi_doc            VARCHAR2(10),
  vali_doc_viag          DATE,
  aut_regre              VARCHAR2(1),
  tit_resid_num          VARCHAR2(20),
  tit_resid_vali         VARCHAR2(10),
  vis_regre_num          VARCHAR2(20),
  vis_regre_vali         DATE,
  ent_patr               VARCHAR2(50),
  ender_prof             VARCHAR2(50),
  dat_loc_ped            VARCHAR2(70),
  aut_pais_dest          VARCHAR2(3),
  vali_aut               DATE,
  cod_pais_emi_aut       VARCHAR2(3),
  dat_sch_1              DATE,
  dat_sch_2              DATE,
  dat_sch_3              DATE,
  meio_trans             VARCHAR2(50),
  ender_estad            VARCHAR2(70),
  telef_ref              NUMBER(15),
  email_ref              VARCHAR2(50),
  cod_conc               NUMBER(4),
  subs                   VARCHAR2(120),
  viag_conj              VARCHAR2(1),
  num_filho              NUMBER(2),
  financia               VARCHAR2(120),
  ender_act              VARCHAR2(50),
  telefone               NUMBER(15),
  ano_form               NUMBER(4),
  num_form               NUMBER(7),
  data_agendamento       DATE,
  periodo                NUMBER(2),
  apel_tut               VARCHAR2(50),
  nome_tut               VARCHAR2(25),
  cod_pais_nac_tut       VARCHAR2(3),
  endereco_tut           VARCHAR2(50),
  bio                    VARCHAR2(1),
  dat_bio                VARCHAR2(10),
  visto_3_anos           VARCHAR2(1),
  nome_refer_3           VARCHAR2(50),
  ender_estad_3          VARCHAR2(70),
  telef_ref_3            VARCHAR2(15),
  email_3                VARCHAR2(50),
  dest_prin_2            VARCHAR2(70),
  dest_prin_3            VARCHAR2(70),
  cod_conc_3             NUMBER(4),
  obs                    VARCHAR2(500),
  cri_uti                VARCHAR2(20),
  num_form_out           NUMBER(12),
  email_tut              VARCHAR2(50),
  telefone_tut           NUMBER(15),
  info_mot_esta          VARCHAR2(120),
  ult_num_vin            VARCHAR2(12)
)
tablespace TS_RPV_1
  pctfree 40
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
comment on column RPV.FORMULARIO_WEB.apel_tut
  is 'apelido do tutor';
comment on column RPV.FORMULARIO_WEB.nome_tut
  is 'nome do tutor';
comment on column RPV.FORMULARIO_WEB.cod_pais_nac_tut
  is 'nacionalidade do tutor';
comment on column RPV.FORMULARIO_WEB.endereco_tut
  is 'endereco do tutor';
comment on column RPV.FORMULARIO_WEB.bio
  is 'se tem recolhidas as impressoes digitais';
comment on column RPV.FORMULARIO_WEB.dat_bio
  is 'data da recolha das impressoes digitais';
comment on column RPV.FORMULARIO_WEB.visto_3_anos
  is 'se tem visto concedido nos ultimos 3 anos';
comment on column RPV.FORMULARIO_WEB.nome_refer_3
  is 'nome de referencia de empresa';
comment on column RPV.FORMULARIO_WEB.ender_estad_3
  is 'endereco de referencia de empresa';
comment on column RPV.FORMULARIO_WEB.telef_ref_3
  is 'telefone de referencia de empresa';
comment on column RPV.FORMULARIO_WEB.email_3
  is 'email de referencia de empresa';
create index RPV.FOR_WEB_APEL on RPV.FORMULARIO_WEB (APEL)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_WEB_BARCODE on RPV.FORMULARIO_WEB (NUM_FORM_OUT)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_WEB_DOC_VIAG on RPV.FORMULARIO_WEB (NUM_DOC_VIAG)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_WEB_FOR on RPV.FORMULARIO_WEB (ANO_FORM, NUM_FORM)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_WEB_REPORT on RPV.FORMULARIO_WEB (DATA_AGENDAMENTO)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
create index RPV.FOR_WEB_SEARCH_NOME on RPV.FORMULARIO_WEB (NOME, APEL)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
alter table RPV.FORMULARIO_WEB
  add constraint FOR_WEB_PK primary key (NUM_FORM_WEB)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 24K
    minextents 1
    maxextents unlimited
  );
alter table RPV.FORMULARIO_WEB
  add constraint FOR_CONC_WEB_FK foreign key (COD_CONC)
  references RPV.CONCELHO_SEF (COD_CONC);
alter table RPV.FORMULARIO_WEB
  add constraint FOR_DOCS_WEB_FK foreign key (COD_DOC)
  references RPV.DOCUMENTO (COD_DOC);
alter table RPV.FORMULARIO_WEB
  add constraint FOR_MOTESTA1_WEB_FK foreign key (COD_ESTA_1)
  references RPV.MOTIVO_ESTADA (COD_ESTA);
alter table RPV.FORMULARIO_WEB
  add constraint FOR_MOTESTA2_WEB_FK foreign key (COD_ESTA_2)
  references RPV.MOTIVO_ESTADA (COD_ESTA);
alter table RPV.FORMULARIO_WEB
  add constraint FOR_MOTESTA3_WEB_FK foreign key (COD_ESTA_3)
  references RPV.MOTIVO_ESTADA (COD_ESTA);
alter table RPV.FORMULARIO_WEB
  add constraint FOR_PAIS_EMI_AUT_WEB_FK foreign key (COD_PAIS_EMI_AUT)
  references RPV.PAIS (COD_PAIS);
alter table RPV.FORMULARIO_WEB
  add constraint FOR_PAIS_EMI_DOC_WEB_FK foreign key (COD_PAIS_EMI_DOC)
  references RPV.PAIS (COD_PAIS);
alter table RPV.FORMULARIO_WEB
  add constraint FOR_PAIS_NAC_ORIG_WEB_FK foreign key (COD_PAIS_NAC_ORIG)
  references RPV.PAIS (COD_PAIS);
alter table RPV.FORMULARIO_WEB
  add constraint FOR_PAIS_NAC_WEB_FK foreign key (COD_PAIS_NAC)
  references RPV.PAIS (COD_PAIS);
alter table RPV.FORMULARIO_WEB
  add constraint FOR_PAIS_NAC_1_WEB_FK foreign key (COD_PAIS_NAC_1)
  references RPV.PAIS (COD_PAIS);
alter table RPV.FORMULARIO_WEB
  add constraint FOR_PAIS_NAC_2_WEB_FK foreign key (COD_PAIS_NAC_2)
  references RPV.PAIS (COD_PAIS);
alter table RPV.FORMULARIO_WEB
  add constraint FOR_PAIS_NAC_3_WEB_FK foreign key (COD_PAIS_NAC_3)
  references RPV.PAIS (COD_PAIS);
alter table RPV.FORMULARIO_WEB
  add constraint FOR_PERIODO_FK foreign key (PERIODO)
  references RPV.PERIODOS (ID_PERIODO);
alter table RPV.FORMULARIO_WEB
  add constraint FOR_POS_WEB_FK foreign key (COD_POS)
  references RPV.POSTO (COD_POS);
alter table RPV.FORMULARIO_WEB
  add constraint FOR_PROF_WEB_FK foreign key (COD_PROF)
  references RPV.PROFISSAO (COD_PROF);
alter table RPV.FORMULARIO_WEB
  add constraint FOR_REF_FORM_2_FK foreign key (ANO_FORM, NUM_FORM)
  references RPV.FORMULARIO (ANO_FORM, NUM_FORM);
alter table RPV.FORMULARIO_WEB
  add constraint FOR_TIPVIS_PED_WEB_FK foreign key (TIP_VIS_PED)
  references RPV.T_VISTO (TIP_VIS);
alter table RPV.FORMULARIO_WEB
  add check (aut_pais_dest IN ( 'S' , 'N' ));
alter table RPV.FORMULARIO_WEB
  add check (aut_regre IN ( 'S' , 'N' ));
alter table RPV.FORMULARIO_WEB
  add check (viag_conj IN ( 'S' , 'N' ));

prompt
prompt Creating table FORMULARIO_WEB_DEL_BCK
prompt =====================================
prompt
create table RPV.FORMULARIO_WEB_DEL_BCK
(
  num_form_web           VARCHAR2(11) not null,
  dur_esta               NUMBER(3),
  apel                   VARCHAR2(50) not null,
  apel_nasc              VARCHAR2(50),
  nome                   VARCHAR2(25) not null,
  sexo                   VARCHAR2(1),
  dat_nasc               VARCHAR2(10) not null,
  loc_nasc               VARCHAR2(35),
  apel_conj              VARCHAR2(50),
  nome_conj              VARCHAR2(25),
  dat_nasc_conj          VARCHAR2(10),
  nat_conj               VARCHAR2(35),
  filia                  VARCHAR2(50),
  num_doc_viag           VARCHAR2(20) not null,
  dest_prin              VARCHAR2(70),
  fron_1_ent             VARCHAR2(50),
  nome_refer_1           VARCHAR2(50),
  num_ent                VARCHAR2(1),
  dat_ent                VARCHAR2(10),
  dat_sai                VARCHAR2(10),
  dat_ped                VARCHAR2(10),
  dat_ped_sch            VARCHAR2(10),
  cod_pos                NUMBER(4),
  cod_prof               VARCHAR2(2),
  cod_doc                VARCHAR2(3),
  cod_esta_1             VARCHAR2(2),
  cod_esta_2             VARCHAR2(2),
  cod_esta_3             VARCHAR2(2),
  tip_vis_ped            VARCHAR2(2) not null,
  cod_pais_nac_orig      VARCHAR2(3),
  cod_pais_nac_1         VARCHAR2(3) not null,
  cod_pais_nac_2         VARCHAR2(3),
  cod_pais_nac_3         VARCHAR2(3),
  cod_pais_emi_doc       VARCHAR2(3),
  cod_pais_sch_ref       VARCHAR2(3),
  cod_pais_sch_dest_prin VARCHAR2(3),
  cod_pais_sch_repres    VARCHAR2(3),
  cri_dat                VARCHAR2(20) not null,
  apel_conj_sol          VARCHAR2(50),
  apel_ue                VARCHAR2(50),
  nome_ue                VARCHAR2(25),
  dat_nasc_ue            VARCHAR2(10),
  cod_pais_nac_ue        VARCHAR2(3),
  passaporte_ue          VARCHAR2(20),
  parentesco_ue          VARCHAR2(20),
  tratado                VARCHAR2(1) not null,
  email_req              VARCHAR2(50),
  num_ident              VARCHAR2(20),
  cod_pais_nac           VARCHAR2(3),
  est_civ                NUMBER(1),
  dat_emi_doc            VARCHAR2(10),
  vali_doc_viag          DATE,
  aut_regre              VARCHAR2(1),
  tit_resid_num          VARCHAR2(20),
  tit_resid_vali         VARCHAR2(10),
  vis_regre_num          VARCHAR2(20),
  vis_regre_vali         DATE,
  ent_patr               VARCHAR2(50),
  ender_prof             VARCHAR2(50),
  dat_loc_ped            VARCHAR2(70),
  aut_pais_dest          VARCHAR2(3),
  vali_aut               DATE,
  cod_pais_emi_aut       VARCHAR2(3),
  dat_sch_1              DATE,
  dat_sch_2              DATE,
  dat_sch_3              DATE,
  meio_trans             VARCHAR2(50),
  ender_estad            VARCHAR2(70),
  telef_ref              NUMBER(15),
  email_ref              VARCHAR2(50),
  cod_conc               NUMBER(4),
  subs                   VARCHAR2(120),
  viag_conj              VARCHAR2(1),
  num_filho              NUMBER(2),
  financia               VARCHAR2(120),
  ender_act              VARCHAR2(50),
  telefone               NUMBER(15),
  ano_form               NUMBER(4),
  num_form               NUMBER(7),
  data_agendamento       DATE,
  periodo                NUMBER(2),
  apel_tut               VARCHAR2(50),
  nome_tut               VARCHAR2(25),
  cod_pais_nac_tut       VARCHAR2(3),
  endereco_tut           VARCHAR2(50),
  bio                    VARCHAR2(1),
  dat_bio                VARCHAR2(10),
  visto_3_anos           VARCHAR2(1),
  nome_refer_3           VARCHAR2(50),
  ender_estad_3          VARCHAR2(70),
  telef_ref_3            VARCHAR2(15),
  email_3                VARCHAR2(50),
  dest_prin_2            VARCHAR2(70),
  dest_prin_3            VARCHAR2(70),
  cod_conc_3             NUMBER(4),
  obs                    VARCHAR2(500),
  cri_uti                VARCHAR2(20),
  num_form_out           NUMBER(12),
  email_tut              VARCHAR2(50),
  telefone_tut           NUMBER(15),
  info_mot_esta          VARCHAR2(120),
  ult_num_vin            VARCHAR2(12),
  date_del               DATE
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TIPO_GRUPOS
prompt ==========================
prompt
create table RPV.TIPO_GRUPOS
(
  cod_tipo_grupo VARCHAR2(4) not null,
  descricao      VARCHAR2(50) not null
)
tablespace TS_RPV_1
  pctfree 5
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 104K
    minextents 1
    maxextents unlimited
  );
alter table RPV.TIPO_GRUPOS
  add primary key (COD_TIPO_GRUPO)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 56K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table GRUPOS
prompt =====================
prompt
create table RPV.GRUPOS
(
  id_grupo       NUMBER(10) not null,
  cod_pos        NUMBER(4) not null,
  cod_tipo_grupo VARCHAR2(4) not null,
  cri_dat        DATE not null,
  cri_uti        VARCHAR2(20) not null,
  alt_dat        DATE,
  alt_uti        VARCHAR2(20),
  enviado        VARCHAR2(1)
)
tablespace TS_RPV_1
  pctfree 5
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 504K
    minextents 1
    maxextents unlimited
  );
create index RPV.GRUPOS_POSTO_I on RPV.GRUPOS (COD_POS)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table RPV.GRUPOS
  add constraint GRUPOS_PK primary key (ID_GRUPO)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 104K
    minextents 1
    maxextents unlimited
  );
alter table RPV.GRUPOS
  add constraint GRUPOS_COD_TIPO_GRUPO_FK foreign key (COD_TIPO_GRUPO)
  references RPV.TIPO_GRUPOS (COD_TIPO_GRUPO);
alter table RPV.GRUPOS
  add constraint GRUPOS_POSTO_FK foreign key (COD_POS)
  references RPV.POSTO (COD_POS);

prompt
prompt Creating table GRUPOS_DET
prompt =========================
prompt
create table RPV.GRUPOS_DET
(
  id_grupo   NUMBER(10) not null,
  cod_pos    NUMBER(4) not null,
  ref_form_2 VARCHAR2(14) not null,
  cri_dat    DATE default sysdate not null,
  cri_uti    VARCHAR2(20) default user not null,
  concluido  VARCHAR2(1)
)
tablespace TS_RPV_1
  pctfree 5
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 504K
    minextents 1
    maxextents unlimited
  );
create index RPV.GRUPOS_DET_POSTO_I on RPV.GRUPOS_DET (COD_POS)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table RPV.GRUPOS_DET
  add constraint GRUPOS_DET_PK primary key (REF_FORM_2)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 104K
    minextents 1
    maxextents unlimited
  );
alter table RPV.GRUPOS_DET
  add constraint GRUPOS_DET_GRUPO_FK foreign key (ID_GRUPO)
  references RPV.GRUPOS (ID_GRUPO);
alter table RPV.GRUPOS_DET
  add constraint GRUPOS_DET_POSTO_FK foreign key (COD_POS)
  references RPV.POSTO (COD_POS);

prompt
prompt Creating table HORTA
prompt ====================
prompt
create table RPV.HORTA
(
  campo    VARCHAR2(120),
  conteudo VARCHAR2(255),
  erro     NUMBER(3),
  xmlfield CLOB,
  xmlblob  BLOB
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 1912K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table ID_CAMPO_FORM
prompt ============================
prompt
create table RPV.ID_CAMPO_FORM
(
  tip_form        VARCHAR2(1) not null,
  num_camp        NUMBER(3) not null,
  ordem           NUMBER(1) not null,
  dir_comm        VARCHAR2(1) not null,
  des_camp        VARCHAR2(50) not null,
  nome_var        VARCHAR2(120) not null,
  obrigatorio     VARCHAR2(1) not null,
  tipo_campo      NUMBER(1) not null,
  nome_form       VARCHAR2(10),
  des_erro        VARCHAR2(50),
  defeito         VARCHAR2(120),
  formato_entrada VARCHAR2(30),
  regra           NUMBER(3),
  ordem_form      NUMBER(3)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 72K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.ID_CAMPO_FORM.tip_form
  is 'Tipo de Formulário';
comment on column RPV.ID_CAMPO_FORM.num_camp
  is 'Numero do Campo';
comment on column RPV.ID_CAMPO_FORM.ordem
  is 'Número do campo nas comunicações (dentro do numero do campo)';
comment on column RPV.ID_CAMPO_FORM.dir_comm
  is 'Tipo de comunicação';
comment on column RPV.ID_CAMPO_FORM.des_camp
  is 'Descrição do Campo';
comment on column RPV.ID_CAMPO_FORM.nome_var
  is 'Nome da Variável';
comment on column RPV.ID_CAMPO_FORM.obrigatorio
  is 'É um campo obrigatório ou não';
comment on column RPV.ID_CAMPO_FORM.tipo_campo
  is 'Tipo do campo';
comment on column RPV.ID_CAMPO_FORM.nome_form
  is 'Nome do Form a Consultar';
comment on column RPV.ID_CAMPO_FORM.des_erro
  is 'Descrição em caso de erro';
comment on column RPV.ID_CAMPO_FORM.defeito
  is 'Valôr por defeito';
comment on column RPV.ID_CAMPO_FORM.formato_entrada
  is 'Formato com que deve receber nas comunicações';
comment on column RPV.ID_CAMPO_FORM.regra
  is 'Regra do campo';
alter table RPV.ID_CAMPO_FORM
  add constraint IDCAMPO_PK primary key (NUM_CAMP, TIP_FORM, ORDEM, DIR_COMM)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 40K
    minextents 1
    maxextents unlimited
  );
alter table RPV.ID_CAMPO_FORM
  add check ( obrigatorio IN ( 'S' , 'N' )  );
alter table RPV.ID_CAMPO_FORM
  add check ( obrigatorio IN ( 'S' , 'N' )  );
alter table RPV.ID_CAMPO_FORM
  add check ( obrigatorio IN ( 'S' , 'N' )  );
alter table RPV.ID_CAMPO_FORM
  add check ( obrigatorio IN ( 'S' , 'N' )  );
alter table RPV.ID_CAMPO_FORM
  add check ( obrigatorio IN ( 'S' , 'N' )  );
alter table RPV.ID_CAMPO_FORM
  add check ( obrigatorio IN ( 'S' , 'N' )  );
alter table RPV.ID_CAMPO_FORM
  add check ( obrigatorio IN ( 'S' , 'N' )  );
alter table RPV.ID_CAMPO_FORM
  add check ( obrigatorio IN ( 'S' , 'N' )  );
alter table RPV.ID_CAMPO_FORM
  add check ( regra IN ( 6 , 7 , 8 , 9 , 10 , 1 , 2 , 3 , 4 , 5 )  );
alter table RPV.ID_CAMPO_FORM
  add check ( obrigatorio IN ( 'S' , 'N' )  );
alter table RPV.ID_CAMPO_FORM
  add check ( obrigatorio IN ( 'S' , 'N' )  );
alter table RPV.ID_CAMPO_FORM
  add check ( obrigatorio IN ( 'S' , 'N' )  );
alter table RPV.ID_CAMPO_FORM
  add check ( obrigatorio IN ( 'S' , 'N' )  );
alter table RPV.ID_CAMPO_FORM
  add check ( regra IN ( 6 , 7 , 8 , 9 , 10 , 1 , 2 , 3 , 4 , 5 )  );
alter table RPV.ID_CAMPO_FORM
  add check ( regra IN ( 6 , 7 , 8 , 9 , 10 , 1 , 2 , 3 , 4 , 5 )  );
alter table RPV.ID_CAMPO_FORM
  add check ( obrigatorio IN ( 'S' , 'N' )  );
alter table RPV.ID_CAMPO_FORM
  add check ( obrigatorio IN ( 'S' , 'N' )  );
alter table RPV.ID_CAMPO_FORM
  add check ( obrigatorio IN ( 'S' , 'N' )  );
alter table RPV.ID_CAMPO_FORM
  add check ( obrigatorio IN ( 'S' , 'N' )  );
alter table RPV.ID_CAMPO_FORM
  add check ( obrigatorio IN ( 'S' , 'N' )  );
alter table RPV.ID_CAMPO_FORM
  add check ( obrigatorio IN ( 'S' , 'N' )  );
alter table RPV.ID_CAMPO_FORM
  add check ( obrigatorio IN ( 'S' , 'N' )  );
alter table RPV.ID_CAMPO_FORM
  add check ( obrigatorio IN ( 'S' , 'N' )  );
alter table RPV.ID_CAMPO_FORM
  add check ( obrigatorio IN ( 'S' , 'N' )  );
alter table RPV.ID_CAMPO_FORM
  add check ( obrigatorio IN ( 'S' , 'N' )  );
alter table RPV.ID_CAMPO_FORM
  add check ( obrigatorio IN ( 'S' , 'N' )  );
alter table RPV.ID_CAMPO_FORM
  add check ( obrigatorio IN ( 'S' , 'N' )  );
alter table RPV.ID_CAMPO_FORM
  add check ( regra IN ( 6 , 7 , 8 , 9 , 10 , 1 , 2 , 3 , 4 , 5 )  );
alter table RPV.ID_CAMPO_FORM
  add check ( obrigatorio IN ( 'S' , 'N' )  );
alter table RPV.ID_CAMPO_FORM
  add check ( obrigatorio IN ( 'S' , 'N' )  );
alter table RPV.ID_CAMPO_FORM
  add check ( obrigatorio IN ( 'S' , 'N' )  );
alter table RPV.ID_CAMPO_FORM
  add check ( obrigatorio IN ( 'S' , 'N' )  );
alter table RPV.ID_CAMPO_FORM
  add check ( obrigatorio IN ( 'S' , 'N' )  );
alter table RPV.ID_CAMPO_FORM
  add check ( obrigatorio IN ( 'S' , 'N' )  );
alter table RPV.ID_CAMPO_FORM
  add check ( obrigatorio IN ( 'S' , 'N' )  );

prompt
prompt Creating table PARECER_VIS
prompt ==========================
prompt
create table RPV.PARECER_VIS
(
  cod_pare_vis VARCHAR2(7) not null,
  des_pare_vis VARCHAR2(120) not null,
  cod_pare_pos NUMBER(1) not null,
  cri_uti      VARCHAR2(20) not null,
  cri_dat      DATE not null,
  alt_uti      VARCHAR2(20),
  alt_dat      DATE
)
tablespace TS_RPV_1
  pctfree 10
  pctused 0
  initrans 1
  maxtrans 255
  storage
  (
    initial 104K
    minextents 1
    maxextents unlimited
  );
alter table RPV.PARECER_VIS
  add constraint PK_PARECER_VIS primary key (COD_PARE_VIS)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 104K
    minextents 1
    maxextents unlimited
  );
alter table RPV.PARECER_VIS
  add constraint PARECER_VIS_FK foreign key (COD_PARE_POS)
  references RPV.PARECER_POSTO (COD_PARE_POS);

prompt
prompt Creating table INDEF_JUSTIFICA_PARECER
prompt ======================================
prompt
create table RPV.INDEF_JUSTIFICA_PARECER
(
  ano_form           NUMBER(4) not null,
  num_form           NUMBER(7) not null,
  cod_pare_vis       VARCHAR2(7) not null,
  cod_pais_sch_indef VARCHAR2(3),
  origem             VARCHAR2(1) not null,
  cri_uti            VARCHAR2(20) not null,
  cri_dat            DATE not null,
  reapr              VARCHAR2(1) not null
)
tablespace TS_RPV_1
  pctfree 5
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
alter table RPV.INDEF_JUSTIFICA_PARECER
  add primary key (ANO_FORM, NUM_FORM, COD_PARE_VIS, ORIGEM, REAPR)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 1M
    minextents 1
    maxextents unlimited
  );
alter table RPV.INDEF_JUSTIFICA_PARECER
  add constraint INDEF_JUSTIFICA_PARECER_FK foreign key (ANO_FORM, NUM_FORM)
  references RPV.FORMULARIO (ANO_FORM, NUM_FORM);
alter table RPV.INDEF_JUSTIFICA_PARECER
  add constraint INDEF_JUSTIFICA_PARECER2_FK foreign key (COD_PARE_VIS)
  references RPV.PARECER_VIS (COD_PARE_VIS);
alter table RPV.INDEF_JUSTIFICA_PARECER
  add constraint INDEF_JUSTIFICA_PARECER3_FK foreign key (COD_PAIS_SCH_INDEF)
  references RPV.PAIS (COD_PAIS);
alter table RPV.INDEF_JUSTIFICA_PARECER
  add constraint ORIGEM_CHECK
  check (ORIGEM IN ('P','C'));

prompt
prompt Creating table JAVA$OPTIONS
prompt ===========================
prompt
create table RPV.JAVA$OPTIONS
(
  what  VARCHAR2(128),
  opt   VARCHAR2(20),
  value VARCHAR2(128)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JUSTIFICA_RECUSA
prompt ===============================
prompt
create table RPV.JUSTIFICA_RECUSA
(
  ref_form_2       VARCHAR2(14) not null,
  justifica_1      VARCHAR2(1),
  justifica_2      VARCHAR2(1),
  justifica_3      VARCHAR2(1),
  justifica_4      VARCHAR2(1),
  justifica_5      VARCHAR2(1),
  justifica_5_pais VARCHAR2(20),
  justifica_6      VARCHAR2(1),
  justifica_7      VARCHAR2(1),
  justifica_8      VARCHAR2(1),
  justifica_9      VARCHAR2(1),
  justifica_10     VARCHAR2(1),
  justifica_11     VARCHAR2(1),
  cri_uti          VARCHAR2(20) not null,
  cri_dat          DATE not null,
  alt_uti          VARCHAR2(20),
  alt_dat          DATE,
  mot1_nac         VARCHAR2(1000),
  mot2_nac         VARCHAR2(1000),
  mot3_nac         VARCHAR2(1000),
  mot4_nac         VARCHAR2(1000),
  mot5_nac         VARCHAR2(1000),
  mot6_nac         VARCHAR2(1000),
  mot7_nac         VARCHAR2(1000),
  tipo             VARCHAR2(1),
  enviou           VARCHAR2(1)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 504K
    minextents 1
    maxextents unlimited
  );
create index RPV.JUSTIFICA_RECUSA_TIPO_I on RPV.JUSTIFICA_RECUSA (REF_FORM_2, ENVIOU, TIPO)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 1M
    minextents 1
    maxextents unlimited
  );
alter table RPV.JUSTIFICA_RECUSA
  add constraint JUSTIFICA_RECUSA_PK primary key (REF_FORM_2)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 72K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table LIMPA_AGENDA
prompt ===========================
prompt
create table RPV.LIMPA_AGENDA
(
  num_form_web NUMBER(10) not null,
  tipo         VARCHAR2(1) not null,
  tratado      VARCHAR2(1) not null,
  cri_uti      VARCHAR2(6) not null,
  cri_dat      VARCHAR2(20) not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
alter table RPV.LIMPA_AGENDA
  add constraint LIMPA_AGENDA_PK primary key (NUM_FORM_WEB)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 3M
    minextents 1
    maxextents unlimited
  );
alter table RPV.LIMPA_AGENDA
  add constraint LIMPA_AGENDA_TIPO
  check (TIPO IN ('A','P'));
alter table RPV.LIMPA_AGENDA
  add constraint LIMPA_AGENDA_TRATADO
  check (TRATADO IN ('S','N'));

prompt
prompt Creating table LIMPA_AGENDA_DEL_BCK
prompt ===================================
prompt
create table RPV.LIMPA_AGENDA_DEL_BCK
(
  num_form_web NUMBER(10) not null,
  tipo         VARCHAR2(1) not null,
  tratado      VARCHAR2(1) not null,
  cri_uti      VARCHAR2(6) not null,
  cri_dat      VARCHAR2(20) not null,
  date_del     DATE
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table LINK_VIS_MANUAL
prompt ==============================
prompt
create table RPV.LINK_VIS_MANUAL
(
  ano_form                      NUMBER(4) not null,
  num_form                      NUMBER(7) not null,
  vis_application               VARCHAR2(50) not null,
  tratado                       VARCHAR2(1) not null,
  cri_uti                       VARCHAR2(30) not null,
  cri_dat                       DATE not null,
  nome_fich_foto                VARCHAR2(100),
  foto_clob                     CLOB,
  foto                          BLOB,
  apel_candidato                VARCHAR2(150),
  nome_candidato                VARCHAR2(150),
  dat_nasc_candidato            VARCHAR2(10),
  est_pedido_candidato          VARCHAR2(50),
  dat_ent_candidato             VARCHAR2(10),
  dat_sai_candidato             VARCHAR2(10),
  num_ent_candidato             VARCHAR2(1),
  dur_est_candidato             VARCHAR2(3),
  num_vin_candidato             VARCHAR2(33),
  valido_para_candidato         VARCHAR2(50),
  dat_ini_vin_candidato         VARCHAR2(10),
  dat_fim_vin_candidato         VARCHAR2(10),
  num_ent_vin_candidato         VARCHAR2(1),
  dur_est_vin_candidato         VARCHAR2(3),
  nac_candidato                 VARCHAR2(50),
  place_app_candidato           VARCHAR2(50),
  attachmentid_finger_candidato VARCHAR2(11),
  fingers_qualitycheck          VARCHAR2(10),
  dateofapplication             VARCHAR2(10),
  dossier                       NUMBER(3),
  country_app_candidato         VARCHAR2(7),
  nome_autoridade_candidato     VARCHAR2(100),
  num_doc_viag_candidato        VARCHAR2(50),
  dat_emi_doc_viag_candidato    VARCHAR2(10),
  dat_vali_doc_viag_candidato   VARCHAR2(10),
  finger                        VARCHAR2(1)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 10M
    minextents 1
    maxextents unlimited
  );
create index RPV.LINK_VIS_MANUAL_I on RPV.LINK_VIS_MANUAL (TRATADO)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
create index RPV.LINK_VIS_MANUAL_II on RPV.LINK_VIS_MANUAL (ANO_FORM, NUM_FORM, TRATADO)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
alter table RPV.LINK_VIS_MANUAL
  add primary key (ANO_FORM, NUM_FORM, VIS_APPLICATION)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
alter table RPV.LINK_VIS_MANUAL
  add constraint LINK_VIS_MANUAL_FK foreign key (ANO_FORM, NUM_FORM)
  references RPV.FORMULARIO (ANO_FORM, NUM_FORM);

prompt
prompt Creating table LOG_NSISII
prompt =========================
prompt
create table RPV.LOG_NSISII
(
  ano_form NUMBER(4),
  num_form NUMBER(7),
  tipo     VARCHAR2(1),
  xml_env  CLOB,
  cri_dat  VARCHAR2(30)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 50M
    minextents 1
    maxextents unlimited
  );
comment on table RPV.LOG_NSISII
  is 'Logs das mensagens usadas nas consultas ao NSIS através do LOG_NSISII';
comment on column RPV.LOG_NSISII.tipo
  is 'Tipo de mensagem (Enviada/Recebida)';
comment on column RPV.LOG_NSISII.xml_env
  is 'Mensagem (formato XML)';
comment on column RPV.LOG_NSISII.cri_dat
  is 'Data de criação do registo';

prompt
prompt Creating table LOG_RECEBE
prompt =========================
prompt
create table RPV.LOG_RECEBE
(
  campo  VARCHAR2(255),
  descr  VARCHAR2(255),
  erro   NUMBER(4),
  sysdat DATE default sysdate
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.LOG_RECEBE.campo
  is 'Campo em que deu erro';
comment on column RPV.LOG_RECEBE.descr
  is 'Descrição do erro';
comment on column RPV.LOG_RECEBE.erro
  is 'Erro';
comment on column RPV.LOG_RECEBE.sysdat
  is 'Data do Erro';

prompt
prompt Creating table LOTE_CONSULTA
prompt ============================
prompt
create table RPV.LOTE_CONSULTA
(
  cod_ser  VARCHAR2(3) not null,
  dat_lote DATE not null,
  ord_lote NUMBER(3) not null,
  est_lote VARCHAR2(1) default 'P' not null,
  cri_dat  VARCHAR2(20) not null,
  cri_uti  VARCHAR2(30) not null,
  alt_dat  VARCHAR2(20),
  alt_uti  VARCHAR2(30)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.LOTE_CONSULTA.cod_ser
  is 'Código de Serviço';
comment on column RPV.LOTE_CONSULTA.dat_lote
  is 'Data do Lote';
comment on column RPV.LOTE_CONSULTA.ord_lote
  is 'Numero de Sequência do Lote';
comment on column RPV.LOTE_CONSULTA.est_lote
  is 'Estado do Lote (Em Tratamento / Tratado)';
comment on column RPV.LOTE_CONSULTA.cri_dat
  is 'Data de Criação do Registo.';
comment on column RPV.LOTE_CONSULTA.cri_uti
  is 'Utilizador que realizou a  Criação do Registo.';
comment on column RPV.LOTE_CONSULTA.alt_dat
  is 'Data deAlteração do Registo.';
comment on column RPV.LOTE_CONSULTA.alt_uti
  is 'Utilizador que realizou a Última Alteração';
create index RPV.LOTCON_SER_FK_I on RPV.LOTE_CONSULTA (COD_SER)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.LOTE_CONSULTA
  add constraint LOTCON_PK primary key (COD_SER, DAT_LOTE, ORD_LOTE)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.LOTE_CONSULTA
  add constraint LOTCON_SER_FK foreign key (COD_SER)
  references RPV.SERVICO (COD_SER);
alter table RPV.LOTE_CONSULTA
  add check ( est_lote IN ( 'E' , 'T' , 'P' )  );

prompt
prompt Creating table LST_NOMES
prompt ========================
prompt
create table RPV.LST_NOMES
(
  cod_pais_sch VARCHAR2(3) not null,
  nome         VARCHAR2(25),
  apelido      VARCHAR2(50),
  dat_nasc     VARCHAR2(10)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.LST_NOMES.cod_pais_sch
  is 'Código do País';
comment on column RPV.LST_NOMES.nome
  is 'Nome';
comment on column RPV.LST_NOMES.apelido
  is 'Apelido';
comment on column RPV.LST_NOMES.dat_nasc
  is 'Data de nascimento';
create index RPV.LST_NOME_SCH_FK_I on RPV.LST_NOMES (COD_PAIS_SCH)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.LST_NOMES
  add constraint LST_NOME_SCH_FK foreign key (COD_PAIS_SCH)
  references RPV.PAIS_SCH (COD_PAIS_SCH);

prompt
prompt Creating table MEIOS_SUBSISTENCIA
prompt =================================
prompt
create table RPV.MEIOS_SUBSISTENCIA
(
  num_form NUMBER(7) not null,
  ano_form NUMBER(4) not null,
  entidade VARCHAR2(30) not null,
  meios    VARCHAR2(10) not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 352K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.MEIOS_SUBSISTENCIA.num_form
  is 'numero do formulario do visto';
comment on column RPV.MEIOS_SUBSISTENCIA.ano_form
  is 'ano do formulario do visto';
comment on column RPV.MEIOS_SUBSISTENCIA.entidade
  is 'entidade responsável pelos meios de subsistencia';
comment on column RPV.MEIOS_SUBSISTENCIA.meios
  is 'meios de subsistencia';
alter table RPV.MEIOS_SUBSISTENCIA
  add constraint MEIO_SUBS_UK unique (NUM_FORM, ANO_FORM, ENTIDADE, MEIOS)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 232K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MEIOS_SUBSISTENCIA_WEB
prompt =====================================
prompt
create table RPV.MEIOS_SUBSISTENCIA_WEB
(
  num_form_web VARCHAR2(11) not null,
  entidade     VARCHAR2(30) not null,
  meios        VARCHAR2(2) not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.MEIOS_SUBSISTENCIA_WEB.num_form_web
  is 'numero do formulario do visto';
comment on column RPV.MEIOS_SUBSISTENCIA_WEB.entidade
  is 'entidade responsável pelos meios de subsistencia';
comment on column RPV.MEIOS_SUBSISTENCIA_WEB.meios
  is 'meios de subsistencia';
alter table RPV.MEIOS_SUBSISTENCIA_WEB
  add constraint MEIO_SUBS_WEB_UK unique (NUM_FORM_WEB, ENTIDADE, MEIOS)
  using index 
  tablespace TS_RPV_1
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MSG_ERROS
prompt ========================
prompt
create table RPV.MSG_ERROS
(
  tipo      VARCHAR2(3) not null,
  cod       NUMBER not null,
  descricao VARCHAR2(120)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.MSG_ERROS
  add constraint MSGERROS_PK primary key (COD, TIPO)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table NOTAS_POSTO
prompt ==========================
prompt
create table RPV.NOTAS_POSTO
(
  ano_form     NUMBER(4) not null,
  num_form     NUMBER(7) not null,
  seq_insercao NUMBER(3) not null,
  texto        VARCHAR2(1000) not null,
  estado       VARCHAR2(1) not null,
  cri_uti      VARCHAR2(30) not null,
  cri_dat      VARCHAR2(20) not null,
  alt_uti      VARCHAR2(30),
  alt_dat      VARCHAR2(20)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 1M
    minextents 1
    maxextents unlimited
  );
alter table RPV.NOTAS_POSTO
  add constraint NOTAS_POSTO_PK primary key (ANO_FORM, NUM_FORM, SEQ_INSERCAO)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 1M
    minextents 1
    maxextents unlimited
  );
alter table RPV.NOTAS_POSTO
  add constraint NOTAS_POSTO_FK foreign key (ANO_FORM, NUM_FORM)
  references RPV.FORMULARIO (ANO_FORM, NUM_FORM);
alter table RPV.NOTAS_POSTO
  add constraint NOTAS_POSTO_ESTADO_C
  check (ESTADO IN ('P','T'));

prompt
prompt Creating table PAIS_DUP_NAC
prompt ===========================
prompt
create table RPV.PAIS_DUP_NAC
(
  cod_pais VARCHAR2(3) not null,
  cri_dat  DATE not null,
  cri_uti  VARCHAR2(30) not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.PAIS_DUP_NAC
  add constraint PAIS_DUP_PK primary key (COD_PAIS)
  using index 
  tablespace TS_RPV_1
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table PAIS_EMI_RESTR
prompt =============================
prompt
create table RPV.PAIS_EMI_RESTR
(
  cod_pais_sch VARCHAR2(3) not null,
  cod_pais     VARCHAR2(3),
  cod_pos      NUMBER(4),
  cod_doc      VARCHAR2(3),
  tem_lista    VARCHAR2(1) not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.PAIS_EMI_RESTR.cod_pais_sch
  is 'Código do País';
comment on column RPV.PAIS_EMI_RESTR.cod_pais
  is 'Código do País';
comment on column RPV.PAIS_EMI_RESTR.cod_pos
  is 'Código do Posto';
comment on column RPV.PAIS_EMI_RESTR.cod_doc
  is 'Código de Documento';
comment on column RPV.PAIS_EMI_RESTR.tem_lista
  is 'Restrição do tipo 4 com lista de nomes associado (S/N) ?';
create index RPV.PEMIRESTR_DOCS_FK_I on RPV.PAIS_EMI_RESTR (COD_DOC)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.PEMIRESTR_PAIS_FK_I on RPV.PAIS_EMI_RESTR (COD_PAIS)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.PEMIRESTR_POS_FK_I on RPV.PAIS_EMI_RESTR (COD_POS)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.PEMIRESTR_SCH_FK_I on RPV.PAIS_EMI_RESTR (COD_PAIS_SCH)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.PAIS_EMI_RESTR
  add constraint PEMIRESTR_DOCS_FK foreign key (COD_DOC)
  references RPV.DOCUMENTO (COD_DOC);
alter table RPV.PAIS_EMI_RESTR
  add constraint PEMIRESTR_PAIS_FK foreign key (COD_PAIS)
  references RPV.PAIS (COD_PAIS);
alter table RPV.PAIS_EMI_RESTR
  add constraint PEMIRESTR_POS_FK foreign key (COD_POS)
  references RPV.POSTO (COD_POS);
alter table RPV.PAIS_EMI_RESTR
  add constraint PEMIRESTR_SCH_FK foreign key (COD_PAIS_SCH)
  references RPV.PAIS_SCH (COD_PAIS_SCH);
alter table RPV.PAIS_EMI_RESTR
  add check ( tem_lista IN ( 'S' , 'N' )  );

prompt
prompt Creating table PAIS_TRANSITO
prompt ============================
prompt
create table RPV.PAIS_TRANSITO
(
  ano_form   NUMBER(4) not null,
  num_form   NUMBER(7) not null,
  cod_pais   VARCHAR2(3) not null,
  seq_transi NUMBER(2) not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 40K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.PAIS_TRANSITO.ano_form
  is 'Ano do Pedido';
comment on column RPV.PAIS_TRANSITO.num_form
  is 'Numero do Pedido';
comment on column RPV.PAIS_TRANSITO.cod_pais
  is 'Código do País';
comment on column RPV.PAIS_TRANSITO.seq_transi
  is 'Sequência de Trânsito';
create index RPV.PAISTRAN_FOR_FK_I on RPV.PAIS_TRANSITO (ANO_FORM, NUM_FORM)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 72K
    minextents 1
    maxextents unlimited
  );
create index RPV.PAISTRAN_SCH_FK_I on RPV.PAIS_TRANSITO (COD_PAIS)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 40K
    minextents 1
    maxextents unlimited
  );
alter table RPV.PAIS_TRANSITO
  add constraint PAISTRAN_PK primary key (ANO_FORM, NUM_FORM, COD_PAIS)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 40K
    minextents 1
    maxextents unlimited
  );
alter table RPV.PAIS_TRANSITO
  add constraint PAISTRAN_FOR_FK foreign key (ANO_FORM, NUM_FORM)
  references RPV.FORMULARIO (ANO_FORM, NUM_FORM);
alter table RPV.PAIS_TRANSITO
  add constraint PAISTRAN_SCH_FK foreign key (COD_PAIS)
  references RPV.PAIS_SCH (COD_PAIS_SCH);

prompt
prompt Creating table PAIS_TRANSITO_WEB
prompt ================================
prompt
create table RPV.PAIS_TRANSITO_WEB
(
  num_form_web NUMBER(7) not null,
  cod_pais     VARCHAR2(3) not null,
  seq_transi   NUMBER(2) not null
)
tablespace TS_RPV_1
  pctfree 30
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 1032K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.PAIS_TRANSITO_WEB.num_form_web
  is 'Numero do Pedido';
comment on column RPV.PAIS_TRANSITO_WEB.cod_pais
  is 'Código do País';
comment on column RPV.PAIS_TRANSITO_WEB.seq_transi
  is 'Sequência de Trânsito';
alter table RPV.PAIS_TRANSITO_WEB
  add constraint PAISTRAN_WEB_PK primary key (NUM_FORM_WEB, COD_PAIS)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 24K
    minextents 1
    maxextents unlimited
  );
alter table RPV.PAIS_TRANSITO_WEB
  add constraint PAISTRAN_PAIS_WEB_FK foreign key (COD_PAIS)
  references RPV.PAIS (COD_PAIS);

prompt
prompt Creating table PARAM_GLO
prompt ========================
prompt
create table RPV.PARAM_GLO
(
  ind_para    NUMBER(2) not null,
  des_para    VARCHAR2(50) not null,
  tab_valid   VARCHAR2(30),
  multi_param VARCHAR2(1) not null,
  val_para    VARCHAR2(100),
  med_temp    VARCHAR2(1),
  alt_dat     VARCHAR2(20) default 'sysdate',
  alt_uti     VARCHAR2(30)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.PARAM_GLO.ind_para
  is 'Indice do Parâmetro';
comment on column RPV.PARAM_GLO.des_para
  is 'Descrição do Parâmetro';
comment on column RPV.PARAM_GLO.tab_valid
  is 'Tabela de Validação do Valor do Parâmetro';
comment on column RPV.PARAM_GLO.multi_param
  is 'Multi-Parâmetro ? (S/N)';
comment on column RPV.PARAM_GLO.val_para
  is 'Valor do Parâmetro';
comment on column RPV.PARAM_GLO.med_temp
  is 'Medida de Tempo do Parâmetro';
comment on column RPV.PARAM_GLO.alt_dat
  is 'Data deAlteração do Registo.';
comment on column RPV.PARAM_GLO.alt_uti
  is 'Utilizador que realizou a Última Alteração';
alter table RPV.PARAM_GLO
  add constraint PARAM_PK primary key (IND_PARA)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.PARAM_GLO
  add check ( med_temp BETWEEN 'D' AND 'D'   OR med_temp BETWEEN 'M' AND 'M'   OR med_temp BETWEEN 'A' AND 'A' );
alter table RPV.PARAM_GLO
  add check ( multi_param IN ( 'S' , 'N' )  );
alter table RPV.PARAM_GLO
  add check ( multi_param BETWEEN 'S' AND 'S'   OR multi_param BETWEEN 'N' AND 'N' );
alter table RPV.PARAM_GLO
  add check ( multi_param IN ( 'S' , 'N' )  );
alter table RPV.PARAM_GLO
  add check ( med_temp IN ( 'D' , 'M' , 'A' )  );
alter table RPV.PARAM_GLO
  add check ( med_temp BETWEEN 'D' AND 'D'   OR med_temp BETWEEN 'M' AND 'M'   OR med_temp BETWEEN 'A' AND 'A' );
alter table RPV.PARAM_GLO
  add check ( multi_param IN ( 'S' , 'N' )  );
alter table RPV.PARAM_GLO
  add check ( multi_param BETWEEN 'S' AND 'S'   OR multi_param BETWEEN 'N' AND 'N' );
alter table RPV.PARAM_GLO
  add check ( multi_param IN ( 'S' , 'N' )  );
alter table RPV.PARAM_GLO
  add check ( med_temp IN ( 'D' , 'M' , 'A' )  );
alter table RPV.PARAM_GLO
  add check ( med_temp BETWEEN 'D' AND 'D'   OR med_temp BETWEEN 'M' AND 'M'   OR med_temp BETWEEN 'A' AND 'A' );
alter table RPV.PARAM_GLO
  add check ( multi_param IN ( 'S' , 'N' )  );
alter table RPV.PARAM_GLO
  add check ( multi_param BETWEEN 'S' AND 'S'   OR multi_param BETWEEN 'N' AND 'N' );
alter table RPV.PARAM_GLO
  add check ( med_temp BETWEEN 'D' AND 'D'   OR med_temp BETWEEN 'M' AND 'M'   OR med_temp BETWEEN 'A' AND 'A' );
alter table RPV.PARAM_GLO
  add check ( multi_param IN ( 'S' , 'N' )  );
alter table RPV.PARAM_GLO
  add check ( multi_param BETWEEN 'S' AND 'S'   OR multi_param BETWEEN 'N' AND 'N' );
alter table RPV.PARAM_GLO
  add check ( med_temp BETWEEN 'D' AND 'D'   OR med_temp BETWEEN 'M' AND 'M'   OR med_temp BETWEEN 'A' AND 'A' );
alter table RPV.PARAM_GLO
  add check ( multi_param IN ( 'S' , 'N' )  );
alter table RPV.PARAM_GLO
  add check ( multi_param BETWEEN 'S' AND 'S'   OR multi_param BETWEEN 'N' AND 'N' );
alter table RPV.PARAM_GLO
  add check ( multi_param BETWEEN 'S' AND 'S'   OR multi_param BETWEEN 'N' AND 'N' );
alter table RPV.PARAM_GLO
  add check ( med_temp BETWEEN 'D' AND 'D'   OR med_temp BETWEEN 'M' AND 'M'   OR med_temp BETWEEN 'A' AND 'A' );
alter table RPV.PARAM_GLO
  add check ( multi_param IN ( 'S' , 'N' )  );
alter table RPV.PARAM_GLO
  add check ( multi_param BETWEEN 'S' AND 'S'   OR multi_param BETWEEN 'N' AND 'N' );
alter table RPV.PARAM_GLO
  add check ( med_temp BETWEEN 'D' AND 'D'   OR med_temp BETWEEN 'M' AND 'M'   OR med_temp BETWEEN 'A' AND 'A' );
alter table RPV.PARAM_GLO
  add check ( multi_param IN ( 'S' , 'N' )  );
alter table RPV.PARAM_GLO
  add check ( multi_param BETWEEN 'S' AND 'S'   OR multi_param BETWEEN 'N' AND 'N' );
alter table RPV.PARAM_GLO
  add check ( multi_param IN ( 'S' , 'N' )  );
alter table RPV.PARAM_GLO
  add check ( med_temp IN ( 'D' , 'M' , 'A' )  );
alter table RPV.PARAM_GLO
  add check ( med_temp BETWEEN 'D' AND 'D'   OR med_temp BETWEEN 'M' AND 'M'   OR med_temp BETWEEN 'A' AND 'A' );
alter table RPV.PARAM_GLO
  add check ( multi_param IN ( 'S' , 'N' )  );
alter table RPV.PARAM_GLO
  add check ( multi_param BETWEEN 'S' AND 'S'   OR multi_param BETWEEN 'N' AND 'N' );
alter table RPV.PARAM_GLO
  add check ( med_temp BETWEEN 'D' AND 'D'   OR med_temp BETWEEN 'M' AND 'M'   OR med_temp BETWEEN 'A' AND 'A' );
alter table RPV.PARAM_GLO
  add check ( multi_param IN ( 'S' , 'N' )  );
alter table RPV.PARAM_GLO
  add check ( multi_param BETWEEN 'S' AND 'S'   OR multi_param BETWEEN 'N' AND 'N' );
alter table RPV.PARAM_GLO
  add check ( multi_param IN ( 'S' , 'N' )  );
alter table RPV.PARAM_GLO
  add check ( med_temp IN ( 'D' , 'M' , 'A' )  );
alter table RPV.PARAM_GLO
  add check ( med_temp BETWEEN 'D' AND 'D'   OR med_temp BETWEEN 'M' AND 'M'   OR med_temp BETWEEN 'A' AND 'A' );
alter table RPV.PARAM_GLO
  add check ( multi_param IN ( 'S' , 'N' )  );
alter table RPV.PARAM_GLO
  add check ( multi_param BETWEEN 'S' AND 'S'   OR multi_param BETWEEN 'N' AND 'N' );
alter table RPV.PARAM_GLO
  add check ( med_temp BETWEEN 'D' AND 'D'   OR med_temp BETWEEN 'M' AND 'M'   OR med_temp BETWEEN 'A' AND 'A' );
alter table RPV.PARAM_GLO
  add check ( multi_param IN ( 'S' , 'N' )  );
alter table RPV.PARAM_GLO
  add check ( multi_param BETWEEN 'S' AND 'S'   OR multi_param BETWEEN 'N' AND 'N' );
alter table RPV.PARAM_GLO
  add check ( multi_param BETWEEN 'S' AND 'S'   OR multi_param BETWEEN 'N' AND 'N' );
alter table RPV.PARAM_GLO
  add check ( med_temp BETWEEN 'D' AND 'D'   OR med_temp BETWEEN 'M' AND 'M'   OR med_temp BETWEEN 'A' AND 'A' );
alter table RPV.PARAM_GLO
  add check ( multi_param IN ( 'S' , 'N' )  );
alter table RPV.PARAM_GLO
  add check ( multi_param IN ( 'S' , 'N' )  );
alter table RPV.PARAM_GLO
  add check ( med_temp IN ( 'D' , 'M' , 'A' )  );
alter table RPV.PARAM_GLO
  add check ( multi_param BETWEEN 'S' AND 'S'   OR multi_param BETWEEN 'N' AND 'N' );
alter table RPV.PARAM_GLO
  add check ( multi_param IN ( 'S' , 'N' )  );
alter table RPV.PARAM_GLO
  add check ( med_temp IN ( 'D' , 'M' , 'A' )  );
alter table RPV.PARAM_GLO
  add check ( med_temp BETWEEN 'D' AND 'D'   OR med_temp BETWEEN 'M' AND 'M'   OR med_temp BETWEEN 'A' AND 'A' );
alter table RPV.PARAM_GLO
  add check ( multi_param IN ( 'S' , 'N' )  );
alter table RPV.PARAM_GLO
  add check ( multi_param BETWEEN 'S' AND 'S'   OR multi_param BETWEEN 'N' AND 'N' );
alter table RPV.PARAM_GLO
  add check ( med_temp BETWEEN 'D' AND 'D'   OR med_temp BETWEEN 'M' AND 'M'   OR med_temp BETWEEN 'A' AND 'A' );
alter table RPV.PARAM_GLO
  add check ( multi_param IN ( 'S' , 'N' )  );
alter table RPV.PARAM_GLO
  add check ( multi_param BETWEEN 'S' AND 'S'   OR multi_param BETWEEN 'N' AND 'N' );
alter table RPV.PARAM_GLO
  add check ( med_temp BETWEEN 'D' AND 'D'   OR med_temp BETWEEN 'M' AND 'M'   OR med_temp BETWEEN 'A' AND 'A' );
alter table RPV.PARAM_GLO
  add check ( multi_param IN ( 'S' , 'N' )  );
alter table RPV.PARAM_GLO
  add check ( med_temp BETWEEN 'D' AND 'D'   OR med_temp BETWEEN 'M' AND 'M'   OR med_temp BETWEEN 'A' AND 'A' );
alter table RPV.PARAM_GLO
  add check ( multi_param IN ( 'S' , 'N' )  );
alter table RPV.PARAM_GLO
  add check ( multi_param BETWEEN 'S' AND 'S'   OR multi_param BETWEEN 'N' AND 'N' );
alter table RPV.PARAM_GLO
  add check ( med_temp BETWEEN 'D' AND 'D'   OR med_temp BETWEEN 'M' AND 'M'   OR med_temp BETWEEN 'A' AND 'A' );
alter table RPV.PARAM_GLO
  add check ( multi_param IN ( 'S' , 'N' )  );
alter table RPV.PARAM_GLO
  add check ( multi_param BETWEEN 'S' AND 'S'   OR multi_param BETWEEN 'N' AND 'N' );
alter table RPV.PARAM_GLO
  add check ( med_temp BETWEEN 'D' AND 'D'   OR med_temp BETWEEN 'M' AND 'M'   OR med_temp BETWEEN 'A' AND 'A' );
alter table RPV.PARAM_GLO
  add check ( multi_param IN ( 'S' , 'N' )  );
alter table RPV.PARAM_GLO
  add check ( multi_param BETWEEN 'S' AND 'S'   OR multi_param BETWEEN 'N' AND 'N' );
alter table RPV.PARAM_GLO
  add check ( med_temp BETWEEN 'D' AND 'D'   OR med_temp BETWEEN 'M' AND 'M'   OR med_temp BETWEEN 'A' AND 'A' );
alter table RPV.PARAM_GLO
  add check ( multi_param IN ( 'S' , 'N' )  );
alter table RPV.PARAM_GLO
  add check ( multi_param BETWEEN 'S' AND 'S'   OR multi_param BETWEEN 'N' AND 'N' );
alter table RPV.PARAM_GLO
  add check ( med_temp BETWEEN 'D' AND 'D'   OR med_temp BETWEEN 'M' AND 'M'   OR med_temp BETWEEN 'A' AND 'A' );
alter table RPV.PARAM_GLO
  add check ( multi_param IN ( 'S' , 'N' )  );

prompt
prompt Creating table PARAM_DET
prompt ========================
prompt
create table RPV.PARAM_DET
(
  ind_para  NUMBER(2) not null,
  val_param VARCHAR2(30) not null,
  alt_dat   VARCHAR2(20) default 'sysdate',
  alt_uti   VARCHAR2(30)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.PARAM_DET.ind_para
  is 'Indice do Parâmetro';
comment on column RPV.PARAM_DET.val_param
  is 'Valor do Parâmetro';
comment on column RPV.PARAM_DET.alt_dat
  is 'Data deAlteração do Registo.';
comment on column RPV.PARAM_DET.alt_uti
  is 'Utilizador que realizou a Última Alteração';
create index RPV.PARAMDET_PARAM_FK_I on RPV.PARAM_DET (IND_PARA)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.PARAM_DET
  add constraint PARAMDET_PK primary key (IND_PARA, VAL_PARAM)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.PARAM_DET
  add constraint PARAMDET_PARAM_FK foreign key (IND_PARA)
  references RPV.PARAM_GLO (IND_PARA);

prompt
prompt Creating table PED_EMITIR_VISTOS
prompt ================================
prompt
create table RPV.PED_EMITIR_VISTOS
(
  ref_form_2     VARCHAR2(14) not null,
  cri_dat        VARCHAR2(20) not null,
  cri_uti        VARCHAR2(30) not null,
  obs            VARCHAR2(250),
  f_proc         VARCHAR2(1),
  f_est_msg1     VARCHAR2(1),
  f_est_msg2     VARCHAR2(1),
  f_est_msg3     VARCHAR2(1),
  f_est_msg4     VARCHAR2(1),
  f_est_msg5     VARCHAR2(1),
  num_tentativas NUMBER(1)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table RPV.PED_EMITIR_VISTOS
  is 'Pedidos especiais para Emitir Vistos';
comment on column RPV.PED_EMITIR_VISTOS.ref_form_2
  is 'Número do pedido de visto';
comment on column RPV.PED_EMITIR_VISTOS.cri_dat
  is 'Data de Criação do Registo';
comment on column RPV.PED_EMITIR_VISTOS.cri_uti
  is 'Utilizador que realizou a Criação do Registo';
comment on column RPV.PED_EMITIR_VISTOS.obs
  is 'Observações';
comment on column RPV.PED_EMITIR_VISTOS.f_proc
  is 'Indicativo se foi processado (S-sim/N-não/E-erro)';
comment on column RPV.PED_EMITIR_VISTOS.f_est_msg1
  is 'Indicativo do estado da mensagem (0-enviada;1-com resposta ok;2-sem resposta)';
comment on column RPV.PED_EMITIR_VISTOS.f_est_msg2
  is 'Indicativo do estado da mensagem (0-enviada;1-com resposta ok;2-sem resposta)';
comment on column RPV.PED_EMITIR_VISTOS.f_est_msg3
  is 'Indicativo do estado da mensagem (0-enviada;1-com resposta ok;2-sem resposta;3-nao aplicavel)';
comment on column RPV.PED_EMITIR_VISTOS.num_tentativas
  is 'Numero de Retrieves de obtenção de reposta de cada mensagem. Contador é limpo a cada mensagem.';
alter table RPV.PED_EMITIR_VISTOS
  add constraint PED_EMITIR_VISTOS_PK primary key (REF_FORM_2)
  using index 
  tablespace TS_RPV_1
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table PLAN_TABLE
prompt =========================
prompt
create table RPV.PLAN_TABLE
(
  statement_id      VARCHAR2(30),
  plan_id           NUMBER,
  timestamp         DATE,
  remarks           VARCHAR2(4000),
  operation         VARCHAR2(30),
  options           VARCHAR2(255),
  object_node       VARCHAR2(128),
  object_owner      VARCHAR2(30),
  object_name       VARCHAR2(30),
  object_alias      VARCHAR2(65),
  object_instance   INTEGER,
  object_type       VARCHAR2(30),
  optimizer         VARCHAR2(255),
  search_columns    NUMBER,
  id                INTEGER,
  parent_id         INTEGER,
  depth             INTEGER,
  position          INTEGER,
  cost              INTEGER,
  cardinality       INTEGER,
  bytes             INTEGER,
  other_tag         VARCHAR2(255),
  partition_start   VARCHAR2(255),
  partition_stop    VARCHAR2(255),
  partition_id      INTEGER,
  other             LONG,
  distribution      VARCHAR2(30),
  cpu_cost          INTEGER,
  io_cost           INTEGER,
  temp_space        INTEGER,
  access_predicates VARCHAR2(4000),
  filter_predicates VARCHAR2(4000),
  projection        VARCHAR2(4000),
  time              INTEGER,
  qblock_name       VARCHAR2(30)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table POSTO_PAIS_REPR
prompt ==============================
prompt
create table RPV.POSTO_PAIS_REPR
(
  cod_pos  NUMBER(4) not null,
  cod_pais VARCHAR2(3) not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.POSTO_PAIS_REPR.cod_pos
  is 'Código do Posto';
comment on column RPV.POSTO_PAIS_REPR.cod_pais
  is 'Código do País';
create index RPV.PAISREP_POS_FK_I on RPV.POSTO_PAIS_REPR (COD_POS)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.PAISREP_SCH_FK_I on RPV.POSTO_PAIS_REPR (COD_PAIS)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.POSTO_PAIS_REPR
  add constraint PAISREP_PK primary key (COD_POS, COD_PAIS)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.POSTO_PAIS_REPR
  add constraint PAISREP_POS_FK foreign key (COD_POS)
  references RPV.POSTO (COD_POS);
alter table RPV.POSTO_PAIS_REPR
  add constraint PAISREP_SCH_FK foreign key (COD_PAIS)
  references RPV.PAIS_SCH (COD_PAIS_SCH);

prompt
prompt Creating table PROFISSOES_SEF
prompt =============================
prompt
create table RPV.PROFISSOES_SEF
(
  cod_prof VARCHAR2(7) not null,
  des_prof VARCHAR2(250) not null
)
tablespace TS_RPV_1
  pctfree 5
  pctused 60
  initrans 2
  maxtrans 255
  storage
  (
    initial 15M
    minextents 1
    maxextents unlimited
  );
alter table RPV.PROFISSOES_SEF
  add constraint PROFISSOES_SEF_PK primary key (COD_PROF)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 10M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table PROGS
prompt ====================
prompt
create table RPV.PROGS
(
  cod_prog      VARCHAR2(20) not null,
  tipo          NUMBER(1) default 1 not null,
  desc_prog     VARCHAR2(120),
  evolui_estado VARCHAR2(1)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.PROGS.cod_prog
  is 'Código de identificação do programa.';
comment on column RPV.PROGS.tipo
  is 'Tipo de programa.';
comment on column RPV.PROGS.desc_prog
  is 'Descrição do programa.';
alter table RPV.PROGS
  add constraint PROGS_PK primary key (COD_PROG, TIPO)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.PROGS
  add check ( tipo IN ( 1 , 2 )  );
alter table RPV.PROGS
  add check ( tipo IN ( 1 , 2 )  );
alter table RPV.PROGS
  add check ( tipo IN ( 1 , 2 )  );
alter table RPV.PROGS
  add check ( tipo IN ( 1 , 2 )  );
alter table RPV.PROGS
  add check ( tipo IN ( 1 , 2 )  );
alter table RPV.PROGS
  add check ( tipo IN ( 1 , 2 )  );

prompt
prompt Creating table PROGS_CARG
prompt =========================
prompt
create table RPV.PROGS_CARG
(
  cod_carg VARCHAR2(6) not null,
  cod_prog VARCHAR2(20) not null,
  tipo     NUMBER(1) not null,
  leitura  VARCHAR2(1) not null,
  escrita  VARCHAR2(1) not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 24K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.PROGS_CARG.cod_carg
  is 'Código de Cargo do Utilizador';
comment on column RPV.PROGS_CARG.cod_prog
  is 'Código de identificação do programa.';
comment on column RPV.PROGS_CARG.tipo
  is 'Tipo de programa.';
comment on column RPV.PROGS_CARG.leitura
  is 'Acede para leitura (pesquisa)';
comment on column RPV.PROGS_CARG.escrita
  is 'Acede para escrita.';
create index RPV.PROGS_CARG_CARGUTI_FK_I on RPV.PROGS_CARG (COD_CARG)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 24K
    minextents 1
    maxextents unlimited
  );
create index RPV.PROGS_CARG_PROGS_FK_I on RPV.PROGS_CARG (COD_PROG, TIPO)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 24K
    minextents 1
    maxextents unlimited
  );
alter table RPV.PROGS_CARG
  add constraint PROGS_CARG_PK primary key (COD_PROG, TIPO, COD_CARG)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 24K
    minextents 1
    maxextents unlimited
  );
alter table RPV.PROGS_CARG
  add constraint PROGS_CARG_CARGUTI_FK foreign key (COD_CARG)
  references RPV.CARGO_UTI (COD_CARG);
alter table RPV.PROGS_CARG
  add constraint PROGS_CARG_PROGS_FK foreign key (COD_PROG, TIPO)
  references RPV.PROGS (COD_PROG, TIPO);
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( escrita IN ( 'S' , 'N' )  );
alter table RPV.PROGS_CARG
  add check ( leitura IN ( 'S' , 'N' )  );

prompt
prompt Creating table PRORROGA
prompt =======================
prompt
create table RPV.PRORROGA
(
  cod_prorr NUMBER(2) not null,
  num_dias  NUMBER(2) not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.PRORROGA.cod_prorr
  is 'Código de Prorrogação';
comment on column RPV.PRORROGA.num_dias
  is 'Numero de Dias de Prorrogação';
alter table RPV.PRORROGA
  add constraint PRORR_PK primary key (COD_PRORR)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table PRORROGA_SCH
prompt ===========================
prompt
create table RPV.PRORROGA_SCH
(
  ano_form      NUMBER(4) not null,
  num_form      NUMBER(7) not null,
  cod_pais      VARCHAR2(3) not null,
  ord_prorr_sch NUMBER(2) not null,
  dat_prorr     DATE default sysdate not null,
  cod_prorr     NUMBER(2) not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.PRORROGA_SCH.ano_form
  is 'Ano do Pedido';
comment on column RPV.PRORROGA_SCH.num_form
  is 'Numero do Pedido';
comment on column RPV.PRORROGA_SCH.cod_pais
  is 'Código do País';
comment on column RPV.PRORROGA_SCH.ord_prorr_sch
  is 'Numero de Sequência da Prorrogação';
comment on column RPV.PRORROGA_SCH.dat_prorr
  is 'Data de Prorrogação';
comment on column RPV.PRORROGA_SCH.cod_prorr
  is 'Código de Prorrogação';
create index RPV.PRORRSCH_FORMSCH_FK_I on RPV.PRORROGA_SCH (ANO_FORM, NUM_FORM, COD_PAIS)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.PRORRSCH_PRORR_FK_I on RPV.PRORROGA_SCH (COD_PRORR)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.PRORROGA_SCH
  add constraint PRORRSCH_PK primary key (ANO_FORM, NUM_FORM, COD_PAIS, ORD_PRORR_SCH)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.PRORROGA_SCH
  add constraint PRORRSCH_FORMSCH_FK foreign key (ANO_FORM, NUM_FORM, COD_PAIS)
  references RPV.FORM_SCH (ANO_FORM, NUM_FORM, COD_PAIS);
alter table RPV.PRORROGA_SCH
  add constraint PRORRSCH_PRORR_FK foreign key (COD_PRORR)
  references RPV.PRORROGA (COD_PRORR);

prompt
prompt Creating table PRORROGA_SER
prompt ===========================
prompt
create table RPV.PRORROGA_SER
(
  ano_form      NUMBER(4) not null,
  num_form      NUMBER(7) not null,
  cod_ser       VARCHAR2(3) not null,
  num_ord       NUMBER(2) not null,
  ord_prorr_ser NUMBER(2) not null,
  dat_prorr     DATE default sysdate not null,
  cod_prorr     NUMBER(2) not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.PRORROGA_SER.ano_form
  is 'Ano do Pedido';
comment on column RPV.PRORROGA_SER.num_form
  is 'Numero do Pedido';
comment on column RPV.PRORROGA_SER.cod_ser
  is 'Código de Serviço';
comment on column RPV.PRORROGA_SER.num_ord
  is 'Numero Sequêncial (para Reapreciações)';
comment on column RPV.PRORROGA_SER.ord_prorr_ser
  is 'Numero de Sequência da Prorrogação';
comment on column RPV.PRORROGA_SER.dat_prorr
  is 'Data da Prorrogação';
comment on column RPV.PRORROGA_SER.cod_prorr
  is 'Código de Prorrogação';
create index RPV.PRORRSER_FORMSERCON_FK_I on RPV.PRORROGA_SER (ANO_FORM, NUM_FORM, COD_SER, NUM_ORD)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.PRORRSER_PRORR_FK_I on RPV.PRORROGA_SER (COD_PRORR)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.PRORROGA_SER
  add constraint PRORRSER_PK primary key (ANO_FORM, NUM_FORM, COD_SER, NUM_ORD, ORD_PRORR_SER)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.PRORROGA_SER
  add constraint PRORRSER_FORMSERCON_FK foreign key (ANO_FORM, NUM_FORM, COD_SER, NUM_ORD)
  references RPV.FORM_SER (ANO_FORM, NUM_FORM, COD_SER, NUM_ORD);
alter table RPV.PRORROGA_SER
  add constraint PRORRSER_PRORR_FK foreign key (COD_PRORR)
  references RPV.PRORROGA (COD_PRORR);

prompt
prompt Creating table REAG_ALERTAS
prompt ===========================
prompt
create table RPV.REAG_ALERTAS
(
  id_envio     VARCHAR2(10) not null,
  nome         VARCHAR2(25) not null,
  apelido      VARCHAR2(50) not null,
  dat_nasc     VARCHAR2(10),
  num_doc_viag VARCHAR2(20),
  cod_pais_nac VARCHAR2(3) not null,
  tipo         VARCHAR2(1) not null,
  cod_pos      NUMBER(4) not null,
  motivo       VARCHAR2(120),
  cri_uti      VARCHAR2(30),
  cri_dat      VARCHAR2(20)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 1M
    minextents 1
    maxextents unlimited
  );
alter table RPV.REAG_ALERTAS
  add constraint REAG_ALERTAS_PK primary key (ID_ENVIO)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TEMP_REC
prompt =======================
prompt
create table RPV.TEMP_REC
(
  num_fich        NUMBER(38) not null,
  tipo_form       VARCHAR2(1) not null,
  originator      VARCHAR2(180) not null,
  subject         VARCHAR2(80) not null,
  post_scheng     VARCHAR2(1) not null,
  importance      VARCHAR2(12),
  body_file       VARCHAR2(120),
  submission_time VARCHAR2(15)
)
tablespace TS_RPV_1
  pctfree 5
  pctused 60
  initrans 1
  maxtrans 255
  storage
  (
    initial 32400K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.TEMP_REC.num_fich
  is 'Sequencia criada por cada recebimento';
comment on column RPV.TEMP_REC.tipo_form
  is 'Tipo de formulário recebido';
comment on column RPV.TEMP_REC.originator
  is 'Alias de quem enviou a mensagem';
comment on column RPV.TEMP_REC.subject
  is 'Referência do formulário (deverá ser igual ao campo 001)';
comment on column RPV.TEMP_REC.post_scheng
  is 'Recebido de <S>chengen ou <P>ostos';
comment on column RPV.TEMP_REC.importance
  is 'Importancia desse formulário';
comment on column RPV.TEMP_REC.body_file
  is 'Posição do ficheiro de detalhe';
comment on column RPV.TEMP_REC.submission_time
  is 'Data e hora a que a mensagem foi submetida';
alter table RPV.TEMP_REC
  add constraint RECEBE_PK primary key (NUM_FICH)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 4280K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table RECEP
prompt ====================
prompt
create table RPV.RECEP
(
  tip_form_recep       VARCHAR2(1) not null,
  ref_ped_recep        VARCHAR2(19) not null,
  num_msg_recep        NUMBER(2) not null,
  tip_orig             VARCHAR2(1) not null,
  importanc_recep      VARCHAR2(1) not null,
  assunto              VARCHAR2(50),
  dat_recep            DATE,
  uti_recep            VARCHAR2(30),
  est_recep            VARCHAR2(1) not null,
  dat_chegou           DATE not null,
  endereco_orig        VARCHAR2(120),
  req_cod_pos          NUMBER(4),
  req_ano_req          NUMBER(4),
  req_num_req          NUMBER(3),
  formi_cod_ser        VARCHAR2(3),
  formi_ano_form       NUMBER(4),
  formi_num_form       NUMBER(7),
  formi_num_ord        NUMBER(2),
  formi_ord_form_i     NUMBER(2),
  for_ano_form         NUMBER(4),
  for_num_form         NUMBER(7),
  forme_ref_form_e     VARCHAR2(19),
  forme_ord_form_e     NUMBER(2),
  formr_ano_form       NUMBER(4),
  formr_num_form       NUMBER(7),
  formr_ord_form_r     NUMBER(2),
  formb_ref_form_b     VARCHAR2(19),
  formb_ord_form_b     NUMBER(2),
  vin_num_vin          VARCHAR2(9),
  recebe_num_fich      NUMBER(38),
  formz_ano_form       NUMBER(4),
  formz_num_form       NUMBER(7),
  posred_ano_form      NUMBER(4),
  posred_num_form      NUMBER(7),
  posred_ord_pos_redir NUMBER(2),
  seq_recep            NUMBER(10)
)
tablespace TS_RPV_1
  pctfree 40
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 72872K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.RECEP.tip_form_recep
  is 'Tipo de Formulário';
comment on column RPV.RECEP.ref_ped_recep
  is 'Referência do Formulário';
comment on column RPV.RECEP.num_msg_recep
  is 'Numero da Mensagem';
comment on column RPV.RECEP.tip_orig
  is 'Tipo de Origem (Schengen, Posto)';
comment on column RPV.RECEP.importanc_recep
  is 'Importância (na Comunicação)';
comment on column RPV.RECEP.assunto
  is 'Asunto da Recepção';
comment on column RPV.RECEP.dat_recep
  is 'Data de Recepção';
comment on column RPV.RECEP.est_recep
  is 'Estado da Recepção';
comment on column RPV.RECEP.dat_chegou
  is 'Data da chegada do formulário';
comment on column RPV.RECEP.endereco_orig
  is 'Alias da Origem';
comment on column RPV.RECEP.req_cod_pos
  is 'Código do Posto';
comment on column RPV.RECEP.req_ano_req
  is 'Ano da Requisição';
comment on column RPV.RECEP.req_num_req
  is 'Numero da Requisição (no Ano)';
comment on column RPV.RECEP.formi_cod_ser
  is 'Código de Serviço';
comment on column RPV.RECEP.formi_ano_form
  is 'Ano do Pedido';
comment on column RPV.RECEP.formi_num_form
  is 'Numero do Pedido';
comment on column RPV.RECEP.formi_num_ord
  is 'Numero Sequêncial (para Reapreciações)';
comment on column RPV.RECEP.formi_ord_form_i
  is 'Numero de Sequência do Pedido';
comment on column RPV.RECEP.for_ano_form
  is 'Ano do Pedido';
comment on column RPV.RECEP.for_num_form
  is 'Numero do Pedido';
comment on column RPV.RECEP.forme_ref_form_e
  is 'Referência do Erro';
comment on column RPV.RECEP.forme_ord_form_e
  is 'Numero de Sequência relativamente ao Formulário';
comment on column RPV.RECEP.formr_ano_form
  is 'Ano do Pedido';
comment on column RPV.RECEP.formr_num_form
  is 'Numero do Pedido';
comment on column RPV.RECEP.formr_ord_form_r
  is 'Numero de Sequência de Reapreciação';
comment on column RPV.RECEP.formb_ref_form_b
  is 'Referência do Formulário';
comment on column RPV.RECEP.formb_ord_form_b
  is 'Numero de Ordem do Formulário B';
comment on column RPV.RECEP.vin_num_vin
  is 'Numero da Vinheta';
comment on column RPV.RECEP.recebe_num_fich
  is 'Sequencia criada por cada recebimento';
comment on column RPV.RECEP.formz_ano_form
  is 'Ano do Pedido';
comment on column RPV.RECEP.formz_num_form
  is 'Numero do Pedido';
comment on column RPV.RECEP.posred_ano_form
  is 'Ano do Pedido';
comment on column RPV.RECEP.posred_num_form
  is 'Numero do Pedido';
comment on column RPV.RECEP.posred_ord_pos_redir
  is 'Sequência de Redirecionamento p/ Formulário';
create index RPV.RECEBE_ASSUNTO on RPV.RECEP (ASSUNTO)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
create index RPV.RECEB_FOR_FK_I on RPV.RECEP (FOR_ANO_FORM, FOR_NUM_FORM)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 9616K
    minextents 1
    maxextents unlimited
  );
create index RPV.RECEB_FORMB_FK_I on RPV.RECEP (FORMB_REF_FORM_B, FORMB_ORD_FORM_B)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 14416K
    minextents 1
    maxextents unlimited
  );
create index RPV.RECEB_FORME_FK_I on RPV.RECEP (FORME_REF_FORM_E, FORME_ORD_FORM_E)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.RECEB_FORMI_FK_I on RPV.RECEP (FORMI_ANO_FORM, FORMI_NUM_FORM, FORMI_COD_SER, FORMI_NUM_ORD, FORMI_ORD_FORM_I)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 176K
    minextents 1
    maxextents unlimited
  );
create index RPV.RECEB_FORMR_FK_I on RPV.RECEP (FORMR_ANO_FORM, FORMR_NUM_FORM, FORMR_ORD_FORM_R)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.RECEB_FORM_Z_FK_I on RPV.RECEP (FORMZ_ANO_FORM, FORMZ_NUM_FORM)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 264K
    minextents 1
    maxextents unlimited
  );
create index RPV.RECEB_POSRED_FK_I on RPV.RECEP (POSRED_ANO_FORM, POSRED_NUM_FORM, POSRED_ORD_POS_REDIR)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.RECEB_RECEBE_FK_I on RPV.RECEP (RECEBE_NUM_FICH)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 4280K
    minextents 1
    maxextents unlimited
  );
create index RPV.RECEB_REQ_FK_I on RPV.RECEP (REQ_NUM_REQ, REQ_ANO_REQ, REQ_COD_POS)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.RECEB_VIN_FK_I on RPV.RECEP (VIN_NUM_VIN)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.RECEP_RECEP_I on RPV.RECEP (EST_RECEP, TIP_FORM_RECEP)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
create index RPV.RECEP_RECEP2_I on RPV.RECEP (EST_RECEP, TIP_ORIG)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
alter table RPV.RECEP
  add constraint RECEB_PK primary key (TIP_FORM_RECEP, REF_PED_RECEP, NUM_MSG_RECEP)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 14416K
    minextents 1
    maxextents unlimited
  );
alter table RPV.RECEP
  add constraint RECEB_FORM_Z_FK foreign key (FORMZ_ANO_FORM, FORMZ_NUM_FORM)
  references RPV.FORM_Z (ANO_FORM, NUM_FORM)
  disable;
alter table RPV.RECEP
  add constraint RECEB_RECEBE_FK foreign key (RECEBE_NUM_FICH)
  references RPV.TEMP_REC (NUM_FICH)
  disable;

prompt
prompt Creating table SONDA
prompt ====================
prompt
create table RPV.SONDA
(
  conteudo VARCHAR2(20)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TEMP_ENV
prompt =======================
prompt
create table RPV.TEMP_ENV
(
  msgid                 NUMBER(10) not null,
  primary               VARCHAR2(80) not null,
  priority              VARCHAR2(10) not null,
  importance            VARCHAR2(6) not null,
  subject               VARCHAR2(80) not null,
  enviou                VARCHAR2(1) not null,
  post_scheng           VARCHAR2(1) not null,
  recebe_num_fich       NUMBER(38),
  body_file             VARCHAR2(80),
  data_env              DATE,
  enviar_tip_form_envio VARCHAR2(1) not null,
  enviar_ref_ped_envio  VARCHAR2(19) not null,
  enviar_num_msg_envio  NUMBER(2) not null
)
tablespace TS_RPV_1
  pctfree 5
  pctused 60
  initrans 1
  maxtrans 255
  storage
  (
    initial 72872K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.TEMP_ENV.msgid
  is 'Identificador único da mensagem';
comment on column RPV.TEMP_ENV.primary
  is 'Alias do envio (igual ao Originator no caso de ser autom.)';
comment on column RPV.TEMP_ENV.priority
  is 'Prioridade do envio';
comment on column RPV.TEMP_ENV.importance
  is 'Importancia da mensagem';
comment on column RPV.TEMP_ENV.subject
  is 'Referência do formulário';
comment on column RPV.TEMP_ENV.enviou
  is 'Já foi criado ou não o ficheiro';
comment on column RPV.TEMP_ENV.post_scheng
  is 'Para <P>ostos ou <S>chengen';
comment on column RPV.TEMP_ENV.recebe_num_fich
  is 'Sequencia criada por cada recebimento';
comment on column RPV.TEMP_ENV.body_file
  is 'Posição onde foi colocado o Body';
comment on column RPV.TEMP_ENV.data_env
  is 'Data e hora em que foi colocado o envio';
comment on column RPV.TEMP_ENV.enviar_tip_form_envio
  is 'Tipo de Formulário';
comment on column RPV.TEMP_ENV.enviar_ref_ped_envio
  is 'Referência do Formulário';
comment on column RPV.TEMP_ENV.enviar_num_msg_envio
  is 'Numero da Mensagem de Envio';
create index RPV.ENVIA_ENVIAR_FK_I on RPV.TEMP_ENV (ENVIAR_TIP_FORM_ENVIO, ENVIAR_REF_PED_ENVIO, ENVIAR_NUM_MSG_ENVIO)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 21616K
    minextents 1
    maxextents unlimited
  );
create index RPV.ENVIA_RECEBE_FK_I on RPV.TEMP_ENV (RECEBE_NUM_FICH)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.TEMP_ENV_ENV_I on RPV.TEMP_ENV (ENVIOU)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
alter table RPV.TEMP_ENV
  add constraint ENVIA_PK primary key (MSGID)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 6416K
    minextents 1
    maxextents unlimited
  );
alter table RPV.TEMP_ENV
  add constraint ENVIA_ENVIAR_FK foreign key (ENVIAR_TIP_FORM_ENVIO, ENVIAR_REF_PED_ENVIO, ENVIAR_NUM_MSG_ENVIO)
  references RPV.ENVIO (TIP_FORM_ENVIO, REF_PED_ENVIO, NUM_MSG_ENVIO)
  disable;
alter table RPV.TEMP_ENV
  add constraint ENVIA_RECEBE_FK foreign key (RECEBE_NUM_FICH)
  references RPV.TEMP_REC (NUM_FICH);
alter table RPV.TEMP_ENV
  add check (enviar_tip_form_envio IN ( 'P' , 'A' , 'B' , 'C' , 'E' , 'I' , 'R' , 'Z' , 'L' , 'D' , 'V' , 'Q', 'O', 'N', 'K', 'X', 'J' ));
alter table RPV.TEMP_ENV
  add constraint TEMP_ENV_CK141131390384843
  check (enviou in ('S','N','A'));

prompt
prompt Creating table TEMP_ENV_ANEXOS
prompt ==============================
prompt
create table RPV.TEMP_ENV_ANEXOS
(
  envia_msgid   NUMBER(10) not null,
  num_linha     NUMBER(4) not null,
  tipo_anexos   VARCHAR2(80) not null,
  nome_fich     VARCHAR2(20) not null,
  nome_fich_env VARCHAR2(80)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.TEMP_ENV_ANEXOS.num_linha
  is 'Número da linha no ficheiro Body';
comment on column RPV.TEMP_ENV_ANEXOS.nome_fich
  is 'Nome do ficheiro';
comment on column RPV.TEMP_ENV_ANEXOS.nome_fich_env
  is 'Nome do ficheiro de envio';
create index RPV.ENV_ANEXOS_ENVIA_FK_I on RPV.TEMP_ENV_ANEXOS (ENVIA_MSGID)
  tablespace TS_RPV_1
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.TEMP_ENV_ANEXOS
  add constraint ENV_ANEXOS_PK primary key (ENVIA_MSGID, NUM_LINHA)
  using index 
  tablespace TS_RPV_1
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.TEMP_ENV_ANEXOS
  add constraint ENV_ANEXOS_ENVIA_FK foreign key (ENVIA_MSGID)
  references RPV.TEMP_ENV (MSGID);

prompt
prompt Creating table TEMP_ENV_DETALHE
prompt ===============================
prompt
create table RPV.TEMP_ENV_DETALHE
(
  envia_msgid NUMBER(10) not null,
  num_linha   NUMBER(4) not null,
  num_campo   VARCHAR2(5),
  conteudo    VARCHAR2(120)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 368744K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.TEMP_ENV_DETALHE.envia_msgid
  is 'Identificador único da mensagem';
comment on column RPV.TEMP_ENV_DETALHE.num_linha
  is 'Número da linha no ficheiro Body';
comment on column RPV.TEMP_ENV_DETALHE.num_campo
  is 'Número do campo no formulário';
comment on column RPV.TEMP_ENV_DETALHE.conteudo
  is 'Descrição do campo';
create index RPV.ENV_DET_ENVIA_FK_I on RPV.TEMP_ENV_DETALHE (ENVIA_MSGID)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 245840K
    minextents 1
    maxextents unlimited
  );
alter table RPV.TEMP_ENV_DETALHE
  add constraint ENV_DET_PK primary key (NUM_LINHA, ENVIA_MSGID)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 553080K
    minextents 1
    maxextents unlimited
  );
alter table RPV.TEMP_ENV_DETALHE
  add constraint ENV_DET_ENVIA_FK foreign key (ENVIA_MSGID)
  references RPV.TEMP_ENV (MSGID);

prompt
prompt Creating table TEMP_ENV_VIS
prompt ===========================
prompt
create table RPV.TEMP_ENV_VIS
(
  id_env_vis      NUMBER(17) not null,
  ano_form        NUMBER(4),
  num_form        NUMBER(7),
  cod_comm_vistos NUMBER(3) not null,
  message_xml     CLOB not null,
  cri_uti         VARCHAR2(20) not null,
  cri_dat         DATE not null
)
tablespace TS_RPV_1
  pctfree 5
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 10M
    minextents 1
    maxextents unlimited
  );
create index RPV.TEMP_ENV_VIS_I_1 on RPV.TEMP_ENV_VIS (ANO_FORM, NUM_FORM, COD_COMM_VISTOS)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
create index RPV.TEMP_ENV_VIS_I_2 on RPV.TEMP_ENV_VIS (COD_COMM_VISTOS, CRI_DAT)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
alter table RPV.TEMP_ENV_VIS
  add primary key (ID_ENV_VIS)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
alter table RPV.TEMP_ENV_VIS
  add constraint TEMP_ENV_VIS_FK foreign key (ANO_FORM, NUM_FORM)
  references RPV.FORMULARIO (ANO_FORM, NUM_FORM);

prompt
prompt Creating table TEMP_ENV_VISMAIL
prompt ===============================
prompt
create table RPV.TEMP_ENV_VISMAIL
(
  messageid      VARCHAR2(50) not null,
  tipo           VARCHAR2(2) not null,
  refnumberexch  VARCHAR2(50) not null,
  visappnumber   VARCHAR2(50),
  urgentcase     VARCHAR2(5),
  datetimesend   VARCHAR2(50),
  senderid       VARCHAR2(50),
  countrysend    VARCHAR2(50),
  locationsend   VARCHAR2(50),
  namesend       VARCHAR2(100),
  typesend       VARCHAR2(50),
  countryrec     VARCHAR2(50),
  locationrec    VARCHAR2(50),
  namerec        VARCHAR2(100),
  typerec        VARCHAR2(50),
  msgtxtmand     VARCHAR2(4000),
  msgtxtoptional VARCHAR2(4000),
  retrycount     VARCHAR2(50) not null,
  cri_uti        VARCHAR2(20),
  cri_dat        DATE,
  dir_comm       VARCHAR2(1),
  cod_pais_sch   VARCHAR2(3)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 2M
    minextents 1
    maxextents unlimited
  );
create index RPV.TEMP_ENV_VISMAIL_I_1 on RPV.TEMP_ENV_VISMAIL (VISAPPNUMBER, TIPO)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 1M
    minextents 1
    maxextents unlimited
  );
create unique index RPV.TEMP_ENV_VISMAIL_PK on RPV.TEMP_ENV_VISMAIL (MESSAGEID)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TEMP_FOTO_KIOSK
prompt ==============================
prompt
create table RPV.TEMP_FOTO_KIOSK
(
  id        NUMBER(5) not null,
  foto_name VARCHAR2(50),
  foto      BLOB
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table RPV.TEMP_FOTO_KIOSK
  add constraint TEMP_FOTO_KIOSK_PK primary key (ID)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TEMP_IMAGENS
prompt ===========================
prompt
create table RPV.TEMP_IMAGENS
(
  num_ordem      NUMBER(8) not null,
  num_doc_viagem VARCHAR2(20) not null,
  usado          VARCHAR2(1) not null,
  foto           BFILE not null,
  cri_dat        VARCHAR2(20) not null,
  cri_uti        VARCHAR2(30) not null,
  biometria      BFILE
)
tablespace TS_RPV_1
  pctfree 20
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 20M
    minextents 1
    maxextents unlimited
  );
create index RPV.TEMP_IMAGENS_DOC_VIAGEM_I on RPV.TEMP_IMAGENS (NUM_DOC_VIAGEM)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
alter table RPV.TEMP_IMAGENS
  add constraint TEMP_IMAGENS_PK primary key (NUM_ORDEM)
  using index 
  tablespace TS_RPV_1
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 2864K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TEMP_IMAGENS_DET
prompt ===============================
prompt
create table RPV.TEMP_IMAGENS_DET
(
  num_ordem   NUMBER(8) not null,
  seq_interna NUMBER(2) not null,
  ano_form    NUMBER(4) not null,
  num_form    NUMBER(7) not null,
  ref_form_2  VARCHAR2(14) not null,
  cri_dat     VARCHAR2(20) not null,
  cri_uti     VARCHAR2(30) not null,
  enviada     VARCHAR2(1) default 'N' not null,
  dat_envio   DATE
)
tablespace TS_RPV_1
  pctfree 20
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 30M
    minextents 1
    maxextents unlimited
  );
create index RPV.TEMP_IMAGENS_DET_FOR_I on RPV.TEMP_IMAGENS_DET (REF_FORM_2)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
create unique index RPV.TEMP_IMAGENS_DET_I on RPV.TEMP_IMAGENS_DET (ANO_FORM, NUM_FORM)
  tablespace TS_RPV_2
  pctfree 0
  initrans 2
  maxtrans 255
  storage
  (
    initial 10M
    minextents 1
    maxextents unlimited
  );
alter table RPV.TEMP_IMAGENS_DET
  add constraint TEMP_IMAGENS_DET_PK primary key (NUM_ORDEM, SEQ_INTERNA)
  using index 
  tablespace TS_RPV_1
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 4280K
    minextents 1
    maxextents unlimited
  );
alter table RPV.TEMP_IMAGENS_DET
  add constraint TEMP_IMAGENS_DET_FK foreign key (NUM_ORDEM)
  references RPV.TEMP_IMAGENS (NUM_ORDEM);
alter table RPV.TEMP_IMAGENS_DET
  add constraint TEMP_IMAGENS_DET_C
  check (enviada IN ( 'S','N','I'));

prompt
prompt Creating table TEMP_READ_VISMAIL
prompt ================================
prompt
create table RPV.TEMP_READ_VISMAIL
(
  id      INTEGER not null,
  theclob CLOB
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table RPV.TEMP_READ_VISMAIL
  add primary key (ID)
  using index 
  tablespace TS_RPV_1
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TEMP_REC_ANEXOS
prompt ==============================
prompt
create table RPV.TEMP_REC_ANEXOS
(
  recebe_num_fich NUMBER(10) not null,
  num_linha       NUMBER(4) not null,
  tipo_anexos     VARCHAR2(80) not null,
  nome_fich       VARCHAR2(20) not null,
  nome_fich_rec   VARCHAR2(80)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.TEMP_REC_ANEXOS.num_linha
  is 'Número da linha no ficheiro Body';
comment on column RPV.TEMP_REC_ANEXOS.nome_fich
  is 'Nome do ficheiro';
comment on column RPV.TEMP_REC_ANEXOS.nome_fich_rec
  is 'Nome do ficheiro de recebimnento';
create index RPV.ENV_ANEXOS_RECEBE_FK_I on RPV.TEMP_REC_ANEXOS (RECEBE_NUM_FICH)
  tablespace TS_RPV_1
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.TEMP_REC_ANEXOS
  add constraint REC_ANEXOS_PK primary key (RECEBE_NUM_FICH, NUM_LINHA)
  using index 
  tablespace TS_RPV_1
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.TEMP_REC_ANEXOS
  add constraint REC_ANEXOS_RECEBE_FK foreign key (RECEBE_NUM_FICH)
  references RPV.TEMP_REC (NUM_FICH)
  disable;

prompt
prompt Creating table TEMP_REC_DETALHE
prompt ===============================
prompt
create table RPV.TEMP_REC_DETALHE
(
  recebe_num_fich NUMBER(38) not null,
  num_linha       NUMBER(4) not null,
  num_campo       VARCHAR2(5),
  conteudo        VARCHAR2(120)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 32400K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.TEMP_REC_DETALHE.recebe_num_fich
  is 'Sequencia criada por cada recebimento';
comment on column RPV.TEMP_REC_DETALHE.num_linha
  is 'Número da linha no Body do ficheiro recebido.';
comment on column RPV.TEMP_REC_DETALHE.num_campo
  is 'Número do campo do formulário';
comment on column RPV.TEMP_REC_DETALHE.conteudo
  is 'Descrição do campo';
create index RPV.REC_DET_RECEBE_FK_I on RPV.TEMP_REC_DETALHE (RECEBE_NUM_FICH)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 21616K
    minextents 1
    maxextents unlimited
  );
alter table RPV.TEMP_REC_DETALHE
  add constraint REC_DET_PK primary key (RECEBE_NUM_FICH, NUM_LINHA)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 21616K
    minextents 1
    maxextents unlimited
  );
alter table RPV.TEMP_REC_DETALHE
  add constraint REC_DET_RECEBE_FK foreign key (RECEBE_NUM_FICH)
  references RPV.TEMP_REC (NUM_FICH)
  disable;

prompt
prompt Creating table TEMP_REC_VIS
prompt ===========================
prompt
create table RPV.TEMP_REC_VIS
(
  id_rec_vis      NUMBER(17) not null,
  ano_form        NUMBER(4),
  num_form        NUMBER(7),
  cod_comm_vistos NUMBER(3) not null,
  message_xml     CLOB not null,
  cri_uti         VARCHAR2(20) not null,
  cri_dat         DATE not null,
  num_ordem       NUMBER(7) not null,
  tratada         VARCHAR2(1) not null,
  de_decision_id  VARCHAR2(17),
  message_xml_vis CLOB
)
tablespace TS_RPV_1
  pctfree 5
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 10M
    minextents 1
    maxextents unlimited
  );
create index RPV.TEMP_REC_VIS_I on RPV.TEMP_REC_VIS (ANO_FORM, NUM_FORM, COD_COMM_VISTOS, TRATADA)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
create index RPV.TEMP_REC_VIS_I_2 on RPV.TEMP_REC_VIS (COD_COMM_VISTOS, TRATADA)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
alter table RPV.TEMP_REC_VIS
  add primary key (ID_REC_VIS, COD_COMM_VISTOS, NUM_ORDEM)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );
alter table RPV.TEMP_REC_VIS
  add constraint TEMP_REC_VIS_FK foreign key (ANO_FORM, NUM_FORM)
  references RPV.FORMULARIO (ANO_FORM, NUM_FORM);

prompt
prompt Creating table TEMP_REC_VISMAIL
prompt ===============================
prompt
create table RPV.TEMP_REC_VISMAIL
(
  messageid      VARCHAR2(50) not null,
  tipo           VARCHAR2(2) not null,
  refnumberexch  VARCHAR2(50),
  visappnumber   VARCHAR2(50),
  urgentcase     VARCHAR2(5),
  datetimesend   VARCHAR2(50),
  senderid       VARCHAR2(50),
  countrysend    VARCHAR2(50),
  locationsend   VARCHAR2(50),
  namesend       VARCHAR2(100),
  typesend       VARCHAR2(50),
  countryrec     VARCHAR2(50),
  locationrec    VARCHAR2(50),
  namerec        VARCHAR2(50),
  typerec        VARCHAR2(50),
  msgtxtmand     VARCHAR2(4000),
  msgtxtoptional VARCHAR2(4000),
  retrycount     VARCHAR2(50) not null,
  cri_uti        VARCHAR2(20),
  cri_dat        DATE,
  lido           VARCHAR2(1)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 2M
    minextents 1
    maxextents unlimited
  );
create index RPV.TEMP_REC_VIS_I_1 on RPV.TEMP_REC_VISMAIL (VISAPPNUMBER, TIPO)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 1M
    minextents 1
    maxextents unlimited
  );
create index RPV.TEMP_REC_VISMAIL_II on RPV.TEMP_REC_VISMAIL (MESSAGEID)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 1M
    minextents 1
    maxextents unlimited
  );
create unique index RPV.TEMP_REC_VISMAIL_PK on RPV.TEMP_REC_VISMAIL (MESSAGEID, RETRYCOUNT)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TEMP_REC_VIS_WS
prompt ==============================
prompt
create table RPV.TEMP_REC_VIS_WS
(
  identif NUMBER(8) not null,
  msgid   NUMBER(17) not null,
  corrid  NUMBER(17) not null,
  msg     CLOB not null,
  tratada VARCHAR2(1) not null
)
tablespace TS_RPV_1
  pctfree 5
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 10M
    minextents 1
    maxextents unlimited
  );
create index RPV.TEMP_REC_VIS_WS_I on RPV.TEMP_REC_VIS_WS (TRATADA)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 15M
    minextents 1
    maxextents unlimited
  );
alter table RPV.TEMP_REC_VIS_WS
  add primary key (IDENTIF)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TEMP_REPS
prompt ========================
prompt
create table RPV.TEMP_REPS
(
  post_scheng VARCHAR2(1) not null,
  envia_msgid NUMBER(10),
  delivery    VARCHAR2(15),
  data_reg    VARCHAR2(20),
  recip       VARCHAR2(180),
  data_env    VARCHAR2(20),
  reason      VARCHAR2(160)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 48592K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.TEMP_REPS.post_scheng
  is '<P>osto, <S>chengen ou <C>entral';
comment on column RPV.TEMP_REPS.envia_msgid
  is 'Identificador único da mensagem';
comment on column RPV.TEMP_REPS.delivery
  is '<Delivery> ou <Non-Delivery>';
comment on column RPV.TEMP_REPS.data_reg
  is 'Data de registo da mensagem';
comment on column RPV.TEMP_REPS.recip
  is 'Endereço para onde foi enviada a mensagem';
comment on column RPV.TEMP_REPS.data_env
  is 'Data em que foi enviada a mensagem';
comment on column RPV.TEMP_REPS.reason
  is 'Razão da não entrega';
create index RPV.REPS_ENVIA_FK_I on RPV.TEMP_REPS (ENVIA_MSGID)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 9616K
    minextents 1
    maxextents unlimited
  );
alter table RPV.TEMP_REPS
  add constraint REPS_ENVIA_FK foreign key (ENVIA_MSGID)
  references RPV.TEMP_ENV (MSGID);

prompt
prompt Creating table TESTE
prompt ====================
prompt
create table RPV.TESTE
(
  nome VARCHAR2(100)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TESTE_DIR
prompt ========================
prompt
create table RPV.TESTE_DIR
(
  nome VARCHAR2(100)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TIPO_ANEXOS
prompt ==========================
prompt
create table RPV.TIPO_ANEXOS
(
  anexo_id NUMBER(1) not null,
  descr    VARCHAR2(80) not null,
  extensao VARCHAR2(5) not null,
  filtro   VARCHAR2(80) not null,
  programa VARCHAR2(100) not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create unique index RPV.PK_TIPO_ANEXOS on RPV.TIPO_ANEXOS (ANEXO_ID)
  tablespace TS_RPV_1
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TIPO_COMM_VISTOS
prompt ===============================
prompt
create table RPV.TIPO_COMM_VISTOS
(
  cod_comm_vistos NUMBER(3) not null,
  descricao       VARCHAR2(50) not null,
  contract        VARCHAR2(7) not null,
  operation       VARCHAR2(7) not null
)
tablespace TS_RPV_1
  pctfree 5
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 504K
    minextents 1
    maxextents unlimited
  );
alter table RPV.TIPO_COMM_VISTOS
  add primary key (COD_COMM_VISTOS)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 104K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TREC_VISMAIL_ATTACHGROUP
prompt =======================================
prompt
create table RPV.TREC_VISMAIL_ATTACHGROUP
(
  id_trec        NUMBER(10) not null,
  refnumberexch  VARCHAR2(50) not null,
  dir_comm       VARCHAR2(1) not null,
  messageid      VARCHAR2(50) not null,
  tipo           VARCHAR2(2) not null,
  msgtext        VARCHAR2(4000),
  msgattach      CLOB,
  msgattach_fich BLOB,
  nome_fich      VARCHAR2(200),
  typedoc        VARCHAR2(2),
  typeattach     VARCHAR2(2),
  cri_uti        VARCHAR2(20),
  cri_dat        DATE
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table RPV.TREC_VISMAIL_ATTACHGROUP
  add constraint TREC_VISMAIL_PK primary key (ID_TREC)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 104K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TREC_VISMAIL_ATTACHREQGROUP
prompt ==========================================
prompt
create table RPV.TREC_VISMAIL_ATTACHREQGROUP
(
  messageid VARCHAR2(50),
  tipo      VARCHAR2(2),
  msgtext   VARCHAR2(4000),
  typedoc   VARCHAR2(2),
  cri_uti   VARCHAR2(20),
  cri_dat   DATE
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table T_VISTO_ENTR
prompt ===========================
prompt
create table RPV.T_VISTO_ENTR
(
  tip_vis VARCHAR2(2) not null,
  num_ent VARCHAR2(1) not null,
  defau   VARCHAR2(1) not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.T_VISTO_ENTR.tip_vis
  is 'Tipo de Visto';
comment on column RPV.T_VISTO_ENTR.num_ent
  is 'Nº de Entradas';
comment on column RPV.T_VISTO_ENTR.defau
  is 'Valor por Default (desta Relação) ? (S/N)';
create index RPV.VISTENT_TIPVIS_FK_I on RPV.T_VISTO_ENTR (TIP_VIS)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.T_VISTO_ENTR
  add constraint VISTENT_PK primary key (TIP_VIS, NUM_ENT)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.T_VISTO_ENTR
  add constraint VISTENT_TIPVIS_FK foreign key (TIP_VIS)
  references RPV.T_VISTO (TIP_VIS);
alter table RPV.T_VISTO_ENTR
  add check ( num_ent IN ( '0' , '1' , '2' , 'M' )  );
alter table RPV.T_VISTO_ENTR
  add check ( num_ent IN ( '0' , '1' , '2' , 'M' )  );
alter table RPV.T_VISTO_ENTR
  add check ( defau IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO_ENTR
  add check ( defau IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO_ENTR
  add check ( defau IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO_ENTR
  add check ( defau IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO_ENTR
  add check ( defau IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO_ENTR
  add check ( defau IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO_ENTR
  add check ( defau IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO_ENTR
  add check ( num_ent IN ( '0' , '1' , '2' , 'M' )  );
alter table RPV.T_VISTO_ENTR
  add check ( defau IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO_ENTR
  add check ( defau IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO_ENTR
  add check ( defau IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO_ENTR
  add check ( num_ent IN ( '0' , '1' , '2' , 'M' )  );
alter table RPV.T_VISTO_ENTR
  add check ( num_ent IN ( '0' , '1' , '2' , 'M' )  );
alter table RPV.T_VISTO_ENTR
  add check ( defau IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO_ENTR
  add check ( defau IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO_ENTR
  add check ( defau IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO_ENTR
  add check ( defau IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO_ENTR
  add check ( defau IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO_ENTR
  add check ( defau IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO_ENTR
  add check ( defau IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO_ENTR
  add check ( defau IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO_ENTR
  add check ( num_ent IN ( '0' , '1' , '2' , 'M' )  );
alter table RPV.T_VISTO_ENTR
  add check ( defau IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO_ENTR
  add check ( defau IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO_ENTR
  add check ( defau IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO_ENTR
  add check ( defau IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO_ENTR
  add check ( defau IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO_ENTR
  add check ( defau IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO_ENTR
  add check ( defau IN ( 'S' , 'N' )  );
alter table RPV.T_VISTO_ENTR
  add check ( defau IN ( 'S' , 'N' )  );

prompt
prompt Creating table UTI
prompt ==================
prompt
create table RPV.UTI
(
  cod_uti     VARCHAR2(6) not null,
  nome_uti    VARCHAR2(50) not null,
  username    VARCHAR2(30) not null,
  cri_dat     VARCHAR2(20) default 'sysdate' not null,
  cri_uti     VARCHAR2(30) default 'CG_$CTRL.USER' not null,
  alt_dat     VARCHAR2(20) default 'sysdate',
  alt_uti     VARCHAR2(30) default 'CG_$CTRL.USER',
  cod_pos     NUMBER(4),
  cod_ser     VARCHAR2(3),
  cod_carg    VARCHAR2(6) not null,
  path_anexos VARCHAR2(120)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.UTI.cod_uti
  is 'Código de Utilizador';
comment on column RPV.UTI.nome_uti
  is 'Nome do Utilizador';
comment on column RPV.UTI.username
  is 'Username';
comment on column RPV.UTI.cri_dat
  is 'Data de Criação do Registo.';
comment on column RPV.UTI.cri_uti
  is 'Utilizador que realizou a  Criação do Registo.';
comment on column RPV.UTI.alt_dat
  is 'Data deAlteração do Registo.';
comment on column RPV.UTI.alt_uti
  is 'Utilizador que realizou a Última Alteração';
comment on column RPV.UTI.cod_pos
  is 'Código do Posto';
comment on column RPV.UTI.cod_ser
  is 'Código de Serviço';
comment on column RPV.UTI.cod_carg
  is 'Código de Cargo do Utilizador';
create index RPV.UTI_CARGUTI_FK_I on RPV.UTI (COD_CARG)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.UTI_POS_FK_I on RPV.UTI (COD_POS)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
create index RPV.UTI_SER_FK_I on RPV.UTI (COD_SER)
  tablespace TS_RPV_2
  pctfree 40
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.UTI
  add constraint UTI_PK primary key (COD_UTI)
  using index 
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.UTI
  add constraint UTI_CARGUTI_FK foreign key (COD_CARG)
  references RPV.CARGO_UTI (COD_CARG);
alter table RPV.UTI
  add constraint UTI_POS_FK foreign key (COD_POS)
  references RPV.POSTO (COD_POS);
alter table RPV.UTI
  add constraint UTI_SER_FK foreign key (COD_SER)
  references RPV.SERVICO (COD_SER);

prompt
prompt Creating table UTI_TMP
prompt ======================
prompt
create table RPV.UTI_TMP
(
  fich  VARCHAR2(12),
  linha NUMBER(5),
  texto VARCHAR2(255)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table VAGAS
prompt ====================
prompt
create table RPV.VAGAS
(
  cod_pos    NUMBER(4),
  id_periodo NUMBER(2),
  num_vagas  NUMBER(2)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table VIN_TRANSMITIR
prompt =============================
prompt
create table RPV.VIN_TRANSMITIR
(
  num_vin VARCHAR2(9) not null,
  cri_dat VARCHAR2(20) default 'sysdate' not null,
  cri_uti VARCHAR2(30) not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.VIN_TRANSMITIR.num_vin
  is 'Numero da Vinheta';
comment on column RPV.VIN_TRANSMITIR.cri_dat
  is 'Data de Criação do Registo.';
comment on column RPV.VIN_TRANSMITIR.cri_uti
  is 'Utilizador que realizou a  Criação do Registo.';
alter table RPV.VIN_TRANSMITIR
  add constraint VINTRANS_PK primary key (NUM_VIN)
  using index 
  tablespace TS_RPV_1
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
alter table RPV.VIN_TRANSMITIR
  add constraint VINTRANS_VIN_FK foreign key (NUM_VIN)
  references RPV.VINHETA (NUM_VIN);

prompt
prompt Creating table VIS_LINK_STATUS_DETALHES
prompt =======================================
prompt
create table RPV.VIS_LINK_STATUS_DETALHES
(
  ano_form        NUMBER(4) not null,
  num_form        NUMBER(7) not null,
  cod_pare_vis    VARCHAR2(7) not null,
  cri_uti         VARCHAR2(30) not null,
  cri_dat         VARCHAR2(20) not null,
  vis_application VARCHAR2(50) not null
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 1M
    minextents 1
    maxextents unlimited
  );
alter table RPV.VIS_LINK_STATUS_DETALHES
  add constraint VIS_LINK_STATUS_DETALHES_PK primary key (ANO_FORM, NUM_FORM, COD_PARE_VIS, VIS_APPLICATION)
  using index 
  tablespace USERS
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 504K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table VISMAIL_AUX
prompt ==========================
prompt
create table RPV.VISMAIL_AUX
(
  campoa      CLOB,
  campob      BLOB,
  campoxml    SYS.XMLTYPE,
  campochar   VARCHAR2(10),
  camponumber NUMBER
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
create index RPV.VISMAIL_AUX_I on RPV.VISMAIL_AUX (CAMPONUMBER)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 10M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table VISMAIL_TEMP
prompt ===========================
prompt
create table RPV.VISMAIL_TEMP
(
  txt_line VARCHAR2(512)
)
organization external
(
  type ORACLE_LOADER
  default directory VISMAIL_MSG
  access parameters 
  (
    records delimited by newline
    fields
    (txt_line char(512))
  )
)
reject limit 0;
alter table RPV.VISMAIL_TEMP
  project column ;

prompt
prompt Creating table VISTOS_3_ANOS
prompt ============================
prompt
create table RPV.VISTOS_3_ANOS
(
  ano_form           NUMBER(4) not null,
  num_form           NUMBER(7) not null,
  dat_vali_visto_ini VARCHAR2(10),
  dat_vali_visto_fim VARCHAR2(10),
  num_visto          VARCHAR2(20)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 104K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.VISTOS_3_ANOS.ano_form
  is 'ano do formulario do visto';
comment on column RPV.VISTOS_3_ANOS.num_form
  is 'numero do formulario do visto';
comment on column RPV.VISTOS_3_ANOS.dat_vali_visto_ini
  is 'data inicio da validade do visto 3 anos';
comment on column RPV.VISTOS_3_ANOS.dat_vali_visto_fim
  is 'data fim da validade do visto 3 anos';
comment on column RPV.VISTOS_3_ANOS.num_visto
  is 'numero do visto';
create index RPV.VISTOS_3_ANOS_FOR_I on RPV.VISTOS_3_ANOS (ANO_FORM, NUM_FORM)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table VISTOS_3_ANOS_WEB
prompt ================================
prompt
create table RPV.VISTOS_3_ANOS_WEB
(
  num_form_web       VARCHAR2(11) not null,
  dat_vali_visto_ini VARCHAR2(10),
  dat_vali_visto_fim VARCHAR2(10),
  num_visto          VARCHAR2(20)
)
tablespace TS_RPV_1
  pctfree 10
  pctused 40
  initrans 1
  maxtrans 255
  storage
  (
    initial 104K
    minextents 1
    maxextents unlimited
  );
comment on column RPV.VISTOS_3_ANOS_WEB.num_form_web
  is 'numero reservado do formulario web';
comment on column RPV.VISTOS_3_ANOS_WEB.dat_vali_visto_ini
  is 'data inicio da validade do visto 3 anos';
comment on column RPV.VISTOS_3_ANOS_WEB.dat_vali_visto_fim
  is 'data fim da validade do visto 3 anos';
comment on column RPV.VISTOS_3_ANOS_WEB.num_visto
  is 'numero do visto';
create index RPV.VISTOS_3_ANOS_WEB_I on RPV.VISTOS_3_ANOS_WEB (NUM_FORM_WEB)
  tablespace TS_RPV_2
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating sequence AGENDAMENTOS_SEQ
prompt ==================================
prompt
create sequence RPV.AGENDAMENTOS_SEQ
minvalue 1
maxvalue 9999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence ENVIO_SEQ_ENVIO
prompt =================================
prompt
create sequence RPV.ENVIO_SEQ_ENVIO
minvalue 1
maxvalue 99999999999999999999
start with 991578
increment by 1
cache 20
cycle;

prompt
prompt Creating sequence RECEP_SEQ_RECEP
prompt =================================
prompt
create sequence RPV.RECEP_SEQ_RECEP
minvalue 1
maxvalue 9999999999
start with 1
increment by 1
cache 20
cycle;

prompt
prompt Creating sequence SEQ_AGEND_TEL
prompt ===============================
prompt
create sequence RPV.SEQ_AGEND_TEL
minvalue 1
maxvalue 9999999999999
start with 980
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_ANEXOS
prompt ============================
prompt
create sequence RPV.SEQ_ANEXOS
minvalue 1
maxvalue 9999999999999
start with 13836
increment by 1
cache 20
cycle;

prompt
prompt Creating sequence SEQ_BUG_VIS
prompt =============================
prompt
create sequence RPV.SEQ_BUG_VIS
minvalue 1
maxvalue 999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_FORM_E
prompt ============================
prompt
create sequence RPV.SEQ_FORM_E
minvalue 1
maxvalue 99999999999999999999
start with 21
increment by 1
cache 20
cycle;

prompt
prompt Creating sequence SEQ_FORM_EST
prompt ==============================
prompt
create sequence RPV.SEQ_FORM_EST
minvalue 1
maxvalue 99999999999999999999
start with 3433053
increment by 1
cache 20
cycle;

prompt
prompt Creating sequence SEQ_FORMULARIO
prompt ================================
prompt
create sequence RPV.SEQ_FORMULARIO
minvalue 780
maxvalue 9999999
start with 471826
increment by 1
cache 20
cycle;

prompt
prompt Creating sequence SEQ_FOTOS
prompt ===========================
prompt
create sequence RPV.SEQ_FOTOS
minvalue 1
maxvalue 99999999999999999999
start with 619992
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_FOTOS_KIOSK
prompt =================================
prompt
create sequence RPV.SEQ_FOTOS_KIOSK
minvalue 1
maxvalue 99999999999999999999
start with 237
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_GRUPOS
prompt ============================
prompt
create sequence RPV.SEQ_GRUPOS
minvalue 1
maxvalue 999999999
start with 24156
increment by 1
cache 20
order;

prompt
prompt Creating sequence SEQ_NUM_VIN_INT
prompt =================================
prompt
create sequence RPV.SEQ_NUM_VIN_INT
minvalue 1
maxvalue 999999999
start with 1
increment by 1
cache 20
cycle;

prompt
prompt Creating sequence SEQ_POS_FORM
prompt ==============================
prompt
create sequence RPV.SEQ_POS_FORM
minvalue 1
maxvalue 999999
start with 1
increment by 1
cache 20
cycle;

prompt
prompt Creating sequence SEQ_POS_FORMB
prompt ===============================
prompt
create sequence RPV.SEQ_POS_FORMB
minvalue 1
maxvalue 999999
start with 1
increment by 1
cache 20
cycle;

prompt
prompt Creating sequence SEQ_POS_FORME
prompt ===============================
prompt
create sequence RPV.SEQ_POS_FORME
minvalue 1
maxvalue 999999
start with 1
increment by 1
cache 20
cycle;

prompt
prompt Creating sequence SEQ_REC_VIS
prompt =============================
prompt
create sequence RPV.SEQ_REC_VIS
minvalue 1
maxvalue 99999999
start with 1
increment by 1
nocache;

prompt
prompt Creating sequence SEQ_VISMAIL
prompt =============================
prompt
create sequence RPV.SEQ_VISMAIL
minvalue 0
maxvalue 999999999
start with 1301
increment by 1
cache 20
order;

prompt
prompt Creating sequence SEQ_VIS_MESSAGEID
prompt ===================================
prompt
create sequence RPV.SEQ_VIS_MESSAGEID
minvalue 0
maxvalue 999999999
start with 158335
increment by 1
cache 20
order;

prompt
prompt Creating sequence SEQ_VIS_NUMORDEM
prompt ==================================
prompt
create sequence RPV.SEQ_VIS_NUMORDEM
minvalue 0
maxvalue 9999999
start with 1
increment by 1
cache 20
order;

prompt
prompt Creating sequence TEMP_ENV_MSGID
prompt ================================
prompt
create sequence RPV.TEMP_ENV_MSGID
minvalue 1
maxvalue 9999999999
start with 941096
increment by 1
cache 20
cycle;

prompt
prompt Creating sequence TEMP_NUM_FICH
prompt ===============================
prompt
create sequence RPV.TEMP_NUM_FICH
minvalue 1
maxvalue 99999999999999999999
start with 829837
increment by 1
cache 20
cycle;

prompt
prompt Creating view GRUPOS_DET_V
prompt ==========================
prompt
create or replace force view rpv.grupos_det_v as
select gd.ID_GRUPO, tg.COD_TIPO_GRUPO , tg.DESCRICAO tp_grupo_desc,gd.COD_POS,to_char(gd.CRI_DAT,'YYYY/MM/DD hh24:mi:ss') CRI_DAT,gd.cri_uti,gd.REF_FORM_2,
f.nome,f.apel,f.dat_nasc
from grupos_det gd,formulario f,grupos g,tipo_grupos tg
where gd.REF_FORM_2=f.REF_FORM_2
and gd.ID_GRUPO=g.id_grupo
and G.COD_TIPO_GRUPO=tg.COD_TIPO_GRUPO;

prompt
prompt Creating view VER_REFERENCIAS
prompt =============================
prompt
create or replace force view rpv.ver_referencias as
select distinct fm.nome_refer referencia, sum(fm.conta) soma from (
select distinct f.nome_refer_1 nome_refer, count(*) conta
from formulario f where f.cod_pais_sch_ref = 'PRT'
and f.nome_refer_1 is not null and f.nome_refer_1 <> '+'
group by f.nome_refer_1
union
select distinct f.nome_refer_3 nome_refer, count(*) conta
from formulario f where f.cod_pais_sch_ref = 'PRT'
and f.nome_refer_3 is not null and f.nome_refer_3 <> '+'
group by f.nome_refer_3
order by conta) fm
group by fm.nome_refer
order by soma desc;

prompt
prompt Creating library SHELL_LIB
prompt ==========================
prompt
create or replace library RPV.SHELL_LIB
  as 'shell.dll'
/

prompt
prompt Creating java source BLOBHANDLER
prompt ================================
prompt
create or replace and compile java source named RPV.blobhandler as
import java.lang.*;
import java.sql.*;
import oracle.sql.*;
import java.io.*;

public class BlobHandler
{

  public static void ExportBlob(String myFile, BLOB myBlob) throws
Exception
  {
    // Bind the image object to the database object
    // Open streams for the output file and the blob
    File binaryFile = new File(myFile);
    FileOutputStream outStream = new FileOutputStream(binaryFile);
    InputStream inStream = myBlob.getBinaryStream();

    // Get the optimum buffer size and use this to create the read/write buffer
    int size = myBlob.getBufferSize();
    byte[] buffer = new byte[size];
    int length = -1;

    // Transfer the data
    while ((length = inStream.read(buffer)) != -1)
    {
      outStream.write(buffer, 0, length);
      outStream.flush();
    }

    // Close everything down
    inStream.close();
    outStream.close();
  }
};
/

prompt
prompt Creating java source Host
prompt =========================
prompt
create or replace and compile java source named RPV."Host" as
import java.io.*;
public class Host {
  public static void executeCommand(String command) {
    try {
      String[] finalCommand;
      if (isWindows()) {
        finalCommand = new String[4];
        // Use the appropriate path for your windows version.
        //finalCommand[0] = "C:\\winnt\\system32\\cmd.exe";    // Windows NT/2000
        finalCommand[0] = "C:\\windows\\system32\\cmd.exe";    // Windows XP/2003
        //finalCommand[0] = "C:\\windows\\syswow64\\cmd.exe";  // Windows 64-bit
        finalCommand[1] = "/y";
        finalCommand[2] = "/c";
        finalCommand[3] = command;
      }
      else {
        finalCommand = new String[3];
        finalCommand[0] = "/bin/sh";
        finalCommand[1] = "-c";
        finalCommand[2] = command;
      }
      System.out.println("Inic...");
      final Process pr = Runtime.getRuntime().exec(finalCommand);
      pr.waitFor();

      new Thread(new Runnable(){
        public void run() {
          BufferedReader br_in = null;
          try {
            br_in = new BufferedReader(new InputStreamReader(pr.getInputStream()));
            String buff = null;
            while ((buff = br_in.readLine()) != null) {
              System.out.println("Process out :" + buff);
              try {Thread.sleep(100); } catch(Exception e) {}
            }
            br_in.close();
          }
          catch (IOException ioe) {
            System.out.println("Exception caught printing process output.");
            ioe.printStackTrace();
          }
          finally {
            try {
              br_in.close();
            } catch (Exception ex) {}
          }
        }
      }).start();
  
      new Thread(new Runnable(){
        public void run() {
          BufferedReader br_err = null;
          try {
            br_err = new BufferedReader(new InputStreamReader(pr.getErrorStream()));
            String buff = null;
            while ((buff = br_err.readLine()) != null) {
              System.out.println("Process err :" + buff);
              try {Thread.sleep(100); } catch(Exception e) {}
            }
            br_err.close();
          }
          catch (IOException ioe) {
            System.out.println("Exception caught printing process error.");
            ioe.printStackTrace();
          }
          finally {
            try {
              br_err.close();
            } catch (Exception ex) {}
          }
        }
      }).start();
    System.out.println("Fim...");  
    }
    catch (Exception ex) {
      System.out.println(ex.getLocalizedMessage());
    }
  }
  
  public static boolean isWindows() {
    if (System.getProperty("os.name").toLowerCase().indexOf("windows") != -1)
      return true;
    else
      return false;
  }

};
/

prompt
prompt Creating package CHAMA_VIS_BROKER
prompt =================================
prompt
create or replace package rpv.CHAMA_VIS_BROKER is
  /* A type to represent a SOAP RPC request */
  TYPE request IS RECORD (
    method     VARCHAR2(256),
    namespace  VARCHAR2(256),
    body       CLOB);

  TYPE searchVIS is record (
    Entidade    VARCHAR2(256),
    NomeMsg     VARCHAR2(256),
    NumMensagem VARCHAR2(256),
    strXML      CLOB);

  /* A type to represent a SOAP RPC response */
  TYPE response IS RECORD (
    doc xmltype);
  /*
   * Create a new SOAP RPC request.
   */
  FUNCTION new_request(method    IN VARCHAR2,
                       namespace IN VARCHAR2)
                       RETURN request;
  /*
   * Add a simple parameter to the SOAP RPC request.
   */
  PROCEDURE add_parameter(req   IN OUT NOCOPY request,
                          name  IN VARCHAR2,
                          type  IN VARCHAR2,
                          value IN CLOB);
  /*
   * Make the SOAP RPC call.
   */
  FUNCTION invoke(req    IN OUT NOCOPY request,
                  url    IN VARCHAR2,
                  action IN VARCHAR2,
                  v_id_env_vis IN VARCHAR2) RETURN response;
  /*
   * Make the SOAP RPC call.
   */
  PROCEDURE generate_envelope_vismail(req IN OUT NOCOPY request,
			      env IN OUT NOCOPY CLOB);
  FUNCTION invoke_clob(req    IN OUT NOCOPY request,
                  url    IN VARCHAR2,
                  action IN VARCHAR2,
                  v_id_env_vis IN VARCHAR2) RETURN response;
  /*
   * Retrieve the sipmle return value of the SOAP RPC call.
   */
  FUNCTION get_return_value(resp      IN OUT NOCOPY response,
                            name      IN VARCHAR2,
                            namespace IN VARCHAR2) RETURN VARCHAR2;
  FUNCTION get_return_value_extra(resp IN  xmltype,
                            name       IN VARCHAR2,
                            namespace  IN VARCHAR2) RETURN CLOB;

  FUNCTION VISRequest(v_cod_mensagem in number, id_env_vis in number,
  v_mensagem in clob, env_msg out clob, env_msg_vis out clob, ambiente in varchar2 DEFAULT 'P') RETURN Response;
end CHAMA_VIS_BROKER;
/

prompt
prompt Creating package DEMO_SOAP
prompt ==========================
prompt
CREATE OR REPLACE PACKAGE RPV.demo_soap AS
  /* A type to represent a SOAP RPC request */
  TYPE request IS RECORD (
    method     VARCHAR2(256),
    namespace  VARCHAR2(256),
    body       /*VARCHAR2(32767)*/ CLOB);
  /* A type to represent a SOAP RPC response */
  TYPE response IS RECORD (
    doc xmltype);
  /*
   * Create a new SOAP RPC request.
   */
  FUNCTION new_request(method    IN VARCHAR2,
                       namespace IN VARCHAR2)
                       RETURN request;
  /*
   * Add a simple parameter to the SOAP RPC request.
   */
  PROCEDURE add_parameter(req   IN OUT NOCOPY request,
                          name  IN VARCHAR2,
                          type  IN VARCHAR2,
                          value IN CLOB);
  /*
   * Make the SOAP RPC call.
   */
  FUNCTION invoke(req    IN OUT NOCOPY request,
                  url    IN VARCHAR2,
                  action IN VARCHAR2,
                  v_id_env_vis IN VARCHAR2) RETURN response;
  /*
   * Make the SOAP RPC call.
   */
  PROCEDURE generate_envelope_vismail(req IN OUT NOCOPY request,
			      env IN OUT NOCOPY CLOB);
  FUNCTION invoke_clob(req    IN OUT NOCOPY request,
                  url    IN VARCHAR2,
                  action IN VARCHAR2,
                  v_id_env_vis IN VARCHAR2) RETURN response;
  /*
   * Retrieve the sipmle return value of the SOAP RPC call.
   */
  FUNCTION get_return_value(resp      IN OUT NOCOPY response,
                            name      IN VARCHAR2,
                            namespace IN VARCHAR2) RETURN VARCHAR2;
  FUNCTION get_return_value_extra(resp IN  xmltype,
                            name       IN VARCHAR2,
                            namespace  IN VARCHAR2) RETURN CLOB;
END;
/

prompt
prompt Creating package DSA_SRV_MAKEXML_MPT
prompt ====================================
prompt
CREATE OR REPLACE PACKAGE RPV.dsa_srv_makexml_mpt
  IS
CS_UTF VARCHAR2(20) := 'UTF8';
CS_850 VARCHAR2(20) := 'WE8PC850';
CS_ISO VARCHAR2(20) := 'WE8ISO8859P1';
type ger_t_tnumber_mpt is table of number;
function f_makeClob (
    p_doc in xmldom.DOMDocument,
    p_class_name in varchar2 default ' ',
	p_convert in boolean default true,
	p_make_java_env in boolean default false
    ) return clob;
  function f_combo_estados
RETURN xmldom.DOMDocument;
  function f_merge_docs (
    p_doc_dest in out xmldom.domdocument,
    p_doc_orig in xmldom.domdocument
) return xmldom.domnode;
  procedure p_merge_docs (
    p_doc_dest in out xmldom.domdocument,
    p_doc_orig in xmldom.domdocument
);
  procedure p_makeNewDoc (
    p_doc     out xmldom.domdocument,
    p_rt_node out xmldom.domnode,
    p_rt_name varchar2
);
  function f_truefalse (
    p_string varchar2 )
RETURN varchar2;
  function f_get_current_charset
    return varchar2;
  function f_convert (
    p_string varchar2,
    p_char_dest varchar2,
    p_char_orig varchar2
) return varchar2;
  function f_translate_in (
    p_string varchar2
) return varchar2;
  function f_makeString (
    p_doc in xmldom.DOMDocument,
    p_class_name in varchar2 default ' ',
	p_convert in boolean default FALSE,
	p_make_java_env in boolean default false
    ) return varchar2;
  procedure p_setAttr (
    p_node xmldom.DOMElement,
    p_attr varchar2,
    p_value varchar2
);
  procedure p_setAttrDate (
    p_node xmldom.DOMElement,
    p_attr varchar2,
    p_value date
);
  procedure p_setAttrDateTime (
    p_node xmldom.DOMElement,
    p_attr varchar2,
    p_value date
);
  procedure p_setAttrNumber (
    p_node xmldom.DOMElement,
    p_attr varchar2,
    p_value number
);
  procedure p_setAttrString (
    p_node xmldom.DOMElement,
    p_attr varchar2,
    p_value varchar2,
    p_do_ascii_linefeed boolean default true,
    p_do_ascii_accents boolean default false
);
  procedure p_merge_docs (
    p_parent_doc in out xmldom.domdocument,
    p_doc_dest in out xmldom.domNode,
    p_doc_orig in xmldom.domNode
);
END; -- Package spec
/

prompt
prompt Creating package ENVIAR_PK
prompt ==========================
prompt
CREATE OR REPLACE PACKAGE RPV.ENVIAR_PK AS
--
  FUNCTION wname_in(
	wcampo varchar,
	wformato varchar,
  wtipo_form varchar,
  wref_form_b varchar,
	word_form_b number,
	wvin_num_vin varchar,
  wref_form_e varchar,
	word_form_e number,
  wano_form NUMBER,
	wnum_form NUMBER,
  wid_grupo    number,
  wref_form_2  varchar2,
  wcod_ser        varchar,
  wformi_num_ord  number,
  wformi_ord_form_i number,
  wref_ped_envio varchar2,
	wnum_msg_envio number,
  werro OUT integer)
     RETURN varchar;
--
  FUNCTION submission_to_date(sub varchar)
     RETURN varchar;
--
  FUNCTION existe_codigo(campo varchar,codigo varchar)
     RETURN integer;
--
  FUNCTION trata_tabela(campo varchar, wano_form number, wnum_form number, wid_grupo number, contador IN OUT number,
			msgid number, num_camp number)
     RETURN integer;
--
  PROCEDURE insere_temp_env_det(wmsgid number, wnum_linha number, wnum_campo varchar, wconteudo varchar);
--
END enviar_pk;
/

prompt
prompt Creating package ENVIAR2_PK
prompt ===========================
prompt
CREATE OR REPLACE PACKAGE RPV.ENVIAR2_PK AS
  FUNCTION wname_in(
	wcampo varchar,
	wformato varchar,
	wcod_pos number,
	wano_req number,
	wnum_req number,
        wano_form NUMBER,
	wnum_form NUMBER,
	wcod_ser varchar2,
	wnum_ord NUMBER,
	word_form NUMBER,
        wref_ped_envio varchar2,
	wnum_msg_envio number,
	wnum_vin varchar2,
        werro OUT integer,
	wvin_para IN varchar2 := '')
     RETURN varchar;
END enviar2_pk;
/

prompt
prompt Creating package FOTOS_PK
prompt =========================
prompt
CREATE OR REPLACE PACKAGE RPV.FOTOS_PK AS
/*------------------------------------------------------------------------*/
PROCEDURE Read_FOTO (p_File in Char) ;
/*------------------------------------------------------------------------*/
PROCEDURE ENVIA_FOTO_CENTRAL;
/*------------------------------------------------------------------------*/
PROCEDURE UPDATE_FTP( pfile in Char );
/*------------------------------------------------------------------------*/
PROCEDURE Read_FOTO_Migra (p_FileInput Char);
/*------------------------------------------------------------------------*/
PROCEDURE READ_FOTO_NEW;
/*------------------------------------------------------------------------*/
END FOTOS_PK;
/

prompt
prompt Creating package FUNCOES
prompt ========================
prompt
CREATE OR REPLACE PACKAGE RPV.FUNCOES AS
FUNCTION EH_POSTO RETURN BOOLEAN ;
-- Funcao que devolve 	TRUE se estivermos num posto ou
--			FALSE se estivermos na central
FUNCTION EXISTE_PARECER (ano_form1 number, num_form1 number, reapr1 varchar2)
--
-- Pesquisa FORM_EST.TIP_VIS
--
--	Retorna 0: se não tem parecer
--		1: se houve erro (exception)
--		99: se tem parecer
--
RETURN NUMBER;
FUNCTION INSERE_FORM_B(
  Ano_Form1 IN NUMBER ,
  Num_Form1 IN NUMBER ,
  Cod_Pais_Sch1 IN VARCHAR2 ,
  Cod_Pare1 IN VARCHAR2 ,
  Praz_Sup1 IN NUMBER DEFAULT NULL,
  Dat_Resp1 IN DATE DEFAULT sysdate,
  Obs1 IN VARCHAR2 )
-- insere uma linha nova em FORM_B para ser enviada
RETURN NUMBER;
FUNCTION ENVIA_PARECER(
  Ano_Form1 IN NUMBER ,
  Num_Form1 IN NUMBER ,
  Cod_Pare1 IN VARCHAR2)
--	Chamado após o estado do formulário ser concedido,
-- indeferido ou cancelado -> envio de um formulario B
-- Retorna:
--	0: se não houve erro;
--	1: se deu alguma exception.
RETURN NUMBER;
FUNCTION consulta_prt(
  Tip_Form1 IN VARCHAR2 DEFAULT 'A',
  Num_Fich1 IN NUMBER DEFAULT 1)
--	Função que verifica se Portugal deve ou não ser consultado,
-- quando chega um formulário de Schengen (trata-se da validação
-- do Anexo VB do acordo de Schengen).
--	Este procedimento só deverá ser chamado para formulário do tipo 'A' ou
-- 'C', noutros casos devolve sempre 0.
--	Esta função retorna:	0 se Portugal deve ser consultado ou
--				1 se Portugal não deve ser consultado.
RETURN NUMBER;
FUNCTION Ve_Resp_Sch(
  Ano_Form1 IN NUMBER ,
  Num_Form1 IN NUMBER,
  Todos_Deram OUT NUMBER )
--	DESENCADEADO por AFTER UPDATE ON FORM_SCH.COD_PARE, que
-- chama o evolui_estado(ano_form, num_form); Se cod_pare IS NOT NULL
--
--	Função que verifica as respostas de Schengen.
--	Retorna	0: se o(s) paíse de Schengen solicitados já deram parecer
--		   positivo ou os que faltam dar parecer, já ultrapassaram
--		   a dat_lim_resp, pelo que pode continuar a evolução de estados;
-- 		1: se existiu um erro qualquer na função (EXCEPTION);
--		97: se não existe nada a fazer, porque:
--		   a) ainda não foram dados todos os pareceres positivos dentro
--		      do prazo;
--		98: se não existe nada a fazer, porque existe mais  que
--		     um indeferido dentro do prazo (Dat_Pare_Ser <= Dat_Lim_Resp);
--		99: se existiu uma recusa de parecer (obriga a um indeferimento
-- 		    do pedido caso os serviços ainda não o tenham indeferido), a
--		    função atribui_indeferido verifica se deve atribuir ou não o
--                                  indeferimento.
--	Retorna em Todos_Deram:
--		0: Se todos deram parecer
--		1: Se ainda faltam alguns dar parecer
--
--	Precisa das tabelas: FORM_SCH (formulario de Schengen)
--  NOTA: 	Esta função não deverá ser chamada em Reapreciação,
--	visto que Schengen já não deve ser "ouvido".
--
RETURN NUMBER;
FUNCTION Ve_Resp_Serv(
  Ano_Form1 IN NUMBER ,
  Num_Form1 IN NUMBER ,
  Reapr IN VARCHAR2 DEFAULT 'N',
  Cod_Servico IN VARCHAR2 ,
  Todos_Deram OUT NUMBER,
  Cod_Est_Tarefa IN VARCHAR2)
--	DESENCADEADO por AFTER UPDATE ON FORM_SER. COD_PARE, que
-- chama o evolui_estado(ano_form, num_form); Se cod_pare_aut IS NOT NULL
--
--	Função que verifica as respostas dos serviços, com excepção do
--  serviço SIS (Taref.Busca_Param_Glo1(24)) no caso de estarmos perante um
--  pedido de reapreciação.
--	Retorna	0: se o(s) serviços solicitados já deram parecer positivo ou
--		   os que faltam dar parecer, já ultrapassaram a dat_lim_resp,
-- 		   pelo que pode continuar a evolução de estados;
-- 		1: se existiu um erro qualquer na função (EXCEPTION);
--		97: se não existe nada a fazer, porque:
--		   a) ainda não foram dados todos os pareceres positivos;
--		98: se não existe nada a fazer, porque existe mais  que
--		     um indeferido dentro do prazo (Dat_Pare_Ser <= Dat_Lim_Resp);
--		99: se existiu uma recusa de parecer (obriga a um indeferimento
-- 		    do pedido caso Schengen ainda não o tenha indeferido), a
--		    função atribui_indeferido verifica se deve atribuir ou não o
--                                  indeferimento.
--	Retorna em Todos_Deram:
--		0: Se todos deram parecer
--		1: Se ainda faltam alguns dar parecer
--	Precisa das tabelas: FORM_SER (formulario de servicos)
--
RETURN NUMBER;
FUNCTION Atribuiu_Indeferido(
  Ano_Form1 IN NUMBER ,
  Num_Form1 IN NUMBER ,
  Tipo_Form1 IN VARCHAR2,
  Reapr1 IN VARCHAR2,
  VVTL IN BOOLEAN,
  Cod_Est_Tarefa IN VARCHAR2)
--  Chamada:
--	After UPDATE on form_sch.cod_pare e form_ser.cod_pare, chama
--  a evolução de estado, que chama esta função.
--	Envia para os Postos (se fôr um formulário P) ou para Schengen (se fôr
--  um formulário A) o parecer de indeferido (insere no FORM_B para despoletar
--  um envio).
--	Utiliza a função EXISTE_PARECER(...) para saber se pode atribuir
--  indeferido.
--  Retorna:
--	0: se não atribuiu parecer de indeferido;
--	1: se existiu algum erro (EXCEPTION);
--	99: se tem que ser atribui-do um indeferido .
--
RETURN NUMBER;
PROCEDURE envio_reapr (	v_ano_form IN NUMBER, v_num_form IN NUMBER,
			v_referencia IN VARCHAR2, v_ord_form_r IN NUMBER);
--  Pedidos de Reapreciação (POSTO -> CENTRAL)
--  No posto, e após um pedido ser indeferido pela central, ENVIA para a CENTRAL.
FUNCTION form_b_fax (v_ano_form IN NUMBER, v_num_form IN NUMBER,
				v_cod_pare IN VARCHAR2, v_praz_sup IN NUMBER default null)
	RETURN BOOLEAN ;
PROCEDURE ExportBlob (
p_file  IN  VARCHAR2,
p_blob  IN  BLOB);
FUNCTION Trata_biometria_info (v_recibo IN number,p_foto IN varchar2,
p_bio IN varchar2)
RETURN NUMBER;
PROCEDURE Envio_Aud_Previa (v_ano_form IN NUMBER, v_num_form IN NUMBER,
v_referencia IN VARCHAR2);
FUNCTION obtem_valor_vis(
 p_valor_rpv in VARCHAR2,
 p_tipo IN VARCHAR2)
RETURN VARCHAR2;
PROCEDURE obtem_header_det (vDescricao in varchar2, vContract out varchar2, vOperation out varchar2);
FUNCTION Envia_Vis (proxy_server  IN VARCHAR2,
                    web_service   IN VARCHAR2,
                    web_service_param IN VARCHAR2,
                    v_id_env_vis      IN TEMP_ENV_VIS.ID_ENV_VIS%TYPE,
                    ambiente          in varchar2 DEFAULT 'P')
RETURN CLOB;
FUNCTION ClobToBlob64(p_c in clob)
RETURN BLOB;
PROCEDURE ExportClob (
p_file  IN  VARCHAR2,
p_clob  IN  CLOB);
END FUNCOES;
/

prompt
prompt Creating package JOBS_PK
prompt ========================
prompt
CREATE OR REPLACE PACKAGE RPV.JOBS_PK IS
PROCEDURE Envia_Central(tipo in varchar2 default 'E');
PROCEDURE Integra_Fich;
PROCEDURE Integra_Deliverys;
PROCEDURE Activa_Diario;
PROCEDURE Analisa_result (result_return out number);
PROCEDURE Altera_Password (utilizador in varchar2, passw in varchar2);
PROCEDURE READ_PDF(P_NOME_FICH IN VARCHAR2, PDFNUM IN NUMBER default 9);
PROCEDURE Evolui_Audiencia_Previa;
END;
/

prompt
prompt Creating package PK_MAIL
prompt ========================
prompt
create or replace package rpv.pk_mail as
function fu_token(str varchar2,sep varchar2,i number) return varchar2 ;
function fu_send_mail (p_dest in varchar2,
                       p_assunto in varchar2,
                       p_msg in varchar2,
                       p_from in varchar2
                      ) return boolean ;
function fu_send_mail_esp (p_dest in varchar2,
                       p_assunto in varchar2,
                       p_msg in varchar2,
                       p_from in varchar2
                      ) return boolean ;
FUNCTION testMail(
 pivcFromName  IN VARCHAR2,
 pivcFromEmail IN VARCHAR2,
 pivcToName    IN VARCHAR2,
 pivcToEmail   IN VARCHAR2,
 cc_recipient  IN VARCHAR2,
 bcc_recipient IN VARCHAR2,
 pivcSubject   IN VARCHAR2,
 pivcBody      IN VARCHAR2) return number;
end pk_mail;
/

prompt
prompt Creating package PRORROG
prompt ========================
prompt
CREATE OR REPLACE PACKAGE RPV.PRORROG AS
FUNCTION EXISTE_PRORR_SUP(ano_form1 IN NUMBER,num_form1 IN NUMBER,
			  Old_Dat_Lim DATE ,New_Dat_Lim IN DATE,
			  Cod_Pais1 IN VARCHAR2, Cod_Ser1 IN VARCHAR2,
			  Num_Dias OUT NUMBER )
--
-- FunÃ§Ã£o que verifica se existe jÃ¡ prorrogaÃ§Ãµes com datas superiores
--
--	Retorna 99: se o NÂº de dias a prorrogar for ZERO
--		1 : se existiram erros (EXCEPTION).
--		0 : se existem dias para prorrogar
--
RETURN number;
FUNCTION SCH_PEDE_PRORR1(Ref_Form_B1 IN VARCHAR2,Ord_Form_B1 IN NUMBER, Num_Fich_Recep IN INTEGER)
--	Faz a primeira parte: actualizaÃ§Ã£o Ã  tabela FORM_SCH, o resto Ã©
--  feito na actualizaÃ§Ã£o (AFTER UPDATE on FORM_SCH).
--
--	Ã¿ despoletado AFTER INSERT on FORM_B, em que COD_PAIS_SCH estÃ¡
--  preenchido, COD_PARE not in (Taref.Busca_Param_Glo1(9),
--  Taref.Busca_Param_Glo1(10)) e dir_comm = 'R'.
--
--	Verifica se existe um pedido de prorrogaÃ§Ã£o do mesmo paÃ­s e do mesmo
--  formulÃ¡rio em FORM_B em que o nÃºmero de dias da prorrogaÃ§Ã£o seja superior ou
--  igual ao nÃºmero de dias pedido. Se tal acontecer, NÃ¿O actualiza o
--  FORM_SCH - DAT_LIM_RESP e DAT_PRORR.
--
--	Insere ainda uma linha na tabela PRORROGA_SCH (em todos os casos)
--
--	Retorna 0: se correu tudo bem (actualizou FORM_SCH).
--		1: se existiram erros (EXCEPTION).
--		99: se nÃ£o tem que actualizar nada.
--
RETURN NUMBER;
FUNCTION SCH_PEDE_PRORR2(Ano_Form1 IN NUMBER, Num_Form1 IN NUMBER,
		         Pais_Sch1 IN VARCHAR2, Old_Dat_Lim IN DATE, New_Dat_Lim IN DATE )
--	Despoletado AFTER UPDATE on FORM_SCH. DAT_LIM_RESP.
--	Segundo trigger de prorrogaÃ§Ã£o de Schengen.
--	Envia para o posto um pedido de prorrogaÃ§Ã£o (insere em FORM_B, nÃ£o
--  preenche cod_pais_sch em FORM_B), caso o posto ainda nÃ£o tenha nenhum
--  pedido de prorrogaÃ§Ã£o com um nÃºmero de dias superior ou igual.
--
--	Retorna 0: se correu tudo bem (actualizou FORM_B).
--		1: se existiram erros (EXCEPTION).
--		99: se nÃ£o tem que actualizar nada.
--
RETURN NUMBER;
FUNCTION SER_PEDE_PRORR2(Ano_Form1 IN NUMBER, Num_Form1 IN NUMBER,
		         Cod_Ser1 IN VARCHAR2, Old_Dat_Lim IN DATE, New_Dat_Lim IN DATE )
--	Despoletado AFTER UPDATE on FORM_SER. DAT_LIM_RESP.
--	Ã¿nico trigger de prorrogaÃ§Ã£o dos ServiÃ§os.
--	Envia para o posto um pedido de prorrogaÃ§Ã£o (insere em FORM_B, nÃ£o
--  preenche cod_pais_sch em FORM_B), caso o posto ainda nÃ£o tenha nenhum
--  pedido de prorrogaÃ§Ã£o com um nÃºmero de dias superior ou igual.
--
--	Retorna 0: se correu tudo bem (actualizou FORM_B).
--		1: se existiram erros (EXCEPTION).
--		99: se nÃ£o tem que actualizar nada.
--
RETURN NUMBER;
END PRORROG;
/

prompt
prompt Creating package RECEBER_PK
prompt ===========================
prompt
CREATE OR REPLACE PACKAGE RPV.RECEBER_PK AS
--
  FUNCTION num_form_seg
	   return integer;
--
  FUNCTION ord_formb_seg(wref varchar)
	   return integer;
--
  FUNCTION ord_forme_seg(wref varchar)
	   return integer;
--
  PROCEDURE insere_formulario(wnum_fich integer, wtipo varchar,
                              wano in out number,wnumero in out number,
			      wref varchar,  existe_form in out boolean);
--
  PROCEDURE insere_formulario_legaliz(wnum_fich integer, wtipo varchar,
                              wano in out number,wnumero in out number,
			      wref varchar,  existe_form in out boolean, docs out varchar);
--
  PROCEDURE insere_form_b(wnum_fich integer, wref varchar,word number, worig varchar);
--
  PROCEDURE insere_form_e(wnum_fich integer, wref varchar,word number);
--
  FUNCTION trata_item(wnum_fich integer, wtipo varchar, witem varchar, word number)
	return varchar;
--
  PROCEDURE insere_descendente(wnum_fich integer, wano_form number, wnum_form number);
--
  PROCEDURE insere_descendente_web(wnum_fich integer, wnum_form number);
--
  PROCEDURE insere_form_p(wnum_fich integer, wano_form number, wnum_form number);
--
  PROCEDURE insere_meios_subsistencia_web(wnum_fich integer, wnum_form varchar2);
--
  PROCEDURE insere_vistos_3_anos_web(wnum_fich integer, wnum_form varchar2);
--
  PROCEDURE insere_formulario_web(wnum_fich integer, wtipo varchar,
                              wnumero in out varchar2,wref varchar);
--
  PROCEDURE insere_form_p_legaliz(wnum_fich integer, wano_form number, wnum_form number);
--
  PROCEDURE insere_pais_transito(wnum_fich integer, wano_form number, wnum_form number);
--
  PROCEDURE insere_pais_transito_web(wnum_fich integer, wnum_form number);
--
  PROCEDURE insere_form_doc(wnum_fich integer, wano_form number, wnum_form number);
--
  PROCEDURE insere_form_doc_legaliz(wnum_fich integer, wano_form number, wnum_form number, docs varchar);
--
  PROCEDURE insere_vinheta(wtipo varchar, wnum_fich integer, wano_form number, wnum_form number);
--
  PROCEDURE insere_requisicao(wnum_fich integer);
--
  FUNCTION insere_vinheta2(wnum_fich integer) RETURN varchar;
--
  PROCEDURE insere_lote_vin(wnum_fich integer);
--
  PROCEDURE insere_redir(wnum_fich integer, wano_form in number, wnum_form in number,
			word_pos_redir out number);
--
  PROCEDURE insere_form_r(wnum_fich integer);
--
  PROCEDURE insere_form_i(wnum_fich integer, wano_form in number, wnum_form in number,
			wcod_ser out varchar2, wnum_ord out number, word_form_i out number);
--
  PROCEDURE insere_form_z(wnum_fich integer, wano_form number, wnum_form number);
--
  PROCEDURE insere_vistos_3_anos(wnum_fich integer, wano_form number, wnum_form number);
--
  PROCEDURE insere_meios_subsistencia(wnum_fich integer, wano_form number, wnum_form number);
--
  PROCEDURE insere_reag_alertas(wnum_fich integer);
--
  PROCEDURE insere_indef_justifica_parecer(wnum_fich integer, wano_form number, wnum_form number);
END receber_pk;
/

prompt
prompt Creating package RECEBER1
prompt =========================
prompt
CREATE OR REPLACE PACKAGE RPV.RECEBER1 AS
PROCEDURE insere_vinheta(wtipo varchar, wnum_fich integer,
			 wano_form number, wnum_form number);
PROCEDURE insere_requisicao(wnum_fich integer) ;
FUNCTION insere_vinheta2(wnum_fich integer)
		RETURN varchar;
PROCEDURE insere_lote_vin(wnum_fich integer) ;
PROCEDURE insere_redir(wnum_fich in integer, wano_form in number, wnum_form in number,
			word_pos_redir out number);
PROCEDURE insere_form_r(wnum_fich integer) ;
PROCEDURE insere_form_i(wnum_fich integer, wano_form in number, wnum_form in number,
			wcod_ser out varchar2, wnum_ord out number, word_form_i out number) ;
PROCEDURE insere_form_z(wnum_fich integer, wano_form number, wnum_form number) ;
END;
/

prompt
prompt Creating package REGRAS
prompt =======================
prompt
CREATE OR REPLACE PACKAGE RPV.REGRAS AS
	FUNCTION FN_REGRAS(Num_Fich in Number, Situacao in varchar2,
			   Tipo_Form in varchar2, Num_Campo in number, Ordem in number,
			   Dir_Comm in varchar2, Conteudo in OUT Varchar2, Erro_Sup OUT number)
		RETURN number;
	FUNCTION FASE_2A(Num_Fich in Number, Tipo_Form in varchar2, Erro_Sup OUT number)
		RETURN number;
	FUNCTION TESTE_DUP(WTipo_Form in varchar2, WRef_Ped_Recep in varchar2, WNum_Fich number)
		RETURN number;
	FUNCTION CONTEUDO_CAMPO(Wnum_fich in number, Wnum_campo in varchar2)
		RETURN varchar2;
END;
/

prompt
prompt Creating package SISII
prompt ======================
prompt
CREATE OR REPLACE PACKAGE RPV.SISII
  IS

-----------------------------------------------------------------
-- WebService Definitions
-----------------------------------------------------------------
TYPE request IS RECORD (
 METHOD     VARCHAR2(256),
 namespace  VARCHAR2(256),
 BODY       VARCHAR2(32767));

TYPE WPQuery IS RECORD (
 searchString VARCHAR(256),
 schengenCountry VARCHAR(256),
 schengenNationalID VARCHAR(256),
 schengenAlias NUMBER,
 lastName VARCHAR(256),
 firstName VARCHAR(256),
 birthDate NUMBER,
 nationality VARCHAR(256),
 gender VARCHAR2(7));

TYPE WP IS RECORD (
 actionToBeTakenId NUMBER,
 aliasNumber NUMBER,
 birthDate NUMBER,
 birthPlace VARCHAR(256),
 broadcastNumber LONG,
 categoryId VARCHAR(256),
 creationDate DATE,
 deletionStatusId VARCHAR(256),
 expirationDate DATE,
 firstName VARCHAR(256),
 flags VARCHAR(256),
 identificationMark1Id NUMBER,
 identificationMark2Id NUMBER,
 identityCategoryId NUMBER,
 lastName VARCHAR(256),
 lastUpdateDate DATE,
 nationalIDNumber VARCHAR(256),
 nationalityId VARCHAR(256),
 reasonForRequestId NUMBER,
 relatedRemarkId NUMBER,
 requestCountryId VARCHAR(256),
 requestNumber NUMBER,
 sex VARCHAR(256),
 startObservationDate DATE);

TYPE WPQueryResult IS RECORD (
 errorCode NUMBER,
 errorDescription VARCHAR(256),
 wantedPersons WP);

TYPE queryResponse IS RECORD (
 wpQResult WPQueryResult);

TYPE response IS RECORD (doc XMLTYPE);

-----------------------------------------------------------------
-- PUBLIC PROCEDURES SIGNATURES
-----------------------------------------------------------------

PROCEDURE check_fault
   (resp IN OUT NOCOPY response);

PROCEDURE generate_envelope
   (req IN OUT NOCOPY request,
    env IN OUT NOCOPY VARCHAR2);

FUNCTION WantedPersonWSQueryRequest(v_ano_form in number, v_num_form in number, nome1 in varchar2, apel1 in varchar2, env_msg out varchar2)
RETURN Response;
FUNCTION WantedPersonWSQueryRequest_Man(nome1 in varchar2, apel1 in varchar2, dat_nasc1 in varchar2)
RETURN Response;

FUNCTION CHAMA_SISII(ano_form1 in number, num_form1 in number, nome1 in varchar2, apel1 in varchar2, env_msg out varchar2)
RETURN varchar2;

FUNCTION CHAMA_SISII_MAN(nome1 in varchar2, apel1 in varchar2, dat_nasc1 in varchar2, retorno out varchar2, retorno2 out varchar2)
RETURN varchar2;

FUNCTION analisa(mensagem in varchar2, cod_pais_indef out varchar2)
RETURN varchar2;

END; -- Package spec
/

prompt
prompt Creating package TABELAS
prompt ========================
prompt
CREATE OR REPLACE PACKAGE RPV.TABELAS AS
	FUNCTION form_b_fax (v_ano_form IN NUMBER, v_num_form IN NUMBER,
				v_cod_pare IN VARCHAR2, v_praz_sup IN NUMBER) RETURN BOOLEAN;
END;
/

prompt
prompt Creating package TAREF
prompt ======================
prompt
CREATE OR REPLACE PACKAGE RPV.TAREF AS
FUNCTION estado_actual(ano_form1 in number, num_form1 in number,
                  cod_estado_actual out varchar2, cod_taref_actual out varchar2,
                  form_reg_actual out varchar2, tip_vis_actual out varchar2)
            RETURN boolean ;
/* FUNÃ¿Ã¿O QUE :
 DEVOLVE TRUE, se nÃ£o existe ainda nenhum registo em form_est ou
              jÃ¡ existe e tem data de realizaÃ§Ã£o nula (os campos out
              sÃ£o preenchidos) ;
 DEVOLVE FALSE, se todas as tarefas tÃªm data de realizaÃ§Ã£o
              preenchidas. - Em principio tem todas as tarefas
                            terminadas.
*/
FUNCTION busca_param_glo1(ind_para1 in number,
                            valor in varchar2 Default NULL)
     RETURN varchar2 ; /* retorna o valor do parametro global */
FUNCTION Insere_Form_Ser(f_s_ANO_FORM in number, f_s_NUM_FORM in number,
     f_s_COD_SER in varchar2, f_s_NUM_ORD in number, f_s_NUM_ORD_FORMR in number,
     f_s_DAT_LOTE in date, f_s_ORD_LOTE in number, f_s_TIP_VIS in varchar2,
     f_s_COD_PARE_SER in varchar2, f_s_DAT_LIM_RESP in date,
     f_s_DAT_PARE_SER in date, f_s_DAT_PRORR in date, f_s_PED_POS in varchar2,
     f_s_CRI_DAT in varchar2, f_s_CRI_UTI in varchar, f_s_ALT_DAT in varchar2,
     f_s_ALT_UTI in varchar2, f_s_DEVIDO_A in Varchar2, Reapr in boolean,
     Estado in varchar2)
	Return Boolean ;
FUNCTION tarefa_nula RETURN boolean; /* retorna sempre TRUE */
FUNCTION INSERE_FORM_SCH(f_s_ANO_FORM in number, f_s_NUM_FORM in number,
                f_s_COD_PAIS in varchar2, f_s_DAT_LIM_RESP in date,
                f_s_DAT_PARE_SCH in date, f_s_DAT_PRORR in date,
                f_s_COD_PARE in varchar2, f_s_CRI_DAT in varchar2,
                f_s_CRI_UTI in varchar2, f_s_ALT_DAT in varchar2,
                f_s_ALT_UTI in varchar2, VVTL1 in Boolean)
     RETURN Boolean;
FUNCTION Envia_FormP(ANO_FORM1 in number, NUM_FORM1 in number,
	Posto1 In Varchar2 DEFAULT 'C',
	Estado_Envio IN Varchar2 DEFAULT 'P')
	RETURN BOOLEAN ;
 --	Funcao que preenche envio com form_p para enviar entre
 -- posto<->central (Posto tem o posto ou se for null, vai buscar a central)
 --
 -- Retorna TRUE se preencheu ou FALSE se nÃ£o conseguiu preencher
END TAREF;
/

prompt
prompt Creating package TAREFA_MASTER
prompt ==============================
prompt
CREATE OR REPLACE PACKAGE RPV.TAREFA_MASTER AS
 FUNCTION evolui_estado(ano_form in number, num_form in number, Evol_Man in Varchar2 default 'A')
--            form_reg in varchar2 := NULL, /* necessÃ¡rio sempre que
--              Ã© inicializada a evoluÃ§Ã£o de estados de um formulario */
--            tip_vis in varchar2 := NULL, /* necessÃ¡rio sempre que
--              Ã© inicializada a evoluÃ§Ã£o de estados de um formulario*/
--            cod_est in varchar2 := NULL, /* necessÃ¡rio sempre que o
--              estado nÃ£o segue o seu caminho por default */
--            cod_taref in varchar2 := NULL) /* necessÃ¡rio sempre que a
--              tarefa nÃ£o segue o seu caminho por default */
   RETURN NUMBER ;
FUNCTION proximo_est_taref(ano_form1 in number, num_form1 in number,
          cod_est_actual in varchar2, cod_taref_actual in varchar2,
          form_reg_actual in varchar2, tip_vis_actual in varchar2,
          cod_est_prox out varchar2, cod_taref_prox out varchar2,
          tip_valid_prox out varchar2, SCH IN BOOLEAN,
          VVTL IN BOOLEAN, Reapr IN BOOLEAN, pare_pos IN NUMBER)
      RETURN Boolean;
FUNCTION insere_form_est(ano_form1 in number, num_form1 in number,
			cod_est1 in varchar2, tip_vis1 in varchar2,
			form_reg1 in varchar2, cod_taref1 in varchar2,
			realiz1 in varchar2 := 'N',
			dat_realiz1 in date := NULL) RETURN boolean;
Procedure Grava_Erro(de in varchar2, Erro in varchar2 ,linha IN NUMBER := 0);
END tarefa_master;
/

prompt
prompt Creating package TAREF1
prompt =======================
prompt
CREATE OR REPLACE PACKAGE RPV.TAREF1 AS
  Function verifica_restricao(restr in varchar2, pais_sch in varchar2,
                   Ano_Form1 in Number, Num_Form1 in number,
                   pais_sch_dest_princ in varchar2,
                   pais_emi_doc in varchar2,
                   posto in number, doc in varchar2,
                     apelido in varchar2, nome in varchar2,
                     dat_nasc in varchar2) Return Number;
-- devolve: 0, se estÃ¡ tudo correcto (As restricoes indicam que o
--            formulario deve ser consultado);
--          1, Se o Erro deu-se na restricao 1;
--          2, Se o Erro deu-se na restricao 2 ou
--          4, Se o Erro deu-se na restricao 4.
  FUNCTION tarefa_pede_cons_sch(ano_form1 in number,
                                num_form1 in number,
				VVTL in BOOLEAN)
     RETURN NUMBER;
-- devolve: 0, se estÃ¡ tudo correcto (tabela preenchida);
--          2, outros erros.
  FUNCTION tarefa_pede_cons_serv(ano_form1 in number,
                                 num_form1 in number,
                                 cod_servico in varchar2 := NULL,
				 Reapr in Boolean, Estado in varchar2)
     RETURN NUMBER;
--  devolve: 0, se estÃ¡ tudo correcto (tabela preenchida);
--             2, outros erros.
FUNCTION tarefa_analise_indeferidos(ano_form1 in number, num_form1 in number,
		Reapr IN BOOLEAN, estado_tarefa IN VARCHAR2)
     RETURN NUMBER;
 /* devolve: 0, se estÃ¡ tudo correcto (nÃ£o existem pedidos
              indeferidos para o mesmo indivÃ­duo);
             1, se existem pedidos indeferidos Ã  menos de um ano para
               o indivÃ­duo;
             2, se nÃ£o consegue fazer a procura.
 */
FUNCTION tarefa_analise_apreciacao(ano_form1 in number, num_form1 in number,
		Reapr IN BOOLEAN, estado_tarefa IN VARCHAR2)
     RETURN NUMBER;
 /* devolve: 0, se estÃ¡ tudo correcto (nÃ£o existem pedidos
              em apreciacao para o mesmo indivÃ­duo);
             1, se existem pedidos em apreciacao;
             2, se nÃ£o consegue fazer a procura.
 */
END Taref1;
/

prompt
prompt Creating package TAREF2
prompt =======================
prompt
CREATE OR REPLACE PACKAGE RPV.TAREF2 AS
  PROCEDURE insere_form_r (v_ano_form NUMBER, v_num_form NUMBER);
--	Procedimento de inserção de registos na tabela FORM_R quando é feita uma reapreciação
  FUNCTION Tarefa_Espera_Docs(	Ano_Form1 in NUMBER,
				Num_Form1 in NUMBER,
				Tipo in Varchar2) Return NUMBER;
--	função que verifica se os documentos já
--	foram entregues (se tipo = 'E') ou se já chegaram (tipo = 'C')
--	Retorna	0: se pode continuar a evolução de estados;
-- 		1: se existiu um erro qualquer na função (EXCEPTION);
--		99: se deve aguardar
FUNCTION Ve_Cancelados(		Ano_Form1 in NUMBER,
				Num_Form1 in NUMBER)
	Return NUMBER ;
--	função que verifica se o pedido do posto foi cancelado
--	Retorna	0: se Não foi atribuido cancelado ou este já existia;
-- 		1: se existiu um erro qualquer na função (EXCEPTION);
--		99: se o pedido foi cancelado
FUNCTION Tarefa_Espera_Pare_Pos(Ano_Form1 in NUMBER,
				Num_Form1 in NUMBER)
	Return NUMBER;
--	função que verifica se o parecer do posto já foi atribuído
--	Retorna	0: se pode continuar a evolução de estados;
-- 		1: se existiu um erro qualquer na função (EXCEPTION);
--		99: se deve aguardar
FUNCTION Tarefa_Espera_Pare_Central(Ano_Form1 in NUMBER,
				    Num_Form1 in NUMBER)
	Return NUMBER ;
--	função que verifica se o parecer da central já foi atribuído
--	Retorna	0: se pode continuar a evolução de estados;
-- 		1: se existiu um erro qualquer na função (EXCEPTION);
--		99: se deve aguardar
FUNCTION Tarefa_Envia_Central(	Ano_Form1 in NUMBER,
				Num_Form1 in NUMBER)
	Return NUMBER;
--	função que prepara o envio do posto para a central
--	Retorna	0: se pode continuar a evolução de estados;
-- 		1: se existiu um erro qualquer na função (EXCEPTION);
-- 		99: se deve aguardar porque ainda não foi dado parecer
--		   do posto;
FUNCTION Tarefa_Espera_Visto( Ano_Form1 in NUMBER,
			      Num_Form1 in NUMBER,
			      Tipo_Evol in VARCHAR2)
	Return NUMBER ;
--	função que verifica se o visto já foi atribuído
--	Retorna	0: se pode continuar a evolução de estados;
-- 		1: se existiu um erro qualquer na função (EXCEPTION);
--		99: se deve aguardar
FUNCTION Tarefa_Espera_Vinheta( Ano_Form1 in NUMBER,
			        Num_Form1 in NUMBER)
	Return NUMBER ;
--	função que verifica se a vinheta já foi emitida
--	Retorna	0: se pode continuar a evolução de estados;
-- 		1: se existiu um erro qualquer na função (EXCEPTION);
--		99: se deve aguardar
FUNCTION Tarefa_Espera_Vin_EXP( Ano_Form1 in NUMBER,
			        Num_Form1 in NUMBER)
	Return NUMBER ;
--	função que verifica se a vinheta já foi expirada
--	Retorna	0: se pode continuar a evolução de estados;
-- 		1: se existiu um erro qualquer na função (EXCEPTION);
--		99: se deve aguardar
FUNCTION Tarefa_Envia_Tacito( Ano_Form1 in NUMBER,
			      Num_Form1 in NUMBER)
	Return NUMBER ;
--	função que prepara o envio de um parecer tácito para um formulário do tipo P
--	(cria um registo na tabela ENVIO)
--	Retorna	0: se pode continuar a evolução de estados;
-- 		1: se existiu um erro qualquer na função (EXCEPTION);
END TAREF2;
/

prompt
prompt Creating package VISMAIL
prompt ========================
prompt
create or replace package rpv.VISMAIL is
function Fdatetz(data in date) return varchar2;
function Extrai_Valor_XML(inpfile clob, nome_no varchar2, nome_sub_no varchar2, posicao number, tipo_msg varchar2 default null, tipo_extract number default 1)
 return varchar2;
function Extrai_NrOcorrencias_XML(inpfile clob, nome_no varchar2, campo1 varchar2, campo2 varchar2, campo3 varchar2)
 return number;
function Extrai_Valor_Ocorr_XML(inpfile clob, nome_no varchar2, referencia varchar2, campo varchar2, ocorrencia number, sentido varchar2)
 return clob;
procedure NSConsularCooperationRequest(p_MESSAGEID in varchar2,p_REFNUMBEREXCH in varchar2,p_VISAPPNUMBER in varchar2,p_URGENTCASE in varchar2,
                                        p_SENDERID in varchar2,p_COUNTRYSEND in varchar2,p_LOCATIONSEND in varchar2,p_NAMESEND in varchar2,
                                        p_TYPESEND in varchar2,p_COUNTRYREC in varchar2,p_LOCATIONREC in varchar2,p_NAMEREC in varchar2,
                                        p_TYPEREC in varchar2,p_MSGTXTMAND in varchar2,p_RETRYCOUNT in varchar2,p_PATH in varchar2);
procedure NSConsularCooperationInfo(p_MESSAGEID in varchar2,p_REFNUMBEREXCH in varchar2,p_VISAPPNUMBER in varchar2,
                                        p_SENDERID in varchar2,p_COUNTRYSEND in varchar2,p_LOCATIONSEND in varchar2,p_NAMESEND in varchar2,
                                        p_TYPESEND in varchar2,p_COUNTRYREC in varchar2,p_LOCATIONREC in varchar2,p_NAMEREC in varchar2,
                                        p_TYPEREC in varchar2,p_MSGTXTMAND in varchar2,p_RETRYCOUNT in varchar2,p_PATH in varchar2);
procedure NSConsularCooperationResponse(p_MESSAGEID in varchar2,p_REFNUMBEREXCH in varchar2,p_VISAPPNUMBER in varchar2,
                                        p_SENDERID in varchar2,p_COUNTRYSEND in varchar2,p_LOCATIONSEND in varchar2,p_NAMESEND in varchar2,
                                        p_TYPESEND in varchar2,p_COUNTRYREC in varchar2,p_LOCATIONREC in varchar2,p_NAMEREC in varchar2,
                                        p_TYPEREC in varchar2,p_MSGTXTMAND in varchar2,p_RETRYCOUNT in varchar2,p_PATH in varchar2);
procedure NSSupportingDocumentRequest(p_MESSAGEID in varchar2,p_REFNUMBEREXCH in varchar2,p_VISAPPNUMBER in varchar2, p_URGENTCASE in varchar2,
                                        p_SENDERID in varchar2,p_COUNTRYSEND in varchar2,p_LOCATIONSEND in varchar2,p_NAMESEND in varchar2,
                                        p_TYPESEND in varchar2,p_COUNTRYREC in varchar2,p_LOCATIONREC in varchar2,p_NAMEREC in varchar2,
                                        p_TYPEREC in varchar2,p_MSGTXTMAND in varchar2,p_RETRYCOUNT in varchar2,p_PATH in varchar2);
procedure NSSupportingDocumentResponse(p_MESSAGEID in varchar2,p_REFNUMBEREXCH in varchar2,p_VISAPPNUMBER in varchar2,
                                       p_SENDERID in varchar2,p_COUNTRYSEND in varchar2,p_LOCATIONSEND in varchar2,p_NAMESEND in varchar2,
                                       p_TYPESEND in varchar2,p_COUNTRYREC in varchar2,p_LOCATIONREC in varchar2,p_NAMEREC in varchar2,
                                       p_TYPEREC in varchar2,p_MSGTXTOPTIONAL in varchar2,p_RETRYCOUNT in varchar2,p_PATH in varchar2);
procedure NSDataAmendmentRequest(p_MESSAGEID in varchar2,p_REFNUMBEREXCH in varchar2,p_VISAPPNUMBER in varchar2,p_URGENTCASE in varchar2,
                                        p_SENDERID in varchar2,p_COUNTRYSEND in varchar2,p_LOCATIONSEND in varchar2,p_NAMESEND in varchar2,
                                        p_TYPESEND in varchar2,p_COUNTRYREC in varchar2,p_LOCATIONREC in varchar2,p_NAMEREC in varchar2,
                                        p_TYPEREC in varchar2,p_MSGTXTMAND in varchar2,p_RETRYCOUNT in varchar2,p_PATH in varchar2);
procedure NSDataAmendmentResponse(p_MESSAGEID in varchar2,p_REFNUMBEREXCH in varchar2,p_VISAPPNUMBER in varchar2,
                                        p_SENDERID in varchar2,p_COUNTRYSEND in varchar2,p_LOCATIONSEND in varchar2,p_NAMESEND in varchar2,
                                        p_TYPESEND in varchar2,p_COUNTRYREC in varchar2,p_LOCATIONREC in varchar2,p_NAMEREC in varchar2,
                                        p_TYPEREC in varchar2,p_MSGTXTMAND in varchar2,p_RETRYCOUNT in varchar2,p_PATH in varchar2);
procedure NSNationalityAcquiredInfo(p_MESSAGEID in varchar2,p_REFNUMBEREXCH in varchar2,p_VISAPPNUMBER in varchar2,
                                        p_SENDERID in varchar2,p_COUNTRYSEND in varchar2,p_LOCATIONSEND in varchar2,p_NAMESEND in varchar2,
                                        p_TYPESEND in varchar2,p_COUNTRYREC in varchar2,p_LOCATIONREC in varchar2,p_NAMEREC in varchar2,
                                        p_TYPEREC in varchar2,p_MSGTXTMAND in varchar2,p_RETRYCOUNT in varchar2,p_PATH in varchar2);

procedure TratarRecepcao(v_msg_resp in clob,flag in varchar2 DEFAULT '0',v_id in number);
end VISMAIL;
/

prompt
prompt Creating package VISXML
prompt =======================
prompt
CREATE OR REPLACE PACKAGE RPV."VISXML"      is
  function Fdatetz(data in date) return varchar2;
  function Fchartz(data in varchar2) return varchar2;
  function FtrataNome(pNome              in varchar2,
                      pPosicaoPretendida in varchar2 /*N = NOME A = Apelido*/)
    return formulario.apel%type;
  procedure PComum(p_returnValue   out xmldom.DOMDocument,
                   vELEMENTOS_ROOT out xmldom.DOMElement,
                   identificador in varchar2, vHEADER_MESSAGEID out varchar2, vContract in varchar2, vOperation in varchar2,
                   vEndUserID in varchar2, vVariant in varchar2, vRole in varchar2, vTest in varchar2, ValRepresentanteID in varchar2 DEFAULT null);
  procedure PComBodySearch(vDOCUMENTO in out xmldom.DOMDocument, ano_form1 in number, num_form1 in number, identificador in varchar2);
  procedure PSearchAsylumExamination(pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,
                                     pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE,
                                     msg_resp_vis OUT clob,vRole in varchar2,TestId in varchar2);
  procedure PSearchAsylumResponsibility(pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,
                                        pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE,
                                        pDateAsylum in varchar2, msg_resp_vis OUT clob,vRole in varchar2,TestId in varchar2);
  procedure PSearchIdentificationBorder(pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,
                                        pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE,
                                        msg_resp_vis OUT clob,vRole in varchar2,TestId in varchar2);
  procedure PSearchIdentificationTerrit(pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,
                                        pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE,
                                        msg_resp_vis OUT clob,vRole in varchar2,TestId in varchar2);
  procedure PSearchAppExamination(pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,
                                  pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE,
                                  msg_resp_vis OUT CLOB,vRole in varchar2,TestId in varchar2, tipo in varchar2 DEFAULT 'D');
  procedure PSearchLawEnforcement(pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,
                                  pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE,
                                  msg_resp_vis OUT clob,vRole in varchar2,TestId in varchar2);
  procedure PRetrievalAppWithFullDec(pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,
                                     pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE,
                                     msg_resp_vis out clob,vRole in varchar2,TestId in varchar2);
  procedure PRetrievalAppExamination(pAppNum in VARCHAR2,pVisaSticker in VARCHAR2,msg_resp_vis out clob,
                                     pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE,vRole in varchar2,TestId in varchar2,ambiente in varchar2 DEFAULT 'P');
  procedure PRetrievalAsylumExamination(pAppNum in VARCHAR2,pVisaSticker in VARCHAR2,msg_resp_vis out VARCHAR2,
                                     pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE,vRole in varchar2,TestId in varchar2);
  procedure PRetrievalAsylumResponsibility(pAppNum in VARCHAR2, pDateAsylum in varchar2, msg_resp_vis out VARCHAR2,
                                     pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE,vRole in varchar2,TestId in varchar2);
  procedure PRetrievalIdentificationBorder(pAppNum in VARCHAR2,pVisaSticker in VARCHAR2,msg_resp_vis out VARCHAR2,
                                     pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE,vRole in varchar2,TestId in varchar2);
  procedure PRetrievalIdentificationTerrit(pAppNum in VARCHAR2,pVisaSticker in VARCHAR2,msg_resp_vis out VARCHAR2,
                                     pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE,vRole in varchar2,TestId in varchar2);
  procedure PRetrievalLawEnforcement(pAppNum in VARCHAR2,pVisaSticker in VARCHAR2,msg_resp_vis out VARCHAR2,
                                     pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE,vRole in varchar2,TestId in varchar2);
  procedure PRetrievalVerificationBorder(pVisaSticker in VARCHAR2,msg_resp_vis out VARCHAR2,
                                         pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE,vRole in varchar2,TestId in varchar2);
  procedure PRetrievalVerificationTerrit(pVisaSticker in VARCHAR2,msg_resp_vis out VARCHAR2,
                                         pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE,vRole in varchar2,TestId in varchar2);
  procedure PRetrievalBiometricData(vBioID in VARCHAR2,pANO_FORM in NUMBER,pNUM_FORM in NUMBER,msg_resp_vis out CLOB,vRole in varchar2,TestId in varchar2);
  procedure PRetrievalFacialImageData(vBioID in VARCHAR2,pANO_FORM IN NUMBER,pNUM_FORM IN NUMBER,msg_resp_vis out VARCHAR2,vRole in varchar2,TestId in varchar2);
  procedure PLstApplicationsInGroup (pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,
                                     pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE,
                                     vGroupID in varchar2, msg_resp_vis OUT VARCHAR2,vRole in varchar2,TestId in varchar2);
  procedure PLstApplicationsInFamilyGroup (pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,
                                     pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE,
                                     vGroupID in varchar2,msg_resp_vis OUT VARCHAR2,vRole in varchar2,TestId in varchar2);
  procedure PLstVisaInGroup (pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,
                             pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE,
                             vGroupID in varchar2, msg_resp_vis out varchar2,vRole in varchar2,TestId in varchar2);
  procedure PLstFacialImageData (pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,
                                 pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE,
                                 tipo IN VARCHAR2,
                                 msg_resp_vis OUT VARCHAR2,vRole in varchar2,TestId in varchar2);
  procedure PLstRetrievalDossier(vApplicationNumber in formulario.ref_form_2%type, pVisaSticker in vinheta.num_vin%type, pANO_FORM in formulario.ano_form%type, pNUM_FORM in formulario.num_form%type, msg_resp_vis out VARCHAR2,vRole in varchar2,TestId in varchar2);
  procedure PLstRetrievalDossierOther(vApplicationNumber in formulario.ref_form_2%type, pVisaSticker in vinheta.num_vin%type, pANO_FORM in formulario.ano_form%type, pNUM_FORM in formulario.num_form%type, msg_resp_vis out VARCHAR2,vRole in varchar2,TestId in varchar2);
  procedure PListBiometricData(pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,
                                          pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE,
                                          msg_resp_vis OUT VARCHAR2,vRole in varchar2,TestId in varchar2);
end;
/

prompt
prompt Creating package VISXML_CS
prompt ==========================
prompt
create or replace package rpv.VISXML_CS is
  FUNCTION ClobToBlob64(p_c in clob)
  RETURN BLOB;
  function Extrai_Valor_XML(inpfile clob, nome_no varchar2, prefixo varchar2, nome_sub_no varchar2, posicao number)
  RETURN CLOB ;
  function PSearchAppExamination(inpfile clob, ano_form1 number, num_form1 number, tipo1 varchar2)
  RETURN NUMBER ;
end;
/

prompt
prompt Creating package VISXML2
prompt ========================
prompt
create or replace package rpv.VISXML2 is
  Function  PSearchbyFingerPrint(pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,
                                pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE, msg_resp_vis OUT VARCHAR2,vRole in varchar2,TestId in varchar2,ambiente in varchar2 DEFAULT 'P') return number;
  Procedure Usa_NISTConverter (nome_fich in varchar2, tipo in varchar2);
  Procedure Corrige_Notificacoes;
end;
/

prompt
prompt Creating package VISXML3
prompt ========================
prompt
CREATE OR REPLACE PACKAGE RPV.VISXML3
IS
   PROCEDURE PApplicationCreateApplication (
      pANO_FORM      IN     FORMULARIO.ANO_FORM%TYPE,
      pNUM_FORM      IN     FORMULARIO.NUM_FORM%TYPE,
      msg_resp_vis      OUT VARCHAR2,
      link_app       IN     VARCHAR2,
      vRole          IN     VARCHAR2,
      TestId         IN     VARCHAR2,
      tudo           IN     VARCHAR2 DEFAULT 'S',
      ambiente       IN     VARCHAR2 DEFAULT 'P');

   PROCEDURE write_clob_tofile (vCcaminhoXML   IN VARCHAR2,
                                vfilename      IN VARCHAR2,
                                v_clob         IN CLOB);

   PROCEDURE PAttAppDatAddBiom (pANO_FORM       IN     FORMULARIO.ANO_FORM%TYPE,
                                pNUM_FORM       IN     FORMULARIO.NUM_FORM%TYPE,
                                estado_tarefa      OUT NUMBER,
                                tipo            IN     VARCHAR2,
                                msg_resp_vis       OUT VARCHAR2,
                                vRole           IN     VARCHAR2,
                                TestId          IN     VARCHAR2);

   PROCEDURE PDecCreateAppDec (V_Num_App   IN VARCHAR2,
                               V_Dec_Aut   IN VARCHAR2,
                               v_Tipo      IN VARCHAR2,
                               v_Valor     IN VARCHAR2,
                               vRole       IN VARCHAR2,
                               TestId      IN VARCHAR2,
                               ambiente    IN VARCHAR2 DEFAULT 'P');


   PROCEDURE PDecCreateVisCreatDec (
      pANO_FORM         IN FORMULARIO.ANO_FORM%TYPE,
      pNUM_FORM         IN FORMULARIO.NUM_FORM%TYPE,
      pSticker_ID       IN VARCHAR2,
      pSticker_ID_Old   IN VARCHAR2,
      v_tipo            IN VARCHAR2,
      vRole             IN VARCHAR2,
      TestId            IN VARCHAR2,
      ambiente          IN VARCHAR2 DEFAULT 'P',
      pSticker_FilledManually IN VARCHAR2 DEFAULT 'false');

   PROCEDURE P_EXE_PED_VIS;
END;
/

prompt
prompt Creating package WEBSERVICE_VIS
prompt ===============================
prompt
create or replace package rpv.WEBSERVICE_VIS is

  -- Author  : INTEGER
  -- Created : 6/2/06 5:43:10 PM
  -- Purpose :

  -- Public function and procedure declarations
  procedure trata_msg_vis_assyn(var_msgid varchar2, var_corrid varchar2, var_mess varchar2);
  procedure trata_msg_vis_assyn_f(var_msgid varchar2, var_corrid varchar2, var_mess varchar2);
end WEBSERVICE_VIS;
/

prompt
prompt Creating package WEBUTIL_DB
prompt ===========================
prompt
CREATE OR REPLACE PACKAGE RPV.WEBUTIL_DB AUTHID CURRENT_USER AS

/*********************************************************************************\
 * WebUtil_DB - Database functions used by the WebUtil_File_Transfer
 * Package.  These functions allow reading and writing direct
 * to the specified BLOB in the database.
 *  The functions should not be called externally from WebUtil
 *********************************************************************************
 * Version 1.0.0
 *********************************************************************************
 * Change History
 *   DRMILLS 11/JAN/2003 - Creation
 *
\*********************************************************************************/

  FUNCTION  OpenBlob(blobTable  in VARCHAR2,
                     blobColumn in VARCHAR2,
                     blobWhere  in VARCHAR2,
                     openMode   in VARCHAR2,
                     chunkSize  in PLS_INTEGER default null) return BOOLEAN;

  FUNCTION  CloseBlob(checksum in PLS_INTEGER) return BOOLEAN;

  PROCEDURE WriteData(data in VARCHAR2);

  FUNCTION ReadData return VARCHAR;

  FUNCTION GetLastError return PLS_INTEGER;

  FUNCTION GetSourceLength  return PLS_INTEGER;

  FUNCTION GetSourceChunks  return PLS_INTEGER;

END WEBUTIL_DB;
/

prompt
prompt Creating function BUSCA_PARAM_GLO
prompt =================================
prompt
create or replace function rpv.Busca_Param_Glo(in_ind_para in param_glo.ind_para%type,
  in_v in number) return varchar2 is
  Result param_glo.val_para%type;
begin
  select val_para
  into Result
  from param_glo
  where ind_para = in_ind_para;
  return(Result);
end Busca_Param_Glo;
/

prompt
prompt Creating function LIMPA_ESPACOS
prompt ===============================
prompt
create or replace function rpv.limpa_espacos(nome in varchar2)
RETURN VARCHAR2 IS

v_nome          varchar2(500);
letra_ant       varchar2(1):= '@';
letra           varchar2(1);
tam             number(4);
i               number(4):=0;
begin
v_nome := trim(nome);
tam := length(v_nome);
loop
  if i > tam then
     exit;
  end if;
  i := i +1;
  letra := substr(v_nome,i,1);
  if letra_ant = ' ' and letra = ' ' then
    v_nome := substr(v_nome,1,i-1) || substr(v_nome,i+1);
		i := i - 1;
	end if;
	letra_ant := letra;
end loop;
return(v_nome);
end;
/

prompt
prompt Creating function RETIRA_PROPOSICOES
prompt ====================================
prompt
create or replace function rpv.Retira_Proposicoes(nome in varchar2)
RETURN VARCHAR2 IS

pos            number(4);
nome_so        varchar2(500);
nome_temp      varchar2(500);
nome_final     varchar2(500):=null;
nome_ant       varchar2(500):=null;
v_val_param    param_det.val_param%type;

BEGIN
nome_temp := nome;
LOOP
      pos := instr(nome_temp,' ');
      if pos = 0 then
         nome_so := substr(nome_temp,1);
         begin
         select val_param into v_val_param
         from param_det
         where ind_para = 49 and val_param = nome_so;
         exception when no_data_found then
                v_val_param := 'N';
         end;

         if v_val_param = 'N' then
            nome_final := nome_final || nome_so;
         else
            nome_final := substr(nome_final,1, length(nome_final) - 1);
         end if;
         exit;
      end if;
      nome_so := substr(nome_temp,1,pos - 1);

      begin
      select val_param into v_val_param
      from param_det
      where ind_para = 49 and val_param = nome_so;
      exception when no_data_found then
                v_val_param := 'N';
      end;

      if v_val_param = 'N' then
         nome_ant := substr(nome_temp,1, pos);
         nome_temp := substr(nome_temp,pos + 1);
      else
         nome_ant := '';
         nome_temp := substr(nome_temp,pos + 1);
      end if;

      nome_final := nome_final || nome_ant;
END LOOP;
return(nome_final);
END;
/

prompt
prompt Creating function VERIFICA_PROPOSICOES
prompt ======================================
prompt
create or replace function rpv.Verifica_Proposicoes(nome in varchar2, apel in varchar2)
RETURN NUMBER IS

cursor c_proposicoes is
select ' ' || val_param || ' ' from param_det
where ind_para = 49;

cursor c_proposicoes2 is
select val_param || ' ' from param_det
where ind_para = 49;

cursor c_proposicoes3 is
select ' ' || val_param from param_det
where ind_para = 49;

v_val_param    param_det.val_param%type;
flag_nome      number(4);
flag_apel      number(4);
ultimo_apel    varchar2(500);--formulario.apel%type;
ultimo_nome    varchar2(500);--formulario.nome%type;
primeiro_apel  varchar2(500);--formulario.apel%type;
primeiro_nome  varchar2(500);--formulario.nome%type;
tam            number(4);
BEGIN
open c_proposicoes;
loop
    fetch c_proposicoes into v_val_param;
    exit when c_proposicoes%notfound;
    flag_nome := instr(nome, v_val_param);
    flag_apel := instr(apel, v_val_param);
    if flag_nome <> 0  or flag_apel <> 0 then
       close c_proposicoes;
       return(1);
    end if;
end loop;
close c_proposicoes;
open c_proposicoes2;
loop
    fetch c_proposicoes2 into v_val_param;
    exit when c_proposicoes2%notfound;
    flag_nome := instr(nome, v_val_param);
    flag_apel := instr(apel, v_val_param);
    if flag_nome <> 0  or flag_apel <> 0 then
       if flag_nome <> 0 then
          tam := length(v_val_param);
          ultimo_nome := substr(nome,length(nome) - tam + 1);
          if ultimo_nome = v_val_param then
             close c_proposicoes2;
             return(1);
          end if;
          primeiro_nome := substr(nome,1,tam);
          if primeiro_nome = v_val_param then
             close c_proposicoes2;
             return(1);
          end if;
       end if;
       if flag_apel <> 0 then
          tam := length(v_val_param);
          ultimo_apel := substr(apel,length(apel) - tam + 1);
          if ultimo_apel = v_val_param then
             close c_proposicoes2;
             return(1);
          end if;
          primeiro_apel := substr(apel,1,tam);
          if primeiro_apel = v_val_param then
             close c_proposicoes2;
             return(1);
          end if;
       end if;
    end if;
end loop;
close c_proposicoes2;

open c_proposicoes3;
loop
    fetch c_proposicoes3 into v_val_param;
    exit when c_proposicoes3%notfound;
    flag_nome := instr(nome, v_val_param);
    flag_apel := instr(apel, v_val_param);
    if flag_nome <> 0  or flag_apel <> 0 then
       if flag_nome <> 0 then
          tam := length(v_val_param);
          ultimo_nome := substr(nome,length(nome) - tam + 1);
          if ultimo_nome = v_val_param then
             close c_proposicoes3;
             return(1);
          end if;
       end if;
       if flag_apel <> 0 then
          tam := length(v_val_param);
          ultimo_apel := substr(apel,length(apel) - tam + 1);
          if ultimo_apel = v_val_param then
             close c_proposicoes3;
             return(1);
          end if;
       end if;
    end if;
end loop;
close c_proposicoes3;
return(0);
END;
/

prompt
prompt Creating function CONS_NSIS
prompt ===========================
prompt
create or replace function rpv.CONS_NSIS(ano_form1 in number, num_form1 in number)
return number is

/*  devolve: 0, se deve avançar;
2,  senão existir comunicações ou existirem várias ocorrências.
96, se deve indeferir
*/
v_nome               varchar2(800);
v_apel               varchar2(800);
v_nome_temp          varchar2(800);
v_apel_temp          varchar2(800);
v_apel_nasc          form_p.apel_nasc%type;
v_dat_nasc           formulario.dat_nasc%type;
v_ref_form_2         formulario.ref_form_2%type;
v_val_param          param_det.val_param%type;
encontrou            boolean;
x                    varchar2(10);
z                    number(4);
p                    number(1);
pos                  number(4);
y                    clob;
w                    clob;
formul_parentesco_ue formulario.parentesco_ue%type;
cod_pais_indef       varchar2(50);
v_cod_pais           pais.cod_pais%type;
dif                  number(3);
cursor c_mail is
select val_param from param_det
where ind_para = 56;
BEGIN
  select f.nome, f.apel, f.dat_nasc, f.ref_form_2, p.apel_nasc, f.parentesco_ue
  into v_nome, v_apel, v_dat_nasc, v_ref_form_2, v_apel_nasc, formul_parentesco_ue
  from formulario f, form_p p
  where f.ano_form = ano_form1 and f.num_form = num_form1 and
  f.ano_form = p.ano_form and f.num_form = p.num_form;


   if v_apel <> nvl(v_apel_nasc,'+') then
     if nvl(v_apel_nasc,'+') <> '+' then
        if instr(v_apel,v_apel_nasc) = 0 then
           v_apel := v_apel_nasc || ' ' || v_apel;
           if length(v_apel) > 50 then
              dif := length(v_apel) - 50;
              v_apel := substr(substr(v_apel,dif),instr(substr(v_apel,dif),' ') +1);
           end if;
        end if;
     end if;
  end if;

  v_nome := Limpa_Espacos(v_nome);
  v_apel := Limpa_Espacos(v_apel);
  begin
    w := sisii.CHAMA_SISII(ano_form1,num_form1,v_nome,v_apel,Y);
    x := sisii.analisa(w, cod_pais_indef);
    insert into audit_cons_nsis(ano_form,num_form,nome,apelido,dat_nasc,resultado,dat_consulta)
    values(ano_form1,num_form1,v_nome,v_apel,v_dat_nasc,x,to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'));
    exception when others then
      --Falha nas comunicações
       update formulario
       set consulta_nsis = 'N'
       where ano_form = ano_form1 and num_form = num_form1;
       return(2);
  end;
  if x = 0 then
     --Verifica se existem proposicoes
     p := Verifica_Proposicoes(v_nome, v_apel);
     if p = 1 then
        if length(Retira_Proposicoes(v_nome)) <= 25 and length(Retira_Proposicoes(v_apel)) <= 50 then
        --Caso existam proposicoes
        begin
        w := sisii.CHAMA_SISII(ano_form1,num_form1,Retira_Proposicoes(v_nome),Retira_Proposicoes(v_apel),Y);
        x := sisii.analisa(w,cod_pais_indef);
        insert into audit_cons_nsis(ano_form,num_form,nome,apelido,dat_nasc,resultado,dat_consulta)
        values(ano_form1,num_form1,Retira_Proposicoes(v_nome),Retira_Proposicoes(v_apel),v_dat_nasc,x,to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'));
        exception when others then
          --Falha nas comunicações
          update formulario
          set consulta_nsis = 'N'
          where ano_form = ano_form1 and num_form = num_form1;
          return(2);
        end;
        end if;
     end if;
     if x = 0 then
        --Vai pesquisar partindo com nome e apelido original
        pos := instr(v_nome,' ');
        if pos = 0 then
            v_nome_temp := v_nome;
            v_apel_temp := v_apel;
        else
            v_nome_temp := substr(v_nome,1,pos - 1);
            v_apel_temp := substr(v_nome,pos + 1) || ' ' || v_apel;
        end if;
        if v_nome <> v_nome_temp and v_apel <> v_apel_temp then
           if length(v_nome_temp) <= 25 and length(v_apel_temp) <= 50 then
           begin
           w := sisii.CHAMA_SISII(ano_form1,num_form1,v_nome_temp,v_apel_temp,Y);
           x := sisii.analisa(w,cod_pais_indef);
           insert into audit_cons_nsis(ano_form,num_form,nome,apelido,dat_nasc,resultado,dat_consulta)
           values(ano_form1,num_form1,v_nome_temp,v_apel_temp,v_dat_nasc,x,to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'));
           exception when others then
              --Falha nas comunicações
              update formulario
              set consulta_nsis = 'N'
              where ano_form = ano_form1 and num_form = num_form1;
              return(2);
           end;
           end if;
        end if;
        loop
            pos := instr(v_apel_temp,' ');
            if pos = 0 or x <> 0 then
               exit;
            end if;
            v_nome_temp := v_nome_temp || ' ' || substr(v_apel_temp,1,pos - 1);
            v_apel_temp := substr(v_apel_temp,pos + 1);
            if length(v_nome_temp) <= 25 and length(v_apel_temp) <= 50 then
            if v_nome <> v_nome_temp and v_apel <> v_apel_temp then
               begin
               w := sisii.CHAMA_SISII(ano_form1,num_form1,v_nome_temp,v_apel_temp,Y);
               x := sisii.analisa(w,cod_pais_indef);
               insert into audit_cons_nsis(ano_form,num_form,nome,apelido,dat_nasc,resultado,dat_consulta)
               values(ano_form1,num_form1,v_nome_temp,v_apel_temp,v_dat_nasc,x,to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'));
               exception when others then
                 --Falha nas comunicações
                 update formulario
                 set consulta_nsis = 'N'
                 where ano_form = ano_form1 and num_form = num_form1;
                 return(2);
               end;
            end if;
            end if;
        end loop;
     end if;
     if x = 0 and p = 1 then
        --Vai pesquisar partindo com nome e apelido sem proposicoes
        v_nome := Retira_Proposicoes(v_nome);
        v_apel := Retira_Proposicoes(v_apel);
        pos := instr(v_nome,' ');
        if pos = 0 then
            v_nome_temp := v_nome;
            v_apel_temp := v_apel;
        else
            v_nome_temp := substr(v_nome,1,pos - 1);
            v_apel_temp := substr(v_nome,pos + 1) || ' ' || v_apel;
        end if;
        if length(v_nome_temp) <= 25 and length(v_apel_temp) <= 50 then
        begin
        w := sisii.CHAMA_SISII(ano_form1,num_form1,v_nome_temp,v_apel_temp,Y);
        x := sisii.analisa(w,cod_pais_indef);
        insert into audit_cons_nsis(ano_form,num_form,nome,apelido,dat_nasc,resultado,dat_consulta)
        values(ano_form1,num_form1,v_nome_temp,v_apel_temp,v_dat_nasc,x,to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'));
        exception when others then
          --Falha nas comunicações
          update formulario
          set consulta_nsis = 'N'
          where ano_form = ano_form1 and num_form = num_form1;
          return(2);
        end;
        end if;
        loop
            pos := instr(v_apel_temp,' ');
            if pos = 0 or x <> 0 then
               exit;
            end if;
            v_nome_temp := v_nome_temp || ' ' || substr(v_apel_temp,1,pos - 1);
            v_apel_temp := substr(v_apel_temp,pos + 1);
            if length(v_nome_temp) <= 25 and length(v_apel_temp) <= 50 then
            begin
            w := sisii.CHAMA_SISII(ano_form1,num_form1,v_nome_temp,v_apel_temp,Y);
            x := sisii.analisa(w,cod_pais_indef);
            insert into audit_cons_nsis(ano_form,num_form,nome,apelido,dat_nasc,resultado,dat_consulta)
            values(ano_form1,num_form1,v_nome_temp,v_apel_temp,v_dat_nasc,x,to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'));
            exception when others then
                 --Falha nas comunicações
                 update formulario
                 set consulta_nsis = 'N'
                 where ano_form = ano_form1 and num_form = num_form1;
                 return(2);
            end;
            end if;
        end loop;
     end if;
  end if;
  if substr(x,1,1) not in ('I','A') then
    begin
      z := to_number(x);
      exception when others then
        x := '9999';
    end;
  end if;
  if x = '0' then
           --Consulta Ok
           update formulario
           set consulta_nsis = 'OK'
           where ano_form = ano_form1 and num_form = num_form1;
           Return (0);
  elsif x = '1' then
           --Consulta NotOk
           begin
           select cod_pais into v_cod_pais
           from pais
           where cod_pais_nsisii = cod_pais_indef;
           exception when no_data_found then
                v_cod_pais := null;
           end;

           update formulario
           set consulta_nsis = 'I' || '-' || v_cod_pais
           where ano_form = ano_form1 and num_form = num_form1;

           Return (0);
  elsif substr(x,1,1) = 'I' then
     --Erro de Input (é necessário enviar mail)
    open c_mail;
    loop
      fetch c_mail into v_val_param;
      exit when c_mail%notfound;
      encontrou := pk_mail.fu_send_mail(v_val_param,'CONSULTA NSIS LUANDA - ERRO INPUT',v_ref_form_2,'CONSULTA NSIS');
    end loop;
    close c_mail;
    return(2);
  elsif x = 'A' then
     --Erro de Acesso (é necessário enviar mail)
    open c_mail;
    loop
      fetch c_mail into v_val_param;
      exit when c_mail%notfound;
      encontrou := pk_mail.fu_send_mail(v_val_param,'CONSULTA NSIS LUANDA - ERRO ACESSO',v_ref_form_2,'CONSULTA NSIS');
    end loop;
    close c_mail;
    return(2);
  elsif x = '9999' then
     --Erro novo (é necessário enviar mail ao administrador)
    open c_mail;
    loop
      fetch c_mail into v_val_param;
      exit when c_mail%notfound;
      encontrou := pk_mail.fu_send_mail(v_val_param,'CONSULTA NSIS LUANDA - ERRO NOVO',v_ref_form_2,'CONSULTA NSIS');
    end loop;
    close c_mail;
    return(2);
  else
    --Consulta NotOk Várias ocorrências
    begin
    select cod_pais into v_cod_pais
    from pais
    where cod_pais_nsisii = cod_pais_indef;
    exception when no_data_found then
          v_cod_pais := null;
    end;

    update formulario
    set consulta_nsis = 'I' || '-' || v_cod_pais
    where ano_form = ano_form1 and num_form = num_form1;

    Return (0);
	end if;
END;
/

prompt
prompt Creating function PING_HC
prompt =========================
prompt
CREATE OR REPLACE FUNCTION RPV.ping_hc (pHostName VARCHAR2, pPort NUMBER DEFAULT 1000) RETURN VARCHAR2
 AUTHID DEFINER IS
    tcpCnx utl_tcp.connection;
    cOk    CONSTANT VARCHAR2(2) := 'OK';
    cFail  CONSTANT VARCHAR2(5) := 'ERROR';
   BEGIN
     tcpCnx := utl_tcp.open_connection (pHostName, pPort);
     utl_tcp.close_connection(tcpCnx);
     RETURN cOk;
   EXCEPTION
     WHEN utl_tcp.network_error THEN
       IF (UPPER(SQLERRM) LIKE '%HOST%') THEN
         RETURN cFail;
       ELSIF (UPPER(SQLERRM) LIKE '%LISTENER%') THEN
         RETURN cOk;
       ELSE
         RAISE;
       END IF;
     WHEN OTHERS THEN
       RAISE;
   END ping_hc;
/

prompt
prompt Creating function REGEXP_LIKE
prompt =============================
prompt
CREATE OR REPLACE FUNCTION RPV.regexp_like (source_char     IN VARCHAR2
                                      , pattern         IN VARCHAR2
                                      , match_parameter IN VARCHAR2 DEFAULT NULL)
RETURN INTEGER
AS
/*************************************************************************
 * Program  : regexp_like
 * Version  : 1.0
 * Author   : Pedro Marques
 * Date     : 06-DEZ-2019
 * Purpopse : This provides a pseudo "REGEXP_LIKE" operator for Oracle 9iR2
 * Warnings : Do NOT compile in an Oracle 10GR2 database (or above)!
 *************************************************************************/
  -- Variables
  l_return INTEGER;
BEGIN
   IF owa_pattern.match (line  => source_char
                       , pat   => pattern
                       , flags => match_parameter) THEN
      l_return := 1;
   ELSE
      l_return := 0;
   END IF;

   RETURN l_return;
END regexp_like;
/

prompt
prompt Creating procedure CONSULTA_NSIS_VIS
prompt ====================================
prompt
create or replace procedure rpv.CONSULTA_NSIS_VIS is
cursor c1 is
select f.ref_form_2, f.ano_form, f.num_form, f.nome, f.apel,
f.dat_nasc, f.num_doc_viag, f.tip_vis_ped
from formulario f, posto p
where f.cod_pare_pos is null and
to_date(f.dat_ped,'yyyy/mm/dd') >= trunc(p.data_arranque_vis) and
f.cod_pos = p.cod_pos and f.foto_associada = 'S'
and nvl(f.consulta_vis,'N') = 'N' and nvl(f.consulta_nsis,'N') = 'N';

--temporário em produção retirar ultima condição
--and to_date(f.dat_ped,'yyyy/mm/dd') = trunc(sysdate);


v_ref_form_2       formulario.ref_form_2%type;
v_ano_form         formulario.ano_form%type;
v_num_form         formulario.num_form%type;
v_nome             formulario.nome%type;
v_apel             formulario.apel%type;
v_dat_nasc         formulario.dat_nasc%type;
v_num_doc_viag     formulario.num_doc_viag%type;
v_tip_vis_ped      formulario.tip_vis_ped%type;
msg_resp           clob;
estado_Tarefa           number := 0;
cnsisii            number(2);
begin
update formulario
set consulta_nsis = null
where consulta_nsis is not null and consulta_vis is null;
commit;
update formulario
set consulta_vis = 'N', consulta_nsis = 'N'
where consulta_vis = 'X';
commit;
update formulario
set consulta_nsis = 'N'
where consulta_nsis = 'OK' and nvl(consulta_vis,'N') = 'N';
commit;
delete from link_vis_manual where num_form in (select f.num_form
from formulario f, posto p
where f.cod_pare_pos is null and
to_date(f.dat_ped,'yyyy/mm/dd') >= trunc(p.data_arranque_vis) and
f.cod_pos = p.cod_pos and f.foto_associada = 'S'
and nvl(f.consulta_vis,'N') = 'N' and nvl(f.consulta_nsis,'N') = 'N');
commit;
update formulario
set consulta_vis = 'N'
where consulta_vis is not null and consulta_nsis = 'N' and cod_pare_pos is null;
commit;
open c1;
loop
     fetch c1 into v_ref_form_2, v_ano_form, v_num_form,
     v_nome, v_apel, v_dat_nasc, v_num_doc_viag, v_tip_vis_ped;
     exit when c1%notfound;
     cnsisii := cons_nsis(v_ano_form, v_num_form);
     commit;
     if cnsisii <> 2 then
     if substr(v_tip_vis_ped,1,1) in ('A','C') then
     visxml.PSearchAppExamination (v_ano_form, v_num_form,msg_resp,'0002',null,'2');
     estado_tarefa := visxml_cs.PSearchAppExamination (msg_resp,v_ano_form, v_num_form,'2');
     if estado_tarefa = 55 then
        update formulario
        set consulta_vis = 'N'
        where ref_form_2 = v_ref_form_2;
     elsif estado_tarefa = 99 then
        update formulario
        set consulta_vis = 'X'
        where ref_form_2 = v_ref_form_2;
     elsif estado_tarefa = 98 then
        visxml.PSearchAppExamination (v_ano_form, v_num_form,msg_resp,'0002',null,'6');
        estado_tarefa := visxml_cs.PSearchAppExamination (msg_resp,v_ano_form, v_num_form,'6');
        if estado_tarefa = 55 then
           update formulario
           set consulta_vis = 'N'
           where ref_form_2 = v_ref_form_2;
        elsif estado_tarefa = 99 then
           update formulario
           set consulta_vis = 'X'
           where ref_form_2 = v_ref_form_2;
        else
           update formulario
           set consulta_vis = 'C'
           where ref_form_2 = v_ref_form_2;
        end if;
     else
        update formulario
        set consulta_vis = 'C'
        where ref_form_2 = v_ref_form_2;
     end if;
     else
        insert into link_vis_manual (ano_form, num_form, vis_application, tratado, cri_uti, cri_dat, finger)
        values(v_ano_form, v_num_form, 'N/E', 'S', user, sysdate, 'N');

        update formulario
        set consulta_vis = 'C'
        where ref_form_2 = v_ref_form_2;
     end if;
     commit;
     end if;
end loop;
close c1;
end;
/

prompt
prompt Creating procedure CONSULTA_VIS
prompt ===============================
prompt
create or replace procedure rpv.CONSULTA_VIS is
cursor c1 is
select f.ref_form_2, f.ano_form, f.num_form, f.nome, f.apel,
f.dat_nasc, f.num_doc_viag, f.tip_vis_ped
from formulario f, posto p
where f.cod_pare_pos is null and
to_date(f.dat_ped,'yyyy/mm/dd') >= trunc(p.data_arranque_vis) and
f.cod_pos = p.cod_pos and f.foto_associada = 'S'
and nvl(f.consulta_vis,'N') = 'N';
--temporário em produção retirar ultima condição
--and to_date(f.dat_ped,'yyyy/mm/dd') = trunc(sysdate);


v_ref_form_2       formulario.ref_form_2%type;
v_ano_form         formulario.ano_form%type;
v_num_form         formulario.num_form%type;
v_nome             formulario.nome%type;
v_apel             formulario.apel%type;
v_dat_nasc         formulario.dat_nasc%type;
v_num_doc_viag     formulario.num_doc_viag%type;
v_tip_vis_ped      formulario.tip_vis_ped%type;
msg_resp           clob;
estado_Tarefa		   number := 0;
begin
update formulario
set consulta_nsis = null
where consulta_nsis is not null and consulta_vis is null;
commit;
open c1;
loop
     fetch c1 into v_ref_form_2, v_ano_form, v_num_form,
     v_nome, v_apel, v_dat_nasc, v_num_doc_viag, v_tip_vis_ped;
     exit when c1%notfound;
     if substr(v_tip_vis_ped,1,1) in ('A','C') then
     visxml.PSearchAppExamination (v_ano_form, v_num_form,msg_resp,'0002',null,'2');
     estado_tarefa := visxml_cs.PSearchAppExamination (msg_resp,v_ano_form, v_num_form,'2');
     if estado_tarefa = 55 then
        update formulario
        set consulta_vis = 'N'
        where ref_form_2 = v_ref_form_2;
     elsif estado_tarefa = 99 then
        update formulario
        set consulta_vis = 'X'
        where ref_form_2 = v_ref_form_2;
     elsif estado_tarefa = 98 then
        visxml.PSearchAppExamination (v_ano_form, v_num_form,msg_resp,'0002',null,'6');
        estado_tarefa := visxml_cs.PSearchAppExamination (msg_resp,v_ano_form, v_num_form,'6');
        if estado_tarefa = 55 then
           update formulario
           set consulta_vis = 'N'
           where ref_form_2 = v_ref_form_2;
        elsif estado_tarefa = 99 then
           update formulario
           set consulta_vis = 'X'
           where ref_form_2 = v_ref_form_2;
        else
           update formulario
           set consulta_vis = 'C'
           where ref_form_2 = v_ref_form_2;
        end if;
     else
        update formulario
        set consulta_vis = 'C'
        where ref_form_2 = v_ref_form_2;
     end if;
     else
        insert into link_vis_manual (ano_form, num_form, vis_application, tratado, cri_uti, cri_dat, finger)
        values(v_ano_form, v_num_form, 'N/E', 'S', user, sysdate, 'N');

        update formulario
        set consulta_vis = 'C'
        where ref_form_2 = v_ref_form_2;
     end if;
     commit;
end loop;
close c1;
end;
/

prompt
prompt Creating procedure ENVIA_GRUPO
prompt ==============================
prompt
create or replace procedure rpv.ENVIA_GRUPO is

  CURSOR C1 IS
  select id_grupo, cod_pos
  from grupos
  where enviado is null;

  CURSOR F(v_id_grupo number) Is
  Select g.ref_form_2, f.ano_form, f.num_form
  From grupos_det g, formulario f
  Where g.id_grupo = v_id_grupo and g.ref_form_2 = f.ref_form_2;

  wref_ped_envio VARCHAR2(19);
  --
  CURSOR c_envio IS
  SELECT NVL(MAX(num_msg_envio), 0) FROM envio
  WHERE tip_form_envio = 'K'
  AND ref_ped_envio = wref_ped_envio;
  --
  Aj_Posto POSTO.COD_POS%TYPE;

  CURSOR c_posto IS
  SELECT end_envio
  FROM POSTO
  WHERE cod_pos = Aj_Posto;
  --
  wnum_msg_envio NUMBER(2);
  wassunto VARCHAR2(50);
  --
  wendereco_envio VARCHAR2(120);
  --
  v_id_grupo grupos.id_grupo%type;
  v_ref_form_2 formulario.ref_form_2%type;
  v_ano_form   formulario.ano_form%type;
  v_num_form   formulario.num_form%type;
  v_g          varchar2(1);
  BEGIN
     open c1;
     loop
          fetch c1 into v_id_grupo, Aj_Posto;
          exit when c1%notfound;

          Open F(v_id_grupo);
          loop
               FETCH F into v_ref_form_2, v_ano_form, v_num_form;
               exit when f%notfound;
               begin
               select 's' into v_g from vinheta
               where ano_form = v_ano_form and num_form = v_num_form
               and est_vin = 'E';
               exception when no_data_found then
                         v_g := 'n';
               end;
               if v_g = 'n' then
                  exit;
               end if;
          end loop;
          Close F;
     if v_g <> 'n' then

     wref_ped_envio := 'PRT' || to_char(aj_posto) || to_char(v_id_grupo, 'FM000000000009');
     --
     OPEN c_envio;
     FETCH c_envio INTO wnum_msg_envio;
     IF c_envio%NOTFOUND THEN
        wnum_msg_envio := 0;
     END IF;
     CLOSE c_envio;
     --
     wnum_msg_envio := wnum_msg_envio + 1;
     --
     wassunto := wref_ped_envio||'.K';
     --
     OPEN c_posto;
     FETCH c_posto INTO wendereco_envio;
     CLOSE c_posto;
     --

     INSERT INTO envio(
           tip_form_envio,
           ref_ped_envio,
           num_msg_envio,
           tip_dest,
           importanc_envio,
           assunto,
           dat_envio,
           uti_envio,
           est_envio,
           tip_envio,
           endereco_envio,
           dr_ndr,
           seq_envio,
           GRUPO_ID_GRUPO)
     VALUES
           ('K',
           wref_ped_envio,
           wnum_msg_envio,
           'C',
           '3',
           wassunto,
           sysdate,
           user,
           'P',
           'R',
           wendereco_envio,
           'S',
           envio_seq_envio.nextval,
           v_id_grupo);

      update grupos
      set enviado = 'S'
      where id_grupo = v_id_grupo;

      commit;
     end if;
     end loop;
     close c1;
  END;
/

prompt
prompt Creating procedure ENVIA_NOTIFICACOES
prompt =====================================
prompt
create or replace procedure rpv.ENVIA_NOTIFICACOES is

  CURSOR C1 IS
  select j.ref_form_2, j.tipo, f.cod_pos,
  f.cod_pais_sch_ref||f.ref_form_2||f.ref_form_3
  from justifica_recusa j,formulario f
  where j.ref_form_2 = f.ref_form_2 and j.enviou is null and j.tipo in ('K','A');

  wref_ped_envio VARCHAR2(19);
  --
  CURSOR c_envio IS
  SELECT NVL(MAX(num_msg_envio), 0) FROM envio
  WHERE tip_form_envio = 'X'
  AND ref_ped_envio = wref_ped_envio;
  --
  Aj_Posto formulario.cod_pos%type;

  CURSOR c_posto IS
  SELECT end_envio
  FROM POSTO
  WHERE cod_pos = Aj_Posto;
  --
  wnum_msg_envio NUMBER(2);
  wassunto VARCHAR2(50);
  --
  wendereco_envio VARCHAR2(120);
  --
  v_ref_form_2 formulario.ref_form_2%type;
  v_tipo         justifica_recusa.tipo%type;
  v_referencia   varchar2(19);
  BEGIN
     open c1;
     loop
          fetch c1 into v_ref_form_2, v_tipo, Aj_Posto, v_referencia;
          exit when c1%notfound;

     wref_ped_envio := v_referencia;
     --
     OPEN c_envio;
     FETCH c_envio INTO wnum_msg_envio;
     IF c_envio%NOTFOUND THEN
        wnum_msg_envio := 0;
     END IF;
     CLOSE c_envio;
     --
     wnum_msg_envio := wnum_msg_envio + 1;
     --
     wassunto := wref_ped_envio||'.X';
     --
     OPEN c_posto;
     FETCH c_posto INTO wendereco_envio;
     CLOSE c_posto;
     --

     INSERT INTO envio(
           tip_form_envio,
           ref_ped_envio,
           num_msg_envio,
           tip_dest,
           importanc_envio,
           assunto,
           dat_envio,
           uti_envio,
           est_envio,
           tip_envio,
           endereco_envio,
           dr_ndr,
           seq_envio,
           notificacao_ref_form_2)
     VALUES
           ('X',
           wref_ped_envio,
           wnum_msg_envio,
           'C',
           '3',
           wassunto,
           sysdate,
           user,
           'P',
           'R',
           wendereco_envio,
           'S',
           envio_seq_envio.nextval,
           v_ref_form_2);

      update justifica_recusa
      set enviou = 'S'
      where ref_form_2 = v_ref_form_2;

      commit;

     end loop;
     close c1;
  END;
/

prompt
prompt Creating procedure FORMULARIO_WEB_DEL
prompt =====================================
prompt
CREATE OR REPLACE PROCEDURE RPV.formulario_web_del
IS
cursor c1 is
select nome, apel, dat_nasc, count(*)
from formulario_web where num_form is null and trunc(data_agendamento) > trunc(sysdate)
group by nome, apel, dat_nasc
having count(*) > 1;

v_nome formulario_web.nome%type;
v_apel formulario_web.apel%type;
v_dat_nasc formulario_web.dat_nasc%type;
v_conta number(5);
v_num_form_web formulario_web.num_form_web%type;

begin
OPEN C1;
loop
    fetch c1 into v_nome, v_apel, v_dat_nasc, v_conta;
    exit when c1%notfound;

    select max(substr(num_form_web,2)) into v_num_form_web
    from formulario_Web
    where nome = v_nome and apel = v_apel and dat_nasc = v_dat_nasc;

    insert into formulario_web_del_bck
    select fw.*, sysdate /*HC New acrecentei coluna para audit*/
    from formulario_web fw
    where nome = v_nome and apel = v_apel and dat_nasc = v_dat_nasc and
    num_form_web <> 'W' || v_num_form_web and num_form is null;
    --and trunc(data_agendamento) > trunc(sysdate);

    begin--HC New
    delete from formulario_web
    where nome = v_nome and apel = v_apel and dat_nasc = v_dat_nasc and
    num_form_web <> 'W' || v_num_form_web and num_form is null;
    --and trunc(data_agendamento) > trunc(sysdate);
    --HC New inic
    exception
    when dup_val_on_index then

     for item in(select la.*,rowid rid from LIMPA_AGENDA la where  la.NUM_FORM_WEB in(select TO_NUMBER(SUBSTR(fw.NUM_FORM_WEB,2))
                                    from formulario_web fw
                                    where nome = v_nome and apel = v_apel and dat_nasc = v_dat_nasc and
                                    num_form_web <> 'W' || v_num_form_web and num_form is null)
      and tratado='S')loop

       insert into LIMPA_AGENDA_del_bck(NUM_FORM_WEB, TIPO, TRATADO, CRI_UTI, CRI_DAT, DATE_DEL)
       values(item.NUM_FORM_WEB, item.TIPO, item.TRATADO, item.CRI_UTI, item.CRI_DAT, sysdate);

       delete from LIMPA_AGENDA la where  la.rowid=item.rid;

     end loop;

     delete from formulario_web
      where nome = v_nome and apel = v_apel and dat_nasc = v_dat_nasc and
      num_form_web <> 'W' || v_num_form_web and num_form is null;
     --dbms_output.put_line('ERRO nome="'||v_nome||'" and apel="'||v_apel||'" and dat_nasc="'||v_dat_nasc||' and num_form_web<>"W'||v_num_form_web);
     --raise;
    end;
    --HC New fim
    commit;
end loop;
close c1;
commit;
end;
/

prompt
prompt Creating procedure GERA_ARCHIVES
prompt ================================
prompt
create or replace procedure rpv.Gera_Archives is
var       varchar2(50);
begin
var := 'ALTER SYSTEM SWITCH LOGFILE';
execute immediate var;
end Gera_Archives;
/

prompt
prompt Creating procedure SHELL
prompt ========================
prompt
create or replace procedure rpv.shell (
     cmd IN varchar2)
     as external
     library shell_lib
     name "_sh"
     language C
     parameters (
     cmd string);
/

prompt
prompt Creating procedure HISTORICO
prompt ============================
prompt
CREATE OR REPLACE PROCEDURE RPV."HISTORICO" is

cursor c1 is
select f.ref_form_2, f.ano_form, f.num_form, f.num_doc_viag
from formulario f
where f.tip_vis_conced is not null and
f.cod_pare_pos is not null and
trunc(months_between(trunc(sysdate),to_date(f.dat_ped,'yyyy/mm/dd')),0) > 59
union
select f.ref_form_2, f.ano_form, f.num_form, f.num_doc_viag
from formulario f
where f.cod_pare_pos in ('3','6') and
trunc(months_between(trunc(sysdate),to_date(f.dat_ped,'yyyy/mm/dd')),0) > 59
union
select f.ref_form_2, f.ano_form, f.num_form, f.num_doc_viag
from formulario f
where f.cod_pare_pos is null and
trunc(months_between(trunc(sysdate),to_date(f.dat_ped,'yyyy/mm/dd')),0) > 59
and nvl(f.reapr,'N') = 'N'
union
select f.ref_form_2, f.ano_form, f.num_form, f.num_doc_viag
from formulario f
where f.cod_pare_pos is not null and f.cod_pare is not null and
trunc(months_between(trunc(sysdate),to_date(f.dat_ped,'yyyy/mm/dd')),0) > 59
union
select f.ref_form_2, f.ano_form, f.num_form, f.num_doc_viag
from formulario f
where f.cod_pare_pos is not null and f.cod_pare = '6' and
trunc(months_between(trunc(sysdate),to_date(f.dat_ped,'yyyy/mm/dd')),0) > 59
and nvl(f.reapr,'N') = 'S';

cursor c2(ano_form1 number, num_form1 number) is
select recebe_num_fich
from recep
where (for_ano_form = ano_form1 and for_num_form = num_form1) or
(formz_ano_form = ano_form1 and formz_num_form = num_form1) or
(formi_ano_form = ano_form1 and formi_num_form = num_form1) or
(formr_ano_form = ano_form1 and formr_num_form = num_form1) or
(posred_ano_form = ano_form1 and posred_num_form = num_form1);

cursor c3(ano_form1 number, num_form1 number) is
select tip_form_envio, ref_ped_envio, num_msg_envio
from envio
where (for_ano_form = ano_form1 and for_num_form = num_form1) or
(formz_ano_form = ano_form1 and formz_num_form = num_form1) or
(formi_ano_form = ano_form1 and formi_num_form = num_form1) or
(formr_ano_form = ano_form1 and formr_num_form = num_form1) or
(posred_ano_form = ano_form1 and posred_num_form = num_form1) or
(formap_ano_form = ano_form1 and formap_num_form = num_form1);

cursor c4 (ref_form_2_1 varchar2) is
select t.num_ordem
from temp_imagens t, temp_imagens_det t2
where t.num_ordem = t2.num_ordem and
t2.ref_form_2 = ref_form_2_1;

v_ref_form_2      formulario.ref_form_2%type;
v_ano_form        formulario.ano_form%type;
v_num_form        formulario.num_form%type;
v_num_doc_viagem  formulario.num_doc_viag%type;
v_recebe_num_fich recep.recebe_num_fich%type;
v_tip_form_envio  envio.tip_form_envio%type;
v_ref_ped_envio   envio.ref_ped_envio%type;
v_num_msg_envio   envio.num_msg_envio%type;
v_num_ordem       temp_imagens.num_ordem%type;
v_num_ordem_min   temp_imagens.num_ordem%type;
v_conta_imagens   number(3);

begin
open c1;
loop
     fetch c1 into v_ref_form_2, v_ano_form, v_num_form, v_num_doc_viagem;
     exit when c1%notfound;
     open c2(v_ano_form, v_num_form);
     loop
          fetch c2 into v_recebe_num_fich;
          exit when c2%notfound;
          delete from temp_rec_anexos
          where recebe_num_fich = v_recebe_num_fich;
          delete from temp_rec_detalhe
          where recebe_num_fich = v_recebe_num_fich;
          delete from temp_rec
          where num_fich = v_recebe_num_fich;
          delete from recep
          where recebe_num_fich = v_recebe_num_fich;
     end loop;
     close c2;

     open c3(v_ano_form, v_num_form);
     loop
          fetch c3 into v_tip_form_envio, v_ref_ped_envio, v_num_msg_envio;
          exit when c3%notfound;
          delete from temp_env_detalhe
          where envia_msgid in (select msgid from temp_env
          where enviar_tip_form_envio = v_tip_form_envio and
          enviar_ref_ped_envio = v_ref_ped_envio and
          enviar_num_msg_envio = v_num_msg_envio);
          delete from temp_env_anexos where envia_msgid in (select
          msgid from temp_env where enviar_tip_form_envio = v_tip_form_envio and
          enviar_ref_ped_envio = v_ref_ped_envio and
          enviar_num_msg_envio = v_num_msg_envio);
          delete from temp_reps
          where envia_msgid in (select
          msgid from temp_env where enviar_tip_form_envio = v_tip_form_envio and
          enviar_ref_ped_envio = v_ref_ped_envio and
          enviar_num_msg_envio = v_num_msg_envio);
          delete from temp_env
          where enviar_tip_form_envio = v_tip_form_envio and
          enviar_ref_ped_envio = v_ref_ped_envio and
          enviar_num_msg_envio = v_num_msg_envio;
          delete from envio
          where tip_form_envio = v_tip_form_envio and
          ref_ped_envio = v_ref_ped_envio and
          num_msg_envio = v_num_msg_envio;
     end loop;
     close c3;

     delete from form_doc where ano_form = v_ano_form and num_form = v_num_form;
     delete from form_est where ano_form = v_ano_form and num_form = v_num_form;
     delete from pais_transito where ano_form = v_ano_form and num_form = v_num_form;
     delete from descendente where ano_form = v_ano_form and num_form = v_num_form;
     delete from form_z where ano_form = v_ano_form and num_form = v_num_form;
     delete from form_i where ano_form = v_ano_form and num_form = v_num_form;
     delete from form_b where ano_form = v_ano_form and num_form = v_num_form;
     delete from form_p where ano_form = v_ano_form and num_form = v_num_form;
     delete from form_ap where ano_form = v_ano_form and num_form = v_num_form;
     delete from form_r where ano_form = v_ano_form and num_form = v_num_form;
     delete from indef_justifica_parecer where ano_form = v_ano_form and num_form = v_num_form;
     delete from posto_redir where ano_form = v_ano_form and num_form = v_num_form;
     delete from justifica_recusa where ref_form_2 = v_ref_form_2;
     delete from notas_posto where ano_form = v_ano_form and num_form = v_num_form;
     delete from vinheta where ano_form = v_ano_form and num_form = v_num_form;
     delete from vistos_3_anos where ano_form = v_ano_form and num_form = v_num_form;
     delete from meios_subsistencia where ano_form = v_ano_form and num_form = v_num_form;
     delete from anexos where ano_form = v_ano_form and num_form = v_num_form;
     delete from biometria_info where ano_form = v_ano_form and num_form = v_num_form;
     delete from grupos_det where ref_form_2 = v_ref_form_2;
     delete from temp_rec_vis where ano_form = v_ano_form and num_form = v_num_form;
     delete from temp_env_vis where ano_form = v_ano_form and num_form = v_num_form;
     delete from vis_link_status_detalhes where ano_form = v_ano_form and num_form = v_num_form;
     delete from link_vis_manual where ano_form = v_ano_form and num_form = v_num_form;
     delete from audit_cons_nsis where ano_form = v_ano_form and num_form = v_num_form;
     delete from log_nsisii where ano_form = v_ano_form and num_form = v_num_form;

     delete from meios_subsistencia_web where num_form_web in (select num_form_web
     from formulario_web where ano_form = v_ano_form and num_form = v_num_form);
     delete from vistos_3_anos_web where num_form_web in (select num_form_web
     from formulario_web where ano_form = v_ano_form and num_form = v_num_form);
     delete from descendente_web where num_form_web in (select num_form_web
     from formulario_web where ano_form = v_ano_form and num_form = v_num_form);
     delete from pais_transito_web where num_form_web in (select num_form_web
     from formulario_web where ano_form = v_ano_form and num_form = v_num_form);
     delete from formulario_web where ano_form = v_ano_form and num_form = v_num_form;

     open c4(v_ref_form_2);
     loop
          fetch c4 into v_num_ordem;
          exit when c4%notfound;
          delete from temp_imagens_det
          where ref_form_2 = v_ref_form_2;
          select count(*) into v_conta_imagens
          from temp_imagens_det
          where num_ordem = v_num_ordem;
          if v_conta_imagens = 0 then
             select min(num_ordem) into v_num_ordem_min
             from temp_imagens
             where num_doc_viagem = v_num_doc_viagem;
             if v_num_ordem_min = v_num_ordem then
                shell('del d:\fotos\tratadas\' || v_num_doc_viagem || '.jpg');
                shell('del d:\fotos\tratadas\bio' || v_num_doc_viagem || '.nist');
             else
                shell('del d:\fotos\tratadas\' || v_num_doc_viagem || '_' || v_num_ordem || '.jpg');
                shell('del d:\fotos\tratadas\bio' || v_num_doc_viagem || '_' || v_num_ordem || '.nist');
             end if;
             delete from temp_imagens where num_ordem = v_num_ordem;
          end if;
     end loop;
     close c4;
     delete from formulario where ano_form = v_ano_form and num_form = v_num_form;
     commit;
end loop;
close c1;
--Tratar Grupos
delete from grupos where id_grupo not in (select id_grupo from grupos_det);
commit;
end;
/

prompt
prompt Creating procedure HOST_COMMAND
prompt ===============================
prompt
CREATE OR REPLACE PROCEDURE RPV.host_command (p_command  IN  VARCHAR2)
AS LANGUAGE JAVA 
NAME 'Host.executeCommand (java.lang.String)';
/

prompt
prompt Creating procedure INTEGRA_FOTO_BIO
prompt ===================================
prompt
create or replace procedure rpv.integra_foto_bio is
cursor c1 is
select distinct f.ref_form_2, f.ano_form, f.num_form, f.num_doc_viag
from formulario f
where f.foto_associada = 'N' and f.cod_pare_pos is null;

cursor c2 (ano_form1 number, num_form1 number) is
select a.fich, a.nome_fich, a.anexo_id
from anexos a
where a.ano_form = ano_form1 and a.num_form = num_form1
and a.anexo_id in (2,5)
order by a.anexo_id;

v_ref_form_2   formulario.ref_form_2%type;
v_ano_form     formulario.ano_form%type;
v_num_form     formulario.num_form%type;
v_num_doc_viag formulario.num_doc_viag%type;
v_fich         anexos.fich%type;
v_nome_fich    anexos.nome_fich%type;
v_anexo_id     anexos.anexo_id%type;
v_ordem        temp_imagens.num_ordem%type;
v_seq_insercao temp_imagens_det.seq_interna%type;
p_bio          varchar2(100);
p_foto         varchar2(100);
v_x            varchar2(1);
controla       number(1);
begin
open c1;
loop
     fetch c1 into v_ref_form_2, v_ano_form, v_num_form, v_num_doc_viag;
     exit when c1%notfound;
     open c2(v_ano_form, v_num_form);
     loop
          fetch c2 into v_fich, v_nome_fich, v_anexo_id;
          exit when c2%notfound;

          if v_anexo_id = 2 then
             select seq_fotos.nextval into v_ordem from dual;

             begin
             select distinct 's' into v_x
             from temp_imagens
             where num_doc_viagem = v_num_doc_viag;
             exception when no_data_found then
                    v_x := 'n';
             end;
             if v_x = 'n' then
                p_foto := v_num_doc_viag || '.jpg';
                p_bio := 'bio' || v_num_doc_viag || '.nist';
             else
               p_foto := v_num_doc_viag || '_' || v_ordem || '.jpg';
               p_bio := 'bio' || v_num_doc_viag || '_' || v_ordem || '.nist';
             end if;
             funcoes.ExportBlob('d:\fotos\tratadas\' || p_foto,v_fich);
             controla := 1;
          elsif v_anexo_id = 5 then
             p_bio := 'bio' || v_num_doc_viag || '.nist';
             funcoes.ExportBlob('d:\fotos\tratadas\' || p_bio,v_fich);

             insert into temp_imagens (num_ordem,num_doc_viagem,usado,foto,cri_dat,cri_uti,biometria)
             values(v_ordem,v_num_doc_viag,'S',bfilename('FOTOGRAFIAS',p_foto),to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'),user,bfilename('FOTOGRAFIAS',p_bio));
             controla := 2;
          end if;
     end loop;
     close c2;
     if controla = 1 then
        insert into temp_imagens (num_ordem,num_doc_viagem,usado,foto,cri_dat,cri_uti,biometria)
        values(v_ordem,v_num_doc_viag,'S',bfilename('FOTOGRAFIAS',p_foto),to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'),user,null);
     end if;
     select nvl(max(seq_interna),0) + 1 into v_seq_insercao
     from temp_imagens_det
     where num_ordem = v_ordem;

     insert into temp_imagens_det(num_ordem,seq_interna,ano_form,num_form,ref_form_2,cri_dat,cri_uti)
     values(v_ordem,v_seq_insercao,v_ano_form,v_num_form,v_ref_form_2,to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'),user);

     update formulario
     set foto_associada = 'S'
     where ano_form = v_ano_form and num_form = v_num_form;

     controla := 0;
     commit;
end loop;
close c1;
commit;
end;
/

prompt
prompt Creating procedure LIMPA_SHARED
prompt ===============================
prompt
CREATE OR REPLACE PROCEDURE RPV.limpa_shared IS
begin
execute immediate 'alter system flush shared_pool';
end;
/

prompt
prompt Creating procedure LISTAS_VERDES
prompt ================================
prompt
create or replace procedure rpv.Listas_Verdes is

cursor c1 is
select ref_form_2, nome, apel, dat_nasc, num_doc_viag
from formulario
where consulta_vis = 'V' and cod_pare_pos is null
and nvl(enviou_alerta_verde,'N') in ('N','A')
order by ref_form_2;

CURSOR c_mail (ind number) is
select val_param from param_det
where ind_para = ind;

v_ref_form_2       formulario.ref_form_2%type;
v_nome             formulario.nome%type;
v_apel             formulario.apel%type;
v_dat_nasc         formulario.dat_nasc%type;
v_num_doc_viag     formulario.num_doc_viag%type;
v_assunto          varchar2(100);
v_texto_final      varchar2(30000);
v_texto_final_tit  varchar2(30000);
v_texto_final_verdes varchar2(30000);
v_email              param_det.val_param%type;
x                    number;
begin

v_assunto := 'Vistos Verdes sem Parecer do Posto';
v_texto_final_tit := 'Segue-se a lista dos vistos verdes por analisar. (' || to_char(sysdate,'yyyy/mm/dd hh24:mi:ss') || ')' || chr(10) || chr(10);
open c1;
loop
     fetch c1 into v_ref_form_2, v_nome, v_apel, v_dat_nasc, v_num_doc_viag;
     exit when c1%notfound;
     if v_texto_final_verdes is null then
        v_texto_final_verdes := 'VISTOS VERDES' || chr(10);
        v_texto_final_verdes := v_texto_final_verdes || v_ref_form_2 || ';' || v_nome || ';' ||  v_apel || ';' ||  v_dat_nasc || ';' ||  v_num_doc_viag || ';' ||  chr(10) ||  chr(10);
     else
        v_texto_final_verdes := v_texto_final_verdes || v_ref_form_2 || ';' || v_nome || ';' ||  v_apel || ';' ||  v_dat_nasc || ';' ||  v_num_doc_viag || ';' ||  chr(10) ||  chr(10);
     end if;
     update formulario
     set enviou_alerta_verde = 'A'
     where ref_form_2 = v_ref_form_2;
     commit;
end loop;
close c1;
commit;
if v_texto_final_verdes is null then
   v_texto_final_verdes := 'Não existem pedidos verdes para analisar.' || chr(10);
end if;

v_texto_final := v_texto_final_tit || v_texto_final_verdes;
open c_mail(69);
loop
    fetch c_mail into v_email;
    exit when c_mail%notfound;
    --v_email := 'joaopedro.oliveira@mne.pt';
    x := pk_mail.testMail('noreplyvistos', 'noreplyvistos@mne.pt ', NULL,
    v_email, NULL, NULL, v_assunto, v_texto_final);
    if x = 0 then
       update formulario
       set enviou_alerta_verde = 'S'
       where enviou_alerta_verde = 'A';
       commit;
    end if;
end loop;
close c_mail;
commit;
end;
/

prompt
prompt Creating procedure LOAD_A_FILE
prompt ==============================
prompt
create or replace procedure rpv.load_a_file( p_id in number,
p_filename in varchar2 )
as
l_clob clob;
l_bfile bfile;
begin
insert into temp_read_vismail values ( p_id, empty_clob() )
returning theClob into l_clob;
l_bfile := bfilename( 'FOTOGRAFIAS', p_filename );
dbms_lob.fileopen( l_bfile );
dbms_lob.loadfromfile( l_clob, l_bfile,
dbms_lob.getlength( l_bfile ) );
dbms_lob.fileclose( l_bfile );
commit;
end;
/

prompt
prompt Creating procedure TRATA_GRUPO
prompt ==============================
prompt
create or replace procedure rpv.trata_grupo is
  CURSOR C1 IS
  select id_grupo, cod_pos
  from grupos
  where enviado is null;

  CURSOR F(v_id_grupo number) Is
  Select g.ref_form_2, f.ano_form, f.num_form, f.cod_pare, f.cod_pare_pos
  From grupos_det g, formulario f
  Where g.id_grupo = v_id_grupo and g.ref_form_2 = f.ref_form_2
  and g.concluido is null;

  wref_ped_envio VARCHAR2(19);
  --
  CURSOR c_envio IS
  SELECT NVL(MAX(num_msg_envio), 0) FROM envio
  WHERE tip_form_envio = 'K'
  AND ref_ped_envio = wref_ped_envio;
  --
  Aj_Posto POSTO.COD_POS%TYPE;

  CURSOR c_posto IS
  SELECT end_envio
  FROM POSTO
  WHERE cod_pos = Aj_Posto;
  --
  cursor c2(v_id_grupo number) is
  select nvl(concluido,'N'), count(*)
  from grupos_det
  where id_grupo = v_id_grupo
  group by concluido;

  wnum_msg_envio NUMBER(2);
  wassunto VARCHAR2(50);
  --
  wendereco_envio VARCHAR2(120);
  --
  v_id_grupo grupos.id_grupo%type;
  v_ref_form_2 formulario.ref_form_2%type;
  v_ano_form   formulario.ano_form%type;
  v_num_form   formulario.num_form%type;
  v_cod_pare   formulario.cod_pare%type;
  v_cod_pare_pos formulario.cod_pare_pos%type;
  v_g          varchar2(1);
  v_concluido  varchar2(1);
  v_continua   varchar2(1);
  v_conta      number(5);
  BEGIN
     open c1;
     loop
          fetch c1 into v_id_grupo, Aj_Posto;
          exit when c1%notfound;

          Open F(v_id_grupo);
          loop
               FETCH F into v_ref_form_2, v_ano_form, v_num_form, v_cod_pare, v_cod_pare_pos;
               exit when f%notfound;
               --Verifica se tem vinheta emitida
               begin
               select 's' into v_g from vinheta
               where ano_form = v_ano_form and num_form = v_num_form
               and est_vin = 'E';
               exception when no_data_found then
                         v_g := 'n';
               end;

               if v_g = 's' then
                  update grupos_det
                  set concluido = 'E'
                  where id_grupo = v_id_grupo and ref_form_2 = v_ref_form_2;
               else
                  if v_cod_pare_pos = '6' then
                     update grupos_det
                     set concluido = 'X'
                     where id_grupo = v_id_grupo and ref_form_2 = v_ref_form_2;
                  elsif v_cod_pare_pos = '2' then
                     update grupos_det
                     set concluido = 'I'
                     where id_grupo = v_id_grupo and ref_form_2 = v_ref_form_2;
                  else
                     if v_cod_pare = '2' then
                        update grupos_det
                        set concluido = 'I'
                        where id_grupo = v_id_grupo and ref_form_2 = v_ref_form_2;
                     elsif v_cod_pare = '6' then
                        update grupos_det
                        set concluido = 'X'
                        where id_grupo = v_id_grupo and ref_form_2 = v_ref_form_2;
                     end if;
                  end if;
               end if;
               commit;
           end loop;
          Close F;
          commit;
          v_continua := 's';
          open c2(v_id_grupo);
          loop
               fetch c2 into v_concluido, v_conta;
               exit when c2%notfound;
               if v_concluido in ('N','X') then
                  v_continua := 'n';
               end if;
          end loop;
          close c2;
    if v_continua = 's' then
     wref_ped_envio := 'PRT' || to_char(aj_posto) || to_char(v_id_grupo, 'FM000000000009');
     --
     OPEN c_envio;
     FETCH c_envio INTO wnum_msg_envio;
     IF c_envio%NOTFOUND THEN
        wnum_msg_envio := 0;
     END IF;
     CLOSE c_envio;
     --
     wnum_msg_envio := wnum_msg_envio + 1;
     --
     wassunto := wref_ped_envio||'.K';
     --
     OPEN c_posto;
     FETCH c_posto INTO wendereco_envio;
     CLOSE c_posto;
     --

     INSERT INTO envio(
           tip_form_envio,
           ref_ped_envio,
           num_msg_envio,
           tip_dest,
           importanc_envio,
           assunto,
           dat_envio,
           uti_envio,
           est_envio,
           tip_envio,
           endereco_envio,
           dr_ndr,
           seq_envio,
           GRUPO_ID_GRUPO)
     VALUES
           ('K',
           wref_ped_envio,
           wnum_msg_envio,
           'C',
           '3',
           wassunto,
           sysdate,
           user,
           'P',
           'R',
           wendereco_envio,
           'S',
           envio_seq_envio.nextval,
           v_id_grupo);

      update grupos
      set enviado = 'S'
      where id_grupo = v_id_grupo;

      commit;
     end if;
     end loop;
     close c1;
  END;
/

prompt
prompt Creating procedure VERIFICA_CORES
prompt =================================
prompt
CREATE OR REPLACE PROCEDURE RPV."VERIFICA_CORES" is
cursor c1 is
select distinct f.ref_form_2, f.ano_form, f.num_form, f.dat_nasc,
f.cod_pais_nac_1, f.ind_grupo, f.consulta_nsis, f.nome, f.apel
from formulario f, link_vis_manual l
where f.ano_form = l.ano_form and f.num_form = l.num_form and
f.consulta_vis = 'C' and f.cod_pare_pos is null and l.vis_application <> 'N/E';

cursor c6 is
select distinct f.ref_form_2, f.ano_form, f.num_form, f.dat_nasc,
f.cod_pais_nac_1, f.ind_grupo, f.consulta_nsis, f.nome, f.apel
from formulario f, link_vis_manual l
where f.ano_form = l.ano_form and f.num_form = l.num_form and
f.consulta_vis = 'C' and f.cod_pare_pos is null and l.vis_application = 'N/E';

cursor c2(ano_form1 number, num_form1 number) is
select est_pedido_candidato, dateofapplication
from link_vis_manual
where ano_form = ano_form1 and num_form = num_form1
--and est_pedido_candidato = 'VISA ISSUED'
order by dateofapplication desc;

cursor c3(ano_form1 number, num_form1 number) is
select est_pedido_candidato, dateofapplication
from link_vis_manual
where ano_form = ano_form1 and num_form = num_form1
and est_pedido_candidato = 'VISA REFUSED'
order by dateofapplication desc;

cursor c4 is
select f.ref_form_2, f.ano_form, f.num_form, g.id_grupo
from formulario f, grupos_det g
where f.consulta_vis = 'W' and f.grupo_estado = '2'
and f.ref_form_2 = g.ref_form_2 and f.cod_pare_pos is null;

cursor c5 (num_grupo1 number, ref_form varchar2) is
select f.ref_form_2, nvl(f.consulta_vis,'N')
from formulario f, grupos_det g
where f.ref_form_2 = g.ref_form_2 and g.id_grupo = num_grupo1
and f.ref_form_2 <> ref_form;

v_ref_form_2           formulario.ref_form_2%type;
v_ano_form             formulario.ano_form%type;
v_num_form             formulario.num_form%type;
v_dat_nasc             formulario.dat_nasc%type;
v_cod_pais_nac_1       formulario.cod_pais_nac_1%type;
v_ind_grupo            formulario.ind_grupo%type;
v_consulta_nsis        formulario.consulta_nsis%type;
v_ref_form_2_1         formulario.ref_form_2%type;
v_consulta_vis         formulario.consulta_vis%type;
v_nome                 formulario.nome%type;
v_apel                 formulario.apel%type;
v_est_pedido_candidato link_vis_manual.est_pedido_candidato%type;
v_dateofapplication    link_vis_manual.dateofapplication%type;
v_id_grupo             grupos_det.id_grupo%type;
conta_est_issued       number(3);
conta_est_refused      number(3);
conta_est_date_app     number(3);
controla               number(3):=0;
controla_verde         number(3):=0;
controla_w             number(3):=0;
v_cod_pais             posto.cod_pais%type;
v_reag_alertas         varchar2(1);
begin
select cod_pais into v_cod_pais
from posto p, param_glo pg
where pg.ind_para = 3 and to_number(pg.val_para) = p.cod_pos;

open c1;
loop
     fetch c1 into v_ref_form_2, v_ano_form, v_num_form,
     v_dat_nasc, v_cod_pais_nac_1, v_ind_grupo, v_consulta_nsis,
     v_nome, v_apel;
     exit when c1%notfound;
     if substr(v_dat_nasc,6,2) = '00' then
       v_dat_nasc := substr(v_dat_nasc,1,5) || '01' || substr(v_dat_nasc,8,3);
     end if;
     if substr(v_dat_nasc,9,2) = '00' then
       v_dat_nasc := substr(v_dat_nasc,1,8) || '01';
     end if;
     controla := 0;
     --Verifica se tem alguma ocorrência em Reag Alertas
     begin
     select distinct 'x' into v_reag_alertas
     from reag_alertas
     where nome = v_nome and apelido = v_apel and dat_nasc = v_dat_nasc;
     exception when no_data_found then
               v_reag_alertas := 'n';
     end;
     if v_reag_alertas = 'x' then
        update formulario
        set consulta_vis = 'E'
        where ref_form_2 = v_ref_form_2;
        controla := 1;
     end if;

     --Verifica se está indeferido no NSIS
     if substr(v_consulta_nsis,1,1) = 'I' then
       update formulario
       set consulta_vis = 'E'
       where ref_form_2 = v_ref_form_2;
       controla := 1;
     else
     --Verifica se tem visto indeferido no VIS há menos de 3 meses
     select count(*) into conta_est_refused
     from link_vis_manual
     where ano_form = v_ano_form and num_form = v_num_form and
     est_pedido_candidato = 'VISA REFUSED';
     if conta_est_refused >= 1 then
        open c3(v_ano_form, v_num_form);
        loop
             fetch c3 into v_est_pedido_candidato, v_dateofapplication;
             exit when c3%notfound;
             if trunc(months_between(trunc(sysdate),to_date(v_dateofapplication,'yyyy/mm/dd')),0) < 3 then
                --Visto encarnado
                update formulario
                set consulta_vis = 'E'
                where ref_form_2 = v_ref_form_2;
                controla := 1;
             end if;
             commit;
        end loop;
        close c3;
     end if;
     if controla = 0 then
     --Verifica se nacionalidade local
     if v_cod_pais_nac_1 = v_cod_pais then
       --Verifica se tem mais de 18 anos
       if trunc(months_between(trunc(sysdate),to_date(v_dat_nasc,'yyyy/mm/dd'))/12,0) >= 18 then
         select count(*) into conta_est_date_app
         from link_vis_manual
         where ano_form = v_ano_form and num_form = v_num_form and
         est_pedido_candidato = 'VISA ISSUED'
         and trunc(months_between(trunc(sysdate),to_date(DAT_FIM_VIN_CANDIDATO,'yyyy/mm/dd')),0) < 6
         and trunc(months_between(to_date(DAT_FIM_VIN_CANDIDATO,'yyyy/mm/dd'),to_date(DAT_INI_VIN_CANDIDATO,'yyyy/mm/dd')),0) < 11;
         --Verifica se tem algum visto C anterior com a data de validade da vinheta inferior a 6 meses
         --(estão fora os C1, C2, C3, C4, C5)
         if conta_est_date_app = 0 then
         select count(*) into conta_est_issued
         from link_vis_manual
         where ano_form = v_ano_form and num_form = v_num_form and
         est_pedido_candidato = 'VISA ISSUED';
         --if conta_est_issued >= 2 then
         --Tem pelo menos 1 visto anteriores autorizados
         if conta_est_issued >= 1 then
         open c2(v_ano_form, v_num_form);
         controla := 0;
         controla_verde := 0;
         loop
              fetch c2 into v_est_pedido_candidato, v_dateofapplication;
              exit when c2%notfound;
              controla := controla + 1;
              --Verifica se o penúltimo visto foi pedido há menos de 2 anos
              --if controla = 2 and v_ind_grupo is null and trunc(months_between(trunc(sysdate),to_date(v_dateofapplication,'yyyy/mm/dd')),0) < 24 then
              --Verifica se ultimo autorizado há menos de 3 anos
              if controla = 1 and v_est_pedido_candidato = 'VISA ISSUED' and v_ind_grupo is null and trunc(months_between(trunc(sysdate),to_date(v_dateofapplication,'yyyy/mm/dd')),0) < 36 then
                 update formulario
                 set consulta_vis = 'V'
                 where ref_form_2 = v_ref_form_2;
                 commit;
                 controla_verde := 1;
              elsif controla = 1 and v_est_pedido_candidato = 'VISA ISSUED' and v_ind_grupo = '1' and trunc(months_between(trunc(sysdate),to_date(v_dateofapplication,'yyyy/mm/dd')),0) < 36 then
              --elsif controla = 2 and v_ind_grupo = '1' and trunc(months_between(trunc(sysdate),to_date(v_dateofapplication,'yyyy/mm/dd')),0) < 24 then
                 update formulario
                 set consulta_vis = 'W'
                 where ref_form_2 = v_ref_form_2;
                 commit;
                 controla_verde := 1;
              end if;
              commit;
         end loop;
         if controla_verde = 0 then
           update formulario
           set consulta_vis = 'Z'
           where ref_form_2 = v_ref_form_2;
           commit;
         end if;
         close c2;
         else
           update formulario
           set consulta_vis = 'Z'
           where ref_form_2 = v_ref_form_2;
           commit;
         end if;
         else
           update formulario
           set consulta_vis = 'Z'
           where ref_form_2 = v_ref_form_2;
         end if;
       else
         update formulario
         set consulta_vis = 'Z'
         where ref_form_2 = v_ref_form_2;
         commit;
       end if;
     else
         update formulario
         set consulta_vis = 'Z'
         where ref_form_2 = v_ref_form_2;
         commit;
     end if;
     commit;
     end if;
     end if;
end loop;
close c1;
commit;
open c6;
loop
     fetch c6 into v_ref_form_2, v_ano_form, v_num_form,
     v_dat_nasc, v_cod_pais_nac_1, v_ind_grupo, v_consulta_nsis,
     v_nome, v_apel;
     exit when c6%notfound;

     --Verifica se tem alguma ocorrência em Reag Alertas
     begin
     select distinct 'x' into v_reag_alertas
     from reag_alertas
     where nome = v_nome and apelido = v_apel and dat_nasc = v_dat_nasc;
     exception when no_data_found then
               v_reag_alertas := 'n';
     end;
     if v_reag_alertas = 'x' then
        update formulario
        set consulta_vis = 'E'
        where ref_form_2 = v_ref_form_2;
     else
     --Verifica se está indeferido no NSIS
     if substr(v_consulta_nsis,1,1) = 'I' then
       update formulario
       set consulta_vis = 'E'
       where ref_form_2 = v_ref_form_2;
     else
       update formulario
       set consulta_vis = 'A'
       where ref_form_2 = v_ref_form_2;
     end if;
     end if;
     commit;
end loop;
close c6;
--Marca como Laranja os pedidos que não ficaram amarelos (sem ocorrências no VIS)
update formulario
set consulta_vis = 'L'
where consulta_vis = 'Z';
commit;


--Trata dos casos W (VERDE MAS EM GRUPO)
open c4;
loop
     fetch c4 into v_ref_form_2, v_ano_form, v_num_form, v_id_grupo;
     exit when c4%notfound;
     open c5 (v_id_grupo, v_ref_form_2);
     controla_w := 0;
     loop
          fetch c5 into v_ref_form_2_1, v_consulta_vis;
          exit when c5%notfound;
          if v_consulta_vis in ('A','E','L') then
              update formulario
              --set consulta_vis = 'A'
              set consulta_vis = 'L'
              where ref_form_2 = v_ref_form_2 and consulta_vis in ('V','W');
              commit;
              controla_w := 1;
          elsif v_consulta_vis in ('C','N','X') then
              controla_w := 1;
          end if;
     end loop;
     close c5;
     if controla_w = 0 then
        update formulario
        set consulta_vis = 'V'
        where ref_form_2 = v_ref_form_2;
        commit;
     end if;
end loop;
close c4;
end;
/

prompt
prompt Creating procedure TRATA_PROCESSOS
prompt ==================================
prompt
create or replace procedure rpv.trata_processos is
begin
consulta_NSIS_vis;
commit;
verifica_cores;
commit;
end;
/

prompt
prompt Creating package body CHAMA_VIS_BROKER
prompt ======================================
prompt
create or replace package body rpv.CHAMA_VIS_BROKER is

 FUNCTION new_request(method    IN VARCHAR2,
                       namespace IN VARCHAR2)
                       RETURN request AS
    req request;
  BEGIN
    req.method    := method;
    req.namespace := namespace;
    RETURN req;
  END;
  PROCEDURE add_parameter(req   IN OUT NOCOPY request,
                          name  IN VARCHAR2,
                          type  IN VARCHAR2,
                          value IN CLOB) AS
  BEGIN

    req.body := req.body ||
       '<'||name||'>'||value||'</'||name||'>';

  END;
  PROCEDURE generate_envelope_vismail(req IN OUT NOCOPY request,
			      env IN OUT NOCOPY CLOB) AS
  BEGIN

   env := '<env:Envelope
xmlns:env="http://www.w3.org/2003/05/soap-envelope">
<env:Header/>
<env:Body>'||env||'</env:Body></env:Envelope>';
  END;
  PROCEDURE generate_envelope(req IN OUT NOCOPY request,
			      env IN OUT NOCOPY CLOB, v_id_env_vis IN VARCHAR2) AS
  v_id_env_vis1 varchar2(17);
  BEGIN

 select to_char(v_id_env_vis,'FM00000000000000009') into v_id_env_vis1 from dual;
   env := '<SOAP-ENV:Envelope
xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:xsd="http://www.w3.org/2001/XMLSchema">
<SOAP-ENV:Header>
<v1:Header xmlns:v1="http://www.europa.eu/schengen/vis/webservice/V1/">
<v1:messageID>' || v_id_env_vis1 || '</v1:messageID>
<v1:correlationID>' || '22' || substr(v_id_env_vis1,3) || '</v1:correlationID>
</v1:Header>
</SOAP-ENV:Header>
<SOAP-ENV:Body><'||req.method||' '||req.namespace||'>'||
req.body||'</'||req.method||'></SOAP-ENV:Body></SOAP-ENV:Envelope>';
  END;

  PROCEDURE generate_body_envelope(req IN OUT request,
                                   req1 in searchVIS,
                                   env IN OUT clob)
IS
env2 clob;
resultado clob;
buffersize NUMBER(5) := 2000;
chunk_buffer VARCHAR2(2000);
chunk_length NUMBER(5);
chunk_offset NUMBER;
rem_size binary_integer := 2000;
request_body_length NUMBER;
BEGIN

   request_body_length := dbms_lob.getlength(req1.strXML);
   --if request_body_length > 32767 then
   if request_body_length > 10000 then
   chunk_offset := 1;
   rem_size := 1000;
   While chunk_offset  <= request_body_length Loop
         dbms_lob.read (req1.strXML, rem_size, chunk_offset , chunk_buffer);
         chunk_buffer := htf.escape_sc(chunk_buffer);
         chunk_offset  := chunk_offset + rem_size;
         if resultado is null then
             resultado := chunk_buffer;
         else
             resultado := resultado || chunk_buffer;
         end if;
   end loop;
   else
     resultado := htf.escape_sc(req1.strXML);
   end if;

  env2 := '<VisIn>' ||
         '<Entidade>' ||
         req1.Entidade ||
         '</Entidade>' ||
         '<NomeMsg>' ||
         req1.NomeMsg ||
         '</NomeMsg>' ||
         '<NumMensagem>' ||
         req1.NumMensagem ||
         '</NumMensagem>' ||
         '<strXML>' ||
         resultado ||
         '</strXML>' ||
         '</VisIn>';

env := '<?xml version="1.0" encoding="UTF-8" ?>
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <soap:Body>' ||
    '<'||req.method||' '||req.namespace||'>'||env2||'</'||req.method||'>
  </soap:Body>
</soap:Envelope>';

  END generate_body_envelope;

  PROCEDURE show_envelope(env IN VARCHAR2) AS
    i   pls_integer;
    len pls_integer;
  BEGIN
    i := 1; len := length(env);
    WHILE (i <= len) LOOP
      dbms_output.put_line(substr(env, i, 60));
      i := i + 60;
    END LOOP;
  END;
  PROCEDURE check_fault(resp IN OUT NOCOPY response) AS
    fault_node   xmltype;
    fault_code   VARCHAR2(256);
    fault_string VARCHAR2(32767);
  BEGIN
     fault_node := resp.doc.extract('/soap:Fault',
       'xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/');
     IF (fault_node IS NOT NULL) THEN
       fault_code := fault_node.extract('/soap:Fault/faultcode/child::text()',
	 'xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/').getstringval();
       fault_string := fault_node.extract('/soap:Fault/faultstring/child::text()',
	 'xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/').getstringval();
       raise_application_error(-20000, fault_code || ' - ' || fault_string);
     END IF;
  END;
  FUNCTION invoke(req    IN OUT NOCOPY request,
                  url    IN VARCHAR2,
                  action IN VARCHAR2,
                  v_id_env_vis IN VARCHAR2) RETURN response AS
    env       VARCHAR2(32767);
    http_req  utl_http.req;
    http_resp utl_http.resp;
    resp      response;
    fHandle  	utl_file.file_type;
    ls_out_resp_clob clob;
    flag      number(1):=0;
    vvv       clob;
  BEGIN
    generate_envelope(req, env, v_id_env_vis);
    show_envelope(env);
    http_req := utl_http.begin_request(url, 'POST','HTTP/1.1');
    utl_http.set_header(http_req,'Content-Type','text/xml;charset=UTF-8');
    utl_http.set_header(http_req, 'Content-Length', length(env));
    utl_http.set_header(http_req, 'SOAPAction', action);
    utl_http.write_text(http_req, env);

    http_resp := utl_http.get_response(http_req);
    utl_http.read_text(http_resp, env);
    --show_envelope(env);
    flag := 1;

    if length(env) = 32767 then
       dbms_lob.createtemporary(ls_out_resp_clob, FALSE);
       BEGIN
       LOOP
           if flag = 1 then
              dbms_lob.writeappend (ls_out_resp_clob, length(env), env);
              flag := 2;
           end if;
           utl_http.read_text(http_resp, env);
           --show_envelope(env);
           dbms_lob.writeappend (ls_out_resp_clob, length(env), env);
       END LOOP;
       EXCEPTION
       WHEN UTL_HTTP.END_OF_BODY THEN
            UTL_HTTP.end_response(http_resp);
       END;
       resp.doc := xmltype.createxml(ls_out_resp_clob);
       dbms_lob.freetemporary (ls_out_resp_clob);
    else
       utl_http.end_response(http_resp);
       resp.doc := xmltype.createxml(env);
    end if;

        resp.doc := resp.doc.extract('/soap:Envelope/soap:Body/child::node()',
      'xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"');

    check_fault(resp);

    RETURN resp;
  END;

  FUNCTION invoke_clob(req    IN OUT NOCOPY request,
                  url    IN VARCHAR2,
                  action IN VARCHAR2,
                  username IN VARCHAR2,
                  passwd   IN VARCHAR2,
                  env_ori in clob,
                  env_msg OUT clob,
                  env_msg_vis OUT clob) RETURN response AS
    env       clob;
    env2      clob;
    http_req  utl_http.req;
    http_resp utl_http.resp;
    resp      response;
    request_body_length NUMBER;

    buffersize NUMBER(5) := 2000;
    chunk_buffer VARCHAR2(2000);
    chunk_length NUMBER(5);
    chunk_offset NUMBER;
    l_sql_code       number;
    l_sql_errm       varchar2(2000);
    rem_size binary_integer := 2000;
    fHandle  	utl_file.file_type;
    resp_vis     response;
    l_text           VARCHAR2(32767);

  BEGIN
   UTL_HTTP.set_proxy('192.168.169.190:80', NULL);
   UTL_HTTP.SET_PERSISTENT_CONN_SUPPORT(TRUE);
   http_req := UTL_HTTP.BEGIN_REQUEST(url, 'POST', 'HTTP/1.1');

   UTL_HTTP.set_persistent_conn_support(http_req, true);
   UTL_HTTP.SET_COOKIE_SUPPORT(FALSE);
   utl_http.set_header(http_req,'Content-Type','text/xml;charset=UTF-8');
   UTL_HTTP.SET_HEADER(http_req, 'Content-Length', to_char(dbms_lob.getlength(env_ori)));
   UTL_HTTP.SET_HEADER(http_req, 'SOAPAction', action);
   --utl_http.set_header(http_req,'Transfer-Encoding','chunked');

   request_body_length := dbms_lob.getlength(env_ori);
   chunk_offset := 1;
   rem_size := 1000;
   While chunk_offset  <= request_body_length Loop
         dbms_lob.read (env_ori, rem_size, chunk_offset , chunk_buffer);
         Utl_Http.write_text(http_req,chunk_buffer);
         chunk_offset  := chunk_offset + rem_size;
   end loop;

   env_msg := env;

   DBMS_LOB.createtemporary(env2, FALSE);
   http_resp := UTL_HTTP.GET_RESPONSE(http_req);
   BEGIN
    LOOP
      UTL_HTTP.read_text(http_resp, l_text, 32767);
      DBMS_LOB.writeappend (env2, LENGTH(l_text), l_text);
    END LOOP;
   EXCEPTION
    WHEN UTL_HTTP.end_of_body THEN
      UTL_HTTP.end_response(http_resp);
   END;
   env := env2;

   DBMS_LOB.freetemporary(env2);

   select replace(env,'&lt;','<')
   into env from dual;

   select replace(env,'&gt;','>')
   into env from dual;

   select replace(env,'<?xml version="1.0" encoding="UTF-8" standalone="yes"?>','')
   into env from dual;

   resp.doc := XMLTYPE.createxml(env);

   resp.doc := resp.doc.EXTRACT('/soap:Envelope/soap:Body/child::node()',
       'xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"');

   resp_vis.doc := resp.doc.EXTRACT('/ReceiveMSGResponse/ReceiveMSGResult/strRespVis/child::node()',
       'xmlns="http://sef.pt/"');
   resp_vis.doc := resp.doc.EXTRACT('/ReceiveMSGResponse/ReceiveMSGResult/strRespVis/child::node()',
       'xmlns="http://sef.pt/"');

   env_msg := resp.doc.getClobVal();
   env_msg_vis := resp_vis.doc.getClobVal();
   check_fault(resp);

   RETURN resp;
  END;

  FUNCTION invoke_clob(req    IN OUT NOCOPY request,
                  url    IN VARCHAR2,
                  action IN VARCHAR2,
                  v_id_env_vis IN VARCHAR2) RETURN response AS
    env       clob;
    http_req  utl_http.req;
    http_resp utl_http.resp;
    resp      response;
    request_body_length NUMBER;

    buffersize NUMBER(4) := 2000;
    chunk_buffer VARCHAR2(2000);
    chunk_length NUMBER(4);
    chunk_offset NUMBER;
    l_sql_code       number;
    l_sql_errm       varchar2(2000);
    rem_size binary_integer := 2000;
    fHandle  	utl_file.file_type;
  BEGIN
    generate_envelope(req, env, v_id_env_vis);

    --show_envelope(env);
    UTL_HTTP.set_proxy('192.168.169.190:80', NULL);
    UTL_HTTP.SET_PERSISTENT_CONN_SUPPORT(TRUE);
    http_req := utl_http.begin_request(url,'POST','HTTP/1.1');

    --utl_http.set_header(http_req,'Content-Type','text/xml');
    utl_http.set_header(http_req,'Content-Type','text/xml;charset=UTF-8');
    utl_http.set_header(http_req, 'Content-Length', to_char(dbms_lob.getlength(env)));
    utl_http.set_header(http_req, 'SOAPAction', action);
    --utl_http.set_header(http_req,'Transfer-Encoding','chunked');

    request_body_length := dbms_lob.getlength(env);
    chunk_offset := 1;
    rem_size := 1;
    While chunk_offset  <= request_body_length Loop
          dbms_lob.read (env, rem_size, chunk_offset , chunk_buffer);
          Utl_Http.write_text(http_req,chunk_buffer);
          chunk_offset  := chunk_offset + rem_size;
    end loop;

    http_resp := utl_http.get_response(http_req);
    utl_http.read_text(http_resp, env);
    utl_http.end_response(http_resp);
    resp.doc := xmltype.createxml(env);
    resp.doc := resp.doc.extract('/soap:Envelope/soap:Body/child::node()',
      'xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"');

    check_fault(resp);
    /*exception
       when others then
           l_sql_code := utl_http.get_detailed_sqlcode;
           l_sql_errm := utl_http.get_detailed_sqlerrm;
           dbms_output.put_line('detail err code: '|| l_sql_code);
           dbms_output.put_line('detail err message: '|| l_sql_errm);*/
    RETURN resp;
  END;

FUNCTION invoke_broker(req IN OUT NOCOPY request,
                url IN VARCHAR2,
                action IN VARCHAR2,
				        username IN VARCHAR2,
                passwd   IN VARCHAR2,
                env_ori in varchar2,
                env_msg OUT clob,
                env_msg_vis OUT clob)
RETURN response
IS
    env          clob;
    env2         clob;
    http_req     UTL_HTTP.REQ;
    http_resp    UTL_HTTP.RESP;
    resp         response;
    resp_vis     response;
    hjy          xmldom.DOMDocument;
    l_text           VARCHAR2(32767);
BEGIN
    -- Generate SOAP Envelope
    --generate_envelope(req, env);
    --show_envelope(env);
    UTL_HTTP.set_proxy('192.168.169.190:80', NULL);
    UTL_HTTP.SET_PERSISTENT_CONN_SUPPORT(TRUE);

    --UTL_HTTP.set_wallet('file:c:\winnt\profiles\administrator\oracle\wallets','ipmb9696');


   http_req := UTL_HTTP.BEGIN_REQUEST(url, 'POST', 'HTTP/1.1');

   UTL_HTTP.set_persistent_conn_support(http_req, true);

   UTL_HTTP.SET_COOKIE_SUPPORT(FALSE);

   -- Set HTTP Basic Authentication user and password
  /* UTL_HTTP.SET_AUTHENTICATION(
    http_req,
    username,
    passwd,
    'Basic', --Basic authtorization scheme
    FALSE);  --False, as its not for proxy
   */

   UTL_HTTP.SET_HEADER(http_req, 'Content-Type', 'text/xml');
   UTL_HTTP.SET_HEADER(http_req, 'Content-Length', LENGTH(env_ori));
   UTL_HTTP.SET_HEADER(http_req, 'SOAPAction', action);
   UTL_HTTP.WRITE_TEXT(http_req, env_ori);
   env_msg := env;

   --http_resp := UTL_HTTP.GET_RESPONSE(http_req);
   --UTL_HTTP.READ_TEXT(http_resp, env);

   DBMS_LOB.createtemporary(env2, FALSE);
   http_resp := UTL_HTTP.GET_RESPONSE(http_req);
   BEGIN
    LOOP
      UTL_HTTP.read_text(http_resp, l_text, 32767);
      DBMS_LOB.writeappend (env2, LENGTH(l_text), l_text);
    END LOOP;
   EXCEPTION
    WHEN UTL_HTTP.end_of_body THEN
      UTL_HTTP.end_response(http_resp);
   END;
   env := env2;
   DBMS_LOB.freetemporary(env2);

   select replace(env,'&lt;','<')
   into env from dual;

   select replace(env,'&gt;','>')
   into env from dual;

   select replace(env,'<?xml version="1.0" encoding="UTF-8" standalone="yes"?>','')
   into env from dual;

   --insert into horta (campo, xmlfield) values('vis',env);
   --commit;
   resp.doc := XMLTYPE.createxml(env);

   resp.doc := resp.doc.EXTRACT('/soap:Envelope/soap:Body/child::node()',
       'xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"');

   resp_vis.doc := resp.doc.EXTRACT('/ReceiveMSGResponse/ReceiveMSGResult/strRespVis/child::node()',
       'xmlns="http://sef.pt/"');

   env_msg := resp.doc.getClobVal();
   /*insert into horta (campo, xmlfield) values('visERRO',env_MSG);
   commit;*/
   env_msg_vis := resp_vis.doc.getClobVal();
   check_fault(resp);

   RETURN resp;

END;


FUNCTION get_return_value(resp      IN OUT NOCOPY response,
                            name      IN VARCHAR2,
                            namespace IN VARCHAR2) RETURN VARCHAR2 AS
  BEGIN
     RETURN resp.doc.extract('//' || name || '/text()', namespace).getclobval();
  END;
  FUNCTION get_return_value_extra(resp IN xmltype,
                            name       IN VARCHAR2,
                            namespace  IN VARCHAR2) RETURN CLOB AS
  TESTE xmltype;
  BEGIN
     teste := resp.extract('//' || name || '/text()', namespace);
     RETURN resp.extract('//' || name || '/child::text()', namespace).getclobval();
  END;

FUNCTION VISRequest(v_cod_mensagem in number, id_env_vis in number, v_mensagem in clob, env_msg out clob, env_msg_vis out clob, ambiente in varchar2 DEFAULT 'P')
RETURN Response
IS
    sVIS searchVIS;
    env  clob;
    req  request;
    rsp  response;
    v_descricao tipo_comm_vistos.descricao%type;
    v_id_env_vis1 varchar2(17);
BEGIN
    select descricao into v_descricao
    from tipo_comm_vistos
    where cod_comm_vistos = v_cod_mensagem;
    select to_char(id_env_vis,'FM00000000000000009') into v_id_env_vis1 from dual;
    req := new_request('ReceiveMSG','xmlns="http://sef.pt/"');

    sVIS.Entidade := 'MNE';
    sVIS.NomeMsg := v_descricao;
    sVIS.NumMensagem := v_id_env_vis1;
    sVIS.strXML := v_mensagem;

    generate_body_envelope(req,sVIS,env);

    req.BODY := env;

    if ambiente = 'P' then
       if length(env) <= 32767 then
          rsp := invoke_broker(req,'http://10.255.255.11/ws_vis_sef/ws_vis_sef.asmx','http://sef.pt/ReceiveMSG',null,null,env,env_msg,env_msg_vis);
       else
          rsp := invoke_clob(req,'http://10.255.255.11/ws_vis_sef/ws_vis_sef.asmx','http://sef.pt/ReceiveMSG',null,null,env,env_msg,env_msg_vis);
       end if;
     else
       if length(env) <= 32767 then
          rsp := invoke_broker(req,'http://10.255.255.12/ws_vis_sef_dev/ws_vis_sef_dev.asmx','http://sef.pt/ReceiveMSG',null,null,env,env_msg,env_msg_vis);
       else
          rsp := invoke_clob(req,'http://10.255.255.12/ws_vis_sef_dev/ws_vis_sef_dev.asmx','http://sef.pt/ReceiveMSG',null,null,env,env_msg,env_msg_vis);
       end if;
     end if;

    return(rsp);
END;
end CHAMA_VIS_BROKER;
/

prompt
prompt Creating package body DEMO_SOAP
prompt ===============================
prompt
CREATE OR REPLACE PACKAGE BODY RPV.DEMO_SOAP AS
  FUNCTION new_request(method    IN VARCHAR2,
                       namespace IN VARCHAR2)
                       RETURN request AS
    req request;
  BEGIN
    req.method    := method;
    req.namespace := namespace;
    RETURN req;
  END;
  PROCEDURE add_parameter(req   IN OUT NOCOPY request,
                          name  IN VARCHAR2,
                          type  IN VARCHAR2,
                          value IN CLOB) AS
  BEGIN
    /*req.body := req.body ||
       '<'||name||' xsi:type="'||type||'">'||value||'</'||name||'>';*/
    req.body := req.body ||
       '<'||name || '' || value||']]>';

  END;
  PROCEDURE generate_envelope_vismail(req IN OUT NOCOPY request,
			      env IN OUT NOCOPY CLOB) AS
  BEGIN
   /*env := '<?xml version="1.0" encoding="UTF-8" ?> ' || '<env:Envelope
xmlns:env="http://www.w3.org/2003/05/soap-envelope">
<env:Header/>
<env:Body>'||env||'</env:Body></env:Envelope>';*/
   env := '<?xml version="1.0" encoding="utf-8"?>
   <env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope">
   <env:Header/>
   <env:Body>' || env ||
   '</env:Body>
   </env:Envelope>';
  END;
  PROCEDURE generate_envelope(req IN OUT NOCOPY request,
			      env IN OUT NOCOPY CLOB, v_id_env_vis IN VARCHAR2) AS
  v_id_env_vis1 varchar2(17);
  BEGIN
 /*   env := '<SOAP-ENV:Envelope
xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:xsd="http://www.w3.org/2001/XMLSchema">
<SOAP-ENV:Body><'||req.method||' '||req.namespace||'
 SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">'||
req.body||'</'||req.method||'></SOAP-ENV:Body></SOAP-ENV:Envelope>';*/
 select to_char(v_id_env_vis,'FM00000000000000009') into v_id_env_vis1 from dual;
/*   env := '<SOAP-ENV:Envelope
xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:xsd="http://www.w3.org/2001/XMLSchema">
<SOAP-ENV:Header>
<v1:Header xmlns:v1="http://www.europa.eu/schengen/vis/webservice/V1/">
<v1:messageID>' || v_id_env_vis1 || '</v1:messageID>
<v1:correlationID>' || '22' || substr(v_id_env_vis1,3) || '</v1:correlationID>
</v1:Header>
</SOAP-ENV:Header>
<SOAP-ENV:Body><'||req.method||' '||req.namespace||'>'||
req.body||'</'||req.method||'></SOAP-ENV:Body></SOAP-ENV:Envelope>';*/

env := '<SOAP-ENV:Envelope
xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:xsd="http://www.w3.org/2001/XMLSchema">
<SOAP-ENV:Header>
<m:Header xmlns:m="http://www.europa.eu/schengen/vis/webservice/V1/">
<m:messageID>' || v_id_env_vis1 || '</m:messageID>
<m:correlationID>' || '22' || substr(v_id_env_vis1,3) || '</m:correlationID>
</m:Header>
</SOAP-ENV:Header>
<SOAP-ENV:Body><'||req.method||' '||req.namespace||'>'||
req.body||'</'||req.method||'></SOAP-ENV:Body></SOAP-ENV:Envelope>';
  END;
  PROCEDURE show_envelope(env IN VARCHAR2) AS
    i   pls_integer;
    len pls_integer;
  BEGIN
    i := 1; len := length(env);
    WHILE (i <= len) LOOP
      dbms_output.put_line(substr(env, i, 60));
      i := i + 60;
    END LOOP;
  END;
  PROCEDURE check_fault(resp IN OUT NOCOPY response) AS
    fault_node   xmltype;
    fault_code   VARCHAR2(256);
    fault_string VARCHAR2(32767);
  BEGIN
     fault_node := resp.doc.extract('/soap:Fault',
       'xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/');
     IF (fault_node IS NOT NULL) THEN
       fault_code := fault_node.extract('/soap:Fault/faultcode/child::text()',
	 'xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/').getstringval();
       fault_string := fault_node.extract('/soap:Fault/faultstring/child::text()',
	 'xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/').getstringval();
       raise_application_error(-20000, fault_code || ' - ' || fault_string);
     END IF;
  END;
  FUNCTION invoke(req    IN OUT NOCOPY request,
                  url    IN VARCHAR2,
                  action IN VARCHAR2,
                  v_id_env_vis IN VARCHAR2) RETURN response AS
    env       VARCHAR2(32767);
    http_req  utl_http.req;
    http_resp utl_http.resp;
    resp      response;
    fHandle  	utl_file.file_type;
    ls_out_resp_clob clob;
    flag      number(1):=0;
    vvv       clob;
  BEGIN
    generate_envelope(req, env, v_id_env_vis);
    show_envelope(env);
    DBMS_OUTPUT.PUT_LINE('1- ' || length(env));
    http_req := utl_http.begin_request(url, 'POST','HTTP/1.1');
    utl_http.set_header(http_req,'Content-Type','text/xml;charset=UTF-8');
    utl_http.set_header(http_req, 'Content-Length', length(env));
    utl_http.set_header(http_req, 'SOAPAction', action);

    utl_http.write_text(http_req, env);

    http_resp := utl_http.get_response(http_req);
    utl_http.read_text(http_resp, env);
    DBMS_OUTPUT.PUT_LINE('2- ' || length(env));
    --show_envelope(env);
    flag := 1;
    --
    if length(env) = 32767 then
       dbms_lob.createtemporary(ls_out_resp_clob, FALSE);
       BEGIN
       LOOP
           if flag = 1 then
              dbms_lob.writeappend (ls_out_resp_clob, length(env), env);
              flag := 2;
           end if;
           utl_http.read_text(http_resp, env);
           --show_envelope(env);
           dbms_lob.writeappend (ls_out_resp_clob, length(env), env);
       END LOOP;
       EXCEPTION
       WHEN UTL_HTTP.END_OF_BODY THEN
            UTL_HTTP.end_response(http_resp);
       END;
       resp.doc := xmltype.createxml(ls_out_resp_clob);
       dbms_lob.freetemporary (ls_out_resp_clob);
    else
       utl_http.end_response(http_resp);
       resp.doc := xmltype.createxml(env);
    end if;

    --insert into lixo(c) values(resp.doc);

    --insert into lixo(c) values(resp.doc);
    --if flag = 1 then
        resp.doc := resp.doc.extract('/soap:Envelope/soap:Body/child::node()',
      'xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"');
    --end if;
    check_fault(resp);

    RETURN resp;
  END;
  FUNCTION invoke_clob(req    IN OUT NOCOPY request,
                  url    IN VARCHAR2,
                  action IN VARCHAR2,
                  v_id_env_vis IN VARCHAR2) RETURN response AS
    env       clob;
    http_req  utl_http.req;
    http_resp utl_http.resp;
    resp      response;
    request_body_length NUMBER;

    buffersize NUMBER(4) := 2000;
    chunk_buffer VARCHAR2(2000);
    chunk_length NUMBER(4);
    chunk_offset NUMBER;
    l_sql_code       number;
    l_sql_errm       varchar2(2000);
    rem_size binary_integer := 2000;
    fHandle  	utl_file.file_type;
  BEGIN
    generate_envelope(req, env, v_id_env_vis);

    --show_envelope(env);

    http_req := utl_http.begin_request(url,'POST','HTTP/1.1');

    --utl_http.set_header(http_req,'Content-Type','text/xml');
    utl_http.set_header(http_req,'Content-Type','text/xml;charset=UTF-8');
    utl_http.set_header(http_req, 'Content-Length', to_char(dbms_lob.getlength(env)));
    utl_http.set_header(http_req, 'SOAPAction', action);
    utl_http.set_header(http_req,'Transfer-Encoding','chunked');

    request_body_length := dbms_lob.getlength(env);
    chunk_offset := 1;
    rem_size := 1;
    While chunk_offset  <= request_body_length Loop
          dbms_lob.read (env, rem_size, chunk_offset , chunk_buffer);
          Utl_Http.write_text(http_req,chunk_buffer);
          chunk_offset  := chunk_offset + rem_size;
    end loop;

    http_resp := utl_http.get_response(http_req);
    utl_http.read_text(http_resp, env);
    utl_http.end_response(http_resp);
    resp.doc := xmltype.createxml(env);
    resp.doc := resp.doc.extract('/soap:Envelope/soap:Body/child::node()',
      'xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"');

    check_fault(resp);
    /*exception
       when others then
           l_sql_code := utl_http.get_detailed_sqlcode;
           l_sql_errm := utl_http.get_detailed_sqlerrm;
           dbms_output.put_line('detail err code: '|| l_sql_code);
           dbms_output.put_line('detail err message: '|| l_sql_errm);*/
    RETURN resp;
  END;
  FUNCTION get_return_value(resp      IN OUT NOCOPY response,
                            name      IN VARCHAR2,
                            namespace IN VARCHAR2) RETURN VARCHAR2 AS
  BEGIN
     --RETURN resp.doc.extract('//' || name || '/text()', namespace).getstringval();
     RETURN resp.doc.extract('//' || name || '/text()', namespace).getclobval();
  END;
  FUNCTION get_return_value_extra(resp IN xmltype,
                            name       IN VARCHAR2,
                            namespace  IN VARCHAR2) RETURN CLOB AS
  TESTE xmltype;
  BEGIN
     --RETURN resp.extract('//' || name || '/text()', namespace).getstringval();
     teste := resp.extract('//' || name || '/text()', namespace);
     RETURN resp.extract('//' || name || '/child::text()', namespace).getclobval();
  END;
END;
/

prompt
prompt Creating package body DSA_SRV_MAKEXML_MPT
prompt =========================================
prompt
CREATE OR REPLACE PACKAGE BODY RPV.dsa_srv_makexml_mpt
IS
g_ascii_list ger_t_tnumber_mpt;
-- will cache charset because it is static in a session and data dictionary calls may be expensive
l_current_charset varchar2(30) := null;
--l
l_xml_charset varchar2(30) := 'UTF8';
function f_get_current_charset
    return varchar2 is
    tmp varchar2(30);
begin
    if l_current_charset is null then
        select value
        into tmp
        from v$nls_parameters
        where parameter ='NLS_CHARACTERSET';
        l_current_charset := tmp;
    end if;
    return l_current_charset;
exception when others then return null;
end;
/*
function f_convert (
    p_string varchar2,
    p_char_dest varchar2,
    p_char_orig varchar2
) return varchar2 is
l_chunk number := 1000;
l_tmp_buffer varchar2(32000) := '';
l_returnValue varchar2(32767);
l_tmp varchar2(32767);
l_to_convert varchar2(32767);
l_position number;
begin
    -- if nothing to convert
    if (p_char_orig = p_char_dest) then
        return p_string;
    end if;
    -- will have to split string into shorter chunks (oracle bug)
    l_position := 0;
    while l_position < length(p_string) loop
        l_to_convert :=substr(p_string, l_position +1 ,l_chunk);
        l_tmp := convert(l_to_convert, p_char_dest,p_char_orig);
        if (length(l_tmp) <> length(l_to_convert)) then
            l_to_convert :=substr(p_string,l_position +1,l_chunk+1);
            l_tmp := convert(l_to_convert, p_char_dest,p_char_orig);
            l_position := l_position + 1;
        end if;
        l_tmp_buffer := l_tmp_buffer || l_tmp;
        l_position := l_position + l_chunk;
    end loop;
    return l_tmp_buffer;
exception when others then return p_string;
end;
*/
function f_convert (
    p_string varchar2,
    p_char_dest varchar2,
    p_char_orig varchar2
) return varchar2 is
l_chunk number := 1000;
l_tmp_buffer varchar2(32767) := '';
--l_returnValue varchar2(32767);
l_tmp varchar2(32767);
l_to_convert varchar2(32767);
l_position number;
begin
--        return p_string;
    -- if nothing to convert
    if (p_char_orig = p_char_dest) then
        return p_string;
    end if;
    -- will have to split string into shorter chunks (oracle bug)
    l_position := 0;
    while l_position < length(p_string) loop
        l_to_convert :=substr(p_string, l_position +1 ,l_chunk);
        l_tmp := convert(l_to_convert, p_char_dest,p_char_orig);
        if (length(l_tmp) <> length(l_to_convert)) then
            l_to_convert :=substr(p_string,l_position +1,l_chunk+1);
            l_tmp := convert(l_to_convert, p_char_dest,p_char_orig);
            l_position := l_position + 1;
        end if;
        l_tmp_buffer := l_tmp_buffer || l_tmp;
        l_position := l_position + l_chunk;
    end loop;
    return l_tmp_buffer;
exception when others then return p_string;
end;
function f_clob_to_varchar2 (
    p_clob clob
) return varchar2 is
l_chunk number := 1000; --32727;
l_tmp_buffer varchar2(32767) := '';
l_return     varchar2(32767) := '';
l_clob_size number;
l_position  number;
begin
    l_clob_size := dbms_lob.getlength(p_clob);
--    l_position  := 1;
    l_position := 0;
/*dsa_logging_MPT.p_log_message ('size = '|| l_clob_size);*/
    while l_position < l_clob_size loop
/*dsa_logging_MPT.p_log_message ('position = '|| l_position);*/
        --dbms_lob.read(p_clob,l_chunk,l_position+1,l_tmp_buffer);
        l_tmp_buffer := dbms_lob.substr(p_clob,l_chunk,l_position+1);
        --l_return := l_return || l_tmp_buffer;
        select l_return || l_tmp_buffer
        into  l_return
        from dual;
        l_position := l_position + l_chunk;
    end loop;
/*dsa_logging_MPT.p_log_message (l_return);*/
    return l_return;
--exception when others then return l_return;
end;
/*
    for i in 0 .. floor(length(p_string)/l_chunk) loop
        -- perform conversion
        l_to_convert :=substr(p_string,i*l_chunk +1,l_chunk);
        l_tmp := convert(l_to_convert, p_char_dest,p_char_orig);
        if (length(l_tmp) <> length(l_to_convert)) then
            l_to_convert :=substr(p_string,i*l_chunk +1,l_chunk+1);
            l_tmp := convert(l_to_convert, p_char_dest,p_char_orig);
        end if;
--         l_tmp := convert(substr(p_string,i*l_chunk +1,l_chunk), 'WE8PC850','UTF8');
--         l_tmp := convert( convert( substr(l_returnValue,i*l_chunk +1,l_chunk), 'WE8ISO8859P1','UTF8'),'UTF8', 'WE8ISO8859P1');
        l_tmp_buffer := l_tmp_buffer || l_tmp;
    end loop;
*/
/*
function f_makeString (
    p_doc in xmldom.DOMDocument,
    p_class_name in varchar2 default ' '
    ) return varchar2 is
--
-- Declaração de variáveis especificas do documento Global
--
l_tmp_doc xmldom.DOMDocument;
l_tmp_root_node xmldom.DOMNode;
l_tmp_root_elmt xmldom.DOMElement;
l_tmp_node xmldom.DOMNode;
l_tmp_elem xmldom.DOMElement;
l_tmp_text xmldom.DOMText;
l_tmp_pi xmldom.DOMProcessingInstruction;
l_returnValue varchar2(32767);
BEGIN
--
--    Temporary solution saves all result xml as string attribute
--
    l_tmp_doc := xmldom.newDOMDocument;
    l_tmp_root_node := xmldom.makeNode(l_tmp_doc);
    l_tmp_root_elmt := xmldom.createElement(l_tmp_doc, 'java');
    l_tmp_root_node := xmldom.appendChild(l_tmp_root_node, xmldom.makeNode(l_tmp_root_elmt));
    xmldom.setattribute(l_tmp_root_elmt,'version','1.4.2');
    xmldom.setattribute(l_tmp_root_elmt,'class',p_class_name);
    l_tmp_elem :=  xmldom.createElement(l_tmp_doc, 'void');
    l_tmp_node := xmldom.appendChild(l_tmp_root_node, xmldom.makeNode(l_tmp_elem));
    xmldom.setattribute(l_tmp_elem,'property','result');
    l_tmp_elem :=  xmldom.createElement(l_tmp_doc, 'string');
    l_tmp_node := xmldom.appendChild(l_tmp_node, xmldom.makeNode(l_tmp_elem));
    l_tmp_node := xmldom.appendChild(l_tmp_node, xmldom.importnode(l_tmp_doc,
                                     xmldom.makenode(xmldom.getdocumentelement(p_doc))
                                     ,true));
    xmldom.setVersion(l_tmp_doc, '1.0');
    xmldom.setcharset(l_tmp_doc, l_xml_charset);
    xmldom.writeToBuffer(l_tmp_doc, l_returnValue);
---
--- Release document
---
    xmldom.freeDocument(l_tmp_doc);
    return f_convert (l_returnValue, f_get_current_charset , l_xml_charset);
--    return l_returnValue;
END;
*/
function f_makeString (
    p_doc in xmldom.DOMDocument,
    p_class_name in varchar2 default ' ',
	p_convert in boolean default FALSE,
	p_make_java_env in boolean default false
    ) return varchar2 is
--
-- Declaração de variáveis especificas do documento Global
--
l_tmp_doc xmldom.DOMDocument;
l_tmp_root_node xmldom.DOMNode;
l_tmp_root_elmt xmldom.DOMElement;
l_tmp_node xmldom.DOMNode;
l_tmp_elem xmldom.DOMElement;
l_tmp_text xmldom.DOMText;
l_tmp_pi xmldom.DOMProcessingInstruction;
l_returnValue varchar2(32767);
l_returnClob  clob;
l_amount      number;
BEGIN
    if (p_doc.id = -1 ) then
        return '';
    end if;
--x_timestamp.log_timestamp('execute/service');
    if (p_make_java_env) then
        l_tmp_doc := xmldom.newDOMDocument;
        l_tmp_root_node := xmldom.makeNode(l_tmp_doc);
        l_tmp_root_elmt := xmldom.createElement(l_tmp_doc, 'java');
        l_tmp_root_node := xmldom.appendChild(l_tmp_root_node, xmldom.makeNode(l_tmp_root_elmt));
        xmldom.setattribute(l_tmp_root_elmt,'version','1.4.2');
        xmldom.setattribute(l_tmp_root_elmt,'class',p_class_name);
        l_tmp_elem :=  xmldom.createElement(l_tmp_doc, 'void');
        l_tmp_node := xmldom.appendChild(l_tmp_root_node, xmldom.makeNode(l_tmp_elem));
        xmldom.setattribute(l_tmp_elem,'property','result');
        l_tmp_elem :=  xmldom.createElement(l_tmp_doc, 'string');
        l_tmp_node := xmldom.appendChild(l_tmp_node, xmldom.makeNode(l_tmp_elem));
        l_tmp_node := xmldom.appendChild(l_tmp_node, xmldom.importnode(l_tmp_doc,
                                         xmldom.makenode(xmldom.getdocumentelement(p_doc))
                                         ,true));
--    begin
    else
        l_tmp_doc := p_doc;
    end if;
    xmldom.setcharset(l_tmp_doc, l_xml_charset);
    xmldom.setVersion(l_tmp_doc, '1.0');
    xmldom.writeToBuffer(l_tmp_doc, l_returnValue);
    xmldom.freeDocument(l_tmp_doc);
--    -- document >32K
--    exception when others then
--    	dbms_lob.createtemporary(l_returnClob, true);
--        xmldom.writeToClob(l_tmp_doc, l_returnClob);
--        l_returnValue := f_clob_to_varchar2(l_returnClob);
--    end;
---
--- Release document
---
	if p_convert then
        return f_convert (l_returnValue, f_get_current_charset , l_xml_charset);
	else
        return l_returnValue;
	end if;
END;
function f_translate_in (
    p_string varchar2
) return varchar2 is
    tmp varchar2(32767) := p_string;
begin
    --WE8PC850->WE8ISO8859P1 + UTF8->WE8PC850 : Æ ä ¿ ¿ ¿
    if (instr(p_string,'UTF-8')>0) then
        tmp := f_convert (tmp, CS_UTF, f_get_current_charset);
--        tmp := f_convert (tmp, CS_ISO, CS_UTF);
    else
        tmp := f_convert (tmp, CS_ISO, f_get_current_charset);
        tmp := f_convert (tmp, CS_ISO, CS_UTF);
    end if;
    RETURN TMP;
end;
function f_translate_in1 (
    p_string varchar2
) return varchar2 is
    tmp varchar2(32767) := p_string;
begin
    --WE8PC850->WE8ISO8859P1 + UTF8->WE8PC850 : Æ ä ¿ ¿ ¿
    -- Ã£ Ãµ Ã© Ã¿ Ã³ Ã¿ Ã¡
    if instr(p_string,'Ã£') >0 or
       instr(p_string,'Ãµ') >0 or
       instr(p_string,'Ã©') >0 or
       instr(p_string,'Ã¿') >0 or
       instr(p_string,'Ã³') >0 or
       instr(p_string,'Ã¡') >0 then
       tmp := f_convert (tmp, CS_ISO, f_get_current_charset);
    end if;
    -- assuming that JS sets encoding incorrectly ....
    tmp := replace (tmp,'ISO-8859-1','UTF-8');
--    tmp := f_convert (tmp, CS_ISO, CS_UTF);
    RETURN TMP;
end;
function f_convert (
    p_string clob,
    p_char_dest varchar2,
    p_char_orig varchar2
) return clob is
l_chunk number := 1000;
l_tmp varchar2(32767);
l_to_convert varchar2(32767);
l_returnValue clob := EMPTY_CLOB;
l_position number;
begin
    -- if nothing to convert
    if (p_char_orig = p_char_dest) then
        return p_string;
    end if;
	-- Initialize the clob
	dbms_lob.createtemporary(l_returnValue, true);
    -- will have to split string into shorter chunks (oracle bug)
    l_position := 0;
    while l_position < dbms_lob.getlength(p_string) loop
        l_to_convert := dbms_lob.substr(p_string,l_chunk,l_position +1);
        l_tmp := convert(l_to_convert, p_char_dest,p_char_orig);
        if (length(l_tmp) <> length(l_to_convert)) then
            l_to_convert := dbms_lob.substr(p_string,l_chunk+1,l_position +1);
            l_tmp := convert(l_to_convert, p_char_dest,p_char_orig);
            l_position := l_position + 1;
        end if;
		dbms_lob.writeappend(l_returnValue, length(l_tmp), l_tmp);
        l_position := l_position + l_chunk;
    end loop;
    return l_returnValue;
exception when others then return p_string;
end;
function f_makeClob (
    p_doc in xmldom.DOMDocument,
    p_class_name in varchar2 default ' ',
	p_convert in boolean default true,
	p_make_java_env in boolean default false
    ) return clob is
--
-- Declaracao de variaveis especificas do documento Global
--
l_tmp_doc xmldom.DOMDocument;
l_tmp_root_node xmldom.DOMNode;
l_tmp_root_elmt xmldom.DOMElement;
l_tmp_node xmldom.DOMNode;
l_tmp_elem xmldom.DOMElement;
l_tmp_text xmldom.DOMText;
l_tmp_pi xmldom.DOMProcessingInstruction;
l_returnValue clob := EMPTY_CLOB;
BEGIN
--x_timestamp.log_timestamp('execute/service');
  	dbms_lob.createtemporary(l_returnValue, true);
    if (p_make_java_env) then
        l_tmp_doc := xmldom.newDOMDocument;
        l_tmp_root_node := xmldom.makeNode(l_tmp_doc);
        l_tmp_root_elmt := xmldom.createElement(l_tmp_doc, 'java');
        l_tmp_root_node := xmldom.appendChild(l_tmp_root_node, xmldom.makeNode(l_tmp_root_elmt));
        xmldom.setattribute(l_tmp_root_elmt,'version','1.4.2');
        xmldom.setattribute(l_tmp_root_elmt,'class',p_class_name);
        l_tmp_elem :=  xmldom.createElement(l_tmp_doc, 'void');
        l_tmp_node := xmldom.appendChild(l_tmp_root_node, xmldom.makeNode(l_tmp_elem));
        xmldom.setattribute(l_tmp_elem,'property','result');
        l_tmp_elem :=  xmldom.createElement(l_tmp_doc, 'string');
        l_tmp_node := xmldom.appendChild(l_tmp_node, xmldom.makeNode(l_tmp_elem));
        l_tmp_node := xmldom.appendChild(l_tmp_node, xmldom.importnode(l_tmp_doc,
                                         xmldom.makenode(xmldom.getdocumentelement(p_doc))
                                         ,true));
        xmldom.setVersion(l_tmp_doc, '1.0');
        xmldom.setcharset(l_tmp_doc, l_xml_charset);
        xmldom.writeToClob(l_tmp_doc, l_returnValue);
        --- Release document
        xmldom.freeDocument(l_tmp_doc);
--        xmldom.freeDocument(p_doc);
    else
        xmldom.writeToClob(p_doc, l_returnValue);
--        xmldom.freeDocument(p_doc);
    end if;
	--return f_convert (l_returnValue, f_get_current_charset , l_xml_charset);
    return l_returnValue;
END;
function f_combo_estados
RETURN xmldom.DOMDocument IS
  --
   v_doc xmldom.DOMDocument;
   v_f_elem xmldom.DOMElement;
   v_f_node xmldom.DOMNode;
   v_elem xmldom.DOMElement;
   v_node xmldom.DOMNode;
  --
BEGIN
    v_doc := xmldom.newdomdocument;
    v_node := xmldom.makeNode(v_doc);
    v_elem :=  xmldom.createElement(v_doc, 'Estados');
    v_node := xmldom.appendChild(v_node, xmldom.makeNode(v_elem));
    -- Estado activo
    v_f_elem :=  xmldom.createElement(v_doc, 'Estado');
    v_f_node := xmldom.appendChild(v_node, xmldom.makeNode(v_f_elem));
    xmldom.setAttribute(v_f_elem, 'codigo', 'A');
    xmldom.setAttribute(v_f_elem, 'descricao', 'Activo');
    -- Estado inactivo
    v_f_elem :=  xmldom.createElement(v_doc, 'Estado');
    v_f_node := xmldom.appendChild(v_node, xmldom.makeNode(v_f_elem));
    xmldom.setAttribute(v_f_elem, 'codigo', 'I');
    xmldom.setAttribute(v_f_elem, 'descricao', 'Inactivo');
   RETURN v_doc;
   --
END;
function f_truefalse (
    p_string varchar2 )
RETURN varchar2 IS
  --
BEGIN
    if p_string in ('t','T') then
        return 'true';
    elsif p_string in ('f','F') then
        return 'false';
    end if;
    RETURN  p_string;
END;
-----------------------------------------------------------------------
--  Copies content of document 'p_doc_orig' as child of root node in
--  document 'p_doc_dest'
--  Returns id of a new node in 'p_doc_dest'
-----------------------------------------------------------------------
function f_merge_docs (
    p_doc_dest in out xmldom.domdocument,
    p_doc_orig in xmldom.domdocument
) return xmldom.domnode is
    l_node_tmp  xmldom.domnode;
    l_node_root xmldom.domnode;
begin
    l_node_tmp:= xmldom.importnode(p_doc_dest,
                xmldom.makenode(xmldom.getDocumentElement(p_doc_orig)),true);
    l_node_root := xmldom.appendChild
        (xmldom.makenode(xmldom.getdocumentelement(p_doc_dest)), l_node_tmp);
    return l_node_root;
end;
function f_merge_docs (
    p_parent_doc in out xmldom.domdocument,
    p_parent_node in out xmldom.domnode,
    p_adopted_node in xmldom.domnode
) return xmldom.domnode is
    l_node_tmp  xmldom.domnode;
    l_node_root xmldom.domnode;
    l_doc xmldom.domdocument;
begin
dbms_output.put_line('parent= '||p_parent_node.id);
dbms_output.put_line('p_adopted_node= '||p_adopted_node.id);
l_doc :=xmldom.getOwnerDocument(p_parent_node);
dbms_output.put_line('parent owner '||l_doc.id);
    l_node_tmp:= xmldom.importnode(l_doc,
                                   p_adopted_node ,true);
dbms_output.put_line('tmp= '||l_node_tmp.id);
    if xmldom.isnull(l_node_tmp) then
        l_node_tmp := p_adopted_node;
    end if;
    l_node_root := xmldom.appendChild
        (p_parent_node, l_node_tmp);
    return l_node_root;
end;
procedure p_merge_docs (
    p_parent_doc in out xmldom.domdocument,
    p_doc_dest in out xmldom.domnode,
    p_doc_orig in xmldom.domnode
) is
    l_node_tmp  xmldom.domnode;
begin
    l_node_tmp:= f_merge_docs(    p_parent_doc,p_doc_dest, p_doc_orig);
end;
-----------------------------------------------------------------------
--  Copies content of document 'p_doc_orig' as child of root node in
--  document 'p_doc_dest'
-----------------------------------------------------------------------
procedure p_merge_docs (
    p_doc_dest in out xmldom.domdocument,
    p_doc_orig in xmldom.domdocument
) is
    l_node_tmp  xmldom.domnode;
begin
    l_node_tmp:= f_merge_docs(p_doc_dest, p_doc_orig);
end;
-----------------------------------------------------------------------
--  Creates a new xml document and returns document id and id of a root
-----------------------------------------------------------------------
procedure p_makeNewDoc (
    p_doc     out xmldom.domdocument,
    p_rt_node out xmldom.domnode,
    p_rt_name varchar2
) is
begin
    p_doc := xmldom.newDOMDocument;
    p_rt_node := xmldom.appendChild(xmldom.makeNode(p_doc),
                            xmldom.makeNode(xmldom.createElement(p_doc, p_rt_name)));
end;
procedure p_make_ascii_linefeed (
    p_value in out nocopy varchar2
) is
begin
--    p_value := replace (p_value, chr(10), '&#10;');
--    p_value := replace (p_value, '"', '&#34;');
    null;
end;
procedure p_make_ascii_accents (
    p_value in out nocopy varchar2
) is
begin
        for i in 1 .. g_ascii_list.count loop
            p_value := replace (p_value, chr(g_ascii_list(i)), '&#'||g_ascii_list(i)||';');
        end loop;
end;
procedure p_setAttrString (
    p_node xmldom.DOMElement,
    p_attr varchar2,
    p_value varchar2,
    p_do_ascii_linefeed boolean default true,
    p_do_ascii_accents boolean default false
) is
    l_value varchar2(32767) := p_value;
begin
    if (p_do_ascii_linefeed) then
        p_make_ascii_linefeed(l_value);
    end if;
    if (p_do_ascii_accents) then
        p_make_ascii_accents(l_value);
    end if;
    xmldom.setAttribute(p_node, p_attr, l_value);
end;
procedure p_setAttr (
    p_node xmldom.DOMElement,
    p_attr varchar2,
    p_value varchar2
) is
begin
    xmldom.setAttribute(p_node, p_attr, p_value);
end;
procedure p_setAttrDate (
    p_node xmldom.DOMElement,
    p_attr varchar2,
    p_value date
) is
begin
    p_setAttr(p_node, p_attr, to_char(p_value, 'RRRRMMDD'));
end;
procedure p_setAttrNumber (
    p_node xmldom.DOMElement,
    p_attr varchar2,
    p_value number
) is
begin
    p_setAttr(p_node, p_attr, p_value);
end;
procedure p_setAttrDateTime (
    p_node xmldom.DOMElement,
    p_attr varchar2,
    p_value date
) is
begin
    p_setAttr(p_node, p_attr, to_char(p_value, 'RRRRMMDD'));
end;
procedure p_init_ascii_list is
begin
g_ascii_list := ger_t_tnumber_mpt();
    for i in (
select ascii('á')code from dual union
select ascii('à')code from dual union
select ascii('â')code from dual union
select ascii('ã')code from dual union
select ascii('ç')code from dual union
select ascii('é')code from dual union
select ascii('ê')code from dual union
select ascii('í')code from dual union
select ascii('ó')code from dual union
select ascii('ô')code from dual union
select ascii('õ')code from dual union
select ascii('ú')code from dual union
SELECT ASCII('Á')code from dual union
SELECT ASCII('À')code from dual union
SELECT ASCII('Â')code from dual union
SELECT ASCII('Ã')code from dual union
SELECT ASCII('Ç')code from dual union
SELECT ASCII('É')code from dual union
SELECT ASCII('Ê')code from dual union
SELECT ASCII('Í')code from dual union
SELECT ASCII('Ó')code from dual union
SELECT ASCII('Ô')code from dual union
SELECT ASCII('Õ')code from dual union
SELECT ASCII('Ú')code from dual union
select 10 code from dual     ) loop
    g_ascii_list.extend;
    g_ascii_list(g_ascii_list.count) := i.code;
end loop;
end;
BEGIN
p_init_ascii_list;
END;
/

prompt
prompt Creating package body ENVIAR_PK
prompt ===============================
prompt
CREATE OR REPLACE PACKAGE BODY RPV.ENVIAR_PK AS
FUNCTION wname_in(wcampo varchar,
	wformato 	varchar,
        wtipo_form 	 varchar,
        wref_form_b  varchar,
	      word_form_b  number,
	      wvin_num_vin varchar,
        wref_form_e  varchar,
	      word_form_e  number,
        wano_form 	 NUMBER,
	      wnum_form 	 NUMBER,
        wid_grupo    number,
        wref_form_2  varchar2,
        wcod_ser     varchar,
        wformi_num_ord    number,
        wformi_ord_form_i number,
        wref_ped_envio    varchar2,
	      wnum_msg_envio    number,
        werro OUT integer)
RETURN varchar  IS
	wconteudo VARCHAR2(255);
	wform_b form_b%ROWTYPE;
	wform_z form_z%ROWTYPE;
	wform_e form_e%ROWTYPE;
	wformulario formulario%ROWTYPE;
	wenvio envio%ROWTYPE;
	wvin vinheta%ROWTYPE;
	wdescen descendente%ROWTYPE;
	wform_p form_p%ROWTYPE;
  wgrupos grupos%ROWTYPE;
  wgrupos_det grupos_det%ROWTYPE;
  wjustifica_recusa justifica_recusa%ROWTYPE;
  wform_i form_i%ROWTYPE;
	wpais_transito pais_transito%ROWTYPE;
	wform_doc form_doc%ROWTYPE;
	wrecep recep%ROWTYPE;
	wformi form_i%ROWTYPE;
  wvistos_3_anos vistos_3_anos%ROWTYPE;
  wmeios_subsistencia meios_subsistencia%ROWTYPE;
  windef_justifica_parecer indef_justifica_parecer%ROWTYPE;
  wformulario_web formulario_web%ROWTYPE;
  wtemp_env_vismail temp_env_vismail%ROWTYPE;
  wbiometria_info biometria_info%rowtype;
  --
CURSOR c_form_b IS
	SELECT * FROM form_b
	WHERE ref_form_b = wref_form_b
	AND   ord_form_b = word_form_b;
CURSOR c_form_i IS
	SELECT * FROM form_i
	WHERE ano_form = wano_form
	AND   num_form = wnum_form
	AND   cod_ser = wcod_ser
	AND   num_ord = wformi_num_ord
	AND   ord_form_i = wformi_ord_form_i
  AND   tip_i = 'E';
CURSOR c_form_z IS
	SELECT * FROM form_z
	WHERE ano_form = wano_form
	AND	num_form = wnum_form;
CURSOR c_formulario IS
	SELECT * FROM formulario
	WHERE ano_form = wano_form
	AND   num_form = wnum_form;
CURSOR c_form_e IS
	SELECT * FROM form_e
	WHERE ref_form_e = wref_form_e
	AND   ord_form_e = word_form_e;
CURSOR c_descen IS
	SELECT * from descendente
	WHERE ano_form = wano_form
	AND   num_form = wnum_form;
CURSOR c_form_p IS
	SELECT * from form_p
	WHERE ano_form = wano_form
	AND   num_form = wnum_form;
CURSOR c_vinheta IS
	SELECT * FROM vinheta
	WHERE num_vin = wvin_num_vin;
CURSOR c_pais_transito IS
	SELECT * FROM pais_transito
	WHERE ano_form = wano_form
	AND   num_form = wnum_form;
CURSOR c_form_doc IS
	SELECT * FROM form_doc
	WHERE ano_form = wano_form
	AND   num_form = wnum_form;
CURSOR c_grupos IS
	SELECT * FROM grupos
	WHERE id_grupo = wid_grupo;
CURSOR c_grupos_det IS
	SELECT * FROM grupos_det
	WHERE id_grupo = wid_grupo;
CURSOR c_justifica_recusa IS
	SELECT * FROM justifica_recusa
	WHERE ref_form_2 = wref_form_2;
CURSOR c_recep IS
	SELECT * from recep
	WHERE forme_ref_form_e = wref_form_e
	AND forme_ord_form_e = word_form_e;
CURSOR c_vistos_3_anos IS
	SELECT * from vistos_3_anos
	WHERE ano_form = wano_form
	AND   num_form = wnum_form;
CURSOR c_meios_subsistencia IS
	SELECT * from meios_subsistencia
	WHERE ano_form = wano_form
	AND   num_form = wnum_form;
CURSOR c_formulario_web IS
	SELECT * from formulario_web
	WHERE ano_form = wano_form
	AND   num_form = wnum_form;
CURSOR c_temp_env_vismail IS
	SELECT * from temp_env_vismail
	WHERE messageid = wref_ped_envio;
CURSOR c_indef_justifica_parecer IS
	SELECT * from indef_justifica_parecer
	WHERE ano_form = wano_form
	AND   num_form = wnum_form;
CURSOR c_biometria_info IS
	SELECT * from biometria_info
	WHERE ano_form = wano_form
	AND   num_form = wnum_form;
BEGIN
     --
     werro := 0;
     --
     --> TABELA FORM_B
     --
	IF SUBSTR(wcampo,1,7) = 'FORM_B.'
	THEN
		OPEN c_form_b;
        	FETCH c_form_b INTO wform_b;
        	IF c_form_b%NOTFOUND THEN
           		werro := 901; -- ERRO DE LEITURA NA TABELA form_b
           		RETURN(NULL);
        	END IF;
        	CLOSE c_form_b;
	END IF;
	--
	--> TABELA FORM_Z
	--
	IF SUBSTR(wcampo,1,7) = 'FORM_Z.'
	THEN
		OPEN c_form_z;
		FETCH c_form_z INTO wform_z;
		IF c_form_z%NOTFOUND THEN
			werro := 901; -- ERRO DE LEITURA NA TABELA form_z
			RETURN(NULL);
		END IF;
		CLOSE c_form_z;
	END IF;
	--
	--> TABELA FORM_I
	--
	IF SUBSTR(wcampo,1,7) = 'FORM_I.'
	THEN
		OPEN c_form_i;
		FETCH c_form_i INTO wform_i;
		IF c_form_i%NOTFOUND THEN
			werro := 901; -- ERRO DE LEITURA NA TABELA form_i
			RETURN(NULL);
		END IF;
		CLOSE c_form_i;
	END IF;
	--> TABELA FORMULARIO
	--
	IF SUBSTR(wcampo,1,11) = 'FORMULARIO.'
	THEN
		OPEN c_formulario;
		FETCH c_formulario INTO wformulario;
		IF c_formulario%NOTFOUND THEN
			werro := 902; -- ERRO DE LEITURA NA TABELA formulario
			RETURN(NULL);
		END IF;
		CLOSE c_formulario;
	END IF;
	--
	--> TABELA FORM_E
	--
	IF SUBSTR(wcampo,1,7) = 'FORM_E.'
	THEN
		OPEN c_form_e;
		FETCH c_form_e INTO wform_e;
		IF c_form_e%NOTFOUND THEN
			werro := 903; -- ERRO DE LEITURA NA TABELA form_e
			RETURN(NULL);
		END IF;
		CLOSE c_form_e;
	END IF;
	--
	-- TABELA VINHETA
	--
	IF SUBSTR(wcampo,1,8) = 'VINHETA.'
	THEN
		OPEN c_vinheta;
		FETCH c_vinheta INTO wvin;
		IF c_vinheta%NOTFOUND THEN
			werro := 904; -- ERRO DE LEITURA NA TABELA vinheta
			RETURN(NULL);
		END IF;
		CLOSE c_vinheta;
	END IF;
	--
	-- TABELA DESCENDENTE
	--
	IF SUBSTR(wcampo,1,13) = '@DESCENDENTE.'
	THEN
		OPEN c_descen;
		FETCH c_descen INTO wdescen;
		IF c_descen%NOTFOUND THEN
			werro := 905;
			-- ERRO DE LEITURA NA TABELA descendente (existencia opcional
			-- só formulários P)
			RETURN(NULL);
		END IF;
		CLOSE c_descen;
	END IF;
	--
	-- TABELA FORM_P
	--
	IF SUBSTR(wcampo,1,7) = 'FORM_P.'
	THEN
		OPEN c_form_p;
		FETCH c_form_p INTO wform_p;
		IF c_form_p%NOTFOUND THEN
			werro := 906;
			-- ERRO DE LEITURA NA TABELA form_p (existencia opcional
			-- só formulários P)
			RETURN(NULL);
		END IF;
		CLOSE c_form_p;
	END IF;
  --
	-- TABELA GRUPOS
	--
	IF SUBSTR(wcampo,1,7) = 'GRUPOS.'
	THEN
		OPEN c_grupos;
		FETCH c_grupos INTO wgrupos;
		IF c_grupos%NOTFOUND THEN
			werro := 906;
			-- ERRO DE LEITURA NA TABELA grupos
			RETURN(NULL);
		END IF;
		CLOSE c_grupos;
	END IF;
  --
	-- TABELA GRUPOS_DET
	--
	IF SUBSTR(wcampo,1,12) = '@GRUPOS_DET.'
	THEN
		OPEN c_grupos_det;
		FETCH c_grupos_det INTO wgrupos_det;
		IF c_grupos_det%NOTFOUND THEN
			werro := 906;
			-- ERRO DE LEITURA NA TABELA grupos_det
			RETURN(NULL);
		END IF;
		CLOSE c_grupos_det;
	END IF;
  --
	-- TABELA JUSTIFICA_RECUSA
	--
	IF SUBSTR(wcampo,1,17) = 'JUSTIFICA_RECUSA.'
	THEN
		OPEN c_justifica_recusa;
		FETCH c_justifica_recusa INTO wjustifica_recusa;
		IF c_justifica_recusa%NOTFOUND THEN
			werro := 906;
			-- ERRO DE LEITURA NA TABELA justifica_recusa
			RETURN(NULL);
		END IF;
		CLOSE c_justifica_recusa;
	END IF;
	--
	-- TABELA PAIS_TRANSITO
	--
	IF SUBSTR(wcampo,1,15) = '@PAIS_TRANSITO.'
	THEN
		OPEN c_pais_transito;
		FETCH c_pais_transito INTO wpais_transito;
		IF c_pais_transito%NOTFOUND THEN
			werro := 907;
			-- ERRO DE LEITURA NA TABELA pais_transito (existencia opcional
			-- só formulários P)
			RETURN(NULL);
		END IF;
		CLOSE c_pais_transito;
	END IF;
  --
	-- TABELA VISTOS_3_ANOS
	--
	IF SUBSTR(wcampo,1,15) = '@VISTOS_3_ANOS.'
	THEN
		OPEN c_vistos_3_anos;
		FETCH c_vistos_3_anos INTO wvistos_3_anos;
		IF c_vistos_3_anos%NOTFOUND THEN
			werro := 907;
			-- ERRO DE LEITURA NA TABELA vistos_3_anos
			RETURN(NULL);
		END IF;
		CLOSE c_vistos_3_anos;
	END IF;
  --
	-- TABELA MEIOS_SUBSISTENCIA
	--
	IF SUBSTR(wcampo,1,20) = '@MEIOS_SUBSISTENCIA.'
	THEN
		OPEN c_meios_subsistencia;
		FETCH c_meios_subsistencia INTO wmeios_subsistencia;
		IF c_meios_subsistencia%NOTFOUND THEN
			werro := 907;
			-- ERRO DE LEITURA NA TABELA meios_subsistencia
			RETURN(NULL);
		END IF;
		CLOSE c_meios_subsistencia;
	END IF;
  --
	-- TABELA INDEF_JUSTIFICA_PARECER
	--
	IF SUBSTR(wcampo,1,26) = '@INDEF_JUSTIFICA_PARECER.'
	THEN
		OPEN c_indef_justifica_parecer;
		FETCH c_indef_justifica_parecer INTO windef_justifica_parecer;
		IF c_indef_justifica_parecer%NOTFOUND THEN
			werro := 907;
			-- ERRO DE LEITURA NA TABELA indef_justifica_parecer
			RETURN(NULL);
		END IF;
		CLOSE c_indef_justifica_parecer;
	END IF;

	--
	-- TABELA FORM_DOC
	--
	IF SUBSTR(wcampo,1,10) = '@FORM_DOC.'
	THEN
		OPEN c_form_doc;
		FETCH c_form_doc INTO wform_doc;
		IF c_form_doc%NOTFOUND THEN
			werro := 908;
			-- ERRO DE LEITURA NA TABELA form_doc (existencia opcional
			-- só formulários P)
			RETURN(NULL);
		END IF;
		CLOSE c_form_doc;
	END IF;
	--
	-- TABELA RECEP
	--
	IF SUBSTR(wcampo,1,6) = 'RECEP.'
	THEN
		OPEN c_recep;
		FETCH c_recep INTO wrecep;
		IF c_recep%NOTFOUND THEN
			werro := 909; -- ERRO DE LEITURA NA TABELA recep
			RETURN(NULL);
		END IF;
		CLOSE c_recep;
	END IF;
  --> TABELA FORMULARIO_WEB
	--
	IF SUBSTR(wcampo,1,15) = 'FORMULARIO_WEB.'
	THEN
		OPEN c_formulario_web;
		FETCH c_formulario_web INTO wformulario_web;
		IF c_formulario_web%NOTFOUND THEN
			werro := 902; -- ERRO DE LEITURA NA TABELA formulario_web
			RETURN(NULL);
		END IF;
		CLOSE c_formulario_web;
	END IF;
  --> TABELA TEMP_ENV_VISMAIL
	--
	IF SUBSTR(wcampo,1,17) = 'TEMP_ENV_VISMAIL.'
	THEN
		OPEN c_temp_env_vismail;
		FETCH c_temp_env_vismail INTO wtemp_env_vismail;
		IF c_temp_env_vismail%NOTFOUND THEN
			werro := 902; -- ERRO DE LEITURA NA TABELA temp_env_vismail
			RETURN(NULL);
		END IF;
		CLOSE c_temp_env_vismail;
	END IF;
  --
	-- TABELA BIOMETRIA_INFO
	--
  IF SUBSTR(wcampo,1,15) = 'BIOMETRIA_INFO.'
	THEN
		OPEN c_biometria_info;
		FETCH c_biometria_info INTO wbiometria_info;
		IF c_biometria_info%NOTFOUND THEN
			werro := 910;
			-- ERRO DE LEITURA NA TABELA biometria_info
			RETURN(NULL);
		END IF;
		CLOSE c_biometria_info;
	END IF;
	--
	--> campos da tabela FORM_B
	--
	IF wcampo = 'FORM_B.REF_FORM_B'
	THEN
		wconteudo := wform_b.ref_form_b;
	ELSIF wcampo = 'FORM_B.ORD_FORM_B'
	THEN
		wconteudo := wform_b.ord_form_b;
	ELSIF wcampo = 'FORM_B.OBS'
	THEN
		wconteudo := wform_b.obs;
	ELSIF wcampo = 'FORM_B.PRAZ_SUP'
	THEN
		IF wformato IS NULL THEN
			wconteudo := TO_CHAR(wform_b.praz_sup);
		ELSE
			wconteudo := TO_CHAR(wform_b.praz_sup, wformato);
		END IF;
	ELSIF wcampo = 'FORM_B.DAT_RESP'
	THEN
		IF wformato IS NULL THEN
			wconteudo := TO_CHAR(wform_b.dat_resp);
		ELSE
			wconteudo := TO_CHAR(wform_b.dat_resp, wformato);
		END IF;
	ELSIF wcampo = 'FORM_B.COD_PARE'
	THEN
		wconteudo := wform_b.cod_pare;
--
--> campos da tabela FORM_Z
--
	ELSIF wcampo =
	'FORMULARIO.COD_PAIS_SCH_REF||FORMULARIO.REF_FORM_2||FORMULARIO.REF_FORM_3'
	THEN
        wconteudo := 	wformulario.cod_pais_sch_ref||wformulario.ref_form_2||
			wformulario.ref_form_3;
	ELSIF wcampo = 'FORM_Z.DAT_CONCED_PED'
	THEN
		wconteudo := TO_CHAR(wform_z.dat_conced_ped, wformato);
--
--> campos da tabela FORM_I
--
	ELSIF wcampo =
	'FORMULARIO.COD_PAIS_SCH_REF||FORMULARIO.REF_FORM_2||FORMULARIO.REF_FORM_3'
	THEN
        wconteudo := 	wformulario.cod_pais_sch_ref||wformulario.ref_form_2||
			wformulario.ref_form_3;
	ELSIF wcampo = 'FORM_I.COD_SER'
	THEN
		wconteudo := wform_i.cod_ser;
	ELSIF wcampo = 'FORM_I.NUM_ORD'
	THEN
		wconteudo := wform_i.num_ord;
	ELSIF wcampo = 'FORM_I.ORD_FORM_I'
	THEN
		wconteudo := wform_i.ord_form_i;
	ELSIF wcampo = 'FORM_I.DAT_INF'
	THEN
		wconteudo := TO_CHAR(wform_i.dat_inf, wformato);
	ELSIF wcampo = 'FORM_I.OBS'
	THEN
		wconteudo := wform_i.obs;
	ELSIF wcampo = 'FORM_I.DEVE_AGUARD'
	THEN
		wconteudo := wform_i.deve_aguard;
	ELSIF wcampo = 'FORM_I.DOCS_RESP'
	THEN
		wconteudo := wform_i.docs_resp;
	ELSIF wcampo = 'FORM_I.DOCS_FAX'
	THEN
		wconteudo := wform_i.docs_fax;
--
--> campos da tabela FORMULARIO
--
	ELSIF wcampo = 'FORMULARIO.COD_PAIS_SCH_REF'
	THEN
		wconteudo := wformulario.cod_pais_sch_ref;
	ELSIF wcampo = 'FORMULARIO.REF_FORM_2'
	THEN
		wconteudo := wformulario.ref_form_2;
	ELSIF wcampo = 'FORMULARIO.REF_FORM_3'
	THEN
		wconteudo := wformulario.ref_form_3;
	ELSIF
	wcampo = 'FORMULARIO.COD_PAIS_SCH_REF||FORMULARIO.REF_FORM_2||FORMULARIO.REF_FORM_3'
	THEN
		wconteudo := 	wformulario.cod_pais_sch_ref||wformulario.ref_form_2||
				wformulario.ref_form_3;
	ELSIF wcampo = 'FORMULARIO.APEL'
	THEN
		wconteudo := wformulario.apel;
	ELSIF wcampo = 'FORMULARIO.APEL_OUTR'
	THEN
		wconteudo := wformulario.apel_outr;
	ELSIF wcampo = 'FORMULARIO.NOME'
     	THEN
		wconteudo := wformulario.nome;
	ELSIF wcampo = 'FORMULARIO.DAT_NASC'
	THEN
		wconteudo := wformulario.dat_nasc;
        	wconteudo := substr(wconteudo,1,4)||substr(wconteudo,6,2)||
				substr(wconteudo,9,2);
	ELSIF wcampo = 'FORMULARIO.LOC_NASC'
	THEN
		wconteudo := wformulario.loc_nasc;
	ELSIF wcampo = 'FORMULARIO.SEXO'
	THEN
		wconteudo := wformulario.sexo;
	ELSIF wcampo = 'FORMULARIO.COD_PAIS_NAC_ORIG'
	THEN
		wconteudo := wformulario.cod_pais_nac_orig;

	ELSIF wcampo = 'FORMULARIO.APEL_CONJ_SOL'
	THEN
		wconteudo := wformulario.apel_conj_sol;

	ELSIF wcampo = 'FORMULARIO.APEL_UE'
	THEN
		wconteudo := wformulario.apel_ue;

	ELSIF wcampo = 'FORMULARIO.NOME_UE'
	THEN
		wconteudo := wformulario.nome_ue;

	ELSIF wcampo = 'FORMULARIO.DAT_NASC_UE'
	THEN
		wconteudo := wformulario.dat_nasc_ue;
		wconteudo := substr(wconteudo,1,4)||substr(wconteudo,6,2)||
				substr(wconteudo,9,2);
	ELSIF wcampo = 'FORMULARIO.COD_PAIS_NAC_UE'
	THEN
		wconteudo := wformulario.cod_pais_nac_ue;

	ELSIF wcampo = 'FORMULARIO.PASSAPORTE_UE'
	THEN
		wconteudo := wformulario.passaporte_ue;

	ELSIF wcampo = 'FORMULARIO.PARENTESCO_UE'
	THEN
		wconteudo := wformulario.parentesco_ue;

	ELSIF wcampo = 'FORMULARIO.COD_DOC'
	THEN
		wconteudo := wformulario.cod_doc;
	ELSIF wcampo = 'FORMULARIO.COD_PAIS_EMI_DOC'
	THEN
		wconteudo := wformulario.cod_pais_emi_doc;
	ELSIF wcampo = 'FORMULARIO.NUM_DOC_VIAG'
	THEN
		wconteudo := wformulario.num_doc_viag;
	ELSIF wcampo = 'FORMULARIO.DUR_ESTA'
	THEN
        	IF wformato IS NULL THEN
           		wconteudo := TO_CHAR(wformulario.dur_esta);
		ELSE
			wconteudo := TO_CHAR(wformulario.dur_esta, wformato);
		END IF;
	ELSIF wcampo = 'FORMULARIO.COD_ESTA_1'
	THEN
		wconteudo := wformulario.cod_esta_1;
	ELSIF wcampo = 'FORMULARIO.COD_ESTA_2'
	THEN
		wconteudo := wformulario.cod_esta_2;
	ELSIF wcampo = 'FORMULARIO.COD_ESTA_3'
	THEN
		wconteudo := wformulario.cod_esta_3;
	ELSIF wcampo = 'FORMULARIO.DEST_PRIN'
	THEN
		wconteudo := wformulario.dest_prin;
	ELSIF wcampo = 'FORMULARIO.COD_PAIS_NAC_1'
	THEN
		wconteudo := wformulario.cod_pais_nac_1;
	ELSIF wcampo = 'FORMULARIO.COD_PAIS_NAC_2'
	THEN
		wconteudo := wformulario.cod_pais_nac_2;
	ELSIF wcampo = 'FORMULARIO.COD_PAIS_NAC_3'
	THEN
		wconteudo := wformulario.cod_pais_nac_3;
	ELSIF wcampo = 'FORMULARIO.DAT_ENT'
	THEN
		wconteudo := wformulario.dat_ent;
        	wconteudo := substr(wconteudo,1,4)||substr(wconteudo,6,2)||
				substr(wconteudo,9,2);
	ELSIF wcampo = 'FORMULARIO.NUM_ENT'
	THEN
		wconteudo := wformulario.num_ent;
	ELSIF wcampo = 'FORMULARIO.COD_PROF'
	THEN
		wconteudo := wformulario.cod_prof;
	ELSIF wcampo = 'FORMULARIO.FILIA'
	THEN
		wconteudo := wformulario.filia;
	ELSIF wcampo = 'FORMULARIO.NOME_REFER_1'
	THEN
		wconteudo := wformulario.nome_refer_1;
	ELSIF wcampo = 'FORMULARIO.NOME_REFER_2'
	THEN
		wconteudo := wformulario.nome_refer_2;
	ELSIF wcampo = 'FORMULARIO.FRON_1_ENT'
	THEN
		wconteudo := wformulario.fron_1_ent;
	ELSIF wcampo = 'FORMULARIO.DAT_PED'
	THEN
		wconteudo := wformulario.dat_ped;
        	wconteudo := substr(wconteudo,1,4)||substr(wconteudo,6,2)||
		substr(wconteudo,9,2);
	ELSIF wcampo = 'FORMULARIO.DAT_PED_SCH'
	THEN
		wconteudo := wformulario.dat_ped_sch;
		wconteudo := substr(wconteudo,1,4)||substr(wconteudo,6,2)||
				substr(wconteudo,9,2);
	ELSIF wcampo = 'FORMULARIO.TIP_VIS_PED'
	THEN
		wconteudo := wformulario.tip_vis_ped;
	ELSIF wcampo = 'FORMULARIO.TIP_VIS_CONCED'
	THEN
		wconteudo := wformulario.tip_vis_conced;
	ELSIF wcampo = 'FORMULARIO.APEL_CONJ'
	THEN
		wconteudo := wformulario.apel_conj;
	ELSIF wcampo = 'FORMULARIO.NUM_PROC'
	THEN
		wconteudo := wformulario.num_proc;

	ELSIF wcampo = 'FORMULARIO.NOME_CONJ'
	THEN
		wconteudo := wformulario.nome_conj;
	ELSIF wcampo = 'FORMULARIO.DAT_NASC_CONJ' -- campo de data tipo varchar --
	THEN
		wconteudo := wformulario.dat_nasc_conj;
        	wconteudo := substr(wconteudo,1,4)||substr(wconteudo,6,2)||
				substr(wconteudo,9,2);
	ELSIF wcampo = 'FORMULARIO.NAT_CONJ'
	THEN
		wconteudo := wformulario.nat_conj;
	ELSIF wcampo = 'FORMULARIO.COD_PAIS_EMI_DOC'
	THEN
		wconteudo := wformulario.cod_pais_emi_doc;
	ELSIF wcampo = 'FORMULARIO.COD_PAIS_SCH_DEST_PRIN'
	THEN
		wconteudo := wformulario.cod_pais_sch_dest_prin;
	ELSIF wcampo = 'FORMULARIO.COD_PAIS_SCH_REPRES'
	THEN
		wconteudo := wformulario.cod_pais_sch_repres;
	ELSIF wcampo = 'FORMULARIO.COD_PARE'
	THEN
		wconteudo := wformulario.cod_pare;
	ELSIF wcampo = 'FORMULARIO.COD_PARE_POS'
	THEN
		wconteudo := wformulario.cod_pare_pos;
 	/*ELSIF wcampo = 'FORMULARIO.PARECER_SEF'
	THEN
		wconteudo := wformulario.parecer_sef;*/
	ELSIF wcampo = 'FORMULARIO.COD_POS'
	THEN
		wconteudo := wformulario.cod_pos;
	ELSIF wcampo = 'FORMULARIO.DAT_SAI'
	THEN
		wconteudo := wformulario.dat_sai;
        	wconteudo := substr(wconteudo,1,4)||substr(wconteudo,6,2)||
				substr(wconteudo,9,2);
	ELSIF wcampo = 'FORMULARIO.VIN_PARA'
	THEN
		wconteudo := wformulario.vin_para;
	ELSIF wcampo = 'FORMULARIO.TIP_URG'
	THEN
		wconteudo := wformulario.tip_urg;
	ELSIF wcampo = 'FORMULARIO.AUTORIZ_EXPR'
	THEN
		wconteudo := wformulario.autoriz_expr;
--
  ELSIF wcampo = 'FORMULARIO.APEL_TUT'
	THEN
		wconteudo := wformulario.apel_tut;
  ELSIF wcampo = 'FORMULARIO.NOME_TUT'
	THEN
		wconteudo := wformulario.nome_tut;
  ELSIF wcampo = 'FORMULARIO.COD_PAIS_NAC_TUT'
	THEN
		wconteudo := wformulario.cod_pais_nac_tut;
  ELSIF wcampo = 'FORMULARIO.ENDERECO_TUT'
	THEN
		wconteudo := wformulario.endereco_tut;
  ELSIF wcampo = 'FORMULARIO.BIO'
	THEN
		wconteudo := wformulario.bio;
  ELSIF wcampo = 'FORMULARIO.DAT_BIO'
	THEN
    wconteudo := wformulario.dat_bio;
    wconteudo := substr(wconteudo,1,4)||substr(wconteudo,6,2)||
				substr(wconteudo,9,2);
  ELSIF wcampo = 'FORMULARIO.VISTO_3_ANOS'
	THEN
		wconteudo := wformulario.visto_3_anos;
  ELSIF wcampo = 'FORMULARIO.NOME_REFER_3'
	THEN
		wconteudo := wformulario.nome_refer_3;
  ELSIF wcampo = 'FORMULARIO.DEST_PRIN_2'
	THEN
		wconteudo := wformulario.dest_prin_2;
  ELSIF wcampo = 'FORMULARIO.DEST_PRIN_3'
	THEN
		wconteudo := wformulario.dest_prin_3;
  ELSIF wcampo = 'FORMULARIO.COD_MOT_CANC'
	THEN
		wconteudo := wformulario.cod_mot_canc;
  ELSIF wcampo = 'FORMULARIO.EMAIL_REQ'
	THEN
		wconteudo := wformulario.email_req;
  ELSIF wcampo = 'FORMULARIO.EMAIL_TUT'
	THEN
		wconteudo := wformulario.email_tut;
  ELSIF wcampo = 'FORMULARIO.TELEFONE_TUT'
	THEN
		wconteudo := wformulario.telefone_tut;
  ELSIF wcampo = 'FORMULARIO.INFO_MOT_ESTA'
	THEN
		wconteudo := wformulario.info_mot_esta;
  ELSIF wcampo = 'FORMULARIO.ULT_NUM_VIN'
	THEN
		wconteudo := wformulario.ult_num_vin;  
--
---> campos da tabela RECEP
--
     ELSIF wcampo = 'RECEP.REF_PED_RECEP'
     THEN
        wconteudo := wrecep.ref_ped_recep;
--
---> campos da tabela FORM_E
--
     ELSIF wcampo = 'FORM_E.TIP_FORM'
     THEN
        wconteudo := wform_e.tip_form;
     ELSIF wcampo = 'FORM_E.COD_ERR'
     THEN
        wconteudo := wform_e.cod_err;
     ELSIF wcampo = 'FORM_E.COD_ERR_SUP'
     THEN
        IF wformato IS NULL THEN
        	wconteudo := TO_CHAR(wform_e.cod_err_sup);
	ELSE
        	wconteudo := TO_CHAR(wform_e.cod_err_sup,wformato);
	END IF;
     ELSIF wcampo = 'FORM_E.COD_ERR_LOG'
     THEN
        IF wformato IS NULL THEN
        	wconteudo := TO_CHAR(wform_e.cod_err_log);
	ELSE
        	wconteudo := TO_CHAR(wform_e.cod_err_log,wformato);
	END IF;
     ELSIF wcampo = 'FORM_E.REF_FORM_E' then
	wconteudo := wform_e.ref_form_e;
--
---> campos da tabela VINHETA
--
     ELSIF wcampo = 'VINHETA.NUM_VIN'
     THEN
	wconteudo := wvin.num_vin;
     ELSIF wcampo = 'VINHETA.DAT_EMI'
     THEN
	wconteudo := wvin.dat_emi;
        wconteudo := substr(wconteudo,1,4)||substr(wconteudo,6,2)||substr(wconteudo,9,2);
     ELSIF wcampo = 'VINHETA.TIP_VIS'
     THEN
	wconteudo := wvin.tip_vis;
     ELSIF wcampo = 'VINHETA.ALT_DAT'
     THEN
	wconteudo := wvin.alt_dat;
     ELSIF wcampo = 'VINHETA.DAT_INI'
     THEN
	wconteudo := wvin.dat_ini;
        wconteudo := substr(wconteudo,1,4)||substr(wconteudo,6,2)||substr(wconteudo,9,2);
     ELSIF wcampo = 'VINHETA.DAT_FIN'
     THEN
	wconteudo := wvin.dat_fin;
        wconteudo := substr(wconteudo,1,4)||substr(wconteudo,6,2)||substr(wconteudo,9,2);
     ELSIF wcampo = 'VINHETA.REF_DECISAO'
     THEN
	wconteudo := wvin.ref_decisao;
     ELSIF wcampo = 'VINHETA.VIN_PARA'
     THEN
	wconteudo := wvin.vin_para;
     ELSIF wcampo = 'VINHETA.NUM_DOC_VIAG'
     THEN
	wconteudo := wvin.num_doc_viag;
     ELSIF wcampo = 'VINHETA.ANO_LOTE'
     THEN
	wconteudo := wvin.ano_lote;
     ELSIF wcampo = 'VINHETA.NUM_LOTE'
     THEN
	wconteudo := wvin.num_lote;
     ELSIF wcampo = 'VINHETA.EST_VIN'
     THEN
	wconteudo := wvin.est_vin;
     ELSIF wcampo = 'VINHETA.COD_POS'
     THEN
	wconteudo := wvin.cod_pos;
     ELSIF wcampo = 'VINHETA.NUM_ENT'
     THEN
	wconteudo := wvin.num_ent;
     ELSIF wcampo = 'VINHETA.DUR_ESTA'
     THEN
	wconteudo := wvin.dur_esta;
     ELSIF wcampo = 'VINHETA.DOC_VIAG'
     THEN
	wconteudo := wvin.doc_viag;
     ELSIF wcampo = 'VINHETA.AVER_VIN'
     THEN
	wconteudo := wvin.aver_vin;
     ELSIF wcampo = 'VINHETA.MANUAL'
     THEN
	wconteudo := wvin.manual;
--
---> campos da tabela DESCENDENTE
--
     ELSIF wcampo = '@DESCENDENTE.APEL_DESC'
     THEN
	wconteudo := wdescen.apel_desc;
     ELSIF wcampo = '@DESCENDENTE.NOME_DESC'
     THEN
	wconteudo := wdescen.nome_desc;
     ELSIF wcampo = '@DESCENDENTE.DAT_NASC_DESC'
     THEN
	wconteudo := wdescen.dat_nasc_desc;
        wconteudo := substr(wconteudo,1,4)||substr(wconteudo,6,2)||substr(wconteudo,9,2);
     ELSIF wcampo = '@DESCENDENTE.LOC_NASC_DESC'
     THEN
	wconteudo := wdescen.loc_nasc_desc;
     ELSIF wcampo = '@DESCENDENTE.COD_PAIS'
     THEN
	wconteudo := wdescen.cod_pais;
--
---> campos da tabela GRUPOS
--
     ELSIF wcampo = 'GRUPOS.ID_GRUPO'
     THEN
	wconteudo := wgrupos.id_grupo;
     ELSIF wcampo = 'GRUPOS.COD_TIPO_GRUPO'
     THEN
	wconteudo := wgrupos.cod_tipo_grupo;
--
---> campos da tabela GRUPOS_DET
--
     ELSIF wcampo = '@GRUPOS_DET.REF_FORM_2'
     THEN
	wconteudo := wgrupos_det.ref_form_2;
--
---> campos da tabela JUSTIFICA_RECUSA
--
     ELSIF wcampo = 'JUSTIFICA_RECUSA.REF_FORM_2'
     THEN
	wconteudo := wjustifica_recusa.ref_form_2;
     ELSIF wcampo = 'JUSTIFICA_RECUSA.TIPO'
     THEN
	wconteudo := wjustifica_recusa.tipo;
     ELSIF wcampo = 'JUSTIFICA_RECUSA.JUSTIFICA_1'
     THEN
	wconteudo := wjustifica_recusa.justifica_1;
     ELSIF wcampo = 'JUSTIFICA_RECUSA.JUSTIFICA_2'
     THEN
	wconteudo := wjustifica_recusa.justifica_2;
     ELSIF wcampo = 'JUSTIFICA_RECUSA.JUSTIFICA_3'
     THEN
	wconteudo := wjustifica_recusa.justifica_3;
     ELSIF wcampo = 'JUSTIFICA_RECUSA.JUSTIFICA_4'
     THEN
	wconteudo := wjustifica_recusa.justifica_4;
     ELSIF wcampo = 'JUSTIFICA_RECUSA.JUSTIFICA_5'
     THEN
	wconteudo := wjustifica_recusa.justifica_5;
     ELSIF wcampo = 'JUSTIFICA_RECUSA.JUSTIFICA_6'
     THEN
	wconteudo := wjustifica_recusa.justifica_6;
     ELSIF wcampo = 'JUSTIFICA_RECUSA.JUSTIFICA_7'
     THEN
	wconteudo := wjustifica_recusa.justifica_7;
     ELSIF wcampo = 'JUSTIFICA_RECUSA.JUSTIFICA_8'
     THEN
	wconteudo := wjustifica_recusa.justifica_8;
     ELSIF wcampo = 'JUSTIFICA_RECUSA.JUSTIFICA_9'
     THEN
	wconteudo := wjustifica_recusa.justifica_9;
     ELSIF wcampo = 'JUSTIFICA_RECUSA.JUSTIFICA_10'
     THEN
	wconteudo := wjustifica_recusa.justifica_10;
     ELSIF wcampo = 'JUSTIFICA_RECUSA.JUSTIFICA_11'
     THEN
	wconteudo := wjustifica_recusa.justifica_11;
--
--
---> campos da tabela FORM_P
--
     ELSIF wcampo = 'FORM_P.APEL_NASC'
     THEN
	wconteudo := wform_p.apel_nasc;
     ELSIF wcampo = 'FORM_P.COD_PAIS_NASC'
     THEN
	wconteudo := wform_p.cod_pais_nasc;
     ELSIF wcampo = 'FORM_P.EST_CIV'
     THEN
	wconteudo := wform_p.est_civ;
     ELSIF wcampo = 'FORM_P.COD_PAIS_CONJ'
     THEN
	wconteudo := wform_p.cod_pais_conj;
     ELSIF wcampo = 'FORM_P.COD_PAIS_EMI_AUT'
     THEN
	wconteudo := wform_p.cod_pais_emi_aut;
     ELSIF wcampo = 'FORM_P.AUT_PAIS_DEST'
     THEN
	wconteudo := wform_p.aut_pais_dest;
     ELSIF wcampo = 'FORM_P.VIAG_CONJ'
     THEN
	wconteudo := wform_p.viag_conj;
     ELSIF wcampo = 'FORM_P.NUM_FILHO'
     THEN
        IF wformato IS NULL THEN
		wconteudo := to_char(wform_p.num_filho);
	ELSE
		wconteudo := to_char(wform_p.num_filho,wformato);
	END IF;
     ELSIF wcampo = 'FORM_P.DAT_EMI_DOC'
     THEN
	wconteudo := wform_p.dat_emi_doc;
        wconteudo := substr(wconteudo,1,4)||substr(wconteudo,6,2)||substr(wconteudo,9,2);
     ELSIF wcampo = 'FORM_P.LOC_EMI_DOC'
     THEN
	wconteudo := wform_p.loc_emi_doc;
     ELSIF wcampo = 'FORM_P.VALI_DOC_VIAG'
     THEN
        IF wformato IS NULL THEN
	   wconteudo := to_char(wform_p.vali_doc_viag,'YYYYMMDD');
        ELSE
	   wconteudo := to_char(wform_p.vali_doc_viag,wformato);
        END IF;
     ELSIF wcampo = 'FORM_P.ENDER_PERMA'
     THEN
	wconteudo := wform_p.ender_perma;
     ELSIF wcampo = 'FORM_P.ENDER_ACT'
     THEN
	wconteudo := wform_p.ender_act;
     ELSIF wcampo = 'FORM_P.TIT_RESID_NUM'
     THEN
	wconteudo := wform_p.tit_resid_num;
     ELSIF wcampo = 'FORM_P.TIT_RESID_VALI'
     THEN
	wconteudo := wform_p.tit_resid_vali;
	IF wconteudo <> 'VITALICIO' THEN
	        wconteudo := substr(wconteudo,1,4)||substr(wconteudo,6,2)||substr(wconteudo,9,2);
	END IF;
     ELSIF wcampo = 'FORM_P.VIS_REGRE_NUM'
     THEN
	wconteudo := wform_p.vis_regre_num;
     ELSIF wcampo = 'FORM_P.VIS_REGRE_VALI'
     THEN
        IF wformato IS NULL THEN
	   wconteudo := to_char(wform_p.vis_regre_vali,'YYYYMMDD');
        ELSE
	   wconteudo := to_char(wform_p.vis_regre_vali,wformato);
        END IF;
     ELSIF wcampo = 'FORM_P.ENT_PATR'
     THEN
	wconteudo := wform_p.ent_patr;
     ELSIF wcampo = 'FORM_P.ENDER_PROF'
     THEN
	wconteudo := wform_p.ender_prof;
     ELSIF wcampo = 'FORM_P.COD_PAIS_DEST'
     THEN
	wconteudo := wform_p.cod_pais_dest;
     ELSIF wcampo = 'FORM_P.ENDER_REFER_1'
     THEN
	wconteudo := wform_p.ender_refer_1;
     ELSIF wcampo = 'FORM_P.NUM_IDENT'
     THEN
	wconteudo := wform_p.num_ident;
     ELSIF wcampo = 'FORM_P.TELEF_REF'
     THEN
	wconteudo := to_char(wform_p.telef_ref);
     ELSIF wcampo = 'FORM_P.EMAIL'
     THEN
	wconteudo := wform_p.email;
     ELSIF wcampo = 'FORM_P.FINANCIA'
     THEN
	wconteudo := wform_p.financia;
     ELSIF wcampo = 'FORM_P.TELEFONE'
     THEN
	wconteudo := to_char(wform_p.telefone);
     ELSIF wcampo = 'FORM_P.ENDER_REFER_2'
     THEN
	wconteudo := wform_p.ender_refer_2;
     ELSIF wcampo = 'FORM_P.COD_PAIS_SCH_REF_1'
     THEN
	wconteudo := wform_p.cod_pais_sch_ref_1;
     ELSIF wcampo = 'FORM_P.COD_PAIS_SCH_REF_2'
     THEN
	wconteudo := wform_p.cod_pais_sch_ref_2;
     ELSIF wcampo = 'FORM_P.ENDER_ESTAD'
     THEN
	wconteudo := wform_p.ender_estad;
     ELSIF wcampo = 'FORM_P.COD_CONC'
     THEN
	wconteudo := wform_p.cod_conc;
     ELSIF wcampo = 'FORM_P.MEIO_SUBS'
     THEN
	wconteudo := wform_p.meio_subs;
     ELSIF wcampo = 'FORM_P.VALI_AUT'
     THEN
        IF wformato IS NULL THEN
	   wconteudo := to_char(wform_p.vali_aut,'YYYYMMDD');
        ELSE
	   wconteudo := to_char(wform_p.vali_aut,wformato);
        END IF;
     ELSIF wcampo = 'FORM_P.DAT_SCH_1'
     THEN
        IF wformato IS NULL THEN
	   wconteudo := to_char(wform_p.dat_sch_1,'YYYYMMDD');
        ELSE
	   wconteudo := to_char(wform_p.dat_sch_1,wformato);
        END IF;
     ELSIF wcampo = 'FORM_P.DAT_SCH_2'
     THEN
        IF wformato IS NULL THEN
	   wconteudo := to_char(wform_p.dat_sch_2,'YYYYMMDD');
        ELSE
	   wconteudo := to_char(wform_p.dat_sch_2,wformato);
        END IF;
     ELSIF wcampo = 'FORM_P.DAT_SCH_3'
     THEN
        IF wformato IS NULL THEN
	   wconteudo := to_char(wform_p.dat_sch_3,'YYYYMMDD');
        ELSE
	   wconteudo := to_char(wform_p.dat_sch_3,wformato);
        END IF;
     ELSIF wcampo = 'FORM_P.DAT_LOC_PED'
     THEN
	wconteudo := wform_p.dat_loc_ped;
     ELSIF wcampo = 'FORM_P.MEIO_TRANS'
     THEN
	wconteudo := wform_p.meio_trans;
     ELSIF wcampo = 'FORM_P.OUTR_INDI'
     THEN
	wconteudo := wform_p.outr_indi;
     ELSIF wcampo = 'FORM_P.CID_POS'
     THEN
	wconteudo := wform_p.cid_pos;
     ELSIF wcampo = 'FORM_P.DOC_APR'
     THEN
	wconteudo := wform_p.doc_apr;
     ELSIF wcampo = 'FORM_P.OBS_PARE_POS'
     THEN
	wconteudo := wform_p.obs_pare_pos;
     ELSIF wcampo = 'FORM_P.NUM_FORM_POS'
     THEN
        IF wformato IS NULL THEN
	   wconteudo := to_char(wform_p.num_form_pos,'FM000009');
        ELSE
	   wconteudo := to_char(wform_p.num_form_pos,wformato);
        END IF;
     ELSIF wcampo = 'FORM_P.COD_SER_1' THEN
	wconteudo := wform_p.cod_ser_1;
     ELSIF wcampo = 'FORM_P.COD_SER_2' THEN
	wconteudo := wform_p.cod_ser_2;
     ELSIF wcampo = 'FORM_P.COD_SER_3' THEN
	wconteudo := wform_p.cod_ser_3;
     ELSIF wcampo = 'FORM_P.PED_NORMAL' THEN
	wconteudo := wform_p.ped_normal;
     ELSIF wcampo = 'FORM_P.CONS_CENTRAL' THEN
	wconteudo := wform_p.cons_central;
--
     ELSIF wcampo = 'FORM_P.ENDER_ESTAD_3' THEN
	wconteudo := wform_p.ender_estad_3;
     ELSIF wcampo = 'FORM_P.TELEF_REF_3' THEN
	wconteudo := wform_p.telef_ref_3;
     ELSIF wcampo = 'FORM_P.EMAIL_3' THEN
	wconteudo := wform_p.email_3;
     ELSIF wcampo = 'FORM_P.COD_CONC_3' THEN
	wconteudo := wform_p.cod_conc_3;
--
--> campos da tabela TEMP_ENV_VISMAIL
--
   ELSIF wcampo = 'TEMP_ENV_VISMAIL.TIPO'
   THEN
    wconteudo := wtemp_env_vismail.tipo;
   ELSIF wcampo = 'TEMP_ENV_VISMAIL.MESSAGEID'
   THEN
    wconteudo := wtemp_env_vismail.messageid;
   ELSIF wcampo = 'TEMP_ENV_VISMAIL.REFNUMBEREXCH'
   THEN
    wconteudo := wtemp_env_vismail.refnumberexch;
   ELSIF wcampo = 'TEMP_ENV_VISMAIL.VISAPPNUMBER'
   THEN
    wconteudo := wtemp_env_vismail.visappnumber;
   ELSIF wcampo = 'TEMP_ENV_VISMAIL.COD_PAIS_SCH'
   THEN
    wconteudo := wtemp_env_vismail.cod_pais_sch;
--
---> campos da tabela PAIS_TRANSITO
--
     ELSIF wcampo = '@PAIS_TRANSITO.COD_PAIS'
     THEN
	wconteudo := wpais_transito.cod_pais;
--
---> campos da tabela VISTOS_3_ANOS
--
     ELSIF wcampo = '@VISTOS_3_ANOS.DAT_VALI_VISTO_INI'
     THEN
	wconteudo := wvistos_3_anos.dat_vali_visto_ini;
     ELSIF wcampo = '@VISTOS_3_ANOS.DAT_VALI_VISTO_FIM'
     THEN
	wconteudo := wvistos_3_anos.dat_vali_visto_fim;
     ELSIF wcampo = '@VISTOS_3_ANOS.NUM_VISTO'
     THEN
	wconteudo := wvistos_3_anos.num_visto;
--
---> campos da tabela MEIOS_SUBSISTENCIA
--
     ELSIF wcampo = '@MEIOS_SUBSISTENCIA.ENTIDADE'
     THEN
	wconteudo := wmeios_subsistencia.entidade;
     ELSIF wcampo = '@MEIOS_SUBSISTENCIA.MEIOS'
     THEN
	wconteudo := wmeios_subsistencia.meios;
--
---> campos da tabela INDEF_JUSTIFICA_PARECER
--
     ELSIF wcampo = '@INDEF_JUSTIFICA_PARECER.COD_PARE_VIS'
     THEN
	wconteudo := windef_justifica_parecer.cod_pare_vis;
--
---> campos da tabela FORM_DOC
--
     ELSIF wcampo = '@FORM_DOC.COD_DOC'
     THEN
	wconteudo := wform_doc.cod_doc;
--
---> campos da tabela FORMULARIO_WEB
--
     ELSIF wcampo = 'FORMULARIO_WEB.NUM_FORM_WEB'
     THEN
	wconteudo := wformulario_web.num_form_web;
  if substr(wconteudo,1,1) = 'W' then
     wconteudo := substr(wformulario_web.num_form_web,2);
  else
     wconteudo := null;
  end if;
--
---> campos da tabela BIOMETRIA_INFO
--
     ELSIF wcampo = 'BIOMETRIA_INFO.TIPO'
     THEN
	wconteudo := wbiometria_info.tipo;
     ELSIF wcampo = 'BIOMETRIA_INFO.OBS_NA'
     THEN
	wconteudo := wbiometria_info.obs_na;
--
---> campo não definido -> ERRO 100
--
     ELSE
        werro := 100;
        wconteudo := NULL;
     END IF;
     --
     RETURN(wconteudo);
  END wname_in;
---
-- Função para converter data no formato YYMMDD em YYYYMMDD
---
  FUNCTION submission_to_date(sub varchar)
    RETURN varchar IS
	begin
		return(substr(to_char(sysdate,'YYYY'),1,2)||substr(sub,1,6));
	end submission_to_date;
---
-- Função para testar se um código existe na respectiva tabela
---
  FUNCTION existe_codigo(campo varchar,codigo varchar)
    RETURN integer IS
		werro integer := 0;
--
		wdominio varchar2(100);
		CURSOR c_domain is
			SELECT * from cg_ref_codes
				where rv_domain = wdominio
				and rv_low_value = codigo;
		wdomain cg_ref_codes%ROWTYPE;
--
		CURSOR c_pais is
			SELECT * from pais
				where cod_pais = codigo;
		wpais pais%ROWTYPE;
--
		CURSOR c_documento is
			SELECT * from documento
				where cod_doc = codigo;
		wdocumento documento%ROWTYPE;
--
		CURSOR c_mot_est is
			SELECT * from motivo_estada
				where cod_esta = codigo;
		wmot_est motivo_estada%ROWTYPE;
--
		CURSOR c_profissao is
			SELECT * from profissao
				where cod_prof = codigo;
		wprofissao profissao%ROWTYPE;
--
		CURSOR c_t_visto is
			SELECT * from t_visto
				where tip_vis = codigo;
		wt_visto t_visto%ROWTYPE;
--
		CURSOR c_parecer is
			SELECT * from parecer
				where cod_pare = codigo;
		wparecer parecer%ROWTYPE;
--
		CURSOR c_parecer_pos is
			SELECT * from parecer_posto
				where cod_pare_pos = to_number(codigo,'9');
		wparecer_pos parecer_posto%ROWTYPE;
--
		CURSOR c_posto is
			SELECT * FROM posto
				where cod_pos = to_number(codigo,'9999');
		wposto posto%ROWTYPE;
--
	begin
		if codigo is null then
			RETURN(0);
		end if;
		if campo = 'FORMULARIO.SEXO' then
			wdominio := 'DOM_SEX';
			OPEN c_domain;
			FETCH c_domain into wdomain;
			if c_domain%NOTFOUND then
				werro := 1;
			end if;
			CLOSE c_domain;
		elsif campo = 'FORMULARIO.COD_PAIS_NAC_ORIG' then
			OPEN c_pais;
			FETCH c_pais into wpais;
			if c_pais%NOTFOUND then
				werro := 2;
			end if;
			CLOSE c_pais;
		elsif campo = 'FORMULARIO.COD_DOC' then
			OPEN c_documento;
			FETCH c_documento into wdocumento;
			if c_documento%NOTFOUND then
				werro := 3;
			end if;
			CLOSE c_documento;
		elsif campo = 'FORMULARIO.COD_PAIS_EMI_DOC' then
			OPEN c_pais;
			FETCH c_pais into wpais;
			if c_pais%NOTFOUND then
				werro := 4;
			end if;
			CLOSE c_pais;
		elsif campo IN('FORMULARIO.COD_ESTA_1',
				'FORMULARIO.COD_ESTA_2',
				'FORMULARIO.COD_ESTA_3')
		 then
			OPEN c_mot_est;
			FETCH c_mot_est into wmot_est;
			if c_mot_est%NOTFOUND then
				werro := 5;
			end if;
			CLOSE c_mot_est;
		elsif campo = 'FORMULARIO.COD_PROF' then
			OPEN c_profissao;
			FETCH c_profissao into wprofissao;
			if c_profissao%NOTFOUND then
				werro := 6;
			end if;
			CLOSE c_profissao;
		elsif campo = 'FORMULARIO.TIP_VIS_PED' then
			OPEN c_t_visto;
			FETCH c_t_visto into wt_visto;
			if c_t_visto%NOTFOUND then
				werro := 7;
			end if;
			CLOSE c_t_visto;
		elsif campo = 'FORMULARIO.COD_PAIS_NAC_1' then
			OPEN c_pais;
			FETCH c_pais into wpais;
			if c_pais%NOTFOUND then
				werro := 8;
			end if;
			CLOSE c_pais;
		elsif campo = 'FORMULARIO.IMPORTANC_ENVIO' then
			wdominio := 'DOM_IMPORTANCE';
			OPEN c_domain;
			FETCH c_domain into wdomain;
			if c_domain%NOTFOUND then
				werro := 9;
			end if;
			CLOSE c_domain;
		elsif campo = 'FORMULARIO.COD_PARE' then
			OPEN c_parecer;
			FETCH c_parecer into wparecer;
			if c_parecer%NOTFOUND then
				werro := 10;
			end if;
			CLOSE c_parecer;
		elsif campo = 'FORM_P.COD_PAIS_NASC' then
			OPEN c_pais;
			FETCH c_pais into wpais;
			if c_pais%NOTFOUND then
				werro := 11;
			end if;
			CLOSE c_pais;
		elsif campo = 'FORM_P.EST_CIV' then
			wdominio := 'DOM_EST_CIV';
			OPEN c_domain;
			FETCH c_domain into wdomain;
			if c_domain%NOTFOUND then
				werro := 12;
			end if;
			CLOSE c_domain;
		elsif campo = 'FORM_P.COD_PAIS_CONJ' then
			OPEN c_pais;
			FETCH c_pais into wpais;
			if c_pais%NOTFOUND then
				werro := 13;
			end if;
			CLOSE c_pais;
		elsif campo = 'FORM_P.VIAG_CONJ' then
			wdominio := 'DOM_SN';
			OPEN c_domain;
			FETCH c_domain into wdomain;
			if c_domain%NOTFOUND then
				werro := 14;
			end if;
			CLOSE c_domain;
		elsif campo = 'FORM_P.COD_PAIS_DEST' then
			OPEN c_pais;
			FETCH c_pais into wpais;
			if c_pais%NOTFOUND then
				werro := 15;
			end if;
			CLOSE c_pais;
		elsif campo = 'FORM_P.COD_PAIS_SCH_REF_1' then
			OPEN c_pais;
			FETCH c_pais into wpais;
			if c_pais%NOTFOUND then
				werro := 16;
			end if;
			CLOSE c_pais;
		elsif campo = 'FORMULARIO.COD_PAIS_EMI.DOC' then
			OPEN c_pais;
			FETCH c_pais into wpais;
			if c_pais%NOTFOUND then
				werro := 17;
			end if;
			CLOSE c_pais;
		elsif campo = 'FORMULARIO.COD_PAIS_SCH_DEST_PRIN' then
			OPEN c_pais;
			FETCH c_pais into wpais;
			if c_pais%NOTFOUND then
				werro := 18;
			end if;
			CLOSE c_pais;
		elsif campo = 'FORMULARIO.COD_PARE_POS' then
			OPEN c_parecer_pos;
			FETCH c_parecer_pos into wparecer_pos;
			if c_parecer_pos%NOTFOUND then
				werro := 19;
			end if;
			CLOSE c_parecer_pos;
		/*elsif campo = 'FORMULARIO.PARECER_SEF' then
			OPEN c_parecer_pos;
			FETCH c_parecer_pos into wparecer_pos;
			if c_parecer_pos%NOTFOUND then
				werro := 19;
			end if;
			CLOSE c_parecer_pos;*/
    elsif campo = 'FORMULARIO.COD_POS' then
			OPEN c_posto;
			FETCH c_posto into wposto;
			if c_posto%NOTFOUND then
				werro := 20;
			end if;
			CLOSE c_posto;
		elsif campo = 'PAIS_TRANSITO.COD_PAIS' then
			OPEN c_pais;
			FETCH c_pais into wpais;
			if c_pais%NOTFOUND then
				werro := 21;
			end if;
			CLOSE c_pais;
		elsif campo = 'VINHETA.TIP_VIS' then
			OPEN c_t_visto;
			FETCH c_t_visto into wt_visto;
			if c_t_visto%NOTFOUND then
				werro := 22;
			end if;
			CLOSE c_t_visto;
		elsif campo = 'FORM_P.COD_PAIS_SCH_REF_2' then
			OPEN c_pais;
			FETCH c_pais into wpais;
			if c_pais%NOTFOUND then
				werro := 23;
			end if;
			CLOSE c_pais;
		elsif campo = 'FORMULARIO.COD_PAIS_NAC_2' then
			OPEN c_pais;
			FETCH c_pais into wpais;
			if c_pais%NOTFOUND then
				werro := 24;
			end if;
			CLOSE c_pais;
		elsif campo = 'FORMULARIO.COD_PAIS_NAC_3' then
			OPEN c_pais;
			FETCH c_pais into wpais;
			if c_pais%NOTFOUND then
				werro := 25;
			end if;
			CLOSE c_pais;
		elsif campo = '@FORM_DOC.COD_DOC' then
			OPEN c_documento;
			FETCH c_documento into wdocumento;
			if c_documento%NOTFOUND then
				werro := 26;
			end if;
			CLOSE c_documento;
		elsif campo = 'VINHETA.COD_POS' then
			OPEN c_posto;
			FETCH c_posto into wposto;
			if c_posto%NOTFOUND then
				werro := 27;
			end if;
			CLOSE c_posto;
		elsif campo = 'VINHETA.DOC_VIAG' then
			OPEN c_documento;
			FETCH c_documento into wdocumento;
			if c_documento%NOTFOUND then
				werro := 28;
			end if;
			CLOSE c_documento;
		elsif campo = 'REQUISICAO.COD_POS' then
			OPEN c_posto;
			FETCH c_posto into wposto;
			if c_posto%NOTFOUND then
				werro := 29;
			end if;
			CLOSE c_posto;
		elsif campo = 'LOTE_VIN.COD_POS' then
			OPEN c_posto;
			FETCH c_posto into wposto;
			if c_posto%NOTFOUND then
				werro := 30;
			end if;
			CLOSE c_posto;
		elsif campo = 'POSTO_REDIR.COD_POS' then
			OPEN c_posto;
			FETCH c_posto into wposto;
			if c_posto%NOTFOUND then
				werro := 31;
			end if;
			CLOSE c_posto;
		elsif campo = 'FORM_R.COD_PARE' then
			OPEN c_parecer;
			FETCH c_parecer into wparecer;
			if c_parecer%NOTFOUND then
				werro := 32;
			end if;
			CLOSE c_parecer;
		else
			werro := 0 ; --> este campo não é considerado como tipo código
		end if;
return(werro);
end existe_codigo;
--
FUNCTION trata_tabela(campo varchar, wano_form number, wnum_form number, wid_grupo number, contador IN OUT number,
		      msgid number, num_camp number)
	RETURN integer is
	CURSOR c_transito is
		SELECT * from pais_transito
		WHERE ano_form = wano_form
                  AND num_form = wnum_form;
	w_transito pais_transito%ROWTYPE;
	CURSOR c_form_doc is
		SELECT * from form_doc
		WHERE ano_form = wano_form
                  AND num_form = wnum_form;
	w_form_doc form_doc%ROWTYPE;
	CURSOR c_desc is
		SELECT * from descendente
		WHERE ano_form = wano_form
                  AND num_form = wnum_form;
	w_desc descendente%ROWTYPE;

  CURSOR c_vistos_3_anos is
		SELECT * from vistos_3_anos
		WHERE ano_form = wano_form
                  AND num_form = wnum_form;
	w_vistos_3_anos vistos_3_anos%ROWTYPE;
  CURSOR c_meios_subsistencia is
		SELECT * from meios_subsistencia
		WHERE ano_form = wano_form
                  AND num_form = wnum_form;
	w_meios_subsistencia meios_subsistencia%ROWTYPE;

  CURSOR c_indef_justifica_parecer is
		SELECT * from indef_justifica_parecer
		WHERE ano_form = wano_form
    AND num_form = wnum_form;
	w_indef_justifica_parecer indef_justifica_parecer%ROWTYPE;

  CURSOR c_grupos_det is
		SELECT * from grupos_det
		WHERE id_grupo = wid_grupo;
	w_grupos_det grupos_det%ROWTYPE;

  cont integer := 0;
	waux varchar2(120);
BEGIN
	if campo = 'PAIS_TRANSITO.COD_PAIS' then
		OPEN c_transito;
		LOOP
			FETCH c_transito INTO w_transito;
			if c_transito%NOTFOUND then
				EXIT;
			end if;
			cont := cont + 1;
			contador := contador + 1;
			enviar_pk.insere_temp_env_det(
	                        msgid,
	                        contador,
	                        TO_CHAR(num_camp, 'FM009'),
	                        w_transito.cod_pais);
		END LOOP;
		CLOSE c_transito;
    elsif campo = 'FORM_DOC.COD_DOC' then
		OPEN c_form_doc;
		LOOP
			FETCH c_form_doc INTO w_form_doc;
			if c_form_doc%NOTFOUND then
				EXIT;
			end if;
			cont := cont + 1;
			contador := contador + 1;
			enviar_pk.insere_temp_env_det(
	                        msgid,
	                        contador,
	                        TO_CHAR(num_camp, 'FM009'),
	                        w_form_doc.cod_doc);
		END LOOP;
		CLOSE c_form_doc;
	elsif substr(campo,1,12) = 'DESCENDENTE.' then
		OPEN c_desc;
		LOOP
			FETCH c_desc INTO w_desc;
			if c_desc%NOTFOUND then
				EXIT;
			end if;
			cont := cont + 1;
			contador := contador + 1;
			if substr(campo,13) = 'APEL_DESC' then
				waux := w_desc.apel_desc;
			elsif substr(campo,13) = 'NOME_DESC' then
				waux := w_desc.nome_desc;
			elsif substr(campo,13) = 'DAT_NASC_DESC' then
				waux := w_desc.dat_nasc_desc;
				waux := substr(waux,1,4)||substr(waux,6,2)||substr(waux,9,2);
			elsif substr(campo,13) = 'LOC_NASC_DESC' then
				waux := w_desc.loc_nasc_desc;
			elsif substr(campo,13) = 'COD_PAIS' then
				waux := w_desc.cod_pais;
			else
				waux := null;
			end if;
			enviar_pk.insere_temp_env_det(
	                        msgid,
	                        contador,
	                        TO_CHAR(num_camp, 'FM009'),
	                        waux);
		END LOOP;
		CLOSE c_desc;
	elsif substr(campo,1,14) = 'VISTOS_3_ANOS.' then
    OPEN c_vistos_3_anos;
		LOOP
			FETCH c_vistos_3_anos INTO w_vistos_3_anos;
			if c_vistos_3_anos%NOTFOUND then
				EXIT;
			end if;
			cont := cont + 1;
			contador := contador + 1;
			if substr(campo,15) = 'DAT_VALI_VISTO_INI' then
				waux := w_vistos_3_anos.dat_vali_visto_ini;
        waux := substr(waux,1,4)||substr(waux,6,2)||substr(waux,9,2);
			elsif substr(campo,15) = 'DAT_VALI_VISTO_FIM' then
				waux := w_vistos_3_anos.dat_vali_visto_fim;
				waux := substr(waux,1,4)||substr(waux,6,2)||substr(waux,9,2);
			elsif substr(campo,15) = 'NUM_VISTO' then
				waux := w_vistos_3_anos.num_visto;
			else
				waux := null;
			end if;
			enviar_pk.insere_temp_env_det(
	                        msgid,
	                        contador,
	                        TO_CHAR(num_camp, 'FM009'),
	                        waux);
		END LOOP;
		CLOSE c_vistos_3_anos;
  elsif substr(campo,1,19) = 'MEIOS_SUBSISTENCIA.' then
    OPEN c_meios_subsistencia;
		LOOP
			FETCH c_meios_subsistencia INTO w_meios_subsistencia;
			if c_meios_subsistencia%NOTFOUND then
				EXIT;
			end if;
			cont := cont + 1;
			contador := contador + 1;
			if substr(campo,20) = 'ENTIDADE' then
				waux := w_meios_subsistencia.entidade;
			elsif substr(campo,20) = 'MEIOS' then
				waux := w_meios_subsistencia.meios;
			else
				waux := null;
			end if;
			enviar_pk.insere_temp_env_det(
	                        msgid,
	                        contador,
	                        TO_CHAR(num_camp, 'FM009'),
	                        waux);
		END LOOP;
		CLOSE c_meios_subsistencia;
  elsif campo = 'FORM_DOC.COD_DOC' then
		OPEN c_form_doc;
		LOOP
			FETCH c_form_doc INTO w_form_doc;
			if c_form_doc%NOTFOUND then
				EXIT;
			end if;
			cont := cont + 1;
			contador := contador + 1;
			enviar_pk.insere_temp_env_det(
	                        msgid,
	                        contador,
	                        TO_CHAR(num_camp, 'FM009'),
	                        w_form_doc.cod_doc);
		END LOOP;
		CLOSE c_form_doc;
	elsif substr(campo,1,12) = 'DESCENDENTE.' then
		OPEN c_desc;
		LOOP
			FETCH c_desc INTO w_desc;
			if c_desc%NOTFOUND then
				EXIT;
			end if;
			cont := cont + 1;
			contador := contador + 1;
			if substr(campo,13) = 'APEL_DESC' then
				waux := w_desc.apel_desc;
			elsif substr(campo,13) = 'NOME_DESC' then
				waux := w_desc.nome_desc;
			elsif substr(campo,13) = 'DAT_NASC_DESC' then
				waux := w_desc.dat_nasc_desc;
				waux := substr(waux,1,4)||substr(waux,6,2)||substr(waux,9,2);
			elsif substr(campo,13) = 'LOC_NASC_DESC' then
				waux := w_desc.loc_nasc_desc;
			elsif substr(campo,13) = 'COD_PAIS' then
				waux := w_desc.cod_pais;
			else
				waux := null;
			end if;
			enviar_pk.insere_temp_env_det(
	                        msgid,
	                        contador,
	                        TO_CHAR(num_camp, 'FM009'),
	                        waux);
		END LOOP;
		CLOSE c_desc;
	elsif substr(campo,1,14) = 'VISTOS_3_ANOS.' then
    OPEN c_vistos_3_anos;
		LOOP
			FETCH c_vistos_3_anos INTO w_vistos_3_anos;
			if c_vistos_3_anos%NOTFOUND then
				EXIT;
			end if;
			cont := cont + 1;
			contador := contador + 1;
			if substr(campo,15) = 'DAT_VALI_VISTO_INI' then
				waux := w_vistos_3_anos.dat_vali_visto_ini;
        waux := substr(waux,1,4)||substr(waux,6,2)||substr(waux,9,2);
			elsif substr(campo,15) = 'DAT_VALI_VISTO_FIM' then
				waux := w_vistos_3_anos.dat_vali_visto_fim;
				waux := substr(waux,1,4)||substr(waux,6,2)||substr(waux,9,2);
			elsif substr(campo,15) = 'NUM_VISTO' then
				waux := w_vistos_3_anos.num_visto;
			else
				waux := null;
			end if;
			enviar_pk.insere_temp_env_det(
	                        msgid,
	                        contador,
	                        TO_CHAR(num_camp, 'FM009'),
	                        waux);
		END LOOP;
		CLOSE c_vistos_3_anos;
  elsif substr(campo,1,11) = 'GRUPOS_DET.' then
    OPEN c_grupos_det;
		LOOP
			FETCH c_grupos_det INTO w_grupos_det;
			if c_grupos_det%NOTFOUND then
				EXIT;
			end if;
			cont := cont + 1;
			contador := contador + 1;
			if substr(campo,12) = 'REF_FORM_2' then
				waux := w_grupos_det.ref_form_2;
			else
				waux := null;
			end if;
			enviar_pk.insere_temp_env_det(
	                        msgid,
	                        contador,
	                        TO_CHAR(num_camp, 'FM009'),
	                        waux);
		END LOOP;
		CLOSE c_grupos_det;
  elsif substr(campo,1,24) = 'INDEF_JUSTIFICA_PARECER.' then
    OPEN c_indef_justifica_parecer;
		LOOP
			FETCH c_indef_justifica_parecer INTO w_indef_justifica_parecer;
			if c_indef_justifica_parecer%NOTFOUND then
				EXIT;
			end if;
			cont := cont + 1;
			contador := contador + 1;
			if substr(campo,25) = 'COD_PARE_VIS' then
				waux := w_indef_justifica_parecer.cod_pare_vis;
			else
				waux := null;
			end if;
			enviar_pk.insere_temp_env_det(
	                        msgid,
	                        contador,
	                        TO_CHAR(num_camp, 'FM009'),
	                        waux);
		END LOOP;
		CLOSE c_indef_justifica_parecer;
  else
		RETURN(999);
	end if;
	if cont > 0 then
		RETURN(0);
	else
		RETURN(1);
	end if;
END;
--
PROCEDURE insere_temp_env_det(wmsgid number, wnum_linha number,
				wnum_campo varchar, wconteudo varchar) IS
BEGIN
	INSERT INTO temp_env_detalhe( envia_msgid, num_linha, num_campo, conteudo)
	VALUES(wmsgid, wnum_linha,wnum_campo,wconteudo);
END;
--
END enviar_pk;
/

prompt
prompt Creating package body ENVIAR2_PK
prompt ================================
prompt
CREATE OR REPLACE PACKAGE BODY RPV.ENVIAR2_PK AS
FUNCTION wname_in(
	wcampo varchar,
	wformato varchar,
	wcod_pos number,
	wano_req number,
	wnum_req number,
        wano_form NUMBER,
	wnum_form NUMBER,
	wcod_ser varchar2,
	wnum_ord NUMBER,
	word_form NUMBER,
        wref_ped_envio varchar2,
	wnum_msg_envio number,
	wnum_vin varchar2,
        werro OUT integer,
        wvin_para in varchar2 := '')
     RETURN varchar IS
	wconteudo varchar2(255);
	CURSOR c_req IS
		SELECT * from requisicao
		  WHERE cod_pos = wcod_pos
		    AND ano_req = wano_req
		    AND num_req = wnum_req;
	w_req REQUISICAO%ROWTYPE;
	CURSOR c_vin IS
		SELECT * from vinheta
		  WHERE num_vin = wnum_vin;
	w_vin VINHETA%ROWTYPE;
	CURSOR c_lote IS
		SELECT * from lote_vin
		  WHERE cod_pos = wcod_pos
		    AND ano_req = wano_req
		    AND num_req = wnum_req;
	w_lote LOTE_VIN%ROWTYPE;
	CURSOR c_redir IS
		SELECT * from posto_redir
		  WHERE ano_form = wano_form
		    AND num_form = wnum_form;
	w_redir POSTO_REDIR%ROWTYPE;
	CURSOR c_form_r IS
		SELECT * from form_r
		  WHERE ano_form = wano_form
		    AND num_form = wnum_form
		    AND ord_form_r = word_form;
	w_form_r FORM_R%ROWTYPE;
	CURSOR c_form_i IS
		SELECT * from form_i
		  WHERE ano_form = wano_form
		    AND num_form = wnum_form
		    AND cod_ser = wcod_ser
		    AND num_ord = wnum_ord
		    AND ord_form_i = word_form
		    AND tip_i = 'E';
	wformi FORM_I%ROWTYPE;
	CURSOR c_form_z IS
		SELECT * from form_z
		  WHERE ano_form = wano_form
		    AND num_form = wnum_form;
	wformz FORM_Z%ROWTYPE;
  CURSOR c_form_ap IS
		SELECT * from form_ap
		  WHERE ano_form = wano_form
		    AND num_form = wnum_form;
	w_form_ap FORM_AP%ROWTYPE;
	CURSOR c_form IS
		SELECT cod_pais_sch_ref||ref_form_2||ref_form_3, num_proc from formulario
		  WHERE ano_form = wano_form
		    AND num_form = wnum_form;
	wref_ped	VARCHAR2(19);
	v_num_proc	FORMULARIO.NUM_PROC%TYPE;
conta number := 0;
 BEGIN
conta := conta +1 ;
	werro := 0;
	if substr(wcampo,1,11) = 'REQUISICAO.' then
		OPEN c_req;
		FETCH c_req into w_req;
		if c_req%NOTFOUND then
			werro := 801;
			RETURN(NULL);
		end if;
		CLOSE c_req;
	end if;
	if substr(wcampo,1,8) = 'VINHETA.' then
		OPEN c_vin;
		FETCH c_vin into w_vin;
		if c_vin%NOTFOUND then
			werro := 802;
			RETURN(NULL);
		end if;
		CLOSE c_vin;
	end if;
	if substr(wcampo,1,9) = 'LOTE_VIN.' then
		OPEN c_lote;
		FETCH c_lote into w_lote;
		if c_lote%NOTFOUND then
			werro := 803;
			RETURN(NULL);
		end if;
		CLOSE c_lote;
	end if;
	if substr(wcampo,1,12) = 'POSTO_REDIR.' then
		OPEN c_redir;
		FETCH c_redir into w_redir;
		if c_redir%NOTFOUND then
			werro := 804;
			RETURN(NULL);
		end if;
		CLOSE c_redir;
	end if;
	if substr(wcampo,1,7) = 'FORM_R.' then
		OPEN c_form_r;
		FETCH c_form_r into w_form_r;
		if c_form_r%NOTFOUND then
			werro := 805;
			RETURN(NULL);
		end if;
		CLOSE c_form_r;
	end if;
	if substr(wcampo,1,7) = 'FORM_I.' then
		OPEN c_form_i;
		FETCH c_form_i into wformi;
		if c_form_i%NOTFOUND then
			werro := 806;
			RETURN(NULL);
		end if;
		CLOSE c_form_i;
	end if;
	if substr(wcampo,1,7) = 'FORM_Z.' then
		OPEN c_form_z;
		FETCH c_form_z into wformz;
		if c_form_z%NOTFOUND then
			werro := 807;
			RETURN(NULL);
		end if;
		CLOSE c_form_z;
	end if;
  if substr(wcampo,1,8) = 'FORM_AP.' then
		OPEN c_form_ap;
		FETCH c_form_ap into w_form_ap;
		if c_form_ap%NOTFOUND then
			werro := 807;
			RETURN(NULL);
		end if;
		CLOSE c_form_ap;
	end if;
	if substr(wcampo,1,11) = 'FORMULARIO.' then
		OPEN c_form;
		FETCH c_form into wref_ped, v_num_proc;
		if c_form%NOTFOUND then
			werro := 808;
			RETURN(NULL);
		end if;
		CLOSE c_form;
	end if;
--------------------------
-- TABELA REQUISICAO
--------------------------
	if wcampo = 'REQUISICAO.COD_POS' then
		if wformato is null then
			wconteudo := to_char(w_req.cod_pos,'FM0009');
		else
			wconteudo := to_char(w_req.cod_pos,wformato);
		end if;
	elsif wcampo = 'REQUISICAO.ANO_REQ' then
		if wformato is null then
			wconteudo := to_char(w_req.ano_req,'FM0009');
		else
			wconteudo := to_char(w_req.ano_req,wformato);
		end if;
	elsif wcampo = 'REQUISICAO.NUM_REQ' then
		if wformato is null then
			wconteudo := to_char(w_req.num_req,'FM009');
		else
			wconteudo := to_char(w_req.num_req,wformato);
		end if;
	elsif wcampo = 'REQUISICAO.DAT_REQ' then
		if wformato is null then
			wconteudo := to_char(w_req.dat_req,'YYYYMMDD');
		else
			wconteudo := to_char(w_req.dat_req,wformato);
		end if;
	elsif wcampo = 'REQUISICAO.QT_REQ' then
		if wformato is null then
			wconteudo := to_char(w_req.qt_req,'FM0009');
		else
			wconteudo := to_char(w_req.qt_req,wformato);
		end if;
	elsif wcampo = 'REQUISICAO.QT_SATIS' then
		if wformato is null then
			wconteudo := to_char(w_req.qt_satis,'FM0009');
		else
			wconteudo := to_char(w_req.qt_satis,wformato);
		end if;
	elsif wcampo = 'REQUISICAO.EST_REQ' then
		wconteudo := w_req.est_req;
--------------------------
-- TABELA VINHETA
--------------------------
	elsif wcampo = 'VINHETA.NUM_VIN' then
		wconteudo := w_vin.num_vin;
	elsif wcampo = 'VINHETA.ANO_LOTE' then
		if wformato is null then
			wconteudo := TO_CHAR(w_vin.ano_lote,'FM0009');
		else
			wconteudo := TO_CHAR(w_vin.ano_lote,wformato);
		end if;
	elsif wcampo = 'VINHETA.NUM_LOTE' then
		if wformato is null then
			wconteudo := TO_CHAR(w_vin.num_lote,'FM000009');
		else
			wconteudo := TO_CHAR(w_vin.num_lote,wformato);
		end if;
	elsif wcampo = 'FORMULARIO.COD_PAIS_SCH_REF||FORMULARIO.REF_FORM_2||FORMULARIO.REF_FORM_3'
		then
			wconteudo := wref_ped;
	elsif wcampo = 'FORMULARIO.NUM_PROC'
		then
			wconteudo := v_num_proc;
	elsif wcampo = 'VINHETA.EST_VIN' then
		wconteudo := w_vin.est_vin;
	elsif wcampo = 'VINHETA.TIP_VIS' then
		wconteudo := w_vin.tip_vis;
	elsif wcampo = 'VINHETA.COD_POS' then
		if wformato is null then
			wconteudo := TO_CHAR(w_vin.cod_pos,'FM0009');
		else
			wconteudo := TO_CHAR(w_vin.cod_pos,wformato);
		end if;
	elsif wcampo = 'VINHETA.DAT_EMI' then
		wconteudo := REPLACE(w_vin.dat_emi, '/');
	elsif wcampo = 'VINHETA.DAT_INI' then
		wconteudo := REPLACE(w_vin.dat_ini, '/');
	elsif wcampo = 'VINHETA.DAT_FIN' then
		wconteudo := REPLACE(w_vin.dat_fin, '/');
	elsif wcampo = 'VINHETA.NUM_ENT' then
		wconteudo := w_vin.num_ent;
	elsif wcampo = 'VINHETA.DUR_ESTA' then
		wconteudo := w_vin.dur_esta;
	elsif wcampo = 'VINHETA.DOC_VIAG' then
		wconteudo := w_vin.doc_viag;
	elsif wcampo = 'VINHETA.AVER_VIN' then
		wconteudo := w_vin.aver_vin;
	elsif wcampo = 'VINHETA.REF_DECISAO' then
		wconteudo := w_vin.ref_decisao;
	elsif wcampo = 'VINHETA.VIN_PARA' then
		wconteudo := w_vin.vin_para;
	elsif wcampo = 'VINHETA.NUM_DOC_VIAG' then
		wconteudo := w_vin.num_doc_viag;
  elsif wcampo = 'VINHETA.MANUAL' then
		wconteudo := w_vin.manual;
--------------------------
-- TABELA LOTE_VIN
--------------------------
	elsif wcampo = 'LOTE_VIN.ANO_LOTE' then
		if wformato is null then
			wconteudo := TO_CHAR(w_lote.ano_lote,'FM0009');
		else
			wconteudo := TO_CHAR(w_lote.ano_lote,wformato);
		end if;
	elsif wcampo = 'LOTE_VIN.NUM_LOTE' then
		if wformato is null then
			wconteudo := TO_CHAR(w_lote.num_lote,'FM000009');
		else
			wconteudo := TO_CHAR(w_lote.num_lote,wformato);
		end if;
	elsif wcampo = 'LOTE_VIN.EST_LOTE' then
		wconteudo := w_lote.est_lote;
	elsif wcampo = 'LOTE_VIN.DAT_EST' then
		if wformato is null then
			wconteudo := TO_CHAR(w_lote.dat_est,'YYYYMMDD');
		else
			wconteudo := TO_CHAR(w_lote.dat_est,wformato);
		end if;
	elsif wcampo = 'LOTE_VIN.COD_POS' then
		if wformato is null then
			wconteudo := TO_CHAR(w_lote.cod_pos,'FM0009');
		else
			wconteudo := TO_CHAR(w_lote.cod_pos,wformato);
		end if;
	elsif wcampo = 'LOTE_VIN.ULT_NUM' then
		if wformato is null then
			wconteudo := TO_CHAR(w_lote.ult_num,'FM00000009');
		else
			wconteudo := TO_CHAR(w_lote.ult_num,wformato);
		end if;
	elsif wcampo = 'LOTE_VIN.ULT_DAT' then
		if wformato is null then
			wconteudo := TO_CHAR(w_lote.ult_dat,'YYYYMMDD');
		else
			wconteudo := TO_CHAR(w_lote.ult_dat,wformato);
		end if;
	elsif wcampo = 'LOTE_VIN.LIM_MIN' then
		if wformato is null then
			wconteudo := TO_CHAR(w_lote.lim_min,'FM00000009');
		else
			wconteudo := TO_CHAR(w_lote.lim_min,wformato);
		end if;
	elsif wcampo = 'LOTE_VIN.LIM_MAX' then
		if wformato is null then
			wconteudo := TO_CHAR(w_lote.lim_max,'FM00000009');
		else
			wconteudo := TO_CHAR(w_lote.lim_max,wformato);
		end if;
	elsif wcampo = 'LOTE_VIN.ANO_REQ' then
		if wformato is null then
			wconteudo := TO_CHAR(w_lote.ano_req,'FM0009');
		else
			wconteudo := TO_CHAR(w_lote.ano_req,wformato);
		end if;
	elsif wcampo = 'LOTE_VIN.NUM_REQ' then
		wconteudo := w_lote.num_req;
--------------------------
-- TABELA POSTO_REDIR
--------------------------
	elsif wcampo = 'POSTO_REDIR.NUM_FORM' then
		if wformato is null then
			wconteudo := TO_CHAR(w_redir.num_form,'FM0000009');
		else
			wconteudo := TO_CHAR(w_redir.num_form,wformato);
		end if;
	elsif wcampo = 'POSTO_REDIR.ANO_FORM' then
		if wformato is null then
			wconteudo := TO_CHAR(w_redir.ano_form,'FM0009');
		else
			wconteudo := TO_CHAR(w_redir.ano_form,wformato);
		end if;
	elsif wcampo = 'POSTO_REDIR.ORD_POS_REDIR' then
		if wformato is null then
			wconteudo := TO_CHAR(w_redir.ord_pos_redir,'FM09');
		else
			wconteudo := TO_CHAR(w_redir.ord_pos_redir,wformato);
		end if;
	elsif wcampo = 'POSTO_REDIR.COD_POS' then
		if wformato is null then
			wconteudo := TO_CHAR(w_redir.cod_pos,'FM0009');
		else
			wconteudo := TO_CHAR(w_redir.cod_pos,wformato);
		end if;
	elsif wcampo = 'POSTO_REDIR.DAT_REDIR' then
		if wformato is null then
			wconteudo := TO_CHAR(w_redir.dat_redir,'YYYYMMDD');
		else
			wconteudo := TO_CHAR(w_redir.dat_redir,wformato);
		end if;
--------------------------
-- TABELA FORM_R
--------------------------
	elsif wcampo = 'FORM_R.NUM_FORM' then
		if wformato is null then
			wconteudo := TO_CHAR(w_form_r.num_form,'FM0000009');
		else
			wconteudo := TO_CHAR(w_form_r.num_form,wformato);
		end if;
	elsif wcampo = 'FORM_R.ANO_FORM' then
		if wformato is null then
			wconteudo := TO_CHAR(w_form_r.ano_form,'FM0009');
		else
			wconteudo := TO_CHAR(w_form_r.ano_form,wformato);
		end if;
	elsif wcampo = 'FORM_R.ORD_FORM_R' then
		if wformato is null then
			wconteudo := TO_CHAR(w_form_r.ord_form_r,'FM09');
		else
			wconteudo := TO_CHAR(w_form_r.ord_form_r,wformato);
		end if;
	elsif wcampo = 'FORM_R.DAT_REAPR' then
		if wformato is null then
			wconteudo := TO_CHAR(w_form_r.dat_reapr,'YYYYMMDD');
		else
			wconteudo := TO_CHAR(w_form_r.dat_reapr,wformato);
		end if;
	elsif wcampo = 'FORM_R.DAT_RESP' then
		if wformato is null then
			wconteudo := TO_CHAR(w_form_r.dat_resp,'YYYYMMDD');
		else
			wconteudo := TO_CHAR(w_form_r.dat_resp,wformato);
		end if;
	elsif wcampo = 'FORM_R.COD_PARE' then
			wconteudo := w_form_r.cod_pare;
  /*elsif wcampo = 'FORM_R.COD_PARE_VIS' then
			wconteudo := w_form_r.cod_pare_vis;      */
	elsif wcampo = 'FORM_R.DOCS' then
			wconteudo := w_form_r.docs;
	elsif wcampo = 'FORM_R.JUSTIFICA' then
			wconteudo := w_form_r.justifica;
	elsif wcampo = 'FORM_R.COD_PARE_POS' then
			wconteudo := w_form_r.cod_pare_pos;
--------------------------
-- TABELA FORM_I
--------------------------
     ELSIF wcampo = 'FORM_I.ANO_FORM' THEN
	IF wformato IS NULL THEN
		wconteudo := to_char(wformi.ano_form,'FM0009');
	ELSE
		wconteudo := to_char(wformi.ano_form,wformato);
	END IF;
     ELSIF wcampo = 'FORM_I.NUM_FORM' THEN
	IF wformato IS NULL THEN
		wconteudo := to_char(wformi.num_form,'FM0000009');
	ELSE
		wconteudo := to_char(wformi.num_form,wformato);
	END IF;
     ELSIF wcampo = 'FORM_I.COD_SER' THEN
		wconteudo := wformi.cod_ser;
     ELSIF wcampo = 'FORM_I.NUM_ORD' THEN
	IF wformato IS NULL THEN
		wconteudo := to_char(wformi.num_ord,'FM09');
	ELSE
		wconteudo := to_char(wformi.num_ord,wformato);
	END IF;
     ELSIF wcampo = 'FORM_I.ORD_FORM_I' THEN
	IF wformato IS NULL THEN
		wconteudo := to_char(wformi.ord_form_i,'FM09');
	ELSE
		wconteudo := to_char(wformi.ord_form_i,wformato);
	END IF;
     ELSIF wcampo = 'FORM_I.DAT_INF' THEN
	IF wformato IS NULL THEN
		wconteudo := to_char(wformi.dat_inf,'YYYYMMDD');
	ELSE
		wconteudo := to_char(wformi.dat_inf,wformato);
	END IF;
     ELSIF wcampo = 'FORM_I.OBS' THEN
		wconteudo := wformi.obs;
     ELSIF wcampo = 'FORM_I.DEVE_AGUARD' THEN
		wconteudo := wformi.deve_aguard;
     ELSIF wcampo = 'FORM_I.DOCS_RESP' THEN
		wconteudo := wformi.docs_resp;
     ELSIF wcampo = 'FORM_I.DOCS_FAX' THEN
		wconteudo := wformi.docs_fax;
--------------------------
-- TABELA FORM_Z
--------------------------
     ELSIF wcampo = 'FORM_Z.ANO_FORM' THEN
	IF wformato IS NULL THEN
		wconteudo := to_char(wformz.ano_form,'FM0009');
	ELSE
		wconteudo := to_char(wformz.ano_form,wformato);
	END IF;
     ELSIF wcampo = 'FORM_Z.NUM_FORM' THEN
	IF wformato IS NULL THEN
		wconteudo := to_char(wformz.num_form,'FM0000009');
	ELSE
		wconteudo := to_char(wformz.num_form,wformato);
	END IF;
     ELSIF wcampo = 'FORM_Z.DAT_CONCED_PED' THEN
	IF wformato IS NULL THEN
		wconteudo := to_char(wformz.dat_conced_ped,'YYYYMMDD');
	ELSE
		wconteudo := to_char(wformz.dat_conced_ped,wformato);
	END IF;
--------------------------
-- TABELA FORM_AP
--------------------------
    ELSIF wcampo = 'FORM_AP.DAT_RESP' THEN
		if wformato is null then
			wconteudo := TO_CHAR(w_form_ap.dat_resp,'YYYYMMDD');
		else
			wconteudo := TO_CHAR(w_form_ap.dat_resp,wformato);
		end if;
     ELSIF wcampo = 'FORM_AP.DOCS' THEN
		wconteudo := w_form_ap.docs;
      ELSIF wcampo = 'FORM_AP.JUSTIFICA' THEN
		wconteudo := w_form_ap.justifica;
--------------------------
	else
		werro := 0;
	end if;
	RETURN(wconteudo);
 END;
END enviar2_pk;
/

prompt
prompt Creating package body FOTOS_PK
prompt ==============================
prompt
CREATE OR REPLACE PACKAGE BODY RPV.FOTOS_PK IS
/* -------------------------------------------------------------------------- */
PROCEDURE Read_FOTO (p_File Char) IS
cursor c1 (v_num_doc_viagem varchar2) is
	select ano_form, num_form, ref_form_2, rownum
	from formulario
	where num_doc_viag = v_num_doc_viagem and foto_associada = 'N';

v_ordem			number;
v_num_doc_viagem	temp_imagens.num_doc_viagem%type;
v2_num_doc_viagem	formulario.num_doc_viag%type;
v_ref_form_2		formulario.ref_form_2%type;
v_ano_form		formulario.ano_form%type;
v_num_form		formulario.num_form%type;
v_conta			number;
v_x			varchar2(1):=null;
p_file_temp		varchar2(100);
p_filef       varchar2(100);
v_extensao		varchar(3);
letra			varchar2(1);
alt_pfile_temp		number(1):=0;
begin
  p_filef := substr(p_file,2,length(p_file) - 2);
  select substr(p_filef,length(p_filef)-2,3) into v_extensao from dual;
	if v_extensao = 'jpg' then
	for i in 1..length(p_filef) loop
		letra := substr(p_filef,i,1);
		if letra <> '_' then
			p_file_temp := p_file_temp || letra;
		else
			p_file_temp := p_file_temp || ' ';
			alt_pfile_temp := 1;
		end if;
	end loop;
	begin
		select distinct 'x' into v_x
		from temp_imagens
		where num_doc_viagem = upper(substr(p_file_temp,1,length(p_file_temp) - 4));
		exception when no_data_found then
			v_x := null;
	end;

	select seq_fotos.nextval into v_ordem from dual;
	v_num_doc_viagem := upper(substr(p_file_temp,1,length(p_file_temp) - 4));

	if alt_pfile_temp = 0 then
		insert into temp_imagens(num_ordem,num_doc_viagem,usado,foto,cri_dat,cri_uti)
		values(v_ordem,v_num_doc_viagem,'N',bfilename('FOTOGRAFIAS',p_file_temp),to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'),user);
	else
		insert into temp_imagens(num_ordem,num_doc_viagem,usado,foto,cri_dat,cri_uti)
		values(v_ordem,v_num_doc_viagem,'N',bfilename('FOTOGRAFIAS',p_filef),to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'),user);
	end if;

	begin
		select num_doc_viag, ref_form_2, ano_form, num_form
		into v2_num_doc_viagem, v_ref_form_2, v_ano_form, v_num_form
		from formulario
		where num_doc_viag = v_num_doc_viagem and foto_associada = 'N';
		exception when no_data_found then
				v2_num_doc_viagem := null;
			  when too_many_rows then
				v2_num_doc_viagem := 'MANY_ROWS';
	end;

	if v2_num_doc_viagem is not null and v2_num_doc_viagem <> 'MANY_ROWS' then
		insert into temp_imagens_det(num_ordem, seq_interna, ano_form, num_form, ref_form_2, cri_dat, cri_uti)
		values(v_ordem,1, v_ano_form, v_num_form, v_ref_form_2,to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'),user);

		update temp_imagens
		set usado = 'S'
		where num_ordem = v_ordem;

		update formulario
		set foto_associada = 'S' where ref_form_2 = v_ref_form_2;
	elsif v2_num_doc_viagem = 'MANY_ROWS' then
		open c1(v_num_doc_viagem);
		loop
			fetch c1 into v_ano_form, v_num_form, v_ref_form_2, v_conta;
			exit when c1%notfound;

			insert into temp_imagens_det(num_ordem, seq_interna, ano_form, num_form, ref_form_2, cri_dat, cri_uti)
			values(v_ordem,v_conta,v_ano_form,v_num_form,v_ref_form_2,to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'),user);

			update formulario
			set foto_associada = 'S' where ref_form_2 = v_ref_form_2;
		end loop;
		close c1;

		update temp_imagens
		set usado = 'S'
		where num_ordem = v_ordem;
	end if;

	if v_x = 'x' then
		if instr(p_file_temp,' ') = 0 then
			p_file_temp := substr(p_file_temp,1,length(p_file_temp) - 4) || '_' || to_char(v_ordem) || '.jpg';
		else
			p_file_temp := substr(p_file,1,length(p_filef) - 4) || '_' || to_char(v_ordem) || '.jpg';
		end if;
		update temp_imagens
		set foto = bfilename('FOTOGRAFIAS',p_file_temp)
		where num_ordem = v_ordem;
		shell('ren ' || 'd:\fotos\' || p_filef || ' ' || p_file_temp);
		shell('move ' || 'd:\fotos\' || p_file_temp || ' d:\fotos\tratadas');
	else
		shell('move ' || 'd:\fotos\' || p_filef || ' d:\fotos\tratadas');
	end if;
	commit;
	end if;
end;
/* -------------------------------------------------------------------------- */
PROCEDURE ENVIA_FOTO_CENTRAL  IS
begin
Declare
CURSOR cur1 IS
	select ti.foto,tid.ref_form_2
	from formulario formu,temp_imagens ti,temp_imagens_det tid
	where formu.ref_form_2=tid.ref_form_2
	and   tid.num_ordem=ti.num_ordem
	and   tid.enviada='N'
	and   formu.cod_pare_pos is NOT NULL;
v_foto BFILE;
n_refNum temp_imagens_det.ref_form_2%TYPE;
v_fotoDir varchar2(30);
v_fotoName varchar2(100);
v_fotoRename varchar2(100);
begin
	open cur1;
	LOOP
		FETCH cur1 INTO v_foto,n_refNum;
		EXIT WHEN cur1%NOTFOUND;
		--Extrai o ficheiro da BD, Ã© gravado e renomeado na directoria d:\fotos\Temp
		DBMS_LOB.FILEGETNAME(v_foto,v_fotoDir,v_fotoName);
		v_foto:=BFILENAME('Fotografias',v_fotoName);
		shell('copy ' || 'd:\fotos\Tratadas\'|| v_fotoName || ' d:\fotos\Temp');
		v_fotoRename := substr(v_fotoName,1,length(v_fotoName) - 4);
		v_fotoRename:=v_fotoRename || '@' || n_refNum|| '.jpg';
      		shell('ren ' || 'd:\fotos\Temp\' || v_fotoName || ' ' || v_fotoRename);
		UPDATE temp_imagens_det
		SET enviada = 'I'
		WHERE ref_form_2 = n_refNum;
		--Preparar o envio por FTP
		v_foto:=BFILENAME('Fotografias',v_fotoRename);
		shell('d: ');
		shell('cd ' || 'fotos\Temp');
		commit;
	END LOOP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			DBMS_OUTPUT.PUT_LINE('NÃ£o encontrou dados!');
		WHEN OTHERS THEN
			DBMS_OUTPUT.PUT_LINE('Erro na selecÃ§Ã£o dos dados da BD!');
	CLOSE cur1;
end;
end;
/*------------------------------------------------------------------------*/
PROCEDURE UPDATE_FTP (pfile char) IS
pfileTemp varchar2(50):=pfile;
Pos 			number;
refNum			varchar2(30);
begin
	pfileTemp := upper(substr(pfileTemp,1,length(pfileTemp) - 4));
	/*O seguinte ciclo permite obter o ref_form_2 do ficheiro que entra como parÃ¢metro*/
	for i in 1..length(pfileTemp) loop
		if(substr(pfileTemp,i,1)='@') then
			Pos:=i;
			refNum:=substr(pfileTemp,Pos+1,length(pfileTemp));
			exit;
		end if;
	end loop;
	update temp_imagens_det
	set enviada = 'S', dat_envio=sysdate
	where ref_form_2 =refNum;
	commit;
end;
/*------------------------------------------------------------------------*/
PROCEDURE Read_FOTO_Migra (p_FileInput Char) IS
v_ordem			        number;
v_num_doc_viag 		  temp_imagens.num_doc_viagem%type;
v_prt		            formulario.ref_form_2%type;
v_ano_form		      formulario.ano_form%type;
v_num_form		      formulario.num_form%type;
p_file              varchar2(100);
p_file_final        varchar2(100);
v_extensao		      varchar(3);
begin
P_FILE := SUBSTR(P_FILEInput,1);
--p_file := substr(P_FILEInput,2,length(P_FILEInput)-2);
P_FILE_FINAL := substr(p_file,1,instr(p_file,'@')-1) || '.jpg';
dbms_output.put_line('p_file ' || p_file);
dbms_output.put_line('P_FILE_FINAL ' || P_FILE_FINAL);
select substr(p_file,length(p_file)-2,3) into v_extensao from dual;
if v_extensao in ('jpg','JPG') then
   select substr(p_file,instr(p_file,'@')+1, 14) into v_prt from dual;
   select num_doc_viag, ano_form, num_form into v_num_doc_viag, v_ano_form, v_num_form
   from formulario
   where ref_form_2 = v_prt;
   select seq_fotos.nextval into v_ordem from dual;

   insert into temp_imagens(num_ordem,num_doc_viagem,usado,foto,cri_dat,cri_uti)
   values(v_ordem, v_num_doc_viag, 'S',bfilename('FOTOGRAFIAS',p_file_final),to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'),user);

   insert into temp_imagens_det(num_ordem,seq_interna,ano_form, num_form, ref_form_2, cri_dat, cri_uti, enviada, dat_envio)
   values(v_ordem, 1, v_ano_form, v_num_form, v_prt, to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'),user, 'S', sysdate);

   shell('ren ' || 'd:\fotos\migra\"' || p_file || '" "' || p_file_final || '"');
	 shell('move ' || 'd:\fotos\migra\"' || p_file_final || '" d:\fotos\tratadas');

   commit;
end if;
end;
procedure READ_FOTO_NEW is
cursor c1 (v_num_doc_viagem varchar2) is
	select ano_form, num_form, ref_form_2, rownum
	from formulario
	where num_doc_viag = v_num_doc_viagem and foto_associada = 'N';

id 			           UTL_FILE.FILE_TYPE;
filedata 		       varchar2(1000);
fich_header        varchar2(50);
p_filef            varchar2(100);
letra			         varchar2(1);
p_file_temp		     varchar2(100);
alt_pfile_temp		 number(1):=0;
v_x			           varchar2(1):=null;
v_ordem			       number;
v_num_doc_viagem	 temp_imagens.num_doc_viagem%type;
v2_num_doc_viagem	 formulario.num_doc_viag%type;
v_ref_form_2		   formulario.ref_form_2%type;
v_ano_form		     formulario.ano_form%type;
v_num_form		     formulario.num_form%type;
v_conta			       number;
v_encontra_foto    varchar2(1);
bf bfile;
b blob;
src_offset integer := 1;
dest_offset integer := 1;
v_seq_fotos_kiosk   number(10);
begin
    shell('DIR ' || 'd:\fotos' || '\*.jpg > ' || 'd:\fotos' || '\teste.txt');
    id := UTL_FILE.FOPEN_NCHAR('d:\fotos', 'teste.txt', 'r',32767);
    loop
        begin
        UTL_FILE.GET_LINE_NCHAR(id,filedata);
        if upper(substr(filedata,length(filedata) - 2)) = 'JPG' then
           fich_header := substr(filedata,37);
           p_filef := fich_header;
           if upper(substr(p_filef,1,5)) = 'KIOSK' then
              begin
              select distinct 's' into v_encontra_foto
              from biometria_info
              where num_doc_viagem = upper(substr(p_filef,6,length(p_filef) - 9))
              and foto is null;
              exception when no_data_found then
                        v_encontra_foto := 'n';
              end;

              if v_encontra_foto = 's' then
                 select seq_fotos_kiosk.nextval
                 into v_seq_fotos_kiosk from dual;

                 insert into temp_foto_kiosk (id, foto_name, foto)
                 values (v_seq_fotos_kiosk, p_filef, empty_blob()) returning foto into b;
                 bf := bfilename('FOTOGRAFIAS_KIOSK', p_filef);
                 dbms_lob.open(bf, dbms_lob.file_readonly);
                 dbms_lob.loadBlobFromFile(b, bf, dbms_lob.lobmaxsize, dest_offset, src_offset);
                 dbms_lob.close(bf);
                 dest_offset := 1;
                 src_offset := 1;

                 update biometria_info
                 set foto = (select foto from temp_foto_kiosk
                 where id = v_seq_fotos_kiosk)
                 where num_doc_viagem = upper(substr(p_filef,6,length(p_filef) - 9))
                 and foto is null;

                 shell('move ' || '"d:\fotos\' || p_filef || '" d:\fotos\kiosk');
              end if;
           else
           p_file_temp := null;
           for i in 1..length(p_filef) loop
		           letra := substr(p_filef,i,1);
		           if letra <> '_' then
                     p_file_temp := p_file_temp || letra;
		           else
			            p_file_temp := p_file_temp || ' ';
			            alt_pfile_temp := 1;
		           end if;
	         end loop;
           begin
		       select distinct 'x' into v_x
		       from temp_imagens
		       where num_doc_viagem = upper(substr(p_file_temp,1,length(p_file_temp) - 4));
		       exception when no_data_found then
			               v_x := null;
	         end;
           select seq_fotos.nextval into v_ordem from dual;
	         v_num_doc_viagem := upper(substr(p_file_temp,1,length(p_file_temp) - 4));
	         if alt_pfile_temp = 0 then
		          insert into temp_imagens(num_ordem,num_doc_viagem,usado,foto,cri_dat,cri_uti)
		          values(v_ordem,v_num_doc_viagem,'N',bfilename('FOTOGRAFIAS',p_file_temp),to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'),user);
	         else
		          insert into temp_imagens(num_ordem,num_doc_viagem,usado,foto,cri_dat,cri_uti)
		          values(v_ordem,v_num_doc_viagem,'N',bfilename('FOTOGRAFIAS',p_filef),to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'),user);
	         end if;

	         begin
		       select num_doc_viag, ref_form_2, ano_form, num_form
		       into v2_num_doc_viagem, v_ref_form_2, v_ano_form, v_num_form
		       from formulario
		       where num_doc_viag = v_num_doc_viagem and foto_associada = 'N';
		       exception when no_data_found then
				                  v2_num_doc_viagem := null;
			               when too_many_rows then
				                  v2_num_doc_viagem := 'MANY_ROWS';
	         end;
	         if v2_num_doc_viagem is not null and v2_num_doc_viagem <> 'MANY_ROWS' then
		          insert into temp_imagens_det(num_ordem, seq_interna, ano_form, num_form, ref_form_2, cri_dat, cri_uti)
		          values(v_ordem,1, v_ano_form, v_num_form, v_ref_form_2,to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'),user);

		          update temp_imagens
		          set usado = 'S'
		          where num_ordem = v_ordem;

		          update formulario
		          set foto_associada = 'S' where ref_form_2 = v_ref_form_2;
	        elsif v2_num_doc_viagem = 'MANY_ROWS' then
		          open c1(v_num_doc_viagem);
		          loop
			             fetch c1 into v_ano_form, v_num_form, v_ref_form_2, v_conta;
			             exit when c1%notfound;

			             insert into temp_imagens_det(num_ordem, seq_interna, ano_form, num_form, ref_form_2, cri_dat, cri_uti)
			             values(v_ordem,v_conta,v_ano_form,v_num_form,v_ref_form_2,to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'),user);

			             update formulario
			             set foto_associada = 'S' where ref_form_2 = v_ref_form_2;
		          end loop;
		          close c1;

		          update temp_imagens
		          set usado = 'S'
		          where num_ordem = v_ordem;
	        end if;

	        if v_x = 'x' then
		         if instr(p_file_temp,' ') = 0 then
			          p_file_temp := substr(p_file_temp,1,length(p_file_temp) - 4) || '_' || to_char(v_ordem) || '.jpg';
		         else
			          p_file_temp := substr(fich_header,1,length(p_filef) - 4) || '_' || to_char(v_ordem) || '.jpg';
		         end if;
		         update temp_imagens
		         set foto = bfilename('FOTOGRAFIAS',p_file_temp)
		         where num_ordem = v_ordem;
		         shell('ren ' || '"d:\fotos\' || p_filef || '" "' || p_file_temp||'"');
		         shell('move ' || '"d:\fotos\' || p_file_temp || '" d:\fotos\tratadas');
	       else
		         shell('move ' || '"d:\fotos\' || p_filef || '" d:\fotos\tratadas');
	       end if;
	       commit;
       end if;
      end if;
      exception when no_data_found then
                  exit;
      end;
      commit;
    end loop;
    utl_file.fclose(id);
    shell('del ' || 'd:\fotos' || '\teste.txt') ;
end;
END FOTOS_PK;
/

prompt
prompt Creating package body FUNCOES
prompt =============================
prompt
CREATE OR REPLACE PACKAGE BODY RPV.FUNCOES AS
	Conta_erros NUMBER;
	Aj_Help Varchar2(255);
FUNCTION EH_POSTO RETURN BOOLEAN IS
-- Funcao que devolve 	TRUE se estivermos num posto ou
--			FALSE se estivermos na central
  Function Busca_Posto Return Varchar2 IS
    COD_POSTO Varchar2(30) ;
    COD_CENTRAL Varchar2(30) ;
  Begin
    COD_POSTO := Taref.Busca_Param_Glo1(3,null);
    COD_CENTRAL := Taref.Busca_Param_Glo1(2,NULL);
    If Cod_Posto = Cod_Central then
      Return('N') ;
     else
      RETURN('S');
    End if;
  End ;
BEGIN
  return (busca_posto = 'S');
END;
FUNCTION EXISTE_PARECER (ano_form1 number, num_form1 number, reapr1 varchar2)
	RETURN NUMBER IS
--
-- Pesquisa FORM_EST.TIP_VIS
--
--	Retorna 0: se não tem parecer
--		1: se houve erro (exception)
--		99: se tem parecer
--
	CURSOR conta_estados IS
		SELECT COUNT(*) FROM form_est
			WHERE ano_form = ano_form1
			  AND num_form = num_form1
			  AND cod_est IN ('CON','IND','CAN');
	wquant integer;
--
BEGIN
	OPEN conta_estados;
	FETCH conta_estados INTO wquant;
	CLOSE conta_estados;
	IF (reapr1 = 'N' AND wquant > 0) OR
	   (reapr1 = 'S' AND wquant > 1) THEN
		RETURN(99);
	ELSE
		RETURN(0);
	END IF;
  EXCEPTION WHEN OTHERS THEN
	RETURN(1);
END;
FUNCTION INSERE_FORM_B(
  Ano_Form1 IN NUMBER ,
  Num_Form1 IN NUMBER ,
  Cod_Pais_Sch1 IN VARCHAR2 ,
  Cod_Pare1 IN VARCHAR2 ,
  Praz_Sup1 IN NUMBER DEFAULT NULL,
  Dat_Resp1 IN DATE DEFAULT sysdate,
  Obs1 IN VARCHAR2 )
RETURN NUMBER IS
-- insere uma linha nova em FORM_B para ser enviada
-- Retorna (0) se correu tudo bem
-- Retorna (1) se deu exception
wref form_b.ref_form_b%TYPE := TAREF.BUSCA_PARAM_GLO1(1,NULL) || 'B'||TO_CHAR(SYSDATE
   , 'YYYYMMDD');
wref_form_b form_b.ref_form_b%TYPE;
wcontador NUMBER;
wano_form form_b.ano_form%TYPE;
wnum_form form_b.num_form%TYPE;
wano_form_sch form_b.ano_form_sch%TYPE;
wnum_form_sch form_b.num_form_sch%TYPE;
BEGIN
   IF Cod_Pais_Sch1 IS NULL THEN
      wano_form := Ano_Form1;
      wnum_form := Num_Form1;
   ELSE
      wano_form_Sch := Ano_Form1;
      wnum_form_Sch := Num_Form1;
   END IF;
   SELECT MAX(TO_NUMBER(SUBSTR(ref_form_b, 14)))
   INTO
      wcontador
   FROM
      form_b
   WHERE
      ref_form_b LIKE wref|| '%';
   wcontador := NVL(wcontador, 0) + 1;
   wref_form_b := wref||TO_CHAR(wcontador, 'FM0000009');
Tarefa_master.grava_erro('funcoes', 'vai inserir em form_b os valores de referencia '
||wref_form_b, null);
   INSERT INTO FORM_B(REF_FORM_B,
         ORD_FORM_B,
         DAT_RESP,
         COD_PARE,
         OBS,
         ANO_FORM,
         NUM_FORM,
         COD_PAIS_SCH,
         CRI_DAT,
         CRI_UTI,
         DIR_COMM)
   VALUES
      (wref_form_b,
         1,
         nvl(Dat_Resp1,sysdate),
         Cod_Pare1,
         Obs1,
         wano_form,
         wnum_form,
         Cod_Pais_Sch1,
         to_char(sysdate,'YYYY/MM/DD HH24:MI:SS'),
         user,
         'E');
Tarefa_master.grava_erro('funcoes', 'sucesso na inserção do form_b', null);
 RETURN (0);
 EXCEPTION
 WHEN OTHERS THEN RETURN (1);
END;
FUNCTION ENVIA_PARECER(
  Ano_Form1 IN NUMBER ,
  Num_Form1 IN NUMBER ,
  Cod_Pare1 IN VARCHAR2)
RETURN NUMBER IS
--	Chamado após o estado do formulário ser concedido, indeferido ou
-- cancelado
-- Retorna:
--	0: se não houve erro;
--	1: se deu alguma exception.
  erro1 NUMBER;
  aux   VARCHAR2(1);
  CURSOR c1 IS
	SELECT dat_lim_resp, tip_vis_conced FROM formulario
	WHERE	ano_form = Ano_Form1
	AND	num_form = Num_Form1;
  v_dat_lim_resp	formulario.dat_lim_resp%type;
  v_tip_vis_conced		formulario.tip_form%type;
BEGIN
   OPEN c1;
   FETCH c1 INTO v_dat_lim_resp, v_tip_vis_conced;
      IF c1%NOTFOUND THEN
Tarefa_master.grava_erro ('funcoes',
'envio_parecer: foi buscar a data_lim_resp do formulario e não encontrou', null);
	 CLOSE C1; RETURN(1);
      END IF;
   CLOSE C1;
   IF TO_CHAR(NVL(v_dat_lim_resp, SYSDATE), 'YYYYMMDD') <
      TO_CHAR(SYSDATE, 'YYYYMMDD')
      THEN
	  BEGIN
	     SELECT 'X' INTO aux FROM DUAL
	     WHERE (NOT EXISTS
		(SELECT num_form FROM prorroga_sch
                WHERE  ano_form = Ano_Form1
		AND    num_form = Num_Form1))
	     AND (NOT EXISTS
		(SELECT num_form FROM prorroga_ser
                WHERE  ano_form = Ano_Form1
		AND    num_form = Num_Form1));
	  EXCEPTION
	  WHEN NO_DATA_FOUND THEN
	      RETURN (0);
	  WHEN OTHERS THEN NULL;
	  END;
   ELSIF v_tip_vis_conced IS NOT NULL THEN
      RETURN (0);
   ELSE
Tarefa_master.grava_erro ('funcoes', 'envio_parecer: vai inserir form_b', null);
      erro1 := insere_Form_B(Ano_Form1, Num_Form1, NULL, Cod_Pare1,
         NULL, NULL, NULL);
Tarefa_master.grava_erro ('funcoes', 'envio_parecer: inseriu form_b e erro = '||to_char(erro1), null);
      IF erro1 = 1 THEN
         RETURN(1);
        ELSE
	    IF Cod_Pare1 IN (Taref.Busca_Param_Glo1(9, null),
			     Taref.Busca_Param_Glo1(10)) THEN
		 UPDATE formulario
		 SET	cod_pare = Cod_Pare1
		 WHERE	ano_form = Ano_Form1
		 AND	num_form = Num_Form1;
		 IF SQL%NOTFOUND THEN
	            RETURN(1);
		 END IF;
	    ELSE
		 RETURN(1);
	    END IF;
         RETURN(0);
      END IF;
   END IF;
END ;
FUNCTION consulta_prt(
  Tip_Form1 IN VARCHAR2 DEFAULT 'A',
  Num_Fich1 IN NUMBER DEFAULT 1)
RETURN NUMBER IS
--	Função que verifica se Portugal deve ou não ser consultado,
-- quando chega um formulário de Schengen (trata-se da validação
-- do Anexo VB do acordo de Schengen).
--	Este procedimento só deverá ser chamado para formulário do tipo 'A' ou
-- 'C', noutros casos devolve sempre 0.
--	Esta função retorna:	0 se Portugal deve ser consultado ou
--				1 se Portugal não deve ser consultado.
Param_Glob7 VARCHAR2(30) := Taref.Busca_Param_Glo1(7,NULL);
Param_PRT VARCHAR2(30) := Taref.Busca_Param_Glo1(1,NULL);
CURSOR Campos IS
   SELECT UPPER(Nome_Var), Conteudo
   FROM Id_Campo_Form I, Temp_Rec_Detalhe T
WHERE
   dir_comm = 'R' AND
   Tip_Form = Tip_Form1 AND Tip_Form IN('A', 'C') AND
   UPPER(Nome_Var) IN('FORMULARIO.COD_PAIS_NAC_1',
      'FORMULARIO.COD_PAIS_NAC_2',
      'FORMULARIO.COD_PAIS_NAC_3',
      'FORMULARIO.COD_PAIS_SCH_DEST_PRIN',
      'FORMULARIO.COD_PAIS_EMI_DOC',
      'FORMULARIO.COD_POS',
      'FORMULARIO.COD_DOC',
      'FORMULARIO.APEL',
      'FORMULARIO.NOME',
      'FORMULARIO.DAT_NASC') AND
   Recebe_Num_Fich = Num_Fich1 AND
   TO_CHAR(I.Num_Camp, 'FM009') = T.Num_Campo;
N_Var Id_Campo_Form.Nome_Var%TYPE;
Conteu Temp_Rec_Detalhe.Conteudo%TYPE;
formul_cod_pais_nac_1 formulario.cod_pais_nac_1%type;
formul_cod_pais_nac_2 formulario.cod_pais_nac_2%type;
formul_cod_pais_nac_3 formulario.cod_pais_nac_3%type;
formul_cod_pais_sch_dest_prin formulario.cod_pais_sch_dest_prin%type;
formul_cod_pais_emi_doc formulario.cod_pais_emi_doc%type;
formul_cod_pos formulario.cod_pos%type;
formul_cod_doc formulario.cod_doc%type;
formul_apel formulario.apel%TYPE;
formul_nome formulario.nome%TYPE;
formul_dat_nasc formulario.dat_nasc%TYPE;
CURSOR f1 IS
   SELECT distinct cod_pais_sch, tip_restr
   FROM consulta_sch_det csd
WHERE
   (cod_pais IN(NVL(formul_cod_pais_nac_1, 'xpto'),
         NVL(formul_cod_pais_nac_2, 'xpto'),
         NVL(formul_cod_pais_nac_3, 'xpto'))) AND
   cod_cons_sch = param_glob7 AND
   cod_pais_sch = Param_PRT AND
   tip_valid = 'A'
   order BY 1, 2;
c_s_d_cod_pais_sch consulta_sch_det.cod_pais_sch%Type;
c_s_d_tip_restr consulta_sch_det.tip_restr%TYPE;
erro NUMBER := 1;
/* Passa a 0 quando a função estiver satisfeita */
BEGIN
   If Tip_Form1 <> 'A' then
	RETURN(0); /* Só verifica se PRT deve ser consultado para formulários A */
   End if ;
   OPEN Campos;
   /* Vai buscar os campos necessários */
   FETCH Campos INTO N_Var, Conteu;
   IF Campos%NotFound THEN
      RETURN(0);
      /* deverá fazer a consulta */
   END IF;
   WHILE Campos%Found LOOP
      IF N_Var = 'FORMULARIO.COD_PAIS_NAC_1'THEN
         Formul_Cod_Pais_Nac_1 := Conteu;
      ELSIF
         N_Var = 'FORMULARIO.COD_PAIS_NAC_2'THEN
         Formul_Cod_Pais_Nac_2 := Conteu;
      ELSIF
         N_Var = 'FORMULARIO.COD_PAIS_NAC_3'THEN
         Formul_Cod_Pais_Nac_3 := Conteu;
      ELSIF
         N_Var = 'FORMULARIO.COD_PAIS_SCH_DEST_PRIN'THEN
         Formul_Cod_Pais_Sch_Dest_Prin := Conteu;
      ELSIF
         N_Var = 'FORMULARIO.COD_PAIS_EMI_DOC'THEN
         Formul_Cod_Pais_Emi_Doc := Conteu;
         --	  ELSIF N_Var = 'FORMULARIO.COD_POS' THEN
         --	   Formul_Cod_Pos := Conteu ;
         --	  ELSIF N_Var = 'FORMULARIO.COD_DOC' THEN
         --	   Formul_Cod_Doc := Conteu ;
         --	  ELSIF N_Var = 'FORMULARIO.APEL' THEN
         --	   Formul_Apel := Conteu ;
         --	  ELSIF N_Var = 'FORMULARIO.NOME' THEN
         --	   Formul_Nome := Conteu ;
         --	  ELSIF N_Var = 'FORMULARIO.DAT_NASC' THEN
         --	   Formul_Dat_Nasc := Conteu ;
      END IF;
      FETCH Campos INTO N_Var, Conteu;
   END LOOP;
   CLOSE Campos;
   OPEN f1;
   FETCH f1 INTO c_s_d_cod_pais_sch, c_s_d_tip_restr;
   WHILE f1%found AND erro = 1 LOOP
      IF NVL(c_s_d_Tip_Restr, '4') = '4'THEN
         erro := 0;
      ELSE
         erro := Taref1.verifica_restricao(c_s_d_tip_restr, c_s_d_cod_pais_sch,
            0, 0, formul_cod_pais_sch_dest_prin,
            formul_cod_pais_emi_doc,
            formul_cod_pos,
            formul_cod_doc,
            formul_apel,
            formul_nome,
            formul_dat_nasc);
         IF erro <> 0 THEN
            erro := 1;
         END IF;
      END IF;
      FETCH f1 INTO c_s_d_cod_pais_sch, c_s_d_tip_restr;
   END LOOP;
   CLOSE f1;
   RETURN(erro);
 exception
  when others then
    return(2);
END;
FUNCTION Ve_Resp_Sch(
  Ano_Form1 IN NUMBER ,
  Num_Form1 IN NUMBER,
  Todos_Deram OUT NUMBER )
RETURN NUMBER IS
--	DESENCADEADO por AFTER UPDATE ON FORM_SCH.COD_PARE, que
-- chama o evolui_estado(ano_form, num_form); Se cod_pare IS NOT NULL
--
--	Função que verifica as respostas de Schengen.
--	Retorna	0: se o(s) paíse de Schengen solicitados já deram parecer
--		   positivo ou os que faltam dar parecer, já ultrapassaram
--		   a dat_lim_resp, pelo que pode continuar a evolução de estados;
-- 		1: se existiu um erro qualquer na função (EXCEPTION);
--		97: se não existe nada a fazer, porque:
--		   a) ainda não foram dados todos os pareceres positivos dentro
--		      do prazo;
--		98: se não existe nada a fazer, porque existe mais  que
--		     um indeferido dentro do prazo (Dat_Pare_Ser <= Dat_Lim_Resp);
--		99: se existiu uma recusa de parecer (obriga a um indeferimento
-- 		    do pedido caso os serviços ainda não o tenham indeferido), a
--		    função atribui_indeferido verifica se deve atribuir ou não o
--                                  indeferimento.
--	Retorna em Todos_Deram:
--		0: Se todos deram parecer
--		1: Se ainda faltam alguns dar parecer
--
--	Precisa das tabelas: FORM_SCH (formulario de Schengen)
--  NOTA: 	Esta função não deverá ser chamada em Reapreciação,
--	visto que Schengen já não deve ser "ouvido".
--
Pare_Ind Param_Glo.Val_Para%TYPE;
Pare_Aut Param_Glo.Val_Para%TYPE;
CURSOR B_Sch IS
   SELECT * FROM FORM_SCH
WHERE
   Ano_Form = Ano_Form1 AND
   Num_Form = Num_Form1;
F_B FORM_SCH%ROWTYPE;
Retorna NUMBER;
BEGIN
   Pare_Ind := Taref.Busca_Param_Glo1(10,NULL);
   Pare_Aut := Taref.Busca_Param_Glo1(9,NULL);
   Todos_Deram := 0;
   Retorna := 0;
   -- retorna 0 se não existem países a consultar.
   OPEN B_Sch;
   FETCH B_Sch INTO F_B;
   WHILE B_Sch%FOUND LOOP
      IF F_B.Cod_Pare IS NULL THEN
         -- Se ainda não existe parecer
         Todos_Deram := 1;
         IF TRUNC(F_B.Dat_Lim_Resp) < TRUNC(Sysdate) THEN
            -- Caso em que está à espera de parecer, mas já foi ultrapassada
            -- a data limite para Schengen dar parecer. Não faz nada
            NULL;
         ELSE
            -- Caso em que ainda está à espera de parecer,
            -- deve retornar 97 se não existir um erro superior
            IF Retorna IN(0) THEN
               Retorna := 97;
            END IF;
         END IF;
      ELSIF
         F_B.Cod_Pare = Pare_Ind THEN
         -- Se o parecer fôr INDEFERIDO
         IF TRUNC(F_B.Dat_Lim_Resp) < TRUNC(Sysdate) THEN
            -- Caso em que foi dado parecer, mas já foi ultrapassada
            -- a data limite para o serviço dar o parecer. Não faz nada,
            -- porque já atribui Concedido ou Indeferido
            NULL;
         ELSE
            -- Caso em que foi dado parecer INDEFERIDO dentro do prazo,
            -- deve retornar 99 se não encontrou ainda nenhum indeferido
            IF Retorna IN(99) THEN
               Retorna := 98;
               -- Já é o segundo indeferido dentro do prazo
            ELSE
               Retorna := 99;
               -- É o primeiro indeferido dentro do prazo
            END IF;
         END IF;
      ELSIF
         F_B.Cod_Pare = Pare_Aut THEN
         -- Se o parecer fôr AUTORIZADO
         IF TRUNC(F_B.Dat_Lim_Resp) < TRUNC(Sysdate) THEN
            -- Caso em que foi dado parecer, mas já foi ultrapassada
            -- a data limite para schengen dar o parecer. Não faz nada.
            NULL;
         ELSE
            -- Caso em que foi dado parecer positivo, continua na mesma.
            NULL;
         END IF;
      END IF;
      -- Não existem mais tipos de parecer
      FETCH B_Sch INTO F_B;
   END LOOP;
   CLOSE B_Sch;
   RETURN(Retorna);
EXCEPTION
   WHEN OTHERS THEN
   RETURN(1);
END;
FUNCTION Ve_Resp_Serv(
  Ano_Form1 IN NUMBER ,
  Num_Form1 IN NUMBER ,
  Reapr IN VARCHAR2 DEFAULT 'N',
  Cod_Servico IN VARCHAR2 ,
  Todos_Deram OUT NUMBER,
  cod_est_tarefa IN VARCHAR2)
RETURN NUMBER IS
--	DESENCADEADO por AFTER UPDATE ON FORM_SER. COD_PARE, que
-- chama o evolui_estado(ano_form, num_form); Se cod_pare_aut IS NOT NULL
--
--	Função que verifica as respostas dos serviços, com excepção do
--  serviço SIS (Taref.Busca_Param_Glo1(32)) no caso de estarmos perante um
--  pedido de reapreciação.
--	Retorna	0: se o(s) serviços solicitados já deram parecer positivo ou
--		   os que faltam dar parecer, já ultrapassaram a dat_lim_resp,
-- 		   pelo que pode continuar a evolução de estados;
-- 		1: se existiu um erro qualquer na função (EXCEPTION);
--		97: se não existe nada a fazer, porque:
--		   a) ainda não foram dados todos os pareceres positivos;
--		98: se não existe nada a fazer, porque existe mais  que
--		     um indeferido dentro do prazo (Dat_Pare_Ser <= Dat_Lim_Resp);
--		99: se existiu uma recusa de parecer (obriga a um indeferimento
-- 		    do pedido caso Schengen ainda não o tenha indeferido), a
--		    função atribui_indeferido verifica se deve atribuir ou não o
--                                  indeferimento.
--	Retorna em Todos_Deram:
--		0: Se todos deram parecer
--		1: Se ainda faltam alguns dar parecer
--	Precisa das tabelas: FORM_SER (formulario de servicos)
--
SIS Param_Glo.Val_Para%TYPE;
Pare_Ind Param_Glo.Val_Para%TYPE;
Pare_Aut Param_Glo.Val_Para%TYPE;
CURSOR B_Serv IS
   SELECT * FROM FORM_SER
WHERE
   Ano_Form = Ano_Form1 AND
   Num_Form = Num_Form1 AND
   Cod_Ser = NVL(Cod_Servico, Cod_Ser) AND
   Devido_A like cod_est_tarefa||'%';
F_B FORM_SER%ROWTYPE;
Retorna NUMBER;
BEGIN
--Grava_Erro('Funcoes.Ve_Resp_Ser', 'Inicio', 1);
   SIS := Taref.Busca_Param_Glo1(32, null);
   Pare_Ind := Taref.Busca_Param_Glo1(10, null);
   Pare_Aut := Taref.Busca_Param_Glo1(9, null);
   Todos_Deram := 0;
   Retorna := 0;
   -- retorna 0 se não existem serviços a consultar.
   OPEN B_Serv;
   FETCH B_Serv INTO F_B;
   WHILE B_Serv%FOUND LOOP
      IF Reapr = 'S'AND F_B.Cod_Ser = SIS THEN
         NULL;
         -- não toma em atenção o serviço.
      ELSE
         IF F_B.Cod_Pare_Ser IS NULL THEN
            -- Se ainda não existe parecer
            Todos_Deram := 1;
            IF trunc(F_B.Dat_Lim_Resp) < trunc(Sysdate) THEN
               -- Caso em que está à espera de parecer, mas já foi ultrapassada
               --a data limite para o serviço dar o parecer. Não faz nada
               NULL;
            ELSE
               -- Caso em que está ainda está à espera de parecer,
               -- deve retornar 97 se não existir um erro superior
               IF Retorna IN(0) THEN
                  Retorna := 97;
               END IF;
            END IF;
         ELSIF
            F_B.Cod_Pare_Ser = Pare_Ind THEN
            -- Se o parecer fôr INDEFERIDO
            IF trunc(F_B.Dat_Lim_Resp) < trunc(Sysdate) THEN
               -- Caso em que foi dado parecer, mas já foi ultrapassada
               -- a data limite para o serviço dar o parecer. Não faz nada,
               -- porque já atribui Concedido ou Indeferido
               NULL;
            ELSE
               -- Caso em que foi dado parecer INDEFERIDO dentro do prazo,
               -- deve retornar 99 se não encontrou ainda nenhum indeferido
               IF Retorna IN(99) THEN
                  Retorna := 98;
                  -- Já é o segundo indeferido dentro do prazo
               ELSE
                  Retorna := 99;
                  -- É o primeiro indeferido dentro do prazo
               END IF;
            END IF;
         ELSIF
            F_B.Cod_Pare_Ser = Pare_Aut THEN
            -- Se o parecer fôr AUTORIZADO
            IF trunc(F_B.Dat_Lim_Resp) < trunc(Sysdate) THEN
               -- Caso em que foi dado parecer, mas já foi ultrapassada
               -- a data limite para o serviço dar o parecer. Não faz nada.
               NULL;
            ELSE
               -- Caso em que foi dado parecer positivo, continua na mesma.
               NULL;
            END IF;
         END IF;
         -- Não existem mais tipos de parecer
      END IF;
      FETCH B_Serv INTO F_B;
   END LOOP;
   CLOSE B_Serv;
Tarefa_Master.Grava_Erro('Funcoes.Ve_Resp_Ser',
			'Vai acabar Funcoes.Ve_Resp_Ser com resultado = '||to_char(retorna));
   RETURN(Retorna);
EXCEPTION
   WHEN OTHERS THEN
Aj_Help := SQLERRM;
Tarefa_master.Grava_Erro('Funcoes.Ve_Resp_Ser', 'OUTROS:'||Aj_Help, 2);
   RETURN(1);
END;
FUNCTION Atribuiu_Indeferido(
  Ano_Form1 IN NUMBER ,
  Num_Form1 IN NUMBER ,
  Tipo_Form1 IN VARCHAR2,
  Reapr1 IN VARCHAR2,
  VVTL IN BOOLEAN,
  Cod_Est_Tarefa IN VARCHAR2)
RETURN NUMBER IS
--  Chamada:
--	After UPDATE on form_sch.cod_pare e form_ser.cod_pare, chama
--  a evolução de estado, que chama esta função.
--	Envia para os Postos (se fôr um formulário P) ou para Schengen (se fôr
--  um formulário A) o parecer de indeferido (insere no FORM_B para despoletar
--  um envio).
--	Utiliza a função EXISTE_PARECER(...) para saber se pode atribuir
--  indeferido.
--  Retorna:
--	0: se não atribuiu parecer de indeferido;
--	1: se existiu algum erro (EXCEPTION);
--	99: se tem que ser atribuido um indeferido .
--
Resp NUMBER;
Serv NUMBER;
Sch NUMBER;
Todos_Deram Number := 0;
Pare_Ind FORM_B.COD_PARE%TYPE := TO_NUMBER(Taref.Busca_Param_Glo1(10,NULL));
BEGIN
   If VVTL Then
     Return(0);
   End if;
   Resp := FUNCOES.Existe_Parecer(Ano_Form1, Num_Form1, Reapr1);
   IF Resp = 99 THEN
      RETURN(0);
   ELSIF
      Resp = 1 THEN
      RETURN(1);
   END IF;
   --	A partir daqui pode dar o parecer indeferido se fôr o primeiro
   --  indeferido entre postos e Schengen(excepto em reapreciações)
   Serv := Ve_Resp_Serv(Ano_Form1, Num_Form1, Reapr1, NULL, Todos_Deram, Cod_Est_Tarefa);
   IF Serv = 1 THEN
      RETURN(1);
   END IF;
   IF REAPR1 = 'N' AND Tipo_Form1 = 'P' THEN
      Sch := Ve_Resp_Sch(Ano_Form1, Num_Form1, Todos_Deram);
      IF Sch = 1 THEN
         RETURN(1);
      END IF;
   ELSE
      /* tem que ser <> de 99 */
      Sch := 0;
   END IF;
   IF(Serv = 99 AND Sch <> 99) OR
      (Serv <> 99 AND Sch = 99) THEN
      -- Trata-se do primeiro indeferido, pelo que tem que ser enviado para o
      -- posto ou para Schengen, isto acontece com o novo estado a ser inserido
      --      em form_est
      --      erro := insere_Form_B(Ano_Form1, Num_Form1, NULL, Pare_Ind,
      --         NULL, NULL, NULL);
      --      IF erro = 1 THEN
      --         RETURN(1);
      --      END IF;
      RETURN(99);
   END IF;
   RETURN(0);
EXCEPTION
   WHEN OTHERS THEN
   RETURN(1);
END;
PROCEDURE envio_reapr (	v_ano_form IN NUMBER, v_num_form IN NUMBER,
			v_referencia IN VARCHAR2, v_ord_form_r IN NUMBER) IS
--  Pedidos de Reapreciação (POSTO -> CENTRAL)
--  No posto, e após um pedido ser indeferido pela central, ENVIA para a CENTRAL.
--
	wref_ped_envio varchar2(19);
	wassunto varchar2(50);
	wtip_envio char(1);
	wendereco_envio varchar2(120);
--
	CURSOR c_posto IS
		SELECT p.* from POSTO p
		WHERE p.cod_pos = (select pg.val_para
				   from param_glo pg
				   where pg.ind_para = 2);
	wposto POSTO%ROWTYPE;
--
BEGIN
	wref_ped_envio := v_referencia;
	wassunto := v_referencia||'.R';
	OPEN c_posto;
	FETCH c_posto into wposto;
	IF c_posto%NOTFOUND then
		CLOSE c_posto;
		wendereco_envio := null;
	ELSE
		CLOSE c_posto;
		wendereco_envio := wposto.end_envio;
	END IF;
	IF wendereco_envio is null then
		wtip_envio := 'F';
	ELSE
		wtip_envio := 'R';
	END IF;
--
     INSERT INTO envio(
           tip_form_envio,
           ref_ped_envio,
           num_msg_envio,
           tip_dest,
           importanc_envio,
           assunto,
           dat_envio,
           uti_envio,
           est_envio,
           tip_envio,
           endereco_envio,
           dr_ndr,
           seq_envio,
	   formr_ano_form,
	   formr_num_form,
	   formr_ord_form_r
           )
     VALUES
        (
           'R',
	   wref_ped_envio,
           1,
           'C',
           '3',
           wassunto,
           sysdate,
           user,
           'P',
           wtip_envio,
           wendereco_envio,
           'S',
           envio_seq_envio.nextval,
	   v_ano_form,
	   v_num_form,
	   v_ord_form_r
           );
END;
FUNCTION form_b_fax (v_ano_form IN NUMBER, v_num_form IN NUMBER,
				v_cod_pare IN VARCHAR2, v_praz_sup IN NUMBER default null)
	RETURN BOOLEAN IS
	CURSOR c1 IS
	SELECT * FROM formulario f
	WHERE 	f.ano_form = v_ano_form
	AND	f.num_form = v_num_form FOR UPDATE OF f.dat_lim_resp, f.cod_pare;
	r_form		formulario%ROWTYPE;
	CURSOR c2 IS
	SELECT * FROM parecer p
	WHERE p.cod_pare = v_cod_pare;
	r_parecer	parecer%ROWTYPE;
	v_dat_lim_resp	formulario.dat_lim_resp%TYPE;
	BEGIN
		OPEN c1;
		FETCH c1 INTO r_form;
			IF c1%NOTFOUND THEN RAISE NO_DATA_FOUND;
			END IF;
		OPEN c2;
		FETCH c2 INTO r_parecer;
			IF c2%NOTFOUND THEN RAISE NO_DATA_FOUND;
			END IF;
		CLOSE c2;
    		IF r_parecer.pare_conc = 'N' then
			if v_praz_sup is null then
				v_dat_lim_resp := NVL(r_form.dat_lim_resp,
						SYSDATE) + TAREF.busca_param_glo1(27, null);
			ELSE
				v_dat_lim_resp := NVL(r_form.dat_lim_resp, SYSDATE) +
							v_praz_sup;
			END IF;
			UPDATE formulario f
			SET	f.dat_lim_resp = v_dat_lim_resp
			WHERE CURRENT OF c1;
		ELSE
			UPDATE formulario
			SET cod_pare = v_cod_pare
			WHERE CURRENT OF c1;
		END IF;
	CLOSE c1;
	RETURN TRUE;
	EXCEPTION
	WHEN OTHERS THEN RETURN (FALSE);
	END;
PROCEDURE ExportBlob (p_file  IN  VARCHAR2,
                      p_blob  IN  BLOB)
AS LANGUAGE JAVA
NAME 'BlobHandler.ExportBlob(java.lang.String, oracle.sql.BLOB)';

FUNCTION Trata_biometria_info (v_recibo IN number,p_foto IN varchar2,
p_bio IN varchar2)
RETURN NUMBER IS

v_bio  biometria_info.bio%type;
v_foto biometria_info.foto%type;

begin
select bio, foto into v_bio, v_foto
from biometria_info
where num_recibo = v_recibo;

ExportBlob('d:\fotos\tratadas\' || p_foto,v_foto);

if v_bio is not null then
   ExportBlob('d:\fotos\tratadas\' || p_bio,v_bio);
   return(0);
else
   return(1);
end if;

end;
PROCEDURE Envio_Aud_Previa (v_ano_form IN NUMBER, v_num_form IN NUMBER,
			v_referencia IN VARCHAR2) IS
--  Audiencia Previa (POSTO -> CENTRAL)
--
	wref_ped_envio varchar2(19);
	wassunto varchar2(50);
	wtip_envio char(1);
	wendereco_envio varchar2(120);
--
	CURSOR c_posto IS
		SELECT p.* from POSTO p
		WHERE p.cod_pos = (select pg.val_para
				   from param_glo pg
				   where pg.ind_para = 2);
	wposto POSTO%ROWTYPE;
--
BEGIN
	wref_ped_envio := v_referencia;
	wassunto := v_referencia||'.N';
	OPEN c_posto;
	FETCH c_posto into wposto;
	IF c_posto%NOTFOUND then
		CLOSE c_posto;
		wendereco_envio := null;
	ELSE
		CLOSE c_posto;
		wendereco_envio := wposto.end_envio;
	END IF;
	IF wendereco_envio is null then
		wtip_envio := 'F';
	ELSE
		wtip_envio := 'R';
	END IF;
--
     INSERT INTO envio(
           tip_form_envio,
           ref_ped_envio,
           num_msg_envio,
           tip_dest,
           importanc_envio,
           assunto,
           dat_envio,
           uti_envio,
           est_envio,
           tip_envio,
           endereco_envio,
           dr_ndr,
           seq_envio,
	         formap_ano_form,
	         formap_num_form
           )
     VALUES
        (
           'N',
	         wref_ped_envio,
           1,
           'C',
           '3',
           wassunto,
           sysdate,
           user,
           'P',
           wtip_envio,
           wendereco_envio,
           'S',
           envio_seq_envio.nextval,
	         v_ano_form,
	         v_num_form
           );
END;
FUNCTION obtem_valor_vis(p_valor_rpv in VARCHAR2, p_tipo IN VARCHAR2)
RETURN VARCHAR2 IS

v_valor_vis conversao_vis.valor_vis%TYPE;
Begin
   begin
     Select valor_vis
     into v_valor_vis
     from conversao_vis
     Where valor_rpv = p_valor_rpv
     and tipo = p_tipo and usar = 'S';
        Exception
        When no_data_found then
	    RETURN ('ERRO');
   end;
 RETURN v_valor_vis;
END obtem_valor_vis;
PROCEDURE obtem_header_det (vDescricao in varchar2, vContract out varchar2, vOperation out varchar2) is
begin
select contract, operation
into vcontract, voperation
from tipo_comm_vistos
where descricao = vdescricao;
end;
Function Envia_Vis (proxy_server      IN VARCHAR2,
                    web_service       IN VARCHAR2,
                    web_service_param IN VARCHAR2,
                    v_id_env_vis      IN TEMP_ENV_VIS.ID_ENV_VIS%TYPE,
                    ambiente          in varchar2 DEFAULT 'P')
  RETURN clob IS
     req            demo_soap.request;
     --resp           demo_soap.response;
     resp           chama_vis_broker.response;
     msg_resp       clob;/*varchar2(32000);*/
     msg_resp_vis   clob;/*varchar2(32000);*/
     msg_resp_new   clob;/*varchar2(32000);*/
     v_message_xml  temp_env_vis.message_xml%type;
     v_cod_comm_vistos temp_env_vis.cod_comm_vistos%type;
     v_ano_form        temp_env_vis.ano_form%type;
     v_num_form        temp_env_vis.num_form%type;
     v_num_ordem       temp_rec_vis.num_ordem%type;
     /*v_sqlcode		NUMBER;
     v_sqlerrm		VARCHAR2(240);*/
BEGIN
   --begin
   select message_xml, cod_comm_vistos, ano_form, num_form
   into v_message_xml, v_cod_comm_vistos, v_ano_form, v_num_form
   from temp_env_vis
   where id_env_vis = v_id_env_vis;
   /*exception when no_data_found then
             select x into v_message_xml
             from sri_test1;
             v_cod_comm_vistos := 7;
   end;*/

   --Ligação directa ao VIS
   /*req := demo_soap.new_request('v1:Call','xmlns:v1="http://www.europa.eu/schengen/vis/webservice/V1/"');
   demo_soap.add_parameter(req, '![CDATA[', null, v_message_xml);*/

  --Ligação directa ao VIS
  /*if v_cod_comm_vistos in (7,16,23,24,18) then
      resp := demo_soap.invoke_clob(req, web_service,null,to_char(v_id_env_vis));
   else
      resp := demo_soap.invoke(req, 'http://10.12.6.23/visasyncport/visasyncport.asmx','http://www.europa.eu/schengen/vis/webservice/V1/Call',to_char(v_id_env_vis));
   end if;*/

   --Ligação directa ao VIS
  /* if v_cod_comm_vistos = 31 then
      --Já estava comentado
      --msg_resp:= demo_soap.get_return_value_extra(resp.doc, 'Message','xmlns="http://www.europa.eu/schengen/vis/webservice/V1/"');
      msg_resp:= demo_soap.get_return_value(resp, 'Message','xmlns="http://www.europa.eu/schengen/vis/webservice/V1/"');
   else
      msg_resp:= demo_soap.get_return_value(resp, 'Message','xmlns="http://www.europa.eu/schengen/vis/webservice/V1/"');
   end if;*/

   --Ligação ao VIS via Broker SEF
   resp := CHAMA_VIS_BROKER.VISRequest (v_cod_comm_vistos, v_id_env_vis, v_message_xml, msg_resp, msg_resp_vis, ambiente);
   --write_clob_tofile('C:\PSAT\Rececao',v_id_env_vis||'.xml',msg_resp_vis);
   --write_clob_tofile('C:\PSAT\Load\Received',v_id_env_vis,msg_resp_vis);
   --Já estava comentado
   /*if v_cod_comm_vistos in (3,10,17,23,25,26,27,28,29,30,32,37,38,40,41,42) then --Search  ,  Retrieval
      msg_resp:= demo_soap.get_return_value(resp, 'Message','xmlns="http://www.europa.eu/schengen/vis/webservice/V1/"');
   elsif v_cod_comm_vistos = 31 then
      --msg_resp:= demo_soap.get_return_value_extra(resp.doc, 'Message','xmlns="http://www.europa.eu/schengen/vis/webservice/V1/"');
      msg_resp:= demo_soap.get_return_value(resp, 'Message','xmlns="http://www.europa.eu/schengen/vis/webservice/V1/"');
   else
      msg_resp:= demo_soap.get_return_value(resp, 'Ack','xmlns="http://www.europa.eu/schengen/vis/webservice/V1/"');
   end if;*/

   --Ligação directa ao VIS
   /*select replace(msg_resp,'&lt;','<')
   into msg_resp_new from dual;
   select replace(msg_resp_new,'&gt;','>')
   into msg_resp_new from dual;
   select replace(msg_resp_new,'&quot;','"')
   into msg_resp_new from dual;*/

   msg_resp_new := msg_resp;
   begin
   select nvl(max(num_ordem),0) + 1 into v_num_ordem
   from temp_rec_vis
   where id_rec_vis = v_id_env_vis;
   exception when no_data_found then
             v_num_ordem := 1;
   end;
   --Regista a resposta na tabela respectiva
   if v_cod_comm_vistos in (37,38,40,41,42,23,17,26,10,25,31,30,3,32,27,29,28) then
       /*Alterado para os testes CT no VIS*/
       insert into temp_rec_vis(id_rec_vis,ano_form,num_form,cod_comm_vistos,message_xml,cri_uti,cri_dat,num_ordem,tratada,message_xml_vis)
       values(v_id_env_vis,v_ano_form,v_num_form,v_cod_comm_vistos,msg_resp_new,user,sysdate,v_num_ordem,'S',msg_resp_vis);
   else
       insert into temp_rec_vis(id_rec_vis,ano_form,num_form,cod_comm_vistos,message_xml,cri_uti,cri_dat,num_ordem,tratada,message_xml_vis)
       values(v_id_env_vis,v_ano_form,v_num_form,v_cod_comm_vistos,msg_resp_new,user,sysdate,v_num_ordem,'S',msg_resp_vis);
   end if;

   return msg_resp_new;
   /*exception
	  when others then
		v_sqlcode := sqlcode;
    dbms_output.put_line(v_sqlcode);
		v_sqlerrm := sqlerrm;
    dbms_output.put_line(v_sqlerrm);*/

END;
function ClobToBlob64(p_c in clob)
return blob is
return_blob blob;
buff_raw  raw(32767);
buff_string  varchar2(32767);
len_clob  integer;
len_buff  integer := 44;
v_count  integer;
begin
len_clob := dbms_lob.getlength(p_c);
dbms_lob.createtemporary(return_blob, true);
for i in 0..(ceil(len_clob/len_buff)-1) loop
 dbms_lob.read(p_c, len_buff, i*len_buff + 1, buff_string);
 buff_raw := utl_encode.base64_decode(utl_raw.cast_to_raw(buff_string));
 dbms_lob.writeappend(return_blob, utl_raw.length(buff_raw), buff_raw);
end loop;
return return_blob;
end ClobToBlob64;
PROCEDURE ExportClob (p_file  IN  VARCHAR2,
                      p_clob  IN  CLOB)
AS LANGUAGE JAVA
NAME 'ClobHandler.ExportClob(java.lang.String, oracle.sql.CLOB)';
END FUNCOES;
/

prompt
prompt Creating package body JOBS_PK
prompt =============================
prompt
CREATE OR REPLACE PACKAGE BODY RPV.JOBS_PK IS
PROCEDURE Envia_Central(tipo in varchar2 default 'E') IS
cursor c1 is
select  * from temp_env
where enviou = 'A';

cursor c15 is
select  * from temp_env
where enviou = 'N';

cursor c2 (envia_msgid1 number) is
select  * from temp_env_detalhe
where envia_msgid = envia_msgid1;

cursor c3 is
select assunto, num_msg_recep
from recep
where est_recep = 'N' and tip_form_recep in ('W','O')
order by assunto, num_msg_recep;

cursor anexos_i (tip_form in varchar, ref_ped in varchar2, num_msg in number) is
select a.nome_fich, a.fich, a.descr
from anexos a, envio e
where e.tip_form_envio = tip_form and
e.ref_ped_envio = ref_ped and
e.num_msg_envio = num_msg and
e.formi_cod_ser = a.cod_ser_i and e.formi_ano_form = a.ano_form and
e.formi_num_form = a.num_form and e.formi_num_ord = a.num_ord_i and
e.formi_ord_form_i = a.ord_form_i and
e.tip_form_envio = a.tip_form;

cursor anexos_r (tip_form in varchar, ref_ped in varchar2, num_msg in number) is
select a.nome_fich, a.fich, a.descr
from anexos a, envio e
where e.tip_form_envio = tip_form and
e.ref_ped_envio = ref_ped and
e.num_msg_envio = num_msg and
e.formr_ano_form = a.ano_form and
e.formr_num_form = a.num_form and
e.tip_form_envio = a.tip_form;

cursor anexos_p (tip_form in varchar, ref_ped in varchar2, num_msg in number) is
select a.nome_fich, a.fich, a.descr
from anexos a, envio e
where e.tip_form_envio = tip_form and
e.ref_ped_envio = ref_ped and
e.num_msg_envio = num_msg and
e.for_ano_form = a.ano_form and
e.for_num_form = a.num_form and
e.tip_form_envio = a.tip_form;

cursor anexos_n (tip_form in varchar, ref_ped in varchar2, num_msg in number) is
select a.nome_fich, a.fich, a.descr
from anexos a, envio e
where e.tip_form_envio = tip_form and
e.ref_ped_envio = ref_ped and
e.num_msg_envio = num_msg and
e.formap_ano_form = a.ano_form and
e.formap_num_form = a.num_form and
e.tip_form_envio = a.tip_form;

cursor ck is
select e.assunto, g.id_grupo, e.ref_ped_envio
from envio e, grupos g
where to_number(substr(e.assunto,8,12)) = g.id_grupo(+)
and e.est_envio = 'P'and e.tip_form_envio = 'K';

cursor anexos_j(ref_ped in varchar2) is
select MESSAGEID,REFNUMBEREXCH ,VISAPPNUMBER, URGENTCASE,
SENDERID,COUNTRYSEND,LOCATIONSEND,NAMESEND,
TYPESEND,COUNTRYREC,LOCATIONREC,NAMEREC,
TYPEREC,MSGTXTMAND,RETRYCOUNT, TIPO
from temp_env_vismail
where messageid = ref_ped;

v_temp_env 		      temp_env%rowtype;
v_temp_env_detalhe 	temp_env_detalhe%rowtype;
v_num_fich 		      temp_rec.num_fich%type;
v_originator		    varchar2(120);
fHandle  	          utl_file.file_type;
registos            number(1);
v_foto              BFILE;
v_biometria         BFILE;
v_fotoDir           varchar2(30);
v_fotoName          varchar2(100);
v_biometriaName     varchar2(100);
v_fotoRename        varchar2(100);
v_biometriaRename   varchar2(100);
v_assunto           recep.assunto%type;
v_num_msg_recep     recep.num_msg_recep%type;
v_nome_fich         varchar2(200);
v_nome_fich_orig    varchar2(200);
v_fich              anexos.fich%type;
v_descricao         anexos.descr%type;
v_assunto_ck        envio.assunto%type;
v_id_grupo_ck       grupos.id_grupo%type;
v_ref_ped_envio_ck  envio.ref_ped_envio%type;
p_MESSAGEID         temp_env_vismail.messageid%type;
p_REFNUMBEREXCH     temp_env_vismail.REFNUMBEREXCH%type;
p_VISAPPNUMBER      temp_env_vismail.VISAPPNUMBER%type;
p_URGENTCASE        temp_env_vismail.URGENTCASE%type;
p_SENDERID          temp_env_vismail.SENDERID%type;
p_COUNTRYSEND       temp_env_vismail.COUNTRYSEND%type;
p_LOCATIONSEND      temp_env_vismail.LOCATIONSEND%type;
p_NAMESEND          temp_env_vismail.NAMESEND%type;
p_TYPESEND          temp_env_vismail.TYPESEND%type;
p_COUNTRYREC        temp_env_vismail.COUNTRYREC%type;
p_LOCATIONREC       temp_env_vismail.LOCATIONREC%type;
p_NAMEREC           temp_env_vismail.NAMEREC%type;
p_TYPEREC           temp_env_vismail.TYPEREC%type;
p_MSGTXTMAND        temp_env_vismail.MSGTXTMAND%type;
p_RETRYCOUNT        temp_env_vismail.RETRYCOUNT%type;
v_tipo              temp_env_vismail.tipo%type;
begin

/*update envio
set tip_dest = 'C', est_envio = 'S', dat_envio = sysdate
where est_envio = 'P';
commit;*/

begin
update envio
set tip_dest = 'C', est_envio = 'S', dat_envio = sysdate
where est_envio = 'P'; --and tip_form_envio = 'K';
exception when no_data_found then
          open ck;
          loop
               fetch ck into v_assunto_ck, v_id_grupo_ck, v_ref_ped_envio_ck;
               exit when ck%notfound;
               if v_id_grupo_ck is null then
                  delete from envio
                  where assunto = v_assunto_ck and tip_form_envio = 'K'
                  and ref_ped_envio = v_ref_ped_envio_ck;
                  commit;
               end if;
          end loop;
          close ck;
end;
commit;

open c3;
loop
    fetch c3 into v_assunto, v_num_msg_recep;
    exit when c3%notfound;
    begin
    update recep set est_recep = 'L'
    where est_recep = 'N' and tip_form_recep in ('W','O') and assunto = v_assunto and
    num_msg_recep = v_num_msg_recep;
    exception when others then
              null;
    end;
    commit;
end loop;
close c3;
commit;

if taref.busca_param_glo1(59,null) = 'SIM' then

  /*select end_recep into v_originator
  from posto@lisboa
  where cod_pos = taref.busca_param_glo1(3,null);

  open c1;
  loop
 	    fetch c1 into v_temp_env;
      exit when c1%notfound;
      select temp_num_fich.nextval@lisboa into v_num_fich from dual;

	    open c2 (v_temp_env.msgid);
  	  loop
   		    fetch c2 into v_temp_env_detalhe;
   		    exit when c2%notfound;
		      insert into temp_rec_detalhe@lisboa (recebe_num_fich, num_linha, num_campo, conteudo)
   		    values(v_num_fich,v_temp_env_detalhe.num_linha,v_temp_env_detalhe.num_campo,v_temp_env_detalhe.conteudo);
  	  end loop;
      close c2;

	    insert into temp_rec@lisboa(num_fich, tipo_form, originator, subject, post_scheng, importance, body_file, submission_time)
      values(v_num_fich, substr(v_temp_env.subject,length(v_temp_env.subject),1), v_originator, v_temp_env.subject, 'P', 'NORMAL', 'AUTO', to_char(sysdate,'YYMMDDHH24MISS'));

	    update temp_env
      set enviou = 'S', data_env = sysdate
      where msgid = v_temp_env.msgid;

	    insert into temp_reps (post_scheng, envia_msgid, delivery, data_reg, recip, data_env, reason)
	    values('P', v_temp_env.msgid, 'DELIVERY', to_char(sysdate,'YYYY-MM-DD HH24:MI:SS'), '"S=postrec;O=Mne;OU1=rpv;P=Vision;A=Mailpac;C=Pt"', to_char(sysdate,'YYYY-MM-DD HH24:MI:SS'), null);
 end loop;
 close c1;*/
 commit;
else
     registos := 0;
     open c15;
     loop
       fetch c15 into v_temp_env;
       exit when c15%notfound;
       open c2 (v_temp_env.msgid);
       fHandle := UTL_FILE.FOPEN(v_temp_env.primary, to_char(v_temp_env.msgid) || '.bod' , 'w',32767 );
       loop
           fetch c2 into v_temp_env_detalhe;
           exit when c2%notfound;
           registos := 1;
           UTL_FILE.PUT(fHandle,v_temp_env_detalhe.num_campo || '.' || v_temp_env_detalhe.conteudo);
  		     UTL_FILE.PUT_LINE(fHandle, '');
       end loop;
       close c2;
       UTL_FILE.FCLOSE(fHandle);
       fHandle := UTL_FILE.FOPEN(v_temp_env.primary, to_char(v_temp_env.msgid) || '.hdr', 'w',32767 );
       UTL_FILE.PUT(fHandle,'Body-Path=' || v_temp_env.primary || '\' || to_char(v_temp_env.msgid) || '.bod');
		   UTL_FILE.PUT_LINE(fHandle, '');
       UTL_FILE.PUT(fHandle,'Content-Type=text/plain');
		   UTL_FILE.PUT_LINE(fHandle, '');
       UTL_FILE.PUT(fHandle,'Subject=' || v_temp_env.subject || '-' || v_temp_env.msgid);
		   UTL_FILE.PUT_LINE(fHandle, '');
       if v_temp_env.enviar_tip_form_envio = 'P' then
          begin
          select ti.foto, ti.biometria into v_foto, v_biometria
	        from formulario formu, temp_imagens ti, temp_imagens_det tid
	        where formu.ref_form_2 = tid.ref_form_2
	        and  tid.num_ordem = ti.num_ordem
	        and  tid.enviada = 'N'
	        and  formu.cod_pare_pos is NOT NULL
          and  tid.ref_form_2 = substr(v_temp_env.subject,4,14);
          exception when no_data_found then
                    v_foto := null;
          end;
          if v_foto is not null then
             DBMS_LOB.FILEGETNAME(v_foto,v_fotoDir,v_fotoName);
             dbms_output.put_line('v_fotoName ' || v_fotoName);
             shell('copy ' || '"d:\fotos\Tratadas\'|| v_fotoName || '" ' || v_temp_env.primary);
             v_fotoRename := substr(v_fotoName,1,length(v_fotoName) - 4);
		         dbms_output.put_line('v_fotoRename ' || v_fotoRename);
             v_fotoRename := v_fotoRename || '@' || substr(v_temp_env.subject,4,14) || '.jpg';
      		   shell('ren "' || v_temp_env.primary || '\'  || v_fotoName || '" "' || v_fotoRename ||'"');
             if v_biometria is not null then
             if (DBMS_LOB.FILEEXISTS(v_biometria) != 0) then
                DBMS_LOB.FILEGETNAME(v_biometria,v_fotoDir,v_biometriaName);
                shell('copy ' || '"d:\fotos\Tratadas\'|| v_biometriaName || '" ' || v_temp_env.primary);
                v_biometriaRename := substr(v_biometriaName,1,length(v_biometriaName) - 5);
                v_biometriaRename := v_biometriaRename || '@' || substr(v_temp_env.subject,4,14) || '.nist';
                shell('ren "' || v_temp_env.primary || '\'  || v_biometriaName || '" "' || v_biometriaRename ||'"');
             end if;
             end if;
             UTL_FILE.PUT(fHandle,'[attachement]');
             UTL_FILE.PUT_LINE(fHandle, '');
             UTL_FILE.PUT(fHandle,'Content-Type=image/jpeg');
		         UTL_FILE.PUT_LINE(fHandle, '');
             UTL_FILE.PUT(fHandle,'Body-Path=' || v_temp_env.primary || '\' || v_fotoRename);
             UTL_FILE.PUT_LINE(fHandle, '');
             if v_biometria is not null then
             if (DBMS_LOB.FILEEXISTS(v_biometria) != 0) then
                UTL_FILE.PUT(fHandle,'[attachement]');
                UTL_FILE.PUT_LINE(fHandle, '');
                UTL_FILE.PUT(fHandle,'Content-Type=application/octet-stream');
            	  UTL_FILE.PUT_LINE(fHandle, '');
                UTL_FILE.PUT(fHandle,'Body-Path=' || v_temp_env.primary || '\' || v_biometriaRename);
                UTL_FILE.PUT_LINE(fHandle, '');
             end if;
             end if;
             UPDATE temp_imagens_det
		         SET enviada = 'S', dat_envio = sysdate
		         WHERE ref_form_2 = substr(v_temp_env.subject,4,14);
          end if;
          open anexos_p (v_temp_env.enviar_tip_form_envio,v_temp_env.enviar_ref_ped_envio,v_temp_env.enviar_num_msg_envio);
          loop
               fetch anexos_p into v_nome_fich, v_fich, v_descricao;
               v_nome_fich_orig := v_nome_fich;
               v_nome_fich := substr(v_nome_fich,1,length(v_nome_fich) - 4) || '@' || v_descricao || substr(v_nome_fich,length(v_nome_fich) - 3);
               exit when anexos_p%notfound;
               if v_fich is not null then
                  --dbms_java.grant_permission( 'RPV', 'SYS:java.io.FilePermission', 'd:\rpv_anexos\' || v_nome_fich || ''''  , 'write' );
                  funcoes.ExportBlob('d:\rpv_anexos\'||v_nome_fich,v_fich);
                  shell('move ' || '"d:\rpv_anexos\'|| v_nome_fich || '" ' || v_temp_env.primary);
               else
                  shell('rename ' || '"d:\rpv_anexos\'|| v_nome_fich_orig || '" ' || v_nome_fich);
                  shell('move ' || '"d:\rpv_anexos\'|| v_nome_fich || '" ' || v_temp_env.primary);
               end if;
               UTL_FILE.PUT(fHandle,'[attachement]');
               UTL_FILE.PUT_LINE(fHandle, '');
               UTL_FILE.PUT(fHandle,'Content-Type=image/jpeg');
		           UTL_FILE.PUT_LINE(fHandle, '');
               UTL_FILE.PUT(fHandle,'Body-Path=' || v_temp_env.primary || '\' || v_nome_fich);
               UTL_FILE.PUT_LINE(fHandle, '');
               v_nome_fich_orig := null;
               v_nome_fich := null;
           end loop;
           close anexos_p;
       --Funcionalidade reactiva anexos
       elsif v_temp_env.enviar_tip_form_envio = 'I' then
           open anexos_i (v_temp_env.enviar_tip_form_envio,v_temp_env.enviar_ref_ped_envio,v_temp_env.enviar_num_msg_envio);
           loop
               fetch anexos_i into v_nome_fich, v_fich, v_descricao;
               v_nome_fich_orig := v_nome_fich;
               v_nome_fich := substr(v_nome_fich,1,length(v_nome_fich) - 4) || '@' || v_descricao || substr(v_nome_fich,length(v_nome_fich) - 3);
               exit when anexos_i%notfound;
               if v_fich is not null then
                  --dbms_java.grant_permission( 'RPV', 'SYS:java.io.FilePermission', 'd:\rpv_anexos\' || v_nome_fich || ''''  , 'write' );
                  funcoes.ExportBlob('d:\rpv_anexos\'||v_nome_fich,v_fich);
                  shell('move ' || '"d:\rpv_anexos\'|| v_nome_fich || '" ' || v_temp_env.primary);
               else
                  shell('rename ' || '"d:\rpv_anexos\'|| v_nome_fich_orig || '" ' || v_nome_fich);
                  shell('move ' || '"d:\rpv_anexos\'|| v_nome_fich || '" ' || v_temp_env.primary);
               end if;
               UTL_FILE.PUT(fHandle,'[attachement]');
               UTL_FILE.PUT_LINE(fHandle, '');
               UTL_FILE.PUT(fHandle,'Content-Type=image/jpeg');
		           UTL_FILE.PUT_LINE(fHandle, '');
               UTL_FILE.PUT(fHandle,'Body-Path=' || v_temp_env.primary || '\' || v_nome_fich);
               UTL_FILE.PUT_LINE(fHandle, '');
               v_nome_fich_orig := null;
               v_nome_fich := null;
           end loop;
           close anexos_i;
       elsif v_temp_env.enviar_tip_form_envio = 'R' then
           open anexos_r (v_temp_env.enviar_tip_form_envio,v_temp_env.enviar_ref_ped_envio,v_temp_env.enviar_num_msg_envio);
           loop
               fetch anexos_r into v_nome_fich, v_fich, v_descricao;
               v_nome_fich_orig := v_nome_fich;
               v_nome_fich := substr(v_nome_fich,1,length(v_nome_fich) - 4) || '@' || v_descricao || substr(v_nome_fich,length(v_nome_fich) - 3);
               exit when anexos_r%notfound;
               if v_fich is not null then
                  --dbms_java.grant_permission( 'RPV', 'SYS:java.io.FilePermission', 'd:\rpv_anexos\' || v_nome_fich || ''''  , 'write' );
                  funcoes.ExportBlob('d:\rpv_anexos\'||v_nome_fich,v_fich);
                  shell('move ' || '"d:\rpv_anexos\'|| v_nome_fich || '" ' || v_temp_env.primary);
               else
                  shell('copy ' || '"d:\rpv_anexos\'|| v_nome_fich_orig || '" "d:\rpv_anexos\' || v_nome_fich || '"');
                  shell('move ' || '"d:\rpv_anexos\'|| v_nome_fich || '" ' || v_temp_env.primary);
               end if;
               UTL_FILE.PUT(fHandle,'[attachement]');
               UTL_FILE.PUT_LINE(fHandle, '');
               UTL_FILE.PUT(fHandle,'Content-Type=image/jpeg');
		           UTL_FILE.PUT_LINE(fHandle, '');
               UTL_FILE.PUT(fHandle,'Body-Path=' || v_temp_env.primary || '\' || v_nome_fich);
               UTL_FILE.PUT_LINE(fHandle, '');
               v_nome_fich_orig := null;
               v_nome_fich := null;
           end loop;
           close anexos_r;
       elsif v_temp_env.enviar_tip_form_envio = 'N' then
           open anexos_n (v_temp_env.enviar_tip_form_envio,v_temp_env.enviar_ref_ped_envio,v_temp_env.enviar_num_msg_envio);
           loop
               fetch anexos_n into v_nome_fich, v_fich, v_descricao;
               v_nome_fich_orig := v_nome_fich;
               v_nome_fich := substr(v_nome_fich,1,length(v_nome_fich) - 4) || '@' || v_descricao || substr(v_nome_fich,length(v_nome_fich) - 3);
               exit when anexos_n%notfound;
               if v_fich is not null then
                  dbms_java.grant_permission( 'RPV', 'SYS:java.io.FilePermission', 'd:\rpv_anexos\' || v_nome_fich || ''''  , 'write' );
                  funcoes.ExportBlob('d:\rpv_anexos\'||v_nome_fich,v_fich);
                  shell('move ' || '"d:\rpv_anexos\'|| v_nome_fich || '" ' || v_temp_env.primary);
               else
                  shell('copy ' || '"d:\rpv_anexos\'|| v_nome_fich_orig || '" "d:\rpv_anexos\' || v_nome_fich || '"');
                  shell('move ' || '"d:\rpv_anexos\'|| v_nome_fich || '" ' || v_temp_env.primary);
               end if;
               UTL_FILE.PUT(fHandle,'[attachement]');
               UTL_FILE.PUT_LINE(fHandle, '');
               UTL_FILE.PUT(fHandle,'Content-Type=image/jpeg');
		           UTL_FILE.PUT_LINE(fHandle, '');
               UTL_FILE.PUT(fHandle,'Body-Path=' || v_temp_env.primary || '\' || v_nome_fich);
               UTL_FILE.PUT_LINE(fHandle, '');
               v_nome_fich_orig := null;
               v_nome_fich := null;
           end loop;
           close anexos_n;
       elsif v_temp_env.enviar_tip_form_envio = 'J' then
           open anexos_j(v_temp_env.enviar_ref_ped_envio);
           loop
                fetch anexos_j into p_MESSAGEID,p_REFNUMBEREXCH ,p_VISAPPNUMBER,p_URGENTCASE,
                p_SENDERID,p_COUNTRYSEND,p_LOCATIONSEND,p_NAMESEND,
                p_TYPESEND,p_COUNTRYREC,p_LOCATIONREC,p_NAMEREC,
                p_TYPEREC,p_MSGTXTMAND,p_RETRYCOUNT, v_tipo;
                exit when anexos_j%notfound;
                if v_tipo = '03' then
                   vismail.NSConsularCooperationResponse(p_MESSAGEID,p_REFNUMBEREXCH ,p_VISAPPNUMBER,
                   p_SENDERID,p_COUNTRYSEND,p_LOCATIONSEND,p_NAMESEND,
                   p_TYPESEND,p_COUNTRYREC,p_LOCATIONREC,p_NAMEREC,
                   p_TYPEREC,p_MSGTXTMAND,p_RETRYCOUNT,v_temp_env.primary || '\');
                elsif v_tipo = '05' then
                   vismail.NSSupportingDocumentResponse(p_MESSAGEID,p_REFNUMBEREXCH ,p_VISAPPNUMBER,
                   p_SENDERID,p_COUNTRYSEND,p_LOCATIONSEND,p_NAMESEND,
                   p_TYPESEND,p_COUNTRYREC,p_LOCATIONREC,p_NAMEREC,
                   p_TYPEREC,p_MSGTXTMAND,p_RETRYCOUNT,v_temp_env.primary || '\');
                elsif v_tipo = '07' then
                   vismail.NSDataAmendmentResponse(p_MESSAGEID,p_REFNUMBEREXCH ,p_VISAPPNUMBER,
                   p_SENDERID,p_COUNTRYSEND,p_LOCATIONSEND,p_NAMESEND,
                   p_TYPESEND,p_COUNTRYREC,p_LOCATIONREC,p_NAMEREC,
                   p_TYPEREC,p_MSGTXTMAND,p_RETRYCOUNT,v_temp_env.primary || '\');
                elsif v_tipo = '01' then
                   vismail.NSConsularCooperationRequest(p_MESSAGEID,p_REFNUMBEREXCH ,p_VISAPPNUMBER, p_URGENTCASE,
                   p_SENDERID,p_COUNTRYSEND,p_LOCATIONSEND,p_NAMESEND,
                   p_TYPESEND,p_COUNTRYREC,p_LOCATIONREC,p_NAMEREC,
                   p_TYPEREC,p_MSGTXTMAND,p_RETRYCOUNT,v_temp_env.primary || '\');
                elsif v_tipo = '02' then
                   vismail.NSConsularCooperationInfo(p_MESSAGEID,p_REFNUMBEREXCH ,p_VISAPPNUMBER,
                   p_SENDERID,p_COUNTRYSEND,p_LOCATIONSEND,p_NAMESEND,
                   p_TYPESEND,p_COUNTRYREC,p_LOCATIONREC,p_NAMEREC,
                   p_TYPEREC,p_MSGTXTMAND,p_RETRYCOUNT,v_temp_env.primary || '\');
                elsif v_tipo = '04' then
                   vismail.NSSupportingDocumentRequest(p_MESSAGEID,p_REFNUMBEREXCH ,p_VISAPPNUMBER, p_URGENTCASE,
                   p_SENDERID,p_COUNTRYSEND,p_LOCATIONSEND,p_NAMESEND,
                   p_TYPESEND,p_COUNTRYREC,p_LOCATIONREC,p_NAMEREC,
                   p_TYPEREC,p_MSGTXTMAND,p_RETRYCOUNT,v_temp_env.primary || '\');
                elsif v_tipo = '06' then
                   vismail.NSDataAmendmentRequest(p_MESSAGEID,p_REFNUMBEREXCH ,p_VISAPPNUMBER, p_URGENTCASE,
                   p_SENDERID,p_COUNTRYSEND,p_LOCATIONSEND,p_NAMESEND,
                   p_TYPESEND,p_COUNTRYREC,p_LOCATIONREC,p_NAMEREC,
                   p_TYPEREC,p_MSGTXTMAND,p_RETRYCOUNT,v_temp_env.primary || '\');
                elsif v_tipo = '08' then
                   vismail.NSNationalityAcquiredInfo(p_MESSAGEID,p_REFNUMBEREXCH ,p_VISAPPNUMBER,
                   p_SENDERID,p_COUNTRYSEND,p_LOCATIONSEND,p_NAMESEND,
                   p_TYPESEND,p_COUNTRYREC,p_LOCATIONREC,p_NAMEREC,
                   p_TYPEREC,p_MSGTXTMAND,p_RETRYCOUNT,v_temp_env.primary || '\');
                end if;
                UTL_FILE.PUT(fHandle,'[attachement]');
                UTL_FILE.PUT_LINE(fHandle, '');
                UTL_FILE.PUT(fHandle,'Content-Type=application/octet-stream');
		            UTL_FILE.PUT_LINE(fHandle, '');
                UTL_FILE.PUT(fHandle,'Body-Path=' || v_temp_env.primary || '\' || p_MESSAGEID || '.xml');
                UTL_FILE.PUT_LINE(fHandle, '');
           end loop;
           close anexos_j;
       end if;
       UTL_FILE.FCLOSE(fHandle);

       update temp_env
       set enviou = 'S', data_env = sysdate,
       body_file = to_char(v_temp_env.msgid) || '.hdr'
       where msgid = v_temp_env.msgid;
       commit;
     end loop;
     close c15;
     commit;
     if registos = 1 then
         shell('del d:\rpv\comm\netixclient\log\*.* /q');
        --Activa Netixclient se há formulários para enviar
        --Verifica se estamos perante um posto com certificado se sim abre
        if taref.busca_param_glo1(78,null) is not null then
           shell(taref.busca_param_glo1(78,null));
        end if;
        if taref.busca_param_glo1(81,null) = 'S' then
           shell('d:\rpv\comm\netixclient\NetIXClient.exe /cnx');
        end if;
        jobs_pk.Integra_Fich;
        --Verifica se estamos perante um posto com certificado se sim fecha
        if taref.busca_param_glo1(79,null) is not null then
           shell(taref.busca_param_glo1(79,null));
        end if;
        jobs_pk.integra_deliverys;
     end if;
     if registos = 0 and tipo = 'R' then
        shell('del d:\rpv\comm\netixclient\log\*.* /q');
        --Activa Netixclient se ordem foi dada na RPV manualmente
        --Verifica se estamos perante um posto com certificado se sim abre
        if taref.busca_param_glo1(78,null) is not null then
           shell(taref.busca_param_glo1(78,null));
        end if;
        if taref.busca_param_glo1(81,null) = 'S' then
           shell('d:\rpv\comm\netixclient\NetIXClient.exe /cnx');
        end if;
        jobs_pk.Integra_Fich; /*comentado provisoriamente*/
        --Verifica se estamos perante um posto com certificado se sim fecha
        if taref.busca_param_glo1(79,null) is not null then
           shell(taref.busca_param_glo1(79,null));
        end if;
        jobs_pk.integra_deliverys; /*comentado provisoriamente*/
     elsif registos = 0 then
        shell('del d:\rpv\comm\netixclient\log\*.* /q');
        --Activa Netixclient se ordem foi dada na RPV manualmente
        --Verifica se estamos perante um posto com certificado se sim abre
        if taref.busca_param_glo1(78,null) is not null then
           shell(taref.busca_param_glo1(78,null));
        end if;
        if taref.busca_param_glo1(81,null) = 'S' then
           shell('d:\rpv\comm\netixclient\NetIXClient.exe /cnx');
        end if;
        jobs_pk.Integra_Fich; /*comentado provisoriamente*/
        --Verifica se estamos perante um posto com certificado se sim fecha
        if taref.busca_param_glo1(79,null) is not null then
           shell(taref.busca_param_glo1(79,null));
        end if;
        jobs_pk.integra_deliverys; /*comentado provisoriamente*/
     end if;
     registos := 0;
end if;
open c3;
loop
    fetch c3 into v_assunto, v_num_msg_recep;
    exit when c3%notfound;
    begin
    update recep set est_recep = 'L'
    where est_recep = 'N' and tip_form_recep in ('W','O') and assunto = v_assunto and
    num_msg_recep = v_num_msg_recep;
    exception when others then
              null;
    end;
    commit;
end loop;
close c3;
commit;
end;
PROCEDURE Integra_Fich IS
cursor c1 is
select end_recep
from posto
where cod_pos = taref.busca_param_glo1(3,null);

v_end_recep        posto.end_recep%type;
id 			           UTL_FILE.FILE_TYPE;
id_hdr             UTL_FILE.FILE_TYPE;
id_body            UTL_FILE.FILE_TYPE;
filedata 		       varchar2(1000);
filedata_header    varchar2(1000);
filedata_body      varchar2(1000);
fich_header        varchar2(50);
fich_body          varchar2(100);
assunto            varchar2(30);
v_recebe_num_fich  temp_rec_detalhe.recebe_num_fich%type;
n_linha            temp_rec_detalhe.num_linha%type;
n_campo            temp_rec_detalhe.num_campo%type;
v_conteudo         temp_rec_detalhe.conteudo%type;
foto_body          varchar2(50);
fingers_body       varchar2(50);
xml_body           varchar2(50);
pdf_body           varchar2(50);
pdf2_body          varchar2(50);
pdf3_body          varchar2(50);
pdf4_body          varchar2(50);
v_num_recibo       biometria_info.num_recibo%type;
v_apelido          biometria_info.apelido%type;
v_nome             biometria_info.nome%type;
v_sexo             biometria_info.sexo%type;
v_dat_nasc         biometria_info.dat_nasc%type;
v_cod_nac          biometria_info.cod_nac%type;
v_num_doc_viagem   biometria_info.num_doc_viagem%type;
v_BIO              biometria_info.bio%type;
v_FOTO             biometria_info.foto%type;
b                  blob;
f                  blob;
p                  blob;
p2                 blob;
p3                 blob;
p4                 blob;
bf                 bfile;
src_offset         integer := 1;
dest_offset        integer := 1;
v_tipo_rec         biometria_info.tipo%type;
controla_pdf       number(2);
v_id               temp_read_vismail.id%type;
msg_resp           clob;
v_tipo             varchar2(2);
begin
open c1;
loop
    fetch c1 into v_end_recep;
    exit when c1%notfound;
    shell('DIR ' || v_end_recep || '\*.hdr > ' || v_end_recep || '\teste.txt');
    id := UTL_FILE.FOPEN(v_end_recep, 'teste.txt', 'r',32767);
    loop
        begin
        UTL_FILE.GET_LINE(id,filedata);
        if substr(filedata,length(filedata) - 2) = 'hdr' then
           fich_header := substr(filedata,instr(filedata,'NXC'));
           id_hdr := UTL_FILE.FOPEN(v_end_recep, fich_header, 'r',32767);
           foto_body := null;
           fingers_body := null;
           xml_body := null;
           pdf_body := null;
           pdf2_body := null;
           pdf3_body := null;
           pdf4_body := null;
           controla_pdf := 1;
           loop
               begin
               UTL_FILE.GET_LINE(id_hdr,filedata_header);
               if upper(substr(filedata_header,1,10)) = 'BODY-PATH=' and substr(filedata_header,length(filedata_header)-3,4) = '.bod' then
                  fich_body := substr(filedata_header,11);
               end if;
               if upper(substr(filedata_header,1,8)) = 'SUBJECT=' then
                  assunto := substr(filedata_header,9, 28);
                  if assunto = 'NetIXServer MAIL Interchange' then
                     null;
                  else
                     assunto := substr(filedata_header,9,instr(filedata_header,'-') - 9);
                  end if;
               end if;
               if upper(substr(filedata_header,length(filedata_header) - 3)) = '.JPG' then
                  if instr(filedata_header,'\\') = 0 then
                     foto_body := substr(filedata_header,41);
                  else
                     foto_body := substr(filedata_header,instr(filedata_header,'\\')+2);
                  end if;
               end if;
               if upper(substr(filedata_header,length(filedata_header) - 4)) = '.NIST' then
                  if instr(filedata_header,'\\') = 0 then
                     fingers_body := substr(filedata_header,41);
                  else
                     fingers_body := substr(filedata_header,instr(filedata_header,'\\')+2);
                  end if;
               end if;
               if upper(substr(filedata_header,length(filedata_header) - 3)) = '.XML' then
                  if instr(filedata_header,'\\') = 0 then
                     xml_body := substr(filedata_header,41);
                  else
                     xml_body := substr(filedata_header,instr(filedata_header,'\\')+2);
                  end if;
               end if;
               if upper(substr(filedata_header,length(filedata_header) - 3)) = '.PDF' then
                  if controla_pdf = 1 then
                     if instr(filedata_header,'\\') = 0 then
                        pdf_body := substr(filedata_header,41);
                     else
                        pdf_body := substr(filedata_header,instr(filedata_header,'\\')+2);
                     end if;
                  elsif controla_pdf = 2 then
                     if instr(filedata_header,'\\') = 0 then
                        pdf2_body := substr(filedata_header,41);
                     else
                        pdf2_body := substr(filedata_header,instr(filedata_header,'\\')+2);
                     end if;
                  elsif controla_pdf = 3 then
                     if instr(filedata_header,'\\') = 0 then
                        pdf3_body := substr(filedata_header,41);
                     else
                        pdf3_body := substr(filedata_header,instr(filedata_header,'\\')+2);
                     end if;
                  elsif controla_pdf = 4 then
                     if instr(filedata_header,'\\') = 0 then
                        pdf4_body := substr(filedata_header,41);
                     else
                        pdf4_body := substr(filedata_header,instr(filedata_header,'\\')+2);
                     end if;
                  end if;
                  controla_pdf := controla_pdf + 1;
               end if;
               exception when no_data_found then
			              exit;
               end;
           end loop;
           utl_file.fclose(id_hdr);
           if assunto <> 'NetIXServer MAIL Interchange' then
           select temp_num_fich.nextval into v_recebe_num_fich from dual;
           id_body := UTL_FILE.FOPEN(v_end_recep, fich_body, 'r',32767);
           n_linha := 1;
           loop
               begin
               UTL_FILE.GET_LINE(id_body,filedata_body);
               if instr(filedata_body,'.') <> 0 then
                  n_campo := substr(filedata_body,1,instr(filedata_body,'.') - 1);
                  v_conteudo := trim(substr(filedata_body,instr(filedata_body,'.') + 1));
                  insert into temp_rec_detalhe (recebe_num_fich, num_linha, num_campo, conteudo)
                  values(v_recebe_num_fich, n_linha, n_campo, v_conteudo);
                  n_linha := n_linha + 1;
                  if ((foto_body is not null) or (pdf_body is not null or pdf2_body is not null or pdf3_body is not null or pdf4_body is not null)) and n_campo = '001' then
                     v_num_recibo := substr(v_conteudo,2);
                  elsif ((foto_body is not null) or (pdf_body is not null or pdf2_body is not null or pdf3_body is not null or pdf4_body is not null)) and n_campo = '003' then
                     v_apelido := v_conteudo;
                  elsif ((foto_body is not null) or (pdf_body is not null or pdf2_body is not null or pdf3_body is not null or pdf4_body is not null)) and n_campo = '005' then
                     v_nome := v_conteudo;
                  elsif ((foto_body is not null) or (pdf_body is not null or pdf2_body is not null or pdf3_body is not null or pdf4_body is not null)) and n_campo = '006' then
                     v_sexo := v_conteudo;
                  elsif ((foto_body is not null) or (pdf_body is not null or pdf2_body is not null or pdf3_body is not null or pdf4_body is not null)) and n_campo = '007' then
                     v_dat_nasc := substr(v_conteudo,1,4) || '/' ||  substr(v_conteudo,5,2) || '/' || substr(v_conteudo,7,2);
                  elsif ((foto_body is not null) or (pdf_body is not null or pdf2_body is not null or pdf3_body is not null or pdf4_body is not null)) and n_campo = '030' then
                     v_cod_nac := v_conteudo;
                  elsif ((foto_body is not null) or (pdf_body is not null or pdf2_body is not null or pdf3_body is not null or pdf4_body is not null)) and n_campo = '014' then
                     v_num_doc_viagem := v_conteudo;
                  end if;
                  if xml_body is not null and n_campo = '001' then
                     v_tipo := v_conteudo;
                  end if;
               end if;
               exception when no_data_found then
			              exit;
               end;
           end loop;
           utl_file.fclose(id_body);
           insert into temp_rec (num_fich, tipo_form, originator, subject, post_scheng, importance, body_file, submission_time)
           values(v_recebe_num_fich, substr(assunto,length(assunto)), v_end_recep, assunto, 'P', 'NORMAL', fich_body, to_char(sysdate,'yymmddhh24miss'));
           if xml_body is not null then
              shell ('copy ' || v_end_recep || '\' || xml_body || ' ' ||  'd:\fotos\tratadas');
           end if;
           if foto_body is not null and fingers_body is not null then
              shell ('copy ' || v_end_recep || '\' || foto_body || ' ' ||  'd:\fotos\tratadas');
              shell ('copy ' || v_end_recep || '\' || fingers_body || ' ' ||  'd:\fotos\tratadas');
              if pdf_body is not null then
                 shell ('copy ' || v_end_recep || '\' || pdf_body || ' ' ||  'd:\fotos\tratadas');
              end if;
              if pdf2_body is not null then
                 shell ('copy ' || v_end_recep || '\' || pdf2_body || ' ' ||  'd:\fotos\tratadas');
              end if;
              if pdf3_body is not null then
                 shell ('copy ' || v_end_recep || '\' || pdf3_body || ' ' ||  'd:\fotos\tratadas');
              end if;
              if pdf4_body is not null then
                 shell ('copy ' || v_end_recep || '\' || pdf4_body || ' ' ||  'd:\fotos\tratadas');
              end if;
              begin
              insert into biometria_info(NUM_RECIBO,NOME,
              APELIDO,DAT_NASC,SEXO,COD_NAC,NUM_DOC_VIAGEM,USADO,
              TIPO,COD_ART,CRI_DAT,BIO,FOTO,CRI_UTI,PDF_FILE,PDF_FILE2,PDF_FILE3,PDF_FILE4)
              values(v_NUM_RECIBO, v_NOME,
              v_APELIDO,v_DAT_NASC,v_SEXO,v_COD_NAC,v_NUM_DOC_VIAGEM,'N',
              0,'31',TRUNC(SYSDATE),empty_blob(),empty_blob(),USER,empty_blob(),empty_blob(),empty_blob(),empty_blob()) returning foto,bio,pdf_file, pdf_file2, pdf_file3, pdf_file4 into f,b,p,p2,p3,p4;
              dest_offset := 1;
              src_offset := 1;
              bf := bfilename('FOTOGRAFIAS', foto_body);
              dbms_lob.open(bf, dbms_lob.file_readonly);
              dbms_lob.loadBlobFromFile(f, bf, dbms_lob.lobmaxsize, dest_offset, src_offset);
              dbms_lob.close(bf);
              dest_offset := 1;
              src_offset := 1;
              bf := bfilename('FOTOGRAFIAS', fingers_body);
              dbms_lob.open(bf, dbms_lob.file_readonly);
              dbms_lob.loadBlobFromFile(b, bf, dbms_lob.lobmaxsize, dest_offset, src_offset);
              dbms_lob.close(bf);
              dest_offset := 1;
              src_offset := 1;
              if pdf_body is not null then
                 dest_offset := 1;
                 src_offset := 1;
                 bf := bfilename('FOTOGRAFIAS', pdf_body);
                 dbms_lob.open(bf, dbms_lob.file_readonly);
                 dbms_lob.loadBlobFromFile(p, bf, dbms_lob.lobmaxsize, dest_offset, src_offset);
                 dbms_lob.close(bf);
                 dest_offset := 1;
                 src_offset := 1;
              end if;
              if pdf2_body is not null then
                 dest_offset := 1;
                 src_offset := 1;
                 bf := bfilename('FOTOGRAFIAS', pdf2_body);
                 dbms_lob.open(bf, dbms_lob.file_readonly);
                 dbms_lob.loadBlobFromFile(p2, bf, dbms_lob.lobmaxsize, dest_offset, src_offset);
                 dbms_lob.close(bf);
                 dest_offset := 1;
                 src_offset := 1;
              end if;
              if pdf3_body is not null then
                 dest_offset := 1;
                 src_offset := 1;
                 bf := bfilename('FOTOGRAFIAS', pdf3_body);
                 dbms_lob.open(bf, dbms_lob.file_readonly);
                 dbms_lob.loadBlobFromFile(p3, bf, dbms_lob.lobmaxsize, dest_offset, src_offset);
                 dbms_lob.close(bf);
                 dest_offset := 1;
                 src_offset := 1;
              end if;
              if pdf4_body is not null then
                 dest_offset := 1;
                 src_offset := 1;
                 bf := bfilename('FOTOGRAFIAS', pdf4_body);
                 dbms_lob.open(bf, dbms_lob.file_readonly);
                 dbms_lob.loadBlobFromFile(p4, bf, dbms_lob.lobmaxsize, dest_offset, src_offset);
                 dbms_lob.close(bf);
                 dest_offset := 1;
                 src_offset := 1;
              end if;
              EXCEPTION WHEN dup_val_on_index THEN
                   NULL;
              END;
           --Estamos perante informação do E-VISA com documentos e sem fotografia
           elsif foto_body is null and (pdf_body is not null or pdf2_body is not null or pdf3_body is not null or pdf4_body is not null) and fingers_body is null then
              if xml_body is not null then
                 shell ('copy ' || v_end_recep || '\' || xml_body || ' ' ||  'd:\fotos\tratadas');
              end if;
              if pdf_body is not null then
                 shell ('copy ' || v_end_recep || '\' || pdf_body || ' ' ||  'd:\fotos\tratadas');
              end if;
              if pdf2_body is not null then
                 shell ('copy ' || v_end_recep || '\' || pdf2_body || ' ' ||  'd:\fotos\tratadas');
              end if;
              if pdf3_body is not null then
                 shell ('copy ' || v_end_recep || '\' || pdf3_body || ' ' ||  'd:\fotos\tratadas');
              end if;
              if pdf4_body is not null then
                 shell ('copy ' || v_end_recep || '\' || pdf4_body || ' ' ||  'd:\fotos\tratadas');
              end if;
              begin
              if TRUNC(MONTHS_BETWEEN(sysdate,to_date(v_dat_nasc,'yyyy/mm/dd') ))/12 < 12 then
                 v_tipo_rec := 1;
              else
                 v_tipo_rec := 3;
              end if;
              insert into biometria_info(NUM_RECIBO,NOME,
              APELIDO,DAT_NASC,SEXO,COD_NAC,NUM_DOC_VIAGEM,USADO,
              TIPO,COD_ART,CRI_DAT,FOTO,CRI_UTI,PDF_FILE,PDF_FILE2,PDF_FILE3,PDF_FILE4)
              values(v_NUM_RECIBO, v_NOME,
              v_APELIDO,v_DAT_NASC,v_SEXO,v_COD_NAC,v_NUM_DOC_VIAGEM,'N',
              v_tipo_rec,'31',TRUNC(SYSDATE),null,USER,empty_blob(),empty_blob(),empty_blob(),empty_blob()) returning foto,pdf_file, pdf_file2, pdf_file3, pdf_file4 into f,p,p2,p3,p4;
              dest_offset := 1;
              src_offset := 1;
              if pdf_body is not null then
                 dest_offset := 1;
                 src_offset := 1;
                 bf := bfilename('FOTOGRAFIAS', pdf_body);
                 dbms_lob.open(bf, dbms_lob.file_readonly);
                 dbms_lob.loadBlobFromFile(p, bf, dbms_lob.lobmaxsize, dest_offset, src_offset);
                 dbms_lob.close(bf);
                 dest_offset := 1;
                 src_offset := 1;
              end if;
              if pdf2_body is not null then
                 dest_offset := 1;
                 src_offset := 1;
                 bf := bfilename('FOTOGRAFIAS', pdf2_body);
                 dbms_lob.open(bf, dbms_lob.file_readonly);
                 dbms_lob.loadBlobFromFile(p2, bf, dbms_lob.lobmaxsize, dest_offset, src_offset);
                 dbms_lob.close(bf);
                 dest_offset := 1;
                 src_offset := 1;
              end if;
              if pdf3_body is not null then
                 dest_offset := 1;
                 src_offset := 1;
                 bf := bfilename('FOTOGRAFIAS', pdf3_body);
                 dbms_lob.open(bf, dbms_lob.file_readonly);
                 dbms_lob.loadBlobFromFile(p3, bf, dbms_lob.lobmaxsize, dest_offset, src_offset);
                 dbms_lob.close(bf);
                 dest_offset := 1;
                 src_offset := 1;
              end if;
              if pdf4_body is not null then
                 dest_offset := 1;
                 src_offset := 1;
                 bf := bfilename('FOTOGRAFIAS', pdf4_body);
                 dbms_lob.open(bf, dbms_lob.file_readonly);
                 dbms_lob.loadBlobFromFile(p4, bf, dbms_lob.lobmaxsize, dest_offset, src_offset);
                 dbms_lob.close(bf);
                 dest_offset := 1;
                 src_offset := 1;
              end if;
              EXCEPTION WHEN dup_val_on_index THEN
                   NULL;
              END;
           elsif foto_body is not null and fingers_body is null then
              shell ('copy ' || v_end_recep || '\' || foto_body || ' ' ||  'd:\fotos\tratadas');
              if xml_body is not null then
                 shell ('copy ' || v_end_recep || '\' || xml_body || ' ' ||  'd:\fotos\tratadas');
              end if;
              if pdf_body is not null then
                 shell ('copy ' || v_end_recep || '\' || pdf_body || ' ' ||  'd:\fotos\tratadas');
              end if;
              if pdf2_body is not null then
                 shell ('copy ' || v_end_recep || '\' || pdf2_body || ' ' ||  'd:\fotos\tratadas');
              end if;
              if pdf3_body is not null then
                 shell ('copy ' || v_end_recep || '\' || pdf3_body || ' ' ||  'd:\fotos\tratadas');
              end if;
              if pdf4_body is not null then
                 shell ('copy ' || v_end_recep || '\' || pdf4_body || ' ' ||  'd:\fotos\tratadas');
              end if;
              begin
              if TRUNC(MONTHS_BETWEEN(sysdate,to_date(v_dat_nasc,'yyyy/mm/dd') ))/12 < 12 then
                 v_tipo_rec := 1;
              else
                 v_tipo_rec := 3;
              end if;
              insert into biometria_info(NUM_RECIBO,NOME,
              APELIDO,DAT_NASC,SEXO,COD_NAC,NUM_DOC_VIAGEM,USADO,
              TIPO,COD_ART,CRI_DAT,FOTO,CRI_UTI,PDF_FILE,PDF_FILE2,PDF_FILE3,PDF_FILE4)
              values(v_NUM_RECIBO, v_NOME,
              v_APELIDO,v_DAT_NASC,v_SEXO,v_COD_NAC,v_NUM_DOC_VIAGEM,'N',
              v_tipo_rec,'31',TRUNC(SYSDATE),empty_blob(),USER,empty_blob(),empty_blob(),empty_blob(),empty_blob()) returning foto,pdf_file, pdf_file2, pdf_file3, pdf_file4 into f,p,p2,p3,p4;
              dest_offset := 1;
              src_offset := 1;
              bf := bfilename('FOTOGRAFIAS', foto_body);
              dbms_lob.open(bf, dbms_lob.file_readonly);
              dbms_lob.loadBlobFromFile(f, bf, dbms_lob.lobmaxsize, dest_offset, src_offset);
              dbms_lob.close(bf);
              dest_offset := 1;
              src_offset := 1;
              if pdf_body is not null then
                 dest_offset := 1;
                 src_offset := 1;
                 bf := bfilename('FOTOGRAFIAS', pdf_body);
                 dbms_lob.open(bf, dbms_lob.file_readonly);
                 dbms_lob.loadBlobFromFile(p, bf, dbms_lob.lobmaxsize, dest_offset, src_offset);
                 dbms_lob.close(bf);
                 dest_offset := 1;
                 src_offset := 1;
              end if;
              if pdf2_body is not null then
                 dest_offset := 1;
                 src_offset := 1;
                 bf := bfilename('FOTOGRAFIAS', pdf2_body);
                 dbms_lob.open(bf, dbms_lob.file_readonly);
                 dbms_lob.loadBlobFromFile(p2, bf, dbms_lob.lobmaxsize, dest_offset, src_offset);
                 dbms_lob.close(bf);
                 dest_offset := 1;
                 src_offset := 1;
              end if;
              if pdf3_body is not null then
                 dest_offset := 1;
                 src_offset := 1;
                 bf := bfilename('FOTOGRAFIAS', pdf3_body);
                 dbms_lob.open(bf, dbms_lob.file_readonly);
                 dbms_lob.loadBlobFromFile(p3, bf, dbms_lob.lobmaxsize, dest_offset, src_offset);
                 dbms_lob.close(bf);
                 dest_offset := 1;
                 src_offset := 1;
              end if;
              if pdf4_body is not null then
                 dest_offset := 1;
                 src_offset := 1;
                 bf := bfilename('FOTOGRAFIAS', pdf4_body);
                 dbms_lob.open(bf, dbms_lob.file_readonly);
                 dbms_lob.loadBlobFromFile(p4, bf, dbms_lob.lobmaxsize, dest_offset, src_offset);
                 dbms_lob.close(bf);
                 dest_offset := 1;
                 src_offset := 1;
              end if;
              EXCEPTION WHEN dup_val_on_index THEN
                   NULL;
              END;
           end if;
           if xml_body is not null then
                select seq_vismail.nextval into v_id from dual;
                load_a_file(v_id,xml_body);
                update temp_read_vismail
                set theclob = replace(theclob,chr(10),'') where id = v_id;
                commit;
                update temp_read_vismail
                set theclob = replace(theclob,chr(13),'') where id = v_id;
                commit;
                select theclob into msg_resp from temp_read_vismail where id = v_id;
                vismail.TratarRecepcao(msg_resp,v_tipo,v_id);
           end if;
           end if;
           shell ('move ' || v_end_recep || '\' || fich_header || ' ' || v_end_recep || '\Backup');
           commit;
        end if;
        exception when no_data_found then
			            exit;
        end;
    end loop;
    utl_file.fclose(id);
    shell('del ' || v_end_recep || '\teste.txt') ;
end loop;
close c1;
commit;
end;
PROCEDURE Integra_Deliverys IS

--v_end_recep        posto.end_recep%type;
id 			           UTL_FILE.FILE_TYPE;
id_hdr             UTL_FILE.FILE_TYPE;
filedata 		       varchar2(1000);
filedata_header    varchar2(1000);
fich_header        varchar2(50);
v_status           varchar2(50);
v_msgid            temp_reps.envia_msgid%type;
--v_reason           temp_reps.reason%type;
v_data_env         temp_reps.data_env%type;

begin
    shell('DIR ' || taref.busca_param_glo1(80,null) || '\*.hdr > ' || taref.busca_param_glo1(80,null) || '\teste_delivery.txt');
    id := UTL_FILE.FOPEN(taref.busca_param_glo1(80,null), 'teste_delivery.txt', 'r',32767);
    loop
        begin
        UTL_FILE.GET_LINE(id,filedata);
        if substr(filedata,length(filedata) - 2) = 'hdr' then
           --fich_header := substr(filedata,40);
           fich_header := substr(filedata,instr(filedata,'NXC'));
           id_hdr := UTL_FILE.FOPEN(taref.busca_param_glo1(80,null), fich_header, 'r',32767);
           loop
               begin
               UTL_FILE.GET_LINE(id_hdr,filedata_header);
               if upper(substr(filedata_header,1,8)) = 'SUBJECT=' then
                  v_msgid := substr(filedata_header,instr(filedata_header,'-') + 1);
               end if;

               if upper(substr(filedata_header,41,15)) = 'THE MESSAGE WAS' then
                  v_data_env := substr(filedata_header,1,19);
                  if instr(filedata_header,'RECEIVED') > 0 then
                      v_status := 'RECEIVED';
                  else
                      if instr(filedata_header,'ERROR') > 0 then
                         v_status := 'ERROR';
                      else
                         v_status := 'NADA';
                      end if;
                  end if;
               end if;
               exception when no_data_found then
			              exit;
               end;
           end loop;
           utl_file.fclose(id_hdr);
           if v_status = 'RECEIVED' then
                  --Foi recebida pelo posto
                 insert into temp_reps (post_scheng,envia_msgid,delivery,data_reg,recip,data_env,reason)
                 values('P',v_msgid,'DELIVERY',to_char(sysdate,'yyyy-mm-dd hh24:mi:ss'),null,v_data_env,null);
                 shell ('del ' || taref.busca_param_glo1(80,null) || '\' || fich_header);
           elsif v_status = 'WAITING' then
                 --Foi enviada para a mailbox
                 shell ('del ' || taref.busca_param_glo1(80,null) || '\' || fich_header);
           elsif v_status = 'ERROR' then
                 --Tem que reenviar a mensagem
                 insert into temp_reps (post_scheng,envia_msgid,delivery,data_reg,recip,data_env,reason)
                 values('P',v_msgid,'NON-DELIVERY',to_char(sysdate,'yyyy-mm-dd hh24:mi:ss'),null,null,null);
                 shell ('del ' || taref.busca_param_glo1(80,null) || '\' || fich_header);
           elsif v_status = 'NADA' then
                 null;
           end if;
        end if;
        exception when no_data_found then
			            exit;
        end;
    end loop;
    utl_file.fclose(id);
    shell('del ' || taref.busca_param_glo1(80,null) || '\teste_delivery.txt') ;
commit;
end;
PROCEDURE Activa_Diario IS
v_job	varchar2(1);
begin
     begin
     select /*+ RULE */ distinct 's' into v_job from dba_jobs_running r, dba_jobs j
     where r.job = j.job and j.what <> 'jobs_pk.Activa_Diario;';
     exception when no_data_found then
	             v_job := 'n';
     end;
     if v_job = 'n' then
     --Activa Netixclient 1 vez por dia
     --Verifica se estamos perante um posto com certificado se sim abre
     shell('del d:\rpv\comm\netixclient\log\*.* /q');
     if taref.busca_param_glo1(78,null) is not null then
        shell(taref.busca_param_glo1(78,null));
     end if;
     if taref.busca_param_glo1(81,null) = 'S' then
        shell('d:\rpv\comm\netixclient\NetIXClient.exe /cnx');
     end if;
     jobs_pk.Integra_Fich;
     --Verifica se estamos perante um posto com certificado se sim fecha
     if taref.busca_param_glo1(79,null) is not null then
        shell(taref.busca_param_glo1(79,null));
     end if;
     jobs_pk.integra_deliverys;
    end if;
end;

-- Analisa se houve um ERROR no log criado
PROCEDURE Analisa_result (result_return out number) IS
  fileHandler UTL_FILE.FILE_TYPE;
  l_text      VARCHAR2(32767);
BEGIN
  result_return := 0;
  fileHandler := UTL_FILE.FOPEN('d:\rpv\comm\netixclient\log', to_char(sysdate,'yyyymmdd') || '_NXC.log', 'r');
  --UTL_FILE.PUTF(fileHandler, 'This is the first Line. \nThis is the second line.');
  BEGIN
    LOOP
      UTL_FILE.get_line(fileHandler, l_text);
      if instr(l_text,'ERROR') > 0 then
		    result_return := 1;
        exit;
	    end if;
    END LOOP;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      NULL;
    WHEN OTHERS THEN
      result_return := 2;
  END;

  UTL_FILE.FCLOSE(fileHandler);
END;
PROCEDURE Altera_Password (utilizador in varchar2, passw in varchar2) is
begin
shell('sqlplusw rpv/rpv @d:\rpv\oracle\scripts\altpass.sql rpv rpv admin ui');
--execute immediate ('alter user ' || utilizador || ' identified by ' || passw);
end;
PROCEDURE READ_PDF(P_NOME_FICH IN VARCHAR2, PDFNUM IN NUMBER) IS
DEST BLOB;
V_ANEXO_ID ANEXOS.ANEXO_ID%TYPE;
BEGIN
begin
SELECT FICH , ANEXO_ID
INTO DEST, V_ANEXO_ID
FROM ANEXOS
WHERE NOME_FICH = P_NOME_FICH;
exception when no_data_found then
      if pdfnum = 1 then
         select 3, pdf_file into V_ANEXO_ID, DEST
         from biometria_info
         where num_recibo = to_number(P_NOME_FICH);
      elsif pdfnum = 2 then
         select 3, pdf_file2 into V_ANEXO_ID, DEST
         from biometria_info
         where num_recibo = to_number(P_NOME_FICH);
      elsif pdfnum = 3 then
         select 3, pdf_file3 into V_ANEXO_ID, DEST
         from biometria_info
         where num_recibo = to_number(P_NOME_FICH);
      elsif pdfnum = 4 then
         select 3, pdf_file4 into V_ANEXO_ID, DEST
         from biometria_info
         where num_recibo = to_number(P_NOME_FICH);
      elsif pdfnum = 9 then
         select 3, msgattach_fich into V_ANEXO_ID, DEST
         from trec_vismail_attachgroup
         where id_trec = to_number(P_NOME_FICH);
      end if;
end;
IF V_ANEXO_ID = 3 THEN
   OWA_UTIL.MIME_HEADER('APPLICATION/PDF',FALSE);
   HTP.P('CONTENT-LENGTH: '||DBMS_LOB.GETLENGTH(DEST));
   OWA_UTIL.HTTP_HEADER_CLOSE;
   WPG_DOCLOAD.DOWNLOAD_FILE(DEST);
ELSIF V_ANEXO_ID = 2 THEN
   OWA_UTIL.MIME_HEADER('IMAGE/JPEG',FALSE);
   HTP.P('CONTENT-LENGTH: '||DBMS_LOB.GETLENGTH(DEST));
   OWA_UTIL.HTTP_HEADER_CLOSE;
   WPG_DOCLOAD.DOWNLOAD_FILE(DEST);
ELSIF V_ANEXO_ID = 4 THEN
   OWA_UTIL.MIME_HEADER('IMAGE/TIFF',FALSE);
   HTP.P('CONTENT-LENGTH: '||DBMS_LOB.GETLENGTH(DEST));
   OWA_UTIL.HTTP_HEADER_CLOSE;
   WPG_DOCLOAD.DOWNLOAD_FILE(DEST);
END IF;
END;
PROCEDURE Evolui_Audiencia_Previa is
cursor c1 is
select ano_form, num_form
from form_ap
where dat_lim_resp is not null and estado = 'P' and
trunc(sysdate) > trunc(dat_lim_resp);
v_ano_form          form_ap.ano_form%type;
v_num_form          form_ap.num_form%type;
x                   number;
begin
open c1;
loop
     fetch c1 into v_ano_form, v_num_form;
     exit when c1%notfound;
     update form_ap
     set estado = 'X'
     where ano_form = v_ano_form and num_form = v_num_form;
     update formulario
     set cod_pare = '8', aud_previa = 'X'
     where ano_form = v_ano_form and num_form = v_num_form;
     x := tarefa_master.evolui_estado(v_ano_form, v_num_form);
     commit;
end loop;
close c1;
commit;
end;
END;
/

prompt
prompt Creating package body PK_MAIL
prompt =============================
prompt
create or replace package body rpv.pk_mail as
-->> Servidor de Mail
--g_servidor varchar2(80) := 'mail.dgaccp.pt';
g_servidor varchar2(80) := '192.168.158.252';
---------------------------------------------------------------------
-- FU_TOKEN
---------------------------------------------------------------------
function fu_token(str varchar2,sep varchar2,i number) return varchar2 is
  str2 varchar2(32000):=sep||str||sep;
  x  number(5);
  y  number(5);
begin
  x:=instr(str2,sep,1,i)+1;
  y:=instr(str2,sep,1,i+1);
  return(rtrim(ltrim(substr(str2,x,y-x))));
exception
  when others then return(null);
end fu_token;
----------------------------------------------------------------------------
-- FU_SEND_MAIL
-- Função que envia mails para varios endereços com separador ,
----------------------------------------------------------------------------
function fu_send_mail (p_dest in varchar2,
                       p_assunto in varchar2,
                       p_msg in varchar2,
                       p_from in varchar2
                      ) return boolean is
   v_mail_conn utl_smtp.connection;
   v_nl        varchar2(2):=chr(13)||chr(10);
   n           number(2):=0;
   v_msg       varchar2(20000);
begin
    v_mail_conn := utl_smtp.open_connection(g_servidor, 25);
    utl_smtp.helo(v_mail_conn, g_servidor);
    if p_from = 'noreplyvistos@dgaccp.pt' then
       utl_smtp.mail(v_mail_conn, 'noreplyvistos@dgaccp.pt');
    else
       utl_smtp.mail(v_mail_conn, 'pedro.marques@dgaccp.pt');
    end if;
    -->> Processamento dos distinatarios
    n := length(p_dest)-length(replace(p_dest,',',null));
    if p_dest is not null then
       n := n + 1;
    end if;
    if n = 0 then
       return(false);
    end if;
    for i in 1..n
    loop
       utl_smtp.rcpt(v_mail_conn, fu_token(p_dest,',',i));
    end loop;
    -->> Mensagem
    if p_from = 'noreplyvistos@dgaccp.pt' then
      v_msg:= 'Date: ' || to_char(sysdate, 'dd Mon yy hh24:mi:ss')||v_nl||
            'From: '||'noreplyvistos@dgaccp.pt'||v_nl||
            'Subject: '||p_assunto||v_nl||
            'Mime-Version: 1.0'||v_nl||
            'To: '||p_dest||v_nl||p_msg;
    else
      v_msg:= 'Date: ' || to_char(sysdate, 'dd Mon yy hh24:mi:ss')||v_nl||
            'From: '||'pedro.marques@dgaccp.pt'||v_nl||
            'Subject: '||p_assunto||v_nl||
            'Mime-Version: 1.0'||v_nl||
            'To: '||p_dest||v_nl||p_msg;
    end if;
    utl_smtp.data(v_mail_conn, v_msg);
    utl_smtp.quit(v_mail_conn);
    return(true);
exception
    when others then
         return(false);
end fu_send_mail;
function fu_send_mail_esp (p_dest in varchar2,
                       p_assunto in varchar2,
                       p_msg in varchar2,
                       p_from in varchar2
                      ) return boolean is
   v_mail_conn utl_smtp.connection;
   v_nl        varchar2(2):=chr(13)||chr(10);
   n           number(2):=0;
   v_msg       varchar2(20000);
begin
    v_mail_conn := utl_smtp.open_connection(g_servidor, 25);
    utl_smtp.helo(v_mail_conn, g_servidor);
    if p_from = 'noreplyvistos@dgaccp.pt' then
       utl_smtp.mail(v_mail_conn, 'noreplyvistos@dgaccp.pt');
    else
       utl_smtp.mail(v_mail_conn, 'pedro.marques@dgaccp.pt');
    end if;
    -->> Processamento dos distinatarios
    n := length(p_dest)-length(replace(p_dest,',',null));
    if p_dest is not null then
       n := n + 1;
    end if;
    if n = 0 then
       return(false);
    end if;
    for i in 1..n
    loop
       utl_smtp.rcpt(v_mail_conn, fu_token(p_dest,',',i));
    end loop;
    -->> Mensagem
    if p_from = 'noreplyvistos@dgaccp.pt' then
      v_msg:= 'Date: ' || to_char(sysdate, 'dd Mon yy hh24:mi:ss')||v_nl||
            'From: '||'noreplyvistos@dgaccp.pt'||v_nl||
            'Subject: '||p_assunto||v_nl||
            'Mime-Version: 1.0'||v_nl||
            'To: '||p_dest||v_nl||p_msg;
    else
      v_msg:= 'Date: ' || to_char(sysdate, 'dd Mon yy hh24:mi:ss')||v_nl||
            'From: '||'pedro.marques@dgaccp.pt'||v_nl||
            'Subject: '||p_assunto||v_nl||
            'Mime-Version: 1.0'||v_nl||
            'To: '||p_dest||v_nl||p_msg;
    end if;
    utl_smtp.write_data(v_mail_conn, v_msg);
    utl_smtp.quit(v_mail_conn);
    return(true);
exception
    when others then
         return(false);
end fu_send_mail_esp;
FUNCTION testMail(
 pivcFromName  IN VARCHAR2,
 pivcFromEmail IN VARCHAR2,
 pivcToName    IN VARCHAR2,
 pivcToEmail   IN VARCHAR2,
 cc_recipient  IN VARCHAR2,
 bcc_recipient IN VARCHAR2,
 pivcSubject   IN VARCHAR2,
 pivcBody      IN VARCHAR2) return number
IS
   objConnection              utl_smtp.connection;
   vrData                     RAW(32767);
   pivcMailIp                 varchar2(100);
   pinPort                    number(2);
   pivcToEmail_temp           varchar2(100);
   cc_recipient_temp          varchar2(100);
   bcc_recipient_temp         varchar2(100);
BEGIN
  --pivcMailIp := 'mail.dgaccp.pt';
  pivcMailIp := '192.168.158.252';
  pinPort := 25;

  objConnection := UTL_smtp.open_connection(pivcMailIp,pinPort);

  UTL_smtp.ehlo(objConnection, pivcMailIp);

  UTL_smtp.mail(objConnection, pivcFromEmail);

  if instr(pivcToEmail,',') = 0 then
     UTL_smtp.rcpt(objConnection, pivcToEmail);
  else
     pivcToEmail_temp := pivcToEmail;
     while instr(pivcToEmail_temp,',') <> 0 loop
           UTL_smtp.rcpt(objConnection, substr(pivcToEmail_temp,1,instr(pivcToEmail_temp,',') - 1));
           pivcToEmail_temp := substr(pivcToEmail_temp,instr(pivcToEmail_temp,',') + 1);
     end loop;
     UTL_smtp.rcpt(objConnection, pivcToEmail_temp);
  end if;

  if cc_recipient is not null then
     if instr(cc_recipient,',') = 0 then
        UTL_smtp.rcpt(objConnection, cc_recipient);
     else
        cc_recipient_temp := cc_recipient;
        while instr(cc_recipient_temp,',') <> 0 loop
              UTL_smtp.rcpt(objConnection, substr(cc_recipient_temp,1,instr(cc_recipient_temp,',') - 1));
              cc_recipient_temp := substr(cc_recipient_temp,instr(cc_recipient_temp,',') + 1);
        end loop;
        UTL_smtp.rcpt(objConnection, cc_recipient_temp);
     end if;
  end if;

  if bcc_recipient is not null then
     if instr(bcc_recipient,',') = 0 then
        UTL_smtp.rcpt(objConnection, bcc_recipient);
     else
        bcc_recipient_temp := bcc_recipient;
        while instr(bcc_recipient_temp,',') <> 0 loop
              UTL_smtp.rcpt(objConnection, substr(bcc_recipient_temp,1,instr(bcc_recipient_temp,',') - 1));
              bcc_recipient_temp := substr(bcc_recipient_temp,instr(bcc_recipient_temp,',') + 1);
        end loop;
        UTL_smtp.rcpt(objConnection, bcc_recipient_temp);
     end if;
  end if;

  UTL_smtp.open_data(objConnection);

  /*
  ** Sending the header information
  */
  UTL_smtp.write_data(objConnection, 'From: ' || '"' || pivcFromName || '" <' || pivcFromEmail ||'>' || UTL_tcp.CRLF);
  UTL_smtp.write_data(objConnection, 'To: ' || '"' || pivcToName || '" <' || pivcToEmail ||'>' || UTL_tcp.CRLF);
  if cc_recipient is not null then
     UTL_smtp.write_data(objConnection, 'Cc: ' || '<' || cc_recipient ||'>' || UTL_tcp.CRLF);
  end if;
  if bcc_recipient is not null then
     UTL_smtp.write_data(objConnection, 'Bcc: ' || '<' || bcc_recipient ||'>' || UTL_tcp.CRLF);
  end if;
  --UTL_smtp.write_data(objConnection, 'Subject: ' || pivcSubject || UTL_tcp.CRLF);
  UTL_smtp.write_raw_data(objConnection, utl_raw.cast_to_raw('Subject: ' || pivcSubject || UTL_tcp.CRLF));
  UTL_smtp.write_data(objConnection, 'MIME-Version: ' || '1.0' || UTL_tcp.CRLF);
  UTL_smtp.write_data(objConnection, 'Content-Type: ' || 'text/plain' || UTL_tcp.CRLF);
  UTL_smtp.write_data(objConnection, 'Content-Transfer-Encoding: ' || '8bit' || UTL_tcp.CRLF);

  /*
  ** End of header information
  */
  UTL_smtp.write_data(objConnection, UTL_tcp.CRLF);

  /*
  ** Actual body is sent here
  */
  vrData := utl_raw.cast_to_raw(pivcbody);
  UTL_smtp.write_raw_data(objConnection, vrData);

  /*
  ** Connection is closed here
  */
  UTL_smtp.close_data(objConnection);
  UTL_smtp.quit(objConnection);
  return(0);
EXCEPTION
  WHEN UTL_smtp.transient_error OR UTL_smtp.permanent_error THEN
    UTL_smtp.quit(objConnection);
    dbms_output.put_line(sqlerrm);
    return(1);
  WHEN OTHERS THEN
    UTL_smtp.quit(objConnection);
    dbms_output.put_line(sqlerrm);
    return(1);
END testMail;
end pk_mail;
/

prompt
prompt Creating package body PRORROG
prompt =============================
prompt
CREATE OR REPLACE PACKAGE BODY RPV.PRORROG AS
FUNCTION EXISTE_PRORR_SUP(ano_form1 IN NUMBER,num_form1 IN NUMBER,
			  Old_Dat_Lim DATE ,New_Dat_Lim IN DATE,
			  Cod_Pais1 IN VARCHAR2, Cod_Ser1 IN VARCHAR2,
			  Num_Dias OUT NUMBER )
	RETURN number IS
--
-- FunÃ§Ã£o que verifica se existe jÃ¡ prorrogaÃ§Ãµes com datas superiores
--
--	Retorna 99: se o NÂº de dias a prorrogar no formulario for ZERO
--		1 : se existiram erros (EXCEPTION).
--		0 : se existem dias para prorrogar
--
	wdat_lim_resp formulario.dat_lim_resp%TYPE;
--
	wdat_max date;
	wdata1 integer;
	wdata2 integer;
	wdif_datas NUMBER;
	wparam_fixo NUMBER(5);
--
BEGIN
	WParam_Fixo := To_Number(Taref.Busca_Param_Glo1(27, null)) ;
	BEGIN
		SELECT MAX(dat_lim_resp)
		INTO wdat_lim_resp
		from formulario
			WHERE ano_form = ano_form1
			AND num_form = num_form1;
	END;
--
	If wdat_lim_resp is null then
	  wdif_datas := New_Dat_Lim - Old_Dat_Lim;
	  Num_Dias := wdif_datas;
	  Return(99) ;
	End if ;
	wdat_max := GREATEST(wdat_lim_resp, Old_Dat_Lim);
	wdif_datas := New_Dat_Lim - wdat_max;
-------	wdata1 := TO_NUMBER(TO_CHAR(New_Dat_Lim,'J'));
-------	wdata2 := TO_NUMBER(TO_CHAR(wdat_max,'J'));
-------	wdif_datas := wdata1 - wdata2;
	if wdif_datas < 0 THEN
		wdif_datas := 0;
	else
		If wdif_datas < WParam_Fixo then
			WDif_Datas := WParam_Fixo ;
		End if ;
		begin
			update formulario
			  set dat_lim_resp = wdat_max
				WHERE ano_form = ano_form1
				AND num_form = num_form1;
		end;
	end if;
	wdif_datas := New_Dat_Lim - Old_Dat_Lim;
	Num_Dias := wdif_datas;
	IF wdif_datas > 0 THEN
		RETURN(0);
	ELSE
		RETURN(99);
	END IF;
END;
FUNCTION SCH_PEDE_PRORR1(Ref_Form_B1 IN VARCHAR2,Ord_Form_B1 IN NUMBER, Num_Fich_Recep IN INTEGER )
	RETURN NUMBER
IS
--	Faz a primeira parte: actualizaÃ§Ã£o Ã  tabela FORM_SCH, o resto Ã©
--  feito na actualizaÃ§Ã£o (AFTER UPDATE on FORM_SCH).
--
--	Ã¿ despoletado AFTER INSERT on FORM_B, em que COD_PAIS_SCH estÃ¡
--  preenchido, COD_PARE not in (Taref.Busca_Param_Glo1(9),
--  Taref.Busca_Param_Glo1(10)) e dir_comm = 'R'.
--
--	Verifica se existe um pedido de prorrogaÃ§Ã£o do mesmo paÃ­s e do mesmo
--  formulÃ¡rio em FORM_B em que o nÃºmero de dias da prorrogaÃ§Ã£o seja superior ou
--  igual ao nÃºmero de dias pedido. Se tal acontecer, NÃ¿O actualiza o
--  FORM_SCH - DAT_LIM_RESP e DAT_PRORR.
--
--	Insere ainda uma linha na tabela PRORROGA_SCH (em todos os casos)
--
--	Retorna 0: se correu tudo bem (actualizou FORM_SCH).
--		1: se existiram erros (EXCEPTION).
--		99: se nÃ£o tem que actualizar nada.
--
	CURSOR c_formb1 IS
		SELECT * from form_b
		  WHERE ref_form_b LIKE ref_form_b1
		    AND ord_form_b = ord_form_b1;
--		    AND dir_comm = 'R';
	w_formb1 form_b%ROWTYPE;
--
	CURSOR c_formsch IS
		SELECT * from form_sch
		   WHERE ano_form = w_formb1.ano_form_sch
		     AND num_form = w_formb1.num_form_sch
		     AND cod_pais = w_formb1.cod_pais_sch;
	w_formsch form_sch%ROWTYPE;
--
	CURSOR c_envio IS
		SELECT * from envio
		   WHERE formsch_ano_form = w_formb1.ano_form_sch
		     AND formsch_num_form = w_formb1.num_form_sch
		     AND formsch_cod_pais = w_formb1.cod_pais_sch;
	w_envio envio%ROWTYPE;
--
	CURSOR c_temp_rec IS
		SELECT * from temp_rec
		  WHERE num_fich = Num_Fich_Recep;
	w_temp_rec temp_rec%ROWTYPE;
	wcontador 	integer;
	wdias 		integer;
	wdata_ant 	date;
	wnova_data 	date;
	wdias_ant 	integer;
	wdata1 		integer;
	wdata2 		integer;
	wactualiza 	varchar2(1) := 'S';
--
BEGIN
	OPEN c_formb1;
	FETCH c_formb1 into w_formb1;
	IF c_formb1%NOTFOUND then
		CLOSE c_formb1;
		RETURN(1);
	END IF;
	CLOSE c_formb1;
--
	OPEN c_formsch;
	FETCH c_formsch INTO w_formsch;
	IF c_formsch%NOTFOUND then
		CLOSE c_formsch;
		RETURN(1);
	END IF;
	CLOSE c_formsch;
--
	OPEN c_envio;
	FETCH c_envio into w_envio;
	IF c_envio%NOTFOUND then
		CLOSE c_envio;
		RETURN(1);
	END IF;
	CLOSE c_envio;
--
	OPEN c_temp_rec;
	FETCH c_temp_rec into w_temp_rec;
	IF c_temp_rec%NOTFOUND then
		CLOSE c_temp_rec;
		RETURN(1);
	END IF;
	CLOSE c_temp_rec;
--
---> PRAZO DE PRORROGAÃ¿Ã¿O (em dias)
---> se praz_sup Ã© NULL entÃ£o o nÂº de dias (fixo) estÃ¡ no parÃ¢metro global (27)
--
	wdata_ant := NVL(w_envio.dat_dr, w_envio.dat_envio);
--
	if w_formb1.praz_sup is null then
		wdias := TO_NUMBER(taref.busca_param_glo1(27, null));
	else
		wdias := w_formb1.praz_sup;
	end if;
--
---> ActualizaÃ§Ã£o de FORM_SCH
--
	wnova_data := TO_DATE(TO_CHAR(TO_NUMBER(TO_CHAR(w_formsch.dat_lim_resp,'J')) + wdias),'J');
	wdata1 := TO_NUMBER(TO_CHAR(w_formsch.dat_lim_resp,'J')) + wdias;
	wdata2 := TO_NUMBER(TO_CHAR(wdata_ant,'J'));
	if (wdata1 - wdata2 > taref.busca_param_glo1(17, null)) then
		wactualiza := 'N';
	end if;
--
	if wactualiza = 'S' then
	   begin
	      UPDATE form_sch
	      SET dat_lim_resp = wnova_data,
		  dat_prorr    = to_date(substr(w_temp_rec.submission_time, 1, 6), 'rrmmdd')
	      WHERE ano_form = w_formb1.ano_form_sch
	      AND   num_form = w_formb1.num_form_sch
	      AND   cod_pais = w_formb1.cod_pais_sch;
	   exception when others THEN RETURN(1);
	   end;
	end if;
--
---> Tratamento de PRORROGA_SCH porque nÃ£o existe erros
--
	begin
		SELECT NVL(MAX(ord_prorr_sch), 0) into wcontador
		  FROM prorroga_sch
		  WHERE ano_form = w_formb1.ano_form_sch
		    AND num_form = w_formb1.num_form_sch
		    AND cod_pais = w_formb1.cod_pais_sch;
	end;
        wcontador := NVL(wcontador, 0) + 1;
	begin
	   insert into PRORROGA_SCH (
		ano_form,
		num_form,
		cod_pais,
		ord_prorr_sch,
		dat_prorr,
		cod_prorr )
	   values (
		w_formb1.ano_form_sch,
		w_formb1.num_form_sch,
		w_formb1.cod_pais_sch,
		wcontador,
		wnova_data,
		w_formb1.cod_pare
	   );
	end;
--
	if wactualiza = 'N' then
		RETURN(99);
	else
		RETURN(0);
	end if;
END;
FUNCTION SCH_PEDE_PRORR2(Ano_Form1 IN NUMBER, Num_Form1 IN NUMBER,
		         Pais_Sch1 IN VARCHAR2, Old_Dat_Lim IN DATE, New_Dat_Lim IN DATE )
	RETURN NUMBER
IS
--	Despoletado AFTER UPDATE on FORM_SCH. DAT_LIM_RESP.
--	Segundo trigger de prorrogaÃ§Ã£o de Schengen.
--	Envia para o posto um pedido de prorrogaÃ§Ã£o (insere em FORM_B, nÃ£o
--  preenche cod_pais_sch em FORM_B), caso o posto ainda nÃ£o tenha nenhum
--  pedido de prorrogaÃ§Ã£o com um nÃºmero de dias superior ou igual.
--
--	Retorna 0: se correu tudo bem (actualizou FORM_B).
--		1: se existiram erros (EXCEPTION).
--		99: se nÃ£o tem que actualizar nada.
--
	CURSOR c_form IS
		SELECT * FROM formulario
			WHERE ano_form = ano_form1
			  AND num_form = num_form1;
	w_form formulario%ROWTYPE;
--
	wret integer;
	wref_form_b varchar2(19);
	wcontador number(7);
	wnum_dias number(2);
	wref varchar2(12);
	WParam_Fixo NUMBER;
	wparecer PARAM_GLO.VAL_PARA%TYPE;
--
BEGIN
	OPEN c_form;
	FETCH c_form INTO w_form;
	IF c_form%NOTFOUND then
		CLOSE c_form;
		RETURN(1);
	END IF;
	CLOSE c_form;
	IF w_form.reapr = 'S' THEN
		RETURN(99);
	END IF;
--
	wret := FUNCOES.EXISTE_PARECER (ano_form1, num_form1, w_form.reapr);
	IF wret = 99 THEN
		RETURN(99);
	ELSIF wret = 1 THEN
		RETURN(1);
	ELSE -- wret = 0
		NULL;
	END IF;
--
	wret := EXISTE_PRORR_SUP(ano_form1, num_form1, Old_Dat_Lim, New_Dat_Lim,
				 Pais_Sch1, NULL, wnum_dias);
	IF wret != 0 THEN
		RETURN(wret);
	END IF;
	wref := TAREF.BUSCA_PARAM_GLO1(1, null)||'P'||TO_CHAR(SYSDATE,'YYYYMMDD');
	SELECT count(*) INTO wcontador
		FROM form_b
		WHERE SUBSTR(ref_form_b,1,12) = wref
		  AND ord_form_b = 1;
	wcontador := wcontador + 1;
	wref_form_b := wref||TO_CHAR(wcontador,'FM0000009');
	WParam_Fixo := To_Number(TAREF.BUSCA_PARAM_GLO1(27, null));
	If WNum_Dias <= WParam_Fixo Then
	   WParecer := taref.busca_param_glo1(26, null); /* Parecer de 7 dias */
	   WNum_Dias := NULL;
	  else
	   WParecer := taref.busca_param_glo1(28, null); /* Parecer variavel */
	End if ;
	BEGIN
 	  INSERT INTO form_b (
		ref_form_b,
		ord_form_b,
		dat_resp,
		praz_sup,
		cod_pare,
		ano_form,
		num_form,
		cri_dat,
		cri_uti,
		dir_comm )
	   VALUES (
		wref_form_b,
		1,
		sysdate,
		wnum_dias,
		WParecer,
		ano_form1,
		num_form1,
		to_char(sysdate,'YYYY/MM/DD HH24:MI:SS'),
		user,
		'E' );
	  EXCEPTION WHEN OTHERS THEN
		RETURN(1);
	END;
	RETURN(0);
END;
FUNCTION SER_PEDE_PRORR2(Ano_Form1 IN NUMBER, Num_Form1 IN NUMBER,
		         Cod_Ser1 IN VARCHAR2, Old_Dat_Lim IN DATE, New_Dat_Lim IN DATE )
	RETURN NUMBER
IS
--	Despoletado AFTER UPDATE on FORM_SER.DAT_LIM_RESP.
--	Ã¿nico trigger de prorrogaÃ§Ã£o dos ServiÃ§os.
--	Envia para o posto um pedido de prorrogaÃ§Ã£o (insere em FORM_B, nÃ£o
--  preenche cod_pais_sch em FORM_B), caso o posto ainda nÃ£o tenha nenhum
--  pedido de prorrogaÃ§Ã£o com um nÃºmero de dias superior ou igual.
--
--	Retorna 0: se correu tudo bem (actualizou FORM_B).
--		1: se existiram erros (EXCEPTION).
--		99: se nÃ£o tem que actualizar nada.
--
	CURSOR c_form IS
		SELECT * FROM formulario
			WHERE ano_form = ano_form1
			  AND num_form = num_form1;
	w_form formulario%ROWTYPE;
--
	wret integer;
	wref_form_b varchar2(19);
	wcontador number(7);
	wnum_dias number(2);
	wref varchar2(12);
	WParam_Fixo NUMBER;
	wparecer PARAM_GLO.VAL_PARA%TYPE;
--
BEGIN
	OPEN c_form;
	FETCH c_form INTO w_form;
	IF c_form%NOTFOUND then
		CLOSE c_form;
		RETURN(1);
	END IF;
	CLOSE c_form;
	IF w_form.reapr = 'S' THEN
		RETURN(99);
	END IF;
--
	wret := FUNCOES.EXISTE_PARECER (ano_form1, num_form1, w_form.reapr);
	IF wret = 99 THEN
		RETURN(99);
	ELSIF wret = 1 THEN
		RETURN(1);
	ELSE -- wret = 0
		NULL;
	END IF;
--
/*
	wret := EXISTE_PRORR_SUP(ano_form1, num_form1, Old_Dat_Lim, New_Dat_Lim,
				 NULL, Cod_Ser1, wnum_dias);
	IF NVL(wret, 0) != 0 THEN
		RETURN(wret);
	END IF;
*/
	wref := TAREF.BUSCA_PARAM_GLO1(1, null)||'P'||TO_CHAR(SYSDATE,'YYYYMMDD');
	SELECT count(*) INTO wcontador
		FROM form_b
		WHERE SUBSTR(ref_form_b,1,12) = wref
		  AND ord_form_b = 1;
	wcontador := wcontador + 1;
	wref_form_b := wref||TO_CHAR(wcontador,'FM0000009');
	WParam_Fixo := To_Number(TAREF.BUSCA_PARAM_GLO1(27, null)); /* nÂº dias para prorrogaÃ§Ãµes fixo */
	If WNum_Dias <= WParam_Fixo Then
	   WParecer := taref.busca_param_glo1(26, null); /* ProrrogaÃ§Ãµes fixas */
	   WNum_Dias := NULL;
	  else
	   WParecer := taref.busca_param_glo1(28, null); /* ProrrogaÃ§Ãµes variaveis */
	End if ;
	BEGIN
 	  INSERT INTO form_b (
		ref_form_b,
		ord_form_b,
		dat_resp,
		praz_sup,
		cod_pare,
		ano_form,
		num_form,
		cri_dat,
		cri_uti,
		dir_comm )
	   VALUES (
		wref_form_b,
		1,
		sysdate,
		wnum_dias,
		WParecer,
		ano_form1,
		num_form1,
		to_char(sysdate,'YYYY/MM/DD HH24:MI:SS'),
		user,
		'E' );
	  EXCEPTION WHEN OTHERS THEN
		RETURN(1);
	END;
	RETURN(0);
END;
END PRORROG;
/

prompt
prompt Creating package body RECEBER_PK
prompt ================================
prompt
CREATE OR REPLACE PACKAGE BODY RPV.RECEBER_PK AS
--
  FUNCTION num_form_seg return integer is
     wnum_seg integer;
  BEGIN
     begin
	select rpv.seq_formulario.nextval into wnum_seg
		from dual;
     end;
     return(wnum_seg);
  END;
--
  FUNCTION ord_formb_seg (wref varchar) return integer IS
    wnum_seg integer;
  BEGIN
     begin
       select nvl(max(ord_form_b),0) into wnum_seg
		from form_b
		where ref_form_b = wref;
	exception when OTHERS then
		wnum_seg := 0;
     end;
     return(wnum_seg + 1);
  END;
--
  FUNCTION ord_forme_seg (wref varchar) return integer IS
    wnum_seg integer;
  BEGIN
     begin
       select nvl(max(ord_form_e),0) into wnum_seg
		from form_e
		where ref_form_e = wref;
	exception when OTHERS then
		wnum_seg := 0;
     end;
     return(wnum_seg + 1);
  END;
--
PROCEDURE insere_formulario(wnum_fich integer, wtipo varchar,
		      wano in out number, wnumero in out number,
		      wref varchar, existe_form in out boolean)IS
wf		formulario%ROWTYPE;
wref_ped_envio 	varchar2(19);
wmax_time	integer;
wsub_time	varchar2(14);
aj_wsub_time	varchar2(14);
cursor	Ja_Existe is
	select ano_form, num_form
	from formulario
	where	cod_pais_sch_ref = wf.cod_pais_sch_ref and
		ref_form_2 = wf.ref_form_2 and
		ref_form_3 = wf.ref_form_3 FOR UPDATE OF cod_pare_pos;
waj_ano_form 	number;
waj_num_form 	number;
werro 		number;
werro_aj	number;
BEGIN
	existe_form := FALSE;
	wf.ano_form := wano;
	wf.num_form := wnumero;
	wf.tip_form := wtipo;
	if wtipo != 'P' then
		wref_ped_envio := receber_pk.trata_item(wnum_fich,wtipo,'ENVIO.REF_PED_ENVIO',1);
	else
		wref_ped_envio := wref;
	end if;
	wf.ref_form_2 := substr(wref_ped_envio,4,14);
	wf.ref_form_3 := substr(wref_ped_envio,18,2);
	wf.apel := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.APEL',1);
	wf.apel_outr := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.APEL_OUTR',1);
	wf.nome := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.NOME',1);
	wf.sexo := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.SEXO',1);
	wf.dat_nasc := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.DAT_NASC',1);
	if wf.dat_nasc is not null then
		wf.dat_nasc := 	substr(wf.dat_nasc,1,4)||'/'||substr(wf.dat_nasc,5,2)||'/'||
				substr(wf.dat_nasc,7,2);
	end if;
	wf.loc_nasc := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.LOC_NASC',1);
	wf.apel_conj := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.APEL_CONJ',1);
	wf.apel_conj_sol := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.APEL_CONJ_SOL',1);
	wf.nome_conj := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.NOME_CONJ',1);
	wf.dat_nasc_conj := NVL(receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.DAT_NASC_CONJ',1),'00000000');
	wf.dat_nasc_conj := substr(wf.dat_nasc_conj,1,4)||'/'||substr(wf.dat_nasc_conj,5,2)||'/'||substr(wf.dat_nasc_conj,7,2);


	wf.nat_conj :=receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.NAT_CONJ',1);
	wf.filia := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.FILIA',1);
	wf.num_doc_viag := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.NUM_DOC_VIAG',1);
	wf.dest_prin := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.DEST_PRIN',1);
	wf.fron_1_ent := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.FRON_1_ENT',1);
	wf.nome_refer_1 := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.NOME_REFER_1',1);
	wf.nome_refer_2 := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.NOME_REFER_2',2);
	wf.num_ent := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.NUM_ENT',1);
	wf.dat_ent := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.DAT_ENT',1);
	if wf.dat_ent is not null then
		wf.dat_ent := 	substr(wf.dat_ent,1,4)||'/'||substr(wf.dat_ent,5,2)||'/'||
				substr(wf.dat_ent,7,2);
	end if;
	wf.dat_sai := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.DAT_SAI',1);
	if wf.dat_sai is not null then
		wf.dat_sai := 	substr(wf.dat_sai,1,4)||'/'||substr(wf.dat_sai,5,2)||'/'||
				substr(wf.dat_sai,7,2);
	end if;
	wf.dat_ped := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.DAT_PED',1);
	if wf.dat_ped is not null then
		wf.dat_ped := substr(wf.dat_ped,1,4)||'/'||substr(wf.dat_ped,5,2)||'/'||substr(wf.dat_ped,7,2);
	else
		wf.dat_ped := '0000/00/00';
	end if;
	wf.dat_ped_sch := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.DAT_PED_SCH',1);
	if wf.dat_ped_sch is not null then
		wf.dat_ped_sch := substr(wf.dat_ped_sch,1,4)||'/'||substr(wf.dat_ped_sch,5,2)||'/'||
				  substr(wf.dat_ped_sch,7,2);
	end if;
	wf.reapr := NVL(receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.REAPR',1),'N');
	wf.dur_esta := TO_NUMBER(receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.DUR_ESTA',1),'999');
	wf.cod_pais_sch_repres := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.COD_PAIS_SCH_REPRES',1);
	if wf.cod_pais_sch_repres is null then
		wf.repres := 'N';
	else
		wf.repres := 'S';
	end if;
	begin
	   select substr(submission_time,1,12) into wsub_time
	   from temp_rec
	   where num_fich = wnum_fich;
	wsub_time := substr(wsub_time,1,6);
	exception when others then
	wsub_time := to_Char(sysdate,'RRMMDD');
	end;
	wf.dat_ini_praz := to_date(wsub_time,'RRMMDD');
	if wtipo = 'A' then
		wf.dat_lim_resp := wf.dat_ini_praz + TO_NUMBER(taref.busca_param_glo1(5,NULL));
	else
		wf.dat_lim_resp := null;
	end if;
--
	wf.mod_in := NVL(receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.MOD_IN',1),'A');
	if funcoes.eh_posto then
		wf.form_reg := 'E';
	else
		wf.form_reg := 'R';
	end if;
	wf.tip_urg := NVL(receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.TIP_URG',1),'3');
	wf.cod_pare := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.COD_PARE',1);
	wf.obs_pare_aut := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.OBS_PARE_AUT',1);
	wf.cod_pos := TO_NUMBER(receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.COD_POS',1),'9999');
	wf.cod_prof := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.COD_PROF',1);
	wf.cod_doc := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.COD_DOC',1);
	wf.cod_esta_1 := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.COD_ESTA_1',1);
	wf.cod_esta_2 := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.COD_ESTA_2',2);
	wf.cod_esta_3 := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.COD_ESTA_3',3);
	wf.tip_vis_ped := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.TIP_VIS_PED',1);
	if wtipo = 'A' then
		wf.tip_vis_conced :=
			receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.TIP_VIS_PED',1);
		werro := REGRAS.FN_REGRAS(wnum_Fich,'2',wtipo,26, 1,
			NULL, wf.tip_vis_conced, werro_aj);
	else
		wf.tip_vis_conced :=
			receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.TIP_VIS_CONCED',1);
	end if;
	wf.cod_pare_pos := TO_NUMBER(receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.COD_PARE_POS',1),'9');
  --wf.parecer_sef := TO_NUMBER(receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.PARECER_SEF',1),'9');
  wf.cod_pais_nac_orig := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.COD_PAIS_NAC_ORIG',1);
	wf.cod_pais_nac_1 := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.COD_PAIS_NAC_1',1);
	wf.cod_pais_nac_2 :=receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.COD_PAIS_NAC_2',2);
	wf.cod_pais_nac_3 :=receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.COD_PAIS_NAC_3',3);
	wf.cod_pais_emi_doc := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.COD_PAIS_EMI_DOC',1);
	wf.cod_pais_sch_ref := substr(wref_ped_envio,1,3);
	wf.cod_pais_sch_dest_prin := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.COD_PAIS_SCH_DEST_PRIN',1);
	wf.cri_dat := to_char(sysdate,'YYYY/MM/DD HH24:MI:SS');
	wf.cri_uti := user;
	wf.apel_ue := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.APEL_UE',1);
	wf.nome_ue := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.NOME_UE',1);
	wf.parentesco_ue := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.PARENTESCO_UE',1);
	wf.passaporte_ue := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.PASSAPORTE_UE',1);
	wf.cod_pais_nac_ue := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.COD_PAIS_NAC_UE',1);
	wf.dat_nasc_ue := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.DAT_NASC_UE',1);
	if wf.dat_nasc_ue is not null then
		wf.dat_nasc_ue := 	substr(wf.dat_nasc_ue,1,4)||'/'||substr(wf.dat_nasc_ue,5,2)||'/'||
				substr(wf.dat_nasc_ue,7,2);
	end if;
	if receber_pk.trata_item(wnum_fich,wtipo,'@FORM_DOC.COD_DOC',1) is null then
		if FUNCOES.EH_POSTO then
			wf.chegaram_docs := NULL;
		else
			wf.chegaram_docs := 'S';
		end if;
	else
		if FUNCOES.EH_POSTO then
			wf.chegaram_docs := NULL;
		else
			wf.chegaram_docs := 'N';
		end if;
	end if;
	wf.entregou_docs := 'S';
	wf.autoriz_expr := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.AUTORIZ_EXPR',1);
	wf.apel_tut := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.APEL_TUT',1);
  wf.nome_tut := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.NOME_TUT',1);
  wf.cod_pais_nac_tut := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.COD_PAIS_NAC_TUT',1);
  wf.endereco_tut := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.ENDERECO_TUT',1);
  wf.bio := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.BIO',1);
  wf.dat_bio := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.DAT_BIO',1);
  if wf.dat_bio is not null then
		wf.dat_bio := 	substr(wf.dat_bio,1,4)||'/'||substr(wf.dat_bio,5,2)||'/'||
				substr(wf.dat_bio,7,2);
	end if;
  wf.visto_3_anos := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.VISTO_3_ANOS',1);
  wf.nome_refer_3 := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.NOME_REFER_3',1);
  wf.dest_prin_2 := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.DEST_PRIN_2',1);
  wf.dest_prin_3 := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.DEST_PRIN_3',1);
  
  wf.email_req := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.EMAIL_REQ',1);
  wf.email_tut := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.EMAIL_TUT',1);
  wf.ult_num_vin := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.ULT_NUM_VIN',1);
  wf.telefone_tut := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.TELEFONE_TUT',1);
  wf.info_mot_esta := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO.INFO_MOT_ESTA',1);
  begin
		OPEN Ja_Existe;
		Fetch Ja_Existe into WAj_Ano_Form, WAj_Num_Form;
		if Ja_Existe%NOTFOUND then
			WAj_Ano_Form := Null;
			WAj_Num_Form := Null;
		end if ;
		If nvl(WAj_Ano_Form,0) = 0 then /* Ainda não existia */
		INSERT INTO formulario ( ano_form, num_form,
			tip_form, ref_form_2, ref_form_3,
			apel, apel_outr, nome, sexo, dat_nasc,
			loc_nasc, apel_conj, nome_conj, dat_nasc_conj,
			nat_conj, filia, num_doc_viag, dest_prin,
			fron_1_ent, nome_refer_1, nome_refer_2,
			num_ent, dat_ent, dat_sai, dur_esta,
			dat_ped, dat_ped_sch, reapr, repres,
			dat_ini_praz, dat_lim_resp, mod_in,
			form_reg, tip_urg, cod_pare, obs_pare_aut,
			cod_pos, cod_prof, cod_doc, cod_esta_1,
			cod_esta_2, cod_esta_3, tip_vis_ped,
			tip_vis_conced, cod_pare_pos, cod_pais_nac_orig,
			cod_pais_nac_1, cod_pais_nac_2, cod_pais_nac_3,
			cod_pais_emi_doc, cod_pais_sch_ref,
			cod_pais_sch_dest_prin,
			cod_pais_sch_repres,
			cri_dat, cri_uti, entregou_docs, chegaram_docs, autoriz_expr, apel_ue,
			parentesco_ue,nome_ue,cod_pais_nac_ue,passaporte_ue,dat_nasc_ue,apel_conj_sol,foto_associada,/*parecer_sef,*/
      apel_tut, nome_tut, cod_pais_nac_tut, endereco_tut, bio, dat_bio, visto_3_anos,
      nome_refer_3, dest_prin_2, dest_prin_3, email_req, email_tut, ult_num_vin, telefone_tut, info_mot_esta)
		VALUES (
			wf.ano_form, wf.num_form, wf.tip_form,
			wf.ref_form_2, wf.ref_form_3,
			wf.apel, wf.apel_outr, wf.nome, wf.sexo,
			wf.dat_nasc, wf.loc_nasc, wf.apel_conj,
			wf.nome_conj, wf.dat_nasc_conj, wf.nat_conj,
			wf.filia, wf.num_doc_viag, wf.dest_prin,
			wf.fron_1_ent,
			wf.nome_refer_1,
			wf.nome_refer_2,
			wf.num_ent,
			wf.dat_ent,
			wf.dat_sai,
			wf.dur_esta, wf.dat_ped,
			wf.dat_ped_sch, wf.reapr,
			wf.repres, wf.dat_ini_praz,
			wf.dat_lim_resp, wf.mod_in,
			wf.form_reg, wf.tip_urg,
			wf.cod_pare, wf.obs_pare_aut,
			wf.cod_pos, wf.cod_prof,
			wf.cod_doc, wf.cod_esta_1,
			wf.cod_esta_2, wf.cod_esta_3,
			wf.tip_vis_ped, wf.tip_vis_conced,
			wf.cod_pare_pos, wf.cod_pais_nac_orig,
			wf.cod_pais_nac_1, wf.cod_pais_nac_2, wf.cod_pais_nac_3,
			wf.cod_pais_emi_doc, wf.cod_pais_sch_ref,
			wf.cod_pais_sch_dest_prin,
			wf.cod_pais_sch_repres,
			wf.cri_dat, wf.cri_uti, wf.entregou_docs,
			wf.chegaram_docs, wf.autoriz_expr, wf.apel_ue,
			wf.parentesco_ue,wf.nome_ue,wf.cod_pais_nac_ue,wf.passaporte_ue,wf.dat_nasc_ue,wf.apel_conj_sol,'N',/*wf.parecer_sef,*/
      wf.apel_tut, wf.nome_tut, wf.cod_pais_nac_tut, wf.endereco_tut, wf.bio, wf.dat_bio, wf.visto_3_anos,
      wf.nome_refer_3, wf.dest_prin_2, wf.dest_prin_3, wf.email_req, wf.email_tut, wf.ult_num_vin, wf.telefone_tut, wf.info_mot_esta);
		ELSE /* Ja existia o formulario - caso de um pedido C após um A */
			existe_form := TRUE;
			If Wf.Tip_Form IN ('C', 'P') then  /* só altera se for um C ou P */
				update formulario
				set	tip_form = wf.tip_form,
					apel = wf.apel,
					apel_outr = wf.apel_outr,
					nome = wf.nome,
					sexo = wf.sexo,
					dat_nasc = wf.dat_nasc,
					loc_nasc = wf.loc_nasc,
					apel_conj = wf.apel_conj,
					nome_conj = wf.nome_conj,
					dat_nasc_conj = wf.dat_nasc_conj,
					nat_conj = wf.nat_conj,
					filia = wf.filia,
					num_doc_viag = wf.num_doc_viag,
					dest_prin = wf.dest_prin,
					fron_1_ent = wf.fron_1_ent,
					nome_refer_1 = wf.nome_refer_1,
					nome_refer_2 = wf.nome_refer_2,
					num_ent = wf.num_ent,
					dat_ent = wf.dat_ent,
					dat_sai = wf.dat_sai,
					dur_esta = wf.dur_esta,
					dat_ped = wf.dat_ped,
					dat_ped_sch = wf.dat_ped_sch,
					reapr = wf.reapr,
					repres = wf.repres,
					dat_ini_praz = wf.dat_ini_praz,
					dat_lim_resp = wf.dat_lim_resp,
					mod_in = wf.mod_in,
					form_reg = wf.form_reg,
					tip_urg = wf.tip_urg,
					cod_pare = wf.cod_pare,
					obs_pare_aut = wf.obs_pare_aut,
					cod_pos = wf.cod_pos,
					cod_prof = wf.cod_prof,
					cod_doc = wf.cod_doc,
					cod_esta_1 = wf.cod_esta_1,
					cod_esta_2 = wf.cod_esta_2,
					cod_esta_3 = wf.cod_esta_3,
					tip_vis_ped = wf.tip_vis_ped,
					tip_vis_conced = wf.tip_vis_conced,
					cod_pare_pos = wf.cod_pare_pos,
					cod_pais_nac_orig = wf.cod_pais_nac_orig,
					cod_pais_nac_1 = wf.cod_pais_nac_1,
					cod_pais_nac_2 = wf.cod_pais_nac_2,
					cod_pais_nac_3 = wf.cod_pais_nac_3,
					cod_pais_emi_doc = wf.cod_pais_emi_doc,
					cod_pais_sch_dest_prin = cod_pais_sch_dest_prin,
					cod_pais_sch_repres = wf.cod_pais_sch_repres,
					alt_dat = to_char(sysdate,'YYYY/MM/DD HH24:MI:SS'),
					alt_uti = user,
					entregou_docs = wf.entregou_docs,
					chegaram_docs = wf.chegaram_docs,
					autoriz_expr = wf.autoriz_expr,
          email_req = wf.email_req,
          email_tut = wf.email_tut,
          ult_num_vin = wf.ult_num_vin,
          telefone_tut = wf.telefone_tut,
          info_mot_esta = wf.info_mot_esta
          --parecer_sef = wf.parecer_sef
				Where	current of Ja_Existe;
				WAno := WAj_Ano_Form;
				WNumero := WAj_Num_Form;
			End if ; /* de se for Form C */
		End if ; /* de se for uma insercao */
		CLOSE Ja_Existe;
	end;
END;
--
PROCEDURE insere_formulario_legaliz(wnum_fich integer, wtipo varchar,
		      wano in out number, wnumero in out number,
		      wref varchar, existe_form in out boolean, docs out varchar)IS
wf		formulario%ROWTYPE;
wref_ped_envio 	varchar2(19);
wmax_time	integer;
wsub_time	varchar2(14);
aj_wsub_time	varchar2(14);
cursor	Ja_Existe is
	select ano_form, num_form
	from formulario
	where	num_proc = wf.num_proc FOR UPDATE OF cod_pare_pos;
waj_ano_form 	number;
waj_num_form 	number;
werro 		number;
werro_aj	number;
posto_actual	posto.cod_pos%type;
ano_mes_actual	varchar2(4);
ano_actual	varchar2(4);
ref_actual	contador_posto.num_form%type;
v_dur_est	t_visto.dur_est%type;
v_dur_est_temp	t_visto.dur_est_temp%type;
evol		number(2);
BEGIN
	existe_form := FALSE;
	wf.ano_form := wano;
	wf.num_form := wnumero;
	wf.tip_form := 'P';
	wref_ped_envio := wref;

	posto_actual := to_number(taref.Busca_Param_Glo1(3,null));
	select to_char(sysdate,'yymm') into ano_mes_actual from dual;
	select to_char(sysdate,'yyyy') into ano_actual from dual;
 	select nvl(max(num_form),0)+1 into ref_actual
        from contador_posto
        where cod_pos = to_number(taref.Busca_Param_Glo1(3,null)) and ano = to_number(ano_actual);

	wf.ref_form_2 := to_char(posto_actual) || ano_mes_actual || to_char(ref_actual,'FM000009');
	wf.ref_form_3 := substr(wref_ped_envio,18,2);

	wf.apel := receber_pk.trata_item(wnum_fich,wtipo,'LEGALIZACAO.APELIDO',1);
	wf.nome := receber_pk.trata_item(wnum_fich,wtipo,'LEGALIZACAO.NOME',1);
	wf.num_proc := receber_pk.trata_item(wnum_fich,wtipo,'LEGALIZACAO.NUM_PROC',1);
	wf.sexo := receber_pk.trata_item(wnum_fich,wtipo,'LEGALIZACAO.SEXO',1);
	wf.dat_nasc := receber_pk.trata_item(wnum_fich,wtipo,'LEGALIZACAO.DAT_NASC',1);
	if wf.dat_nasc is not null then
		wf.dat_nasc := 	substr(wf.dat_nasc,1,4)||'/'||substr(wf.dat_nasc,5,2)||'/'||
				substr(wf.dat_nasc,7,2);
	end if;
	wf.loc_nasc := receber_pk.trata_item(wnum_fich,wtipo,'LEGALIZACAO.LOC_NASC',1);

	wf.filia := receber_pk.trata_item(wnum_fich,wtipo,'LEGALIZACAO.FILIA',1);
	wf.num_doc_viag := receber_pk.trata_item(wnum_fich,wtipo,'LEGALIZACAO.NUM_DOC_VIAG',1);

	wf.dest_prin := receber_pk.trata_item(wnum_fich,wtipo,'LEGALIZACAO.COD_CONC',1);
	select des_conc into wf.dest_prin from concelho_sef
	where cod_conc = wf.dest_prin;

	wf.apel_conj := '+';
	wf.nome_conj := '+';
	wf.dat_nasc_conj := '+';
	wf.nat_conj := '+';

	wf.nome_refer_1 := receber_pk.trata_item(wnum_fich,wtipo,'LEGALIZACAO.DES_EMPR',1);

	select to_char(sysdate,'yyyy/mm/dd') into wf.dat_ped from dual;

	wf.reapr := 'N';

	wf.repres := 'N';

	begin
	   select substr(submission_time,1,12) into wsub_time
	   from temp_rec
	   where num_fich = wnum_fich;
	wsub_time := substr(wsub_time,1,6);
	exception when others then
	wsub_time := to_Char(sysdate,'RRMMDD');
	end;
	wf.dat_ini_praz := to_date(wsub_time,'RRMMDD');

	wf.dat_lim_resp := null;

--
	wf.mod_in := 'A';
	if funcoes.eh_posto then
		wf.form_reg := 'E';
	else
		wf.form_reg := 'R';
	end if;
	wf.tip_urg := '3';

	wf.cod_pos := to_number(taref.Busca_Param_Glo1(3,null));

	wf.cod_doc := receber_pk.trata_item(wnum_fich,wtipo,'LEGALIZACAO.COD_DOC',1);
	wf.cod_esta_1 := '92';

	if receber_pk.trata_item(wnum_fich,wtipo,'LEGALIZACAO.TIPO',1) = 'T' then
		wf.tip_vis_ped := 'T4';
		wf.cod_pare_pos := 1;
		wf.tip_vis_conced := wf.tip_vis_ped;
		wf.entregou_docs := 'S';
		docs := 'S';
		wf.cod_pare := '1';
		wf.cod_prof := '99';
		wf.obs_pare_aut := 'Parecer obtido automaticamente. Processo legalização TRABALHADOR.';
		wf.foto_associada := 'N';
	else
		wf.tip_vis_ped := 'T3';
		wf.cod_pare_pos := null;
		wf.tip_vis_conced := null;
		wf.entregou_docs := 'N';
		wf.cod_pare := null;
		wf.cod_prof := '08';
		docs := 'N';
		wf.foto_associada := 'N';
	end if;

	select num_ent into wf.num_ent from t_visto_entr
	where tip_vis = wf.tip_vis_ped and defau = 'S';


	wf.dat_ent := receber_pk.trata_item(wnum_fich,wtipo,'MARCACOES.DATA_MARCACAO',1);
	if wf.dat_ent = 'ANULA' then
		select dat_ent, dat_sai, dur_esta
		into wf.dat_ent, wf.dat_sai, wf.dur_esta
		from formulario
		where num_proc = wf.num_proc;

		wf.cod_pare_pos := 6;
		wf.data_marcacao := null;
	else
	        wf.data_marcacao := TO_DATE(receber_pk.trata_item(wnum_fich,wtipo,'MARCACOES.DATA_MARCACAO',1),'YYYYMMDD');
		if wf.dat_ent is not null then
			wf.dat_ent := 	substr(wf.dat_ent,1,4)||'/'||substr(wf.dat_ent,5,2)||'/'||
					substr(wf.dat_ent,7,2);
		end if;

		select dur_est, dur_est_temp into v_dur_est, v_dur_est_temp from t_visto
		where tip_vis = wf.tip_vis_ped;

		if v_dur_est_temp = 'M' then
			wf.dat_sai := to_char(add_months(to_date(wf.dat_ent,'yyyy/mm/dd')-1,v_dur_est),'yyyymmdd');
			wf.dat_sai := 	substr(wf.dat_sai,1,4)||'/'||substr(wf.dat_sai,5,2)||'/'||
					substr(wf.dat_sai,7,2);
			--wf.dur_esta := to_number(add_months(sysdate, v_dur_est) - sysdate);
			wf.dur_esta := v_dur_est * 30;
		elsif v_dur_est_temp = 'A' then
			wf.dat_sai := to_char(add_months(to_date(wf.dat_ent,'yyyy/mm/dd')-1,12 * v_dur_est),'yyyymmdd');
			wf.dat_sai := 	substr(wf.dat_sai,1,4)||'/'||substr(wf.dat_sai,5,2)||'/'||
					substr(wf.dat_sai,7,2);
			--wf.dur_esta := to_number(add_months(sysdate,12 * v_dur_est) - sysdate);
			wf.dur_esta := v_dur_est * 365;
		elsif v_dur_est_temp = 'D' then
			wf.dat_sai := to_char((to_date(wf.dat_ent,'yyyy/mm/dd') + v_dur_est - 1),'yyyymmdd');
			wf.dat_sai := 	substr(wf.dat_sai,1,4)||'/'||substr(wf.dat_sai,5,2)||'/'||
					substr(wf.dat_sai,7,2);
			wf.dur_esta := v_dur_est;
		end if;

	end if;

	wf.apel_conj_sol := '+';


	wf.cod_pais_nac_orig := receber_pk.trata_item(wnum_fich,wtipo,'LEGALIZACAO.COD_PAIS_NAC_1',1);
	wf.cod_pais_nac_1 := receber_pk.trata_item(wnum_fich,wtipo,'LEGALIZACAO.COD_PAIS_NAC_1',1);
	wf.cod_pais_emi_doc := receber_pk.trata_item(wnum_fich,wtipo,'LEGALIZACAO.COD_PAIS_EMI_DOC',1);
	wf.cod_pais_sch_ref := substr(wref_ped_envio,1,3);
	wf.cri_dat := to_char(sysdate,'YYYY/MM/DD HH24:MI:SS');
	wf.cri_uti := user;
--
	begin
		OPEN Ja_Existe;
		Fetch Ja_Existe into WAj_Ano_Form, WAj_Num_Form;
		if Ja_Existe%NOTFOUND then
			WAj_Ano_Form := Null;
			WAj_Num_Form := Null;
		end if ;
		If nvl(WAj_Ano_Form,0) = 0 then /* Ainda não existia */
		INSERT INTO formulario ( ano_form, num_form,
			tip_form, ref_form_2, ref_form_3,
			apel, apel_outr, nome, sexo, dat_nasc,
			loc_nasc, apel_conj, nome_conj, dat_nasc_conj,
			nat_conj, filia, num_doc_viag, dest_prin,
			fron_1_ent, nome_refer_1, nome_refer_2,
			num_ent, dat_ent, dat_sai, dur_esta,
			dat_ped, dat_ped_sch, reapr, repres,
			dat_ini_praz, dat_lim_resp, mod_in,
			form_reg, tip_urg, cod_pare, obs_pare_aut,
			cod_pos, cod_prof, cod_doc, cod_esta_1,
			cod_esta_2, cod_esta_3, tip_vis_ped,
			tip_vis_conced, cod_pare_pos, cod_pais_nac_orig,
			cod_pais_nac_1, cod_pais_nac_2, cod_pais_nac_3,
			cod_pais_emi_doc, cod_pais_sch_ref,
			cod_pais_sch_dest_prin,
			cod_pais_sch_repres,
			cri_dat, cri_uti, entregou_docs, chegaram_docs, autoriz_expr, apel_ue,
			parentesco_ue,nome_ue,cod_pais_nac_ue,passaporte_ue,dat_nasc_ue,apel_conj_sol, num_proc,data_marcacao,foto_associada)
		VALUES (
			wf.ano_form, wf.num_form, wf.tip_form,
			wf.ref_form_2, wf.ref_form_3,
			wf.apel, wf.apel_outr, wf.nome, wf.sexo,
			wf.dat_nasc, wf.loc_nasc, wf.apel_conj,
			wf.nome_conj, wf.dat_nasc_conj, wf.nat_conj,
			wf.filia, wf.num_doc_viag, wf.dest_prin,
			wf.fron_1_ent,
			wf.nome_refer_1,
			wf.nome_refer_2,
			wf.num_ent,
			wf.dat_ent,
			wf.dat_sai,
			wf.dur_esta, wf.dat_ped,
			wf.dat_ped_sch, wf.reapr,
			wf.repres, wf.dat_ini_praz,
			wf.dat_lim_resp, wf.mod_in,
			wf.form_reg, wf.tip_urg,
			wf.cod_pare, wf.obs_pare_aut,
			wf.cod_pos, wf.cod_prof,
			wf.cod_doc, wf.cod_esta_1,
			wf.cod_esta_2, wf.cod_esta_3,
			wf.tip_vis_ped, wf.tip_vis_conced,
			wf.cod_pare_pos, wf.cod_pais_nac_orig,
			wf.cod_pais_nac_1, wf.cod_pais_nac_2, wf.cod_pais_nac_3,
			wf.cod_pais_emi_doc, wf.cod_pais_sch_ref,
			wf.cod_pais_sch_dest_prin,
			wf.cod_pais_sch_repres,
			wf.cri_dat, wf.cri_uti, wf.entregou_docs,
			wf.chegaram_docs, wf.autoriz_expr, wf.apel_ue,
			wf.parentesco_ue,wf.nome_ue,wf.cod_pais_nac_ue,wf.passaporte_ue,wf.dat_nasc_ue,wf.apel_conj_sol,wf.num_proc,wf.data_marcacao,wf.foto_associada);
		ELSE /* Ja existia o formulario - caso de uma alteração */
			existe_form := TRUE;
			update formulario
				set	tip_form = wf.tip_form,
					apel = wf.apel,
					apel_outr = wf.apel_outr,
					nome = wf.nome,
					sexo = wf.sexo,
					dat_nasc = wf.dat_nasc,
					loc_nasc = wf.loc_nasc,
					apel_conj = wf.apel_conj,
					nome_conj = wf.nome_conj,
					dat_nasc_conj = wf.dat_nasc_conj,
					nat_conj = wf.nat_conj,
					filia = wf.filia,
					num_doc_viag = wf.num_doc_viag,
					dest_prin = wf.dest_prin,
					fron_1_ent = wf.fron_1_ent,
					nome_refer_1 = wf.nome_refer_1,
					nome_refer_2 = wf.nome_refer_2,
					num_ent = wf.num_ent,
					dat_ent = wf.dat_ent,
					dat_sai = wf.dat_sai,
					dur_esta = wf.dur_esta,
					dat_ped = wf.dat_ped,
					dat_ped_sch = wf.dat_ped_sch,
					reapr = wf.reapr,
					repres = wf.repres,
					dat_ini_praz = wf.dat_ini_praz,
					dat_lim_resp = wf.dat_lim_resp,
					mod_in = wf.mod_in,
					form_reg = wf.form_reg,
					tip_urg = wf.tip_urg,
					cod_pare = wf.cod_pare,
					obs_pare_aut = wf.obs_pare_aut,
					cod_pos = wf.cod_pos,
					cod_prof = wf.cod_prof,
					cod_doc = wf.cod_doc,
					cod_esta_1 = wf.cod_esta_1,
					cod_esta_2 = wf.cod_esta_2,
					cod_esta_3 = wf.cod_esta_3,
					tip_vis_ped = wf.tip_vis_ped,
					tip_vis_conced = wf.tip_vis_conced,
					cod_pare_pos = wf.cod_pare_pos,
					cod_pais_nac_orig = wf.cod_pais_nac_orig,
					cod_pais_nac_1 = wf.cod_pais_nac_1,
					cod_pais_nac_2 = wf.cod_pais_nac_2,
					cod_pais_nac_3 = wf.cod_pais_nac_3,
					cod_pais_emi_doc = wf.cod_pais_emi_doc,
					cod_pais_sch_dest_prin = cod_pais_sch_dest_prin,
					cod_pais_sch_repres = wf.cod_pais_sch_repres,
					alt_dat = to_char(sysdate,'YYYY/MM/DD HH24:MI:SS'),
					alt_uti = user,
					entregou_docs = wf.entregou_docs,
					chegaram_docs = wf.chegaram_docs,
					autoriz_expr = wf.autoriz_expr,
					data_marcacao = wf.data_marcacao
				Where	current of Ja_Existe;
				WAno := WAj_Ano_Form;
				WNumero := WAj_Num_Form;
				if wf.cod_pare_pos = taref.Busca_Param_Glo1(33,null) then
					evol:= Tarefa_master.Evolui_Estado(WAno, WNumero, 'M') ;
				end if;
		End if ; /* de se for uma insercao */
		CLOSE Ja_Existe;
	end;
END;
--
PROCEDURE insere_form_b(wnum_fich integer, wref varchar,word number,worig varchar)IS
	wb form_b%ROWTYPE;
	CURSOR c1 IS
		SELECT ano_form, num_form, dat_lim_resp, cod_pare_pos FROM formulario
			where ref_form_2 = substr(wref,4,14)
			  and ref_form_3 = substr(wref,18,2)
			  and cod_pais_sch_ref = substr(wref,1,3)
		FOR UPDATE OF cod_pare, dat_lim_resp;
	wnum_form 	formulario.num_form%type;
	wano_form 	formulario.ano_form%type;
	wdat_lim_resp 	formulario.dat_lim_resp%type;
  wcod_pare_pos   formulario.cod_pare_pos%type;
	wpare_conc	parecer.pare_conc%type;
        wret            number;
  BEGIN
	wb.dir_comm := 'R';
	wb.cod_pare := receber_pk.trata_item(wnum_fich,'B','FORM_B.COD_PARE',1);
	wb.obs := receber_pk.trata_item(wnum_fich,'B','FORM_B.OBS',1);
	wb.praz_sup := TO_NUMBER(receber_pk.trata_item(wnum_fich,'B','FORM_B.PRAZ_SUP',1),'99');
	wb.dat_resp := TO_DATE(receber_pk.trata_item(wnum_fich,'B','FORM_B.DAT_RESP',1),'YYYYMMDD');
  BEGIN
	select pare_conc into wpare_conc
	from parecer
	where cod_pare = wb.cod_pare;
	EXCEPTION when NO_DATA_FOUND then
		wpare_conc := 'N';
	END;
	OPEN c1;
	FETCH c1 into wano_form, wnum_form, wdat_lim_resp, wcod_pare_pos;
	IF c1%NOTFOUND THEN RAISE NO_DATA_FOUND;
	END IF;
  IF wpare_conc = 'N' then
			if wb.praz_sup is null then
				wdat_lim_resp := NVL(wdat_lim_resp, SYSDATE) + TAREF.busca_param_glo1(27, null);
			else
				wdat_lim_resp := NVL(wdat_lim_resp, SYSDATE) + wb.praz_sup;
			end if;
			UPDATE formulario
			SET dat_lim_resp = wdat_lim_resp
			WHERE CURRENT OF c1;
	ELSE
			if wb.cod_pare = Taref.Busca_Param_Glo1(10, null) and wb.obs = 'Este formulário não pode ser reapreciado' then
    		update formulario
		    set cod_pare = wb.cod_pare, reapr = 'X', obs_pare_aut = wb.obs --obs_pare_aut = decode(obs_pare_aut,null,null,obs_pare_aut || '--') || wb.obs
     		WHERE CURRENT OF c1;
			else
				UPDATE formulario
				SET cod_pare = wb.cod_pare, obs_pare_aut = wb.obs --obs_pare_aut = decode(obs_pare_aut,null,null,obs_pare_aut || '--') || wb.obs
				WHERE CURRENT OF c1;
			end if;
      if wb.cod_pare = Taref.Busca_Param_Glo1(76, null) and wcod_pare_pos = 1 then
         UPDATE formulario
				 SET aud_previa = 'N'
         where ano_form = wano_form and num_form = wnum_form
         and aud_previa is null;
				 --WHERE CURRENT OF c1;
      end if;
		END IF;
	CLOSE c1;
	if worig = 'S' then
		wb.ano_form := null;
		wb.num_form := null;
		wb.ano_form_sch := wano_form;
		wb.num_form_sch := wnum_form;
		wb.cod_pais_sch := substr(receber_pk.trata_item(wnum_fich,'B','FORM_B.REF_FORM_B',1),1,3);
	else
		wb.ano_form := wano_form;
		wb.num_form := wnum_form;
		wb.ano_form_sch := null;
		wb.num_form_sch := null;
		wb.cod_pais_sch := null;
	end if;
	INSERT INTO form_b (
	ref_form_b,
	ord_form_b,
	dat_resp,
	praz_sup,
	cod_pare,
	obs,
	ano_form,
	num_form,
	ano_form_sch,
	num_form_sch,
	cod_pais_sch,
	dir_comm,
	cri_dat,
	cri_uti	)
	VALUES (
	wref,
	word,
	wb.dat_resp,
	wb.praz_sup,
	wb.cod_pare,
	wb.obs,
	wb.ano_form,
	wb.num_form,
	wb.ano_form_sch,
	wb.num_form_sch,
	wb.cod_pais_sch,
	wb.dir_comm,
	to_char(sysdate,'YYYY/MM/DD HH24:MI:SS'),
	user);
  IF wpare_conc = 'N' then
--
---> Tratamento dos formulários B recebidos com pedido de prorrogação
--
	   wret := PRORROG.SCH_PEDE_PRORR1(wref, word, wnum_fich);
	   if wret = 1 THEN
		    RAISE NO_DATA_FOUND;
	      end if;
  END IF;
EXCEPTION
WHEN NO_DATA_FOUND THEN RETURN;
END;
--
  PROCEDURE insere_form_e(wnum_fich integer, wref varchar,word number)IS
	we form_e%ROWTYPE;
	CURSOR c1 IS
	SELECT ano_form, num_form FROM formulario
	WHERE  cod_pais_sch_ref||ref_form_2||ref_form_3 = wref;
	v_ano_form	formulario.ano_form%type;
	v_num_form	formulario.num_form%type;
  BEGIN
	OPEN c1;
	FETCH c1 INTO v_ano_form, v_num_form;
	CLOSE c1;
	we.tip_form := receber_pk.trata_item(wnum_fich,'E','FORM_E.TIP_FORM',1);
	we.cod_err := receber_pk.trata_item(wnum_fich,'E','FORM_E.COD_ERR',1);
	we.cod_err_sup := TO_NUMBER(receber_pk.trata_item(wnum_fich,'E','FORM_E.COD_ERR_SUP',1));
	we.cod_err_log := TO_NUMBER(receber_pk.trata_item(wnum_fich,'E','FORM_E.COD_ERR_LOG',1));
	INSERT INTO form_e
		(
		ref_form_e,
		ord_form_e,
		tip_form,
		cod_err,
		cod_err_sup,
		cod_err_log,
		cri_dat,
		cri_uti,
		ano_form,
		num_form
		)
	VALUES (
		wref,
		word,
		we.tip_form,
		we.cod_err,
		we.cod_err_sup,
		we.cod_err_log,
		sysdate,
		user,
		v_ano_form,
		v_num_form
		);
  END;
--
  FUNCTION trata_item(wnum_fich integer, wtipo varchar, witem varchar, word number)
		return varchar is
	i BINARY_INTEGER := 0;
	w_id id_campo_form%ROWTYPE;
	werro_sup number;
  BEGIN
	BEGIN
	    SELECT num_camp into w_id.num_camp
		FROM id_campo_form
		WHERE tip_form = wtipo
		AND nome_var = witem
		AND dir_comm = 'R';
	    exception when others then
		RETURN(NULL);
	END;
	BEGIN
	   FOR rec in ( SELECT conteudo from temp_rec_detalhe
			where recebe_num_fich = wnum_fich
			  and num_campo = w_id.num_camp) LOOP
		i := i + 1;
		if i = word then
--			return(REGRAS.FN_REGRAS(wnum_Fich,'2',wtipo,w_id.num_camp, word,
--				 NULL, rec.conteudo, werro_sup));
			return(rec.conteudo);
			exit;
		end if;
	   END LOOP;
	END;
	return(NULL);
  END;
--
  PROCEDURE insere_descendente(wnum_fich integer, wano_form number, wnum_form number) IS
	contador integer := 0;
	wdesc descendente%ROWTYPE;
  BEGIN
   LOOP
	contador := contador + 1;
	wdesc.ano_form := wano_form;
	wdesc.num_form := wnum_form;
	wdesc.num_desc := contador;
	wdesc.apel_desc := receber_pk.trata_item(wnum_fich,'P','@DESCENDENTE.APEL_DESC',contador);
	wdesc.nome_desc := receber_pk.trata_item(wnum_fich,'P','@DESCENDENTE.NOME_DESC',contador);
	wdesc.dat_nasc_desc := receber_pk.trata_item(wnum_fich,'P','@DESCENDENTE.DAT_NASC_DESC',contador);
	wdesc.dat_nasc_desc := substr(wdesc.dat_nasc_desc,1,4)||'/'||
			       substr(wdesc.dat_nasc_desc,5,2)||'/'||
			       substr(wdesc.dat_nasc_desc,7,2);
	wdesc.loc_nasc_desc := receber_pk.trata_item(wnum_fich,'P','@DESCENDENTE.LOC_NASC_DESC',contador);
	wdesc.cod_pais := receber_pk.trata_item(wnum_fich,'P','@DESCENDENTE.COD_PAIS',contador);
	IF wdesc.apel_desc is null or
	   wdesc.nome_desc is null or
	   wdesc.dat_nasc_desc is null THEN
	   /*wdesc.loc_nasc_desc is null or
	   wdesc.cod_pais is null THEN*/
		EXIT;
	END IF;
	INSERT INTO descendente (
		ano_form,
		num_form,
		num_desc,
		apel_desc,
		nome_desc,
		dat_nasc_desc,
		loc_nasc_desc,
		cod_pais )
	VALUES (
		wdesc.ano_form,
		wdesc.num_form,
		wdesc.num_desc,
		wdesc.apel_desc,
		wdesc.nome_desc,
		wdesc.dat_nasc_desc,
		wdesc.loc_nasc_desc,
		wdesc.cod_pais );
   END LOOP;
  END;
--
PROCEDURE insere_descendente_web(wnum_fich integer, wnum_form number) IS
	contador integer := 0;
	wdesc descendente_web%ROWTYPE;
  BEGIN
   LOOP
	contador := contador + 1;
	wdesc.num_form_web := wnum_form;
	wdesc.num_desc := contador;
	wdesc.apel_desc := receber_pk.trata_item(wnum_fich,'W','@DESCENDENTE_WEB.APEL_DESC',contador);
	wdesc.nome_desc := receber_pk.trata_item(wnum_fich,'W','@DESCENDENTE_WEB.NOME_DESC',contador);
	wdesc.dat_nasc_desc := receber_pk.trata_item(wnum_fich,'W','@DESCENDENTE_WEB.DAT_NASC_DESC',contador);
	wdesc.dat_nasc_desc := substr(wdesc.dat_nasc_desc,1,4)||'/'||
			       substr(wdesc.dat_nasc_desc,5,2)||'/'||
			       substr(wdesc.dat_nasc_desc,7,2);
	IF wdesc.apel_desc is null or
	   wdesc.nome_desc is null or
	   wdesc.dat_nasc_desc is null THEN
		 EXIT;
	END IF;
	INSERT INTO descendente_web (
		num_form_web,
		num_desc,
		apel_desc,
		nome_desc,
		dat_nasc_desc)
	VALUES (
		wdesc.num_form_web,
		wdesc.num_desc,
		wdesc.apel_desc,
		wdesc.nome_desc,
		wdesc.dat_nasc_desc);
   END LOOP;
  END;
--
  PROCEDURE insere_form_p(wnum_fich integer, wano_form number, wnum_form number) IS
	wform_p form_p%ROWTYPE;
  BEGIN
	wform_p.apel_nasc := receber_pk.trata_item(wnum_fich,'P','FORM_P.APEL_NASC',1);
	wform_p.est_civ := TO_NUMBER(receber_pk.trata_item(wnum_fich,'P','FORM_P.EST_CIV',1),'9');
	wform_p.dat_emi_doc := receber_pk.trata_item(wnum_fich,'P','FORM_P.DAT_EMI_DOC',1);
	wform_p.dat_emi_doc := substr(wform_p.dat_emi_doc,1,4)||'/'||
			       substr(wform_p.dat_emi_doc,5,2)||'/'||
			       substr(wform_p.dat_emi_doc,7,2);
	wform_p.loc_emi_doc := receber_pk.trata_item(wnum_fich,'P','FORM_P.LOC_EMI_DOC',1);
	wform_p.vali_doc_viag := TO_DATE(receber_pk.trata_item(wnum_fich,'P','FORM_P.VALI_DOC_VIAG',1),'YYYYMMDD');
	wform_p.ender_estad := receber_pk.trata_item(wnum_fich,'P','FORM_P.ENDER_ESTAD',1);
	wform_p.indef_ant := NVL(receber_pk.trata_item(wnum_fich,'P','FORM_P.INDEF_ANT',1),'N');
	wform_p.ped_retid := NVL(receber_pk.trata_item(wnum_fich,'P','FORM_P.PED_RETID',1),'N');
	wform_p.dat_sys := NVL(TO_DATE(receber_pk.trata_item(wnum_fich,'P','FORM_P.DAT_SYS',1),'YYYYMMDD'),sysdate);
	wform_p.ender_perma := receber_pk.trata_item(wnum_fich,'P','FORM_P.ENDER_PERMA',1);
	wform_p.ender_act := receber_pk.trata_item(wnum_fich,'P','FORM_P.ENDER_ACT',1);
	wform_p.tit_resid_num := receber_pk.trata_item(wnum_fich,'P','FORM_P.TIT_RESID_NUM',1);
	wform_p.tit_resid_vali := receber_pk.trata_item(wnum_fich,'P','FORM_P.TIT_RESID_VALI',1);
	if wform_p.tit_resid_vali is not null and wform_p.tit_resid_vali <> 'VITALICIO' then
		wform_p.tit_resid_vali := substr(wform_p.tit_resid_vali,1,4)||'/'||
					  substr(wform_p.tit_resid_vali,5,2)||'/'||
					  substr(wform_p.tit_resid_vali,7,2);
	end if;
        wform_p.vis_regre_num := receber_pk.trata_item(wnum_fich,'P','FORM_P.VIS_REGRE_NUM',1);
	wform_p.vis_regre_vali := TO_DATE(receber_pk.trata_item(wnum_fich,'P','FORM_P.VIS_REGRE_VALI',1),'YYYYMMDD');
	wform_p.ent_patr := receber_pk.trata_item(wnum_fich,'P','FORM_P.ENT_PATR',1);
	wform_p.ender_prof := receber_pk.trata_item(wnum_fich,'P','FORM_P.ENDER_PROF',1);
	wform_p.ender_refer_1 := receber_pk.trata_item(wnum_fich,'P','FORM_P.ENDER_REFER_1',1);
	wform_p.ender_refer_2 := receber_pk.trata_item(wnum_fich,'P','FORM_P.ENDER_REFER_2',2);
	wform_p.tip_aut := receber_pk.trata_item(wnum_fich,'P','FORM_P.TIP_AUT',1);
	wform_p.num_aut := receber_pk.trata_item(wnum_fich,'P','FORM_P.NUM_AUT',1);
	wform_p.vali_aut := TO_DATE(receber_pk.trata_item(wnum_fich,'P','FORM_P.VALI_AUT',1),'YYYYMMDD');
	wform_p.meio_subs := receber_pk.trata_item(wnum_fich,'P','FORM_P.MEIO_SUBS',1);
	wform_p.dat_sch_1 := TO_DATE(receber_pk.trata_item(wnum_fich,'P','FORM_P.DAT_SCH_1',1),'YYYYMMDD');
	wform_p.dat_sch_2 := TO_DATE(receber_pk.trata_item(wnum_fich,'P','FORM_P.DAT_SCH_2',2),'YYYYMMDD');
	wform_p.dat_sch_3 := TO_DATE(receber_pk.trata_item(wnum_fich,'P','FORM_P.DAT_SCH_3',3),'YYYYMMDD');
	wform_p.dat_loc_ped := receber_pk.trata_item(wnum_fich,'P','FORM_P.DAT_LOC_PED',1);
	wform_p.meio_trans := receber_pk.trata_item(wnum_fich,'P','FORM_P.MEIO_TRANS',1);
	wform_p.outr_indi := receber_pk.trata_item(wnum_fich,'P','FORM_P.OUTR_INDI',1);
	wform_p.cid_pos := receber_pk.trata_item(wnum_fich,'P','FORM_P.CID_POS',1);
	wform_p.doc_apr := receber_pk.trata_item(wnum_fich,'P','FORM_P.DOC_APR',1);
	wform_p.obs_pare_pos := receber_pk.trata_item(wnum_fich,'P','FORM_P.OBS_PARE_POS',1);
        wform_p.telefone := receber_pk.trata_item(wnum_fich,'P','FORM_P.TELEFONE',1);
	wform_p.email := receber_pk.trata_item(wnum_fich,'P','FORM_P.EMAIL',1);
	wform_p.financia := receber_pk.trata_item(wnum_fich,'P','FORM_P.FINANCIA',1);
	wform_p.telef_ref := receber_pk.trata_item(wnum_fich,'P','FORM_P.TELEF_REF',1);
	wform_p.num_ident := receber_pk.trata_item(wnum_fich,'P','FORM_P.NUM_IDENT',1);
	wform_p.num_form_pos := TO_NUMBER(receber_pk.trata_item(wnum_fich,'P','FORM_P.NUM_FORM_POS',1),'999999');
	wform_p.dat_prorr := TO_DATE(receber_pk.trata_item(wnum_fich,'P','FORM_P.DAT_PRORR',1),'YYYYMMDD');
	wform_p.ped_retid_obs := receber_pk.trata_item(wnum_fich,'P','FORM_P.PED_RETID_OBS',1);
	wform_p.cod_pais_conj := receber_pk.trata_item(wnum_fich,'P','FORM_P.COD_PAIS_CONJ',1);
	wform_p.cod_pais_emi_aut := receber_pk.trata_item(wnum_fich,'P','FORM_P.COD_PAIS_EMI_AUT',1);
	wform_p.cod_pais_nasc := receber_pk.trata_item(wnum_fich,'P','FORM_P.COD_PAIS_NASC',1);
	wform_p.cod_pais_dest := receber_pk.trata_item(wnum_fich,'P','FORM_P.COD_PAIS_DEST',1);
	wform_p.cod_pais_sch_ref_1 := receber_pk.trata_item(wnum_fich,'P','FORM_P.COD_PAIS_SCH_REF_1',1);
	wform_p.cod_pais_sch_ref_2 := receber_pk.trata_item(wnum_fich,'P','FORM_P.COD_PAIS_SCH_REF_2',2);
	wform_p.num_filho := TO_NUMBER(receber_pk.trata_item(wnum_fich,'P','FORM_P.NUM_FILHO',1),'99');
	wform_p.viag_conj := receber_pk.trata_item(wnum_fich,'P','FORM_P.VIAG_CONJ',1);
	wform_p.cod_ser_1 := receber_pk.trata_item(wnum_fich, 'P', 'FORM_P.COD_SER_1', 1);
	wform_p.cod_ser_2 := receber_pk.trata_item(wnum_fich, 'P', 'FORM_P.COD_SER_2', 2);
	wform_p.cod_ser_3 := receber_pk.trata_item(wnum_fich, 'P', 'FORM_P.COD_SER_3', 3);
	if wform_p.vali_aut is null then
		wform_p.aut_pais_dest := 'N';
	else
		wform_p.aut_pais_dest := 'S';
	end if;


	if wform_p.tit_resid_num is not null or
           wform_p.vis_regre_num is not null then
		wform_p.aut_regre := 'S';
	else
		wform_p.aut_regre := 'N';
	end if;
	wform_p.ped_normal := receber_pk.trata_item(wnum_fich, 'P', 'FORM_P.PED_NORMAL', 1);
	wform_p.cons_central := receber_pk.trata_item(wnum_fich, 'P', 'FORM_P.CONS_CENTRAL', 1);
	wform_p.cod_conc := receber_pk.trata_item(wnum_fich,'P','FORM_P.COD_CONC',1);
  wform_p.ender_estad_3 := receber_pk.trata_item(wnum_fich,'P','FORM_P.ENDER_ESTAD_3',1);
  wform_p.telef_ref_3 := receber_pk.trata_item(wnum_fich,'P','FORM_P.TELEF_REF_3',1);
  wform_p.email_3 := receber_pk.trata_item(wnum_fich,'P','FORM_P.EMAIL_3',1);
  wform_p.cod_conc_3 := receber_pk.trata_item(wnum_fich,'P','FORM_P.COD_CONC_3',1);
begin
	INSERT INTO form_p (
		ano_form,
		num_form,
		apel_nasc,
		est_civ,
		dat_emi_doc,
		loc_emi_doc,
		vali_doc_viag,
		ender_estad,
		indef_ant,
		ped_retid,
		dat_sys,
		ender_perma,
		ender_act,
		aut_regre,
		tit_resid_num,
		tit_resid_vali,
		vis_regre_num,
		vis_regre_vali,
		ent_patr,
		ender_prof,
		ender_refer_1,
		ender_refer_2,
		tip_aut,
		num_aut,
		vali_aut,
		meio_subs,
		dat_sch_1,
		dat_sch_2,
		dat_sch_3,
		dat_loc_ped,
		meio_trans,
		outr_indi,
		cid_pos,
		doc_apr,
		obs_pare_pos,
		num_form_pos,
		dat_prorr,
		ped_retid_obs,
		cod_pais_conj,
		cod_pais_emi_aut,
		cod_pais_nasc,
		cod_pais_dest,
		cod_pais_sch_ref_1,
		cod_pais_sch_ref_2,
		cri_dat,
		cri_uti,
		alt_dat,
		alt_uti,
		num_filho,
		viag_conj,
		aut_pais_dest,
		cod_ser_1, cod_ser_2, cod_ser_3, ped_normal, cons_central,telefone,email,telef_ref,num_ident,financia, cod_conc,
    ender_estad_3,
    telef_ref_3,
    email_3,
    cod_conc_3)
	VALUES (
		wano_form,
		wnum_form,
		wform_p.apel_nasc,
		wform_p.est_civ,
		wform_p.dat_emi_doc,
		wform_p.loc_emi_doc,
		wform_p.vali_doc_viag,
		wform_p.ender_estad,
		wform_p.indef_ant,
		wform_p.ped_retid,
		wform_p.dat_sys,
		wform_p.ender_perma,
		wform_p.ender_act,
		wform_p.aut_regre,
		wform_p.tit_resid_num,
		wform_p.tit_resid_vali,
		wform_p.vis_regre_num,
		wform_p.vis_regre_vali,
		wform_p.ent_patr,
		wform_p.ender_prof,
		wform_p.ender_refer_1,
		wform_p.ender_refer_2,
		wform_p.tip_aut,
		wform_p.num_aut,
		wform_p.vali_aut,
		wform_p.meio_subs,
		wform_p.dat_sch_1,
		wform_p.dat_sch_2,
		wform_p.dat_sch_3,
		wform_p.dat_loc_ped,
		wform_p.meio_trans,
		wform_p.outr_indi,
		wform_p.cid_pos,
		wform_p.doc_apr,
		wform_p.obs_pare_pos,
		wform_p.num_form_pos,
		wform_p.dat_prorr,
		wform_p.ped_retid_obs,
		wform_p.cod_pais_conj,
		wform_p.cod_pais_emi_aut,
		wform_p.cod_pais_nasc,
		wform_p.cod_pais_dest,
		wform_p.cod_pais_sch_ref_1,
		wform_p.cod_pais_sch_ref_2,
		to_char(sysdate,'YYYY/MM/DD HH24:MI:SS'),
		user,
		NULL,
		NULL,
		wform_p.num_filho,
		wform_p.viag_conj,
		wform_p.aut_pais_dest,
		wform_p.cod_ser_1, wform_p.cod_ser_2, wform_p.cod_ser_3, wform_p.ped_normal,
		wform_p.cons_central,wform_p.telefone,wform_p.email,wform_p.telef_ref,wform_p.num_ident,wform_p.financia,
		wform_p.cod_conc,
    wform_p.ender_estad_3,
    wform_p.telef_ref_3,
    wform_p.email_3,
    wform_p.cod_conc_3);
end;
  END;
--
PROCEDURE insere_meios_subsistencia_web(wnum_fich integer, wnum_form varchar2) IS
	contador integer := 0;
  wmeios_subsistencia_web meios_subsistencia_web%ROWTYPE;
  BEGIN
   LOOP
	contador := contador + 1;
  wmeios_subsistencia_web.num_form_web := wnum_form;
	wmeios_subsistencia_web.entidade := receber_pk.trata_item(wnum_fich,'W','@MEIOS_SUBSISTENCIA_WEB.ENTIDADE',contador);
  wmeios_subsistencia_web.meios := receber_pk.trata_item(wnum_fich,'W','@MEIOS_SUBSISTENCIA_WEB.MEIOS',contador);
  IF wmeios_subsistencia_web.entidade is null or
	   wmeios_subsistencia_web.meios is null THEN
		EXIT;
	END IF;


  INSERT INTO meios_subsistencia_web (
		num_form_web,
		entidade,
		meios)
	VALUES (
		wmeios_subsistencia_web.num_form_web,
		wmeios_subsistencia_web.entidade,
		wmeios_subsistencia_web.meios);
   END LOOP;
  END;
--
PROCEDURE insere_vistos_3_anos_web(wnum_fich integer, wnum_form varchar2) IS
	contador integer := 0;
  wvistos_3_anos_web vistos_3_anos_web%ROWTYPE;
  BEGIN
   LOOP
	contador := contador + 1;
  wvistos_3_anos_web.num_form_web := wnum_form;
	wvistos_3_anos_web.dat_vali_visto_ini := receber_pk.trata_item(wnum_fich,'W','@VISTOS_3_ANOS_WEB.DAT_VALI_VISTO_INI',contador);
  wvistos_3_anos_web.dat_vali_visto_ini := substr(wvistos_3_anos_web.dat_vali_visto_ini,1,4)||'/'||
			       substr(wvistos_3_anos_web.dat_vali_visto_ini,5,2)||'/'||
			       substr(wvistos_3_anos_web.dat_vali_visto_ini,7,2);
  wvistos_3_anos_web.dat_vali_visto_fim := receber_pk.trata_item(wnum_fich,'W','@VISTOS_3_ANOS_WEB.DAT_VALI_VISTO_FIM',contador);
  wvistos_3_anos_web.dat_vali_visto_fim := substr(wvistos_3_anos_web.dat_vali_visto_fim,1,4)||'/'||
			       substr(wvistos_3_anos_web.dat_vali_visto_fim,5,2)||'/'||
			       substr(wvistos_3_anos_web.dat_vali_visto_fim,7,2);
  wvistos_3_anos_web.num_visto := receber_pk.trata_item(wnum_fich,'W','@VISTOS_3_ANOS_WEB.NUM_VISTO',contador);
	IF wvistos_3_anos_web.dat_vali_visto_ini is null or
	   wvistos_3_anos_web.dat_vali_visto_fim is null or
	   wvistos_3_anos_web.num_visto is null THEN
		EXIT;
	END IF;
  INSERT INTO vistos_3_anos_web (
		num_form_web,
		dat_vali_visto_ini,
		dat_vali_visto_fim,
    num_visto)
	VALUES (
		wvistos_3_anos_web.num_form_web,
		wvistos_3_anos_web.dat_vali_visto_ini,
		wvistos_3_anos_web.dat_vali_visto_fim,
    wvistos_3_anos_web.num_visto);
   END LOOP;
  END;
--
PROCEDURE insere_formulario_web(wnum_fich integer, wtipo varchar,
		      wnumero in out varchar2,
		      wref varchar) IS

wf		    formulario_web%ROWTYPE;
wref_ped_envio 	varchar2(19);
WAj_Num_Form_Web formulario_web.num_form_web%type;
BEGIN
	wf.num_form_web := wnumero;

	wref_ped_envio := wref;

	wf.apel := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.APEL',1);
	wf.apel_nasc := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.APEL_NASC',1);
	wf.nome := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.NOME',1);
	wf.sexo := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.SEXO',1);
	wf.dat_nasc := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.DAT_NASC',1);
	if wf.dat_nasc is not null then
		wf.dat_nasc := 	substr(wf.dat_nasc,1,4)||'/'||substr(wf.dat_nasc,5,2)||'/'||
				substr(wf.dat_nasc,7,2);
	end if;
	wf.loc_nasc := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.LOC_NASC',1);
	wf.apel_conj := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.APEL_CONJ',1);
	wf.apel_conj_sol := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.APEL_CONJ_SOL',1);
	wf.nome_conj := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.NOME_CONJ',1);
	wf.dat_nasc_conj := NVL(receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.DAT_NASC_CONJ',1),'00000000');
	wf.dat_nasc_conj := substr(wf.dat_nasc_conj,1,4)||'/'||substr(wf.dat_nasc_conj,5,2)||'/'||substr(wf.dat_nasc_conj,7,2);
	wf.nat_conj :=receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.NAT_CONJ',1);
	wf.filia := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.FILIA',1);
	wf.num_doc_viag := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.NUM_DOC_VIAG',1);
	wf.dest_prin := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.DEST_PRIN',1);
	wf.fron_1_ent := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.FRON_1_ENT',1);
	wf.nome_refer_1 := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.NOME_REFER_1',1);
	wf.num_ent := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.NUM_ENT',1);
	wf.dat_ent := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.DAT_ENT',1);
	if wf.dat_ent is not null then
		wf.dat_ent := 	substr(wf.dat_ent,1,4)||'/'||substr(wf.dat_ent,5,2)||'/'||
				substr(wf.dat_ent,7,2);
	end if;
	wf.dat_sai := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.DAT_SAI',1);
	if wf.dat_sai is not null then
		wf.dat_sai := 	substr(wf.dat_sai,1,4)||'/'||substr(wf.dat_sai,5,2)||'/'||
				substr(wf.dat_sai,7,2);
	end if;
	wf.dat_ped := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.DAT_PED',1);
	if wf.dat_ped is not null then
		wf.dat_ped := substr(wf.dat_ped,1,4)||'/'||substr(wf.dat_ped,5,2)||'/'||substr(wf.dat_ped,7,2);
	else
		wf.dat_ped := '0000/00/00';
	end if;
	wf.dat_ped_sch := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.DAT_PED_SCH',1);
	if wf.dat_ped_sch is not null then
		wf.dat_ped_sch := substr(wf.dat_ped_sch,1,4)||'/'||substr(wf.dat_ped_sch,5,2)||'/'||
				  substr(wf.dat_ped_sch,7,2);
	end if;
	wf.dur_esta := TO_NUMBER(receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.DUR_ESTA',1),'999');
	wf.cod_pais_sch_repres := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.COD_PAIS_SCH_REPRES',1);
	wf.cod_pos := TO_NUMBER(receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.COD_POS',1),'9999');
	wf.cod_prof := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.COD_PROF',1);
	wf.cod_doc := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.COD_DOC',1);
	wf.cod_esta_1 := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.COD_ESTA_1',1);
	wf.cod_esta_2 := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.COD_ESTA_2',2);
	wf.cod_esta_3 := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.COD_ESTA_3',3);
	wf.tip_vis_ped := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.TIP_VIS_PED',1);
  wf.cod_pais_nac_orig := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.COD_PAIS_NAC_ORIG',1);
	wf.cod_pais_nac_1 := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.COD_PAIS_NAC_1',1);
	wf.cod_pais_nac_2 :=receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.COD_PAIS_NAC_2',2);
	wf.cod_pais_nac_3 :=receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.COD_PAIS_NAC_3',3);
	wf.cod_pais_emi_doc := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.COD_PAIS_EMI_DOC',1);
	wf.cod_pais_sch_ref := substr(wref_ped_envio,1,3);
	wf.cod_pais_sch_dest_prin := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.COD_PAIS_SCH_DEST_PRIN',1);
	wf.cri_dat := to_char(sysdate,'YYYY/MM/DD HH24:MI:SS');
	wf.apel_ue := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.APEL_UE',1);
	wf.nome_ue := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.NOME_UE',1);
	wf.parentesco_ue := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.PARENTESCO_UE',1);
	wf.passaporte_ue := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.PASSAPORTE_UE',1);
	wf.cod_pais_nac_ue := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.COD_PAIS_NAC_UE',1);
	wf.dat_nasc_ue := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.DAT_NASC_UE',1);
	if wf.dat_nasc_ue is not null then
	wf.dat_nasc_ue := 	substr(wf.dat_nasc_ue,1,4)||'/'||substr(wf.dat_nasc_ue,5,2)||'/'||
				substr(wf.dat_nasc_ue,7,2);
	end if;
  wf.tratado := 'N';
	wf.email_req := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.EMAIL_REQ',1);
  
  wf.email_tut := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.EMAIL_TUT',1);
  wf.telefone_tut := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.TELEFONE_TUT',1);
  wf.info_mot_esta := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.INFO_MOT_ESTA',1);
  wf.ult_num_vin := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.ULT_NUM_VIN',1);
  
  wf.num_ident := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.NUM_IDENT',1);
  wf.cod_pais_nac := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.COD_PAIS_NAC',1);
  wf.est_civ := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.EST_CIV',1);
  wf.dat_emi_doc := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.DAT_EMI_DOC',1);
  wf.dat_emi_doc := 	substr(wf.dat_emi_doc,1,4)||'/'||substr(wf.dat_emi_doc,5,2)||'/'||
				substr(wf.dat_emi_doc,7,2);
  wf.vali_doc_viag := TO_DATE(receber_pk.trata_item(wnum_fich,'W','FORMULARIO_WEB.VALI_DOC_VIAG',1),'YYYYMMDD');
  wf.aut_regre := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.AUT_REGRE',1);
  wf.tit_resid_num := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.TIT_RESID_NUM',1);
  wf.tit_resid_vali := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.TIT_RESID_VALI',1);
  if wf.tit_resid_vali is not null and wf.tit_resid_vali <> 'VITALICIO' then
     wf.tit_resid_vali := 	substr(wf.tit_resid_vali,1,4)||'/'||substr(wf.tit_resid_vali,5,2)||'/'||
				substr(wf.tit_resid_vali,7,2);
  end if;
  wf.vis_regre_num := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.VIS_REGRE_NUM',1);
  wf.vis_regre_vali := TO_DATE(receber_pk.trata_item(wnum_fich,'W','FORMULARIO_WEB.VIS_REGRE_VALI',1),'YYYYMMDD');
  wf.ent_patr := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.ENT_PATR',1);
  wf.ender_prof := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.ENDER_PROF',1);
  wf.dat_loc_ped := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.DAT_LOC_PED',1);
  wf.aut_pais_dest := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.AUT_PAIS_DEST',1);
  wf.vali_aut := TO_DATE(receber_pk.trata_item(wnum_fich,'W','FORMULARIO_WEB.VALI_AUT',1),'YYYYMMDD');
  wf.cod_pais_emi_aut := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.COD_PAIS_EMI_AUT',1);
  wf.dat_sch_1 := TO_DATE(receber_pk.trata_item(wnum_fich,'W','FORMULARIO_WEB.DAT_SCH_1',1),'YYYYMMDD');
  wf.dat_sch_2 := TO_DATE(receber_pk.trata_item(wnum_fich,'W','FORMULARIO_WEB.DAT_SCH_2',1),'YYYYMMDD');
  wf.dat_sch_3 := TO_DATE(receber_pk.trata_item(wnum_fich,'W','FORMULARIO_WEB.DAT_SCH_3',1),'YYYYMMDD');
  wf.meio_trans := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.MEIO_TRANS',1);
  wf.ender_estad := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.ENDER_ESTAD',1);
  wf.telef_ref := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.TELEF_REF',1);
  wf.email_ref := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.EMAIL_REF',1);

  wf.subs := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.SUBS',1);
  wf.viag_conj := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.VIAG_CONJ',1);
  wf.num_filho := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.NUM_FILHO',1);
  wf.financia := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.FINANCIA',1);
  wf.ender_act := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.ENDER_ACT',1);
  wf.telefone := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.TELEFONE',1);
  wf.data_agendamento := TO_DATE(receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.DATA_AGENDAMENTO',1),'YYYYMMDD');
  wf.periodo := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.PERIODO',1);
  wf.apel_tut := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.APEL_TUT',1);
  wf.nome_tut := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.NOME_TUT',1);
  wf.cod_pais_nac_tut := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.COD_PAIS_NAC_TUT',1);
  wf.endereco_tut := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.ENDERECO_TUT',1);
  wf.bio := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.BIO',1);
  wf.dat_bio := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.DAT_BIO',1);
  if wf.dat_bio is not null then
     wf.dat_bio := substr(wf.dat_bio,1,4)||'/'||substr(wf.dat_bio,5,2)||'/'||
				substr(wf.dat_bio,7,2);
  end if;
  wf.visto_3_anos := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.VISTO_3_ANOS',1);
  wf.nome_refer_3 := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.NOME_REFER_3',1);
  wf.ender_estad_3 := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.ENDER_ESTAD_3',1);
  wf.telef_ref_3 := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.TELEF_REF_3',1);
  wf.email_3 := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.EMAIL_3',1);
  wf.dest_prin_2 := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.DEST_PRIN_2',1);
  wf.dest_prin_3 := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.DEST_PRIN_3',1);
  if nvl(length(wf.nome_refer_3),0) > nvl(length(wf.nome_refer_1),0) then
     wf.cod_conc_3 := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.COD_CONC_3',1);
     wf.cod_conc := null;
  else
     wf.cod_conc := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.COD_CONC',1);
     wf.cod_conc_3 := null;
  end if;
  /*wf.cod_conc_3 := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.COD_CONC_3',1);
  if nvl(wf.cod_conc_3,0) = 0 then
     wf.cod_conc := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.COD_CONC',1);
  end if;*/
  wf.num_form_out := receber_pk.trata_item(wnum_fich,wtipo,'FORMULARIO_WEB.NUM_FORM_OUT',1);
  begin
  select num_form_web into WAj_Num_Form_Web
  from formulario_web where num_form_web = wf.num_form_web;
  exception when no_data_found then
            WAj_Num_Form_Web := '0';
  end;
		If nvl(WAj_Num_Form_Web,'0') = '0' then /* Ainda não existia */
  INSERT INTO formulario_web (num_form_web,
			dur_esta, apel, apel_nasc, nome, sexo, dat_nasc,
			loc_nasc, apel_conj, nome_conj, dat_nasc_conj,
			nat_conj, filia, num_doc_viag, dest_prin,
			fron_1_ent, nome_refer_1,
			num_ent, dat_ent, dat_sai,
			dat_ped, dat_ped_sch,
			cod_pos, cod_prof, cod_doc, cod_esta_1,
			cod_esta_2, cod_esta_3, tip_vis_ped,
			cod_pais_nac_orig,
			cod_pais_nac_1, cod_pais_nac_2, cod_pais_nac_3,
			cod_pais_emi_doc, cod_pais_sch_ref,
			cod_pais_sch_dest_prin,
			cod_pais_sch_repres,
			cri_dat, apel_conj_sol, apel_ue, nome_ue, dat_nasc_ue,
			cod_pais_nac_ue, passaporte_ue, parentesco_ue, tratado,
      email_req, num_ident, cod_pais_nac, est_civ, dat_emi_doc,
      vali_doc_viag, aut_regre, tit_resid_num, tit_resid_vali,
      vis_regre_vali, ent_patr, ender_prof, dat_loc_ped, aut_pais_dest,
      vali_aut, cod_pais_emi_aut, dat_sch_1, dat_sch_2, dat_sch_3,
      meio_trans, ender_estad, telef_ref, email_ref, cod_conc,
      subs, viag_conj, num_filho, financia, ender_act, telefone, data_agendamento, periodo,
      apel_tut, nome_tut, cod_pais_nac_tut, endereco_tut, bio, dat_bio, visto_3_anos,
      nome_refer_3, ender_estad_3, telef_ref_3, email_3, dest_prin_2, dest_prin_3,cod_conc_3,num_form_out,
      email_tut, telefone_tut, info_mot_esta, ult_num_vin)
		VALUES (
			wf.num_form_web,
			wf.dur_esta, wf.apel, wf.apel_nasc, wf.nome, wf.sexo, wf.dat_nasc,
			wf.loc_nasc, wf.apel_conj, wf.nome_conj, wf.dat_nasc_conj,
			wf.nat_conj, wf.filia, wf.num_doc_viag, wf.dest_prin,
			wf.fron_1_ent, wf.nome_refer_1,
			wf.num_ent, wf.dat_ent, wf.dat_sai,
			wf.dat_ped, wf.dat_ped_sch,
			wf.cod_pos, wf.cod_prof, wf.cod_doc, wf.cod_esta_1,
			wf.cod_esta_2, wf.cod_esta_3, wf.tip_vis_ped,
			wf.cod_pais_nac_orig,
			wf.cod_pais_nac_1, wf.cod_pais_nac_2, wf.cod_pais_nac_3,
			wf.cod_pais_emi_doc, wf.cod_pais_sch_ref,
			wf.cod_pais_sch_dest_prin,
			wf.cod_pais_sch_repres,
			wf.cri_dat, wf.apel_conj_sol, wf.apel_ue, wf.nome_ue, wf.dat_nasc_ue,
			wf.cod_pais_nac_ue, wf.passaporte_ue, wf.parentesco_ue, wf.tratado,
      wf.email_req, wf.num_ident, wf.cod_pais_nac, wf.est_civ, wf.dat_emi_doc,
      wf.vali_doc_viag, wf.aut_regre, wf.tit_resid_num, wf.tit_resid_vali,
      wf.vis_regre_vali, wf.ent_patr, wf.ender_prof, wf.dat_loc_ped, wf.aut_pais_dest,
      wf.vali_aut, wf.cod_pais_emi_aut, wf.dat_sch_1, wf.dat_sch_2, wf.dat_sch_3,
      wf.meio_trans, wf.ender_estad, wf.telef_ref, wf.email_ref, wf.cod_conc,
      wf.subs, wf.viag_conj, wf.num_filho, wf.financia, wf.ender_act, wf.telefone, wf.data_agendamento, wf.periodo,
      wf.apel_tut, wf.nome_tut, wf.cod_pais_nac_tut, wf.endereco_tut, wf.bio, wf.dat_bio, wf.visto_3_anos,
      wf.nome_refer_3, wf.ender_estad_3, wf.telef_ref_3, wf.email_3, wf.dest_prin_2, wf.dest_prin_3,wf.cod_conc_3,wf.num_form_out,
      wf.email_tut, wf.telefone_tut, wf.info_mot_esta, wf.ult_num_vin);
    else
        update formulario_web
        set data_agendamento = wf.data_agendamento, periodo = wf.periodo
        where num_form_web = wf.num_form_web;
    end if;
END;
--
  PROCEDURE insere_form_p_legaliz(wnum_fich integer, wano_form number, wnum_form number) IS
	wform_p form_p%ROWTYPE;

	cursor	Ja_Existe is
	select ano_form, num_form
	from form_p
	where	num_proc = wform_p.num_proc FOR UPDATE OF num_proc;
	waj_ano_form 	number;
	waj_num_form 	number;
	v_morada	varchar2(255);
  BEGIN
	wform_p.apel_nasc := '+';
	wform_p.est_civ := TO_NUMBER(receber_pk.trata_item(wnum_fich,'S','LEGALIZACAO.EST_CIV',1),'9');
	wform_p.num_proc := receber_pk.trata_item(wnum_fich,'S','LEGALIZACAO.NUM_PROC',1);
        wform_p.telefone := 0;
	wform_p.num_filho := 0;
	wform_p.viag_conj := 'N';
	wform_p.dat_emi_doc := receber_pk.trata_item(wnum_fich,'S','LEGALIZACAO.DAT_EMI_DOC',1);
	wform_p.dat_emi_doc := substr(wform_p.dat_emi_doc,1,4)||'/'||
			       substr(wform_p.dat_emi_doc,5,2)||'/'||
			       substr(wform_p.dat_emi_doc,7,2);
	wform_p.vali_doc_viag := TO_DATE(receber_pk.trata_item(wnum_fich,'S','LEGALIZACAO.VALI_DOC_VIAG',1),'YYYYMMDD');
	--wform_p.ender_act := receber_pk.trata_item(wnum_fich,'S','LEGALIZACAO.MORADA',1);
	v_morada := receber_pk.trata_item(wnum_fich,'S','LEGALIZACAO.MORADA',1);
	wform_p.ender_act := trim(substr(v_morada,1,50));
	wform_p.cod_conc := receber_pk.trata_item(wnum_fich,'S','LEGALIZACAO.COD_CONC',1);
	wform_p.ped_normal := 'S';
	if receber_pk.trata_item(wnum_fich,'S','LEGALIZACAO.TIPO',1) = 'T' then
		wform_p.cons_central := 'N';
	else
		wform_p.cons_central := 'S';
	end if;

	wform_p.cod_pais_nasc := receber_pk.trata_item(wnum_fich,'S','LEGALIZACAO.COD_PAIS_NAC_1',1);
	wform_p.ender_estad := '+';
	wform_p.indef_ant := 'N';
	wform_p.ped_retid := 'N';
	wform_p.aut_regre := 'N';
	wform_p.aut_pais_dest := 'N';
	wform_p.ent_patr := receber_pk.trata_item(wnum_fich,'S','LEGALIZACAO.COD_PROF',1);
	if wform_p.ent_patr = 'ZZZZZZZ' then
		wform_p.ent_patr := null;
	else
		begin
		select des_prof into wform_p.ent_patr
		from profissoes_sef
		where cod_prof = wform_p.ent_patr;
		exception when others then
			null;
		end;
	end if;

	begin
		OPEN Ja_Existe;
		Fetch Ja_Existe into WAj_Ano_Form, WAj_Num_Form;
		if Ja_Existe%NOTFOUND then
			WAj_Ano_Form := Null;
			WAj_Num_Form := Null;
		end if ;
		If nvl(WAj_Ano_Form,0) = 0 then
			INSERT INTO form_p (
			ano_form,
			num_form,
			apel_nasc,
			est_civ,
			dat_emi_doc,
			vali_doc_viag,
			ender_act,
			cri_dat,
			cri_uti,
			num_filho,
			viag_conj,
			ped_normal,
			cons_central,
			telefone,
			cod_conc,
			num_proc,
			cod_pais_nasc,
			ender_estad,
			indef_ant,
			ped_retid,
			aut_regre,
			aut_pais_dest,
			ent_patr
			)
		VALUES (
			wano_form,
			wnum_form,
			wform_p.apel_nasc,
			wform_p.est_civ,
			wform_p.dat_emi_doc,
			wform_p.vali_doc_viag,
			wform_p.ender_act,
			to_char(sysdate,'YYYY/MM/DD HH24:MI:SS'),
			user,
			wform_p.num_filho,
			wform_p.viag_conj,
			wform_p.ped_normal,
			wform_p.cons_central,
			wform_p.telefone,
			wform_p.cod_conc,
			wform_p.num_proc,
			wform_p.cod_pais_nasc,
			wform_p.ender_estad,
			wform_p.indef_ant,
			wform_p.ped_retid,
			wform_p.aut_regre,
			wform_p.aut_pais_dest,
			wform_p.ent_patr
			);
		else /*Já existe na tabela form_p*/
			update form_p
			set apel_nasc     = wform_p.apel_nasc,
			    est_civ       = wform_p.est_civ,
			    dat_emi_doc   = wform_p.dat_emi_doc,
			    vali_doc_viag = wform_p.vali_doc_viag,
			    ender_act 	  = wform_p.ender_act,
			    alt_dat	  = to_char(sysdate,'YYYY/MM/DD HH24:MI:SS'),
			    alt_uti	  = user,
			    num_filho	  = wform_p.num_filho,
			    viag_conj	  = wform_p.viag_conj,
			    ped_normal	  = wform_p.ped_normal,
			    cons_central  = wform_p.cons_central,
			    telefone	  = wform_p.telefone,
			    cod_conc	  = wform_p.cod_conc,
			    cod_pais_nasc = wform_p.cod_pais_nasc,
			    ender_estad   = wform_p.ender_estad,
 			    indef_ant     = wform_p.indef_ant,
			    ped_retid     = wform_p.ped_retid,
			    aut_regre	  = wform_p.aut_regre,
			    aut_pais_dest = wform_p.aut_pais_dest,
			    ent_patr      =  wform_p.ent_patr
			Where current of Ja_Existe;

		end if;
	end;
  END;
--
  PROCEDURE insere_pais_transito(wnum_fich integer, wano_form number, wnum_form number) IS
	w_id id_campo_form%ROWTYPE;
	contador integer := 0;
	CURSOR c_rec_det IS
	 SELECT conteudo
	   FROM temp_rec_detalhe
	   WHERE recebe_num_fich = wnum_fich
	     AND num_campo = w_id.num_camp;
	wconteudo varchar2(120);
  BEGIN
	BEGIN
	    SELECT num_camp into w_id.num_camp
		FROM id_campo_form
		WHERE tip_form = 'P'
		AND nome_var = '@PAIS_TRANSITO.COD_PAIS'
		AND dir_comm = 'R';
	    exception when others then
		RETURN;
	END;
	OPEN c_rec_det;
	LOOP
		FETCH c_rec_det into wconteudo;
		if c_rec_det%NOTFOUND then
			EXIT;
		end if;
		contador := contador + 1;
		INSERT into pais_transito (
			ano_form,
			num_form,
			cod_pais,
			seq_transi)
		VALUES (
			wano_form,
			wnum_form,
			wconteudo,
			contador);
	END LOOP;
	CLOSE c_rec_det;
  END;
--
PROCEDURE insere_pais_transito_web(wnum_fich integer, wnum_form number) IS
	w_id id_campo_form%ROWTYPE;
	contador integer := 0;
	CURSOR c_rec_det IS
	 SELECT conteudo
	   FROM temp_rec_detalhe
	   WHERE recebe_num_fich = wnum_fich
	   AND num_campo = w_id.num_camp
     ORDER BY num_linha;
	wconteudo varchar2(120);
  BEGIN
	BEGIN
	  SELECT num_camp into w_id.num_camp
		FROM id_campo_form
		WHERE tip_form = 'W'
		AND nome_var = '@PAIS_TRANSITO_WEB.COD_PAIS'
		AND dir_comm = 'R';
	    exception when others then
		RETURN;
	END;
	OPEN c_rec_det;
	LOOP
		FETCH c_rec_det into wconteudo;
		if c_rec_det%NOTFOUND then
			EXIT;
		end if;
		contador := contador + 1;
		INSERT into pais_transito_web (
			num_form_web,
			cod_pais,
			seq_transi)
		VALUES (
			wnum_form,
			wconteudo,
			contador);
	END LOOP;
	CLOSE c_rec_det;
  END;
--
PROCEDURE insere_form_doc(wnum_fich integer, wano_form number, wnum_form number) IS
	w_id id_campo_form%ROWTYPE;
	wconteudo varchar2(120);
	CURSOR c_rec_det IS
	 SELECT conteudo
	   FROM temp_rec_detalhe
	   WHERE recebe_num_fich = wnum_fich
	     AND num_campo = w_id.num_camp;
BEGIN
	BEGIN
	    SELECT num_camp into w_id.num_camp
		FROM id_campo_form
		WHERE tip_form = 'P'
		AND dir_comm = 'R'
		AND nome_var = '@FORM_DOC.COD_DOC';
	    exception when others then
		RETURN;
	END;
	OPEN c_rec_det;
	LOOP
		FETCH c_rec_det into wconteudo;
		if c_rec_det%NOTFOUND then
			EXIT;
		end if;
		INSERT into form_doc (
			ano_form,
			num_form,
			cod_doc,
			entregou,
			chegou
			)
		VALUES (
			wano_form,
			wnum_form,
			wconteudo,
			'S',
			'N'
			);
	END LOOP;
	CLOSE c_rec_det;
END;
--
PROCEDURE insere_form_doc_legaliz(wnum_fich integer, wano_form number, wnum_form number,docs varchar) IS
	v_conta	number(2);
BEGIN
	select count(*) into v_conta
	from form_doc
	where ano_form = wano_form and num_form = wnum_form;

	if v_conta = 0 then
		if docs = 'N' then
			INSERT into form_doc (
				ano_form,
				num_form,
				cod_doc,
				entregou,
				chegou
				)
			VALUES (
				wano_form,
				wnum_form,
				'99',
				'N',
				'N'
				);
		else
			INSERT into form_doc (
				ano_form,
				num_form,
				cod_doc,
				entregou,
				chegou
				)
			VALUES (
				wano_form,
				wnum_form,
				'99',
				'S',
				'S'
				);
		end if;
	end if;
END;
--
PROCEDURE insere_vinheta(wtipo varchar, wnum_fich integer, wano_form number, wnum_form number)IS
BEGIN
  Receber1.insere_vinheta(wtipo,wnum_fich, wano_form, wnum_form);
END;
--
PROCEDURE insere_requisicao(wnum_fich integer) IS
BEGIN
  Receber1.insere_requisicao(wnum_fich);
END;
--
FUNCTION insere_vinheta2(wnum_fich integer)
		RETURN varchar IS
BEGIN
 RETURN(RECEBER1.Insere_Vinheta2(wnum_fich));
END;
--
PROCEDURE insere_lote_vin(wnum_fich integer) IS
BEGIN
 Receber1.insere_lote_vin(wnum_fich);
END;
--
PROCEDURE insere_redir(wnum_fich integer, wano_form in number, wnum_form in number,
			word_pos_redir out number) IS
BEGIN
 Receber1.insere_redir(wnum_fich, wano_form, wnum_form, word_pos_redir);
END;
--
PROCEDURE insere_form_r(wnum_fich integer) IS
BEGIN
 Receber1.insere_form_r(wnum_fich);
END;
--
PROCEDURE insere_form_i(wnum_fich integer, wano_form in number, wnum_form in number,
			wcod_ser out varchar2, wnum_ord out number, word_form_i out number) IS
BEGIN
  Receber1.insere_form_i(wnum_fich, wano_form , wnum_form,
			wcod_ser, wnum_ord, word_form_i);
END;
--
PROCEDURE insere_form_z(wnum_fich in integer, wano_form number, wnum_form number) IS
BEGIN
  Receber1.Insere_Form_Z(Wnum_Fich, wano_form, wnum_form) ;
END;
--
PROCEDURE insere_vistos_3_anos(wnum_fich integer, wano_form number, wnum_form number) IS
	contador integer := 0;
	wvistos_3_anos vistos_3_anos%ROWTYPE;
  BEGIN
   LOOP
	contador := contador + 1;
	wvistos_3_anos.ano_form := wano_form;
	wvistos_3_anos.num_form := wnum_form;
	wvistos_3_anos.dat_vali_visto_ini := receber_pk.trata_item(wnum_fich,'P','@VISTOS_3_ANOS.DAT_VALI_VISTO_INI',contador);
	wvistos_3_anos.dat_vali_visto_ini := 	substr(wvistos_3_anos.dat_vali_visto_ini,1,4)||'/'||
				substr(wvistos_3_anos.dat_vali_visto_ini,5,2)||'/'||
				substr(wvistos_3_anos.dat_vali_visto_ini,7,2);

	wvistos_3_anos.dat_vali_visto_fim := receber_pk.trata_item(wnum_fich,'P','@VISTOS_3_ANOS.DAT_VALI_VISTO_FIM',contador);
	wvistos_3_anos.dat_vali_visto_fim := 	substr(wvistos_3_anos.dat_vali_visto_fim,1,4)||'/'||
				substr(wvistos_3_anos.dat_vali_visto_fim,5,2)||'/'||
				substr(wvistos_3_anos.dat_vali_visto_fim,7,2);

	wvistos_3_anos.num_visto := receber_pk.trata_item(wnum_fich,'P','@VISTOS_3_ANOS.NUM_VISTO',contador);
	IF wvistos_3_anos.dat_vali_visto_ini is null or
	   wvistos_3_anos.dat_vali_visto_fim is null or
	   wvistos_3_anos.num_visto is null THEN
		EXIT;
	END IF;
	INSERT INTO vistos_3_anos (
		ano_form,
		num_form,
		dat_vali_visto_ini,
		dat_vali_visto_fim,
		num_visto )
	VALUES (
		wvistos_3_anos.ano_form,
		wvistos_3_anos.num_form,
		wvistos_3_anos.dat_vali_visto_ini,
		wvistos_3_anos.dat_vali_visto_fim,
		wvistos_3_anos.num_visto );
   END LOOP;
  END;
PROCEDURE insere_meios_subsistencia(wnum_fich integer, wano_form number, wnum_form number) IS
	contador integer := 0;
	wmeios_subsistencia meios_subsistencia%ROWTYPE;
  BEGIN
   LOOP
	contador := contador + 1;
	wmeios_subsistencia.ano_form := wano_form;
	wmeios_subsistencia.num_form := wnum_form;
	wmeios_subsistencia.entidade := receber_pk.trata_item(wnum_fich,'P','@MEIOS_SUBSISTENCIA.ENTIDADE',contador);
  wmeios_subsistencia.meios := receber_pk.trata_item(wnum_fich,'P','@MEIOS_SUBSISTENCIA.MEIOS',contador);

	IF wmeios_subsistencia.entidade is null or
	   wmeios_subsistencia.meios is null THEN
		EXIT;
	END IF;
	INSERT INTO meios_subsistencia (
		ano_form,
		num_form,
		entidade,
		meios )
	VALUES (
		wmeios_subsistencia.ano_form,
		wmeios_subsistencia.num_form,
		wmeios_subsistencia.entidade,
		wmeios_subsistencia.meios );
   END LOOP;
  END;
PROCEDURE insere_reag_alertas(wnum_fich integer) IS
wreag_alertas reag_alertas%ROWTYPE;
BEGIN
wreag_alertas.id_envio := receber_pk.trata_item(wnum_fich,'O','REAG_ALERTAS.ID_ENVIO',1);
wreag_alertas.nome := receber_pk.trata_item(wnum_fich,'O','REAG_ALERTAS.NOME',1);
wreag_alertas.apelido := receber_pk.trata_item(wnum_fich,'O','REAG_ALERTAS.APELIDO',1);
wreag_alertas.dat_nasc := receber_pk.trata_item(wnum_fich,'O','REAG_ALERTAS.DAT_NASC',1);
if length(wreag_alertas.dat_nasc) = 8 and wreag_alertas.dat_nasc is not null then
		wreag_alertas.dat_nasc :=	substr(wreag_alertas.dat_nasc,1,4)||'/'||substr(wreag_alertas.dat_nasc,5,2)||'/'||
				substr(wreag_alertas.dat_nasc,7,2);
end if;
wreag_alertas.num_doc_viag := receber_pk.trata_item(wnum_fich,'O','REAG_ALERTAS.NUM_DOC_VIAG',1);
wreag_alertas.cod_pais_nac := receber_pk.trata_item(wnum_fich,'O','REAG_ALERTAS.COD_PAIS_NAC',1);
wreag_alertas.tipo := receber_pk.trata_item(wnum_fich,'O','REAG_ALERTAS.TIPO',1);
wreag_alertas.motivo := receber_pk.trata_item(wnum_fich,'O','REAG_ALERTAS.MOTIVO',1);
wreag_alertas.cod_pos := receber_pk.trata_item(wnum_fich,'O','REAG_ALERTAS.COD_POS',1);

begin
INSERT INTO reag_alertas (id_envio, nome, apelido, dat_nasc, num_doc_viag,
cod_pais_nac, tipo, cod_pos, motivo, cri_uti, cri_dat)
VALUES (wreag_alertas.id_envio, wreag_alertas.nome, wreag_alertas.apelido, wreag_alertas.dat_nasc,
wreag_alertas.num_doc_viag, wreag_alertas.cod_pais_nac, wreag_alertas.tipo, wreag_alertas.cod_pos, wreag_alertas.motivo, user, to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'));
exception WHEN DUP_VAL_ON_INDEX then
          update reag_alertas
          set nome =wreag_alertas.nome, apelido = wreag_alertas.apelido,
          dat_nasc = wreag_alertas.dat_nasc,
          num_doc_viag = wreag_alertas.num_doc_viag,
          cod_pais_nac = wreag_alertas.cod_pais_nac,
          tipo = wreag_alertas.tipo,
          cod_pos = wreag_alertas.cod_pos,
          motivo = wreag_alertas.motivo,
          cri_uti = user,
          cri_dat = to_char(sysdate,'yyyy/mm/dd hh24:mi:ss')
          where id_envio = wreag_alertas.id_envio;
end;
END;
PROCEDURE insere_indef_justifica_parecer(wnum_fich integer, wano_form number, wnum_form number) IS
	contador integer := 0;
	windef_justifica_parecer indef_justifica_parecer%ROWTYPE;
  v_cod_pare_vis varchar2(120);
  v_cod_pare_vis_inicial varchar2(120);
  v_reapr formulario.reapr%type;
  BEGIN
  -- LOOP
	contador := contador + 1;
  select reapr into v_reapr
  from formulario
  where ano_form = wano_form and num_form = wnum_form;
	windef_justifica_parecer.ano_form := wano_form;
	windef_justifica_parecer.num_form := wnum_form;
  begin
  select conteudo into v_cod_pare_vis_inicial
  from temp_rec_detalhe
  where recebe_num_fich = wnum_fich and num_campo = '829';
  exception when no_data_found then
            -- windef_justifica_parecer.cod_pare_vis := null;
            v_cod_pare_vis_inicial := null;
            --exit;
  end;
	--windef_justifica_parecer.cod_pare_vis := receber_pk.trata_item(wnum_fich,'P','@INDEF_JUSTIFICA_PARECER.COD_PARE_VIS',contador);
  windef_justifica_parecer.cod_pais_sch_indef := receber_pk.trata_item(wnum_fich,'P','@INDEF_JUSTIFICA_PARECER.COD_PAIS_SCH_INDEF',contador);

  /*IF contador = 2 THEN
		EXIT;
	END IF;*/
IF v_cod_pare_vis_inicial IS NOT NULL then
	IF instr(v_cod_pare_vis_inicial,';') = 0 then
     INSERT INTO indef_justifica_parecer (
		 ano_form,
		 num_form,
		 cod_pare_vis,
		 cri_uti,
     cri_dat,
     cod_pais_sch_indef,
     origem,
     reapr)
	   VALUES (
		 windef_justifica_parecer.ano_form,
		 windef_justifica_parecer.num_form,
		 v_cod_pare_vis_inicial,
     user,
     sysdate,
		 windef_justifica_parecer.cod_pais_sch_indef,
     'C',
     v_reapr);
   else
   loop
       v_cod_pare_vis := substr(v_cod_pare_vis_inicial,1,instr(v_cod_pare_vis_inicial,';')-1);

       INSERT INTO indef_justifica_parecer (
		   ano_form,
		   num_form,
		   cod_pare_vis,
		   cri_uti,
       cri_dat,
       cod_pais_sch_indef,
       origem,
       reapr)
	     VALUES (
		   windef_justifica_parecer.ano_form,
		   windef_justifica_parecer.num_form,
		   v_cod_pare_vis,
       user,
       sysdate,
		   windef_justifica_parecer.cod_pais_sch_indef,
       'C',
       v_reapr);
       v_cod_pare_vis_inicial := substr(v_cod_pare_vis_inicial,instr(v_cod_pare_vis_inicial,';') + 1);
       if instr(v_cod_pare_vis_inicial,';') = 0  then
          INSERT INTO indef_justifica_parecer (
		      ano_form,
		      num_form,
		      cod_pare_vis,
		      cri_uti,
          cri_dat,
          cod_pais_sch_indef,
          origem,
          reapr)
	        VALUES (
		      windef_justifica_parecer.ano_form,
		      windef_justifica_parecer.num_form,
		      v_cod_pare_vis_inicial,
          user,
          sysdate,
		      windef_justifica_parecer.cod_pais_sch_indef,
          'C',
          v_reapr);
          exit;
       end if;
   end loop;
   end if;
   end if;
   --END LOOP;
  END;
END receber_pk;
/

prompt
prompt Creating package body RECEBER1
prompt ==============================
prompt
CREATE OR REPLACE PACKAGE BODY RPV.RECEBER1 AS
PROCEDURE insere_vinheta(wtipo varchar, wnum_fich integer, wano_form number, wnum_form number)IS
	wvin vinheta%ROWTYPE;
	wnum_vin number(8);
	CURSOR c_lote is
		SELECT * from lote_vin
			where wnum_vin >= lim_min
			  and wnum_vin <= lim_max;
	w_lote lote_vin%ROWTYPE;
	werro number(1);
	werro_aj number(3);
BEGIN
	wvin.num_vin := receber_pk.trata_item(wnum_fich,wtipo,'VINHETA.NUM_VIN',1);
	if wvin.num_vin is null then
		select seq_num_vin_int.nextval into wvin.num_vin from dual;
	end if;
	if wtipo = 'P' then
		wnum_vin := to_number(substr(wvin.num_vin,2));
		OPEN c_lote;
		FETCH c_lote into w_lote;
		IF c_lote%NOTFOUND then
			RETURN;
		END IF;
		CLOSE c_lote;
		wvin.ano_lote := w_lote.ano_lote;
		wvin.num_lote := w_lote.num_lote;
	end if;
	wvin.num_form := wnum_form;
	wvin.ano_form := wano_form;
	wvin.alt_dat := receber_pk.trata_item(wnum_fich,wtipo,'VINHETA.ALT_DAT',1);
	if wvin.alt_dat is null then
		wvin.est_vin := 'E';
		wvin.alt_uti := null;
	else
		wvin.est_vin := 'A';
		wvin.alt_uti := user;
	end if;
	wvin.tip_vis := receber_pk.trata_item(wnum_fich,wtipo,'VINHETA.TIP_VIS',1);
	wvin.cod_pos := w_lote.cod_pos;
	wvin.dur_esta := receber_pk.trata_item(wnum_fich,wtipo,'VINHETA.DUR_ESTA',1);
	wvin.dat_emi := receber_pk.trata_item(wnum_fich,wtipo,'VINHETA.DAT_EMI',1);
	if wvin.dat_emi is not null then
		wvin.dat_emi := substr(wvin.dat_emi,1,4)||'/'||substr(wvin.dat_emi,5,2)||'/'||substr(wvin.dat_emi,5,2);
	end if;
	wvin.dat_ini := receber_pk.trata_item(wnum_fich,wtipo,'VINHETA.DAT_INI',1);
	wvin.dat_fin := receber_pk.trata_item(wnum_fich,wtipo,'VINHETA.DAT_FIN',1);
	wvin.dat_ini := substr(wvin.dat_ini,1,4)||'/'||substr(wvin.dat_ini,5,2)||'/'||substr(wvin.dat_ini,5,2);
	wvin.dat_fin := substr(wvin.dat_fin,1,4)||'/'||substr(wvin.dat_fin,5,2)||'/'||substr(wvin.dat_fin,5,2);
	wvin.num_ent := receber_pk.trata_item(wnum_fich,wtipo,'VINHETA.NUM_ENT',1);
	wvin.doc_viag :=  receber_pk.trata_item(wnum_fich,wtipo,'VINHETA.COD_DOC',1);
	wvin.aver_vin := receber_pk.trata_item(wnum_fich,wtipo,'VINHETA.AVER_VIN',1);
	wvin.ref_decisao :=  receber_pk.trata_item(wnum_fich,wtipo,'VINHETA.REF_DECISAO',1);
	wvin.vin_para :=  receber_pk.trata_item(wnum_fich,wtipo,'VINHETA.VIN_PARA',1);
	wvin.num_doc_viag :=  receber_pk.trata_item(wnum_fich,wtipo,'VINHETA.NUM_DOC_VIAG',1);
	wvin.cri_dat := to_char(sysdate,'YYYY/MM/DD HH24:MI:SS');
	wvin.cri_uti := user;
begin
	insert into vinheta(
		num_vin,
		ano_lote,
		num_lote,
		num_form,
		ano_form,
		est_vin,
		tip_vis,
		cod_pos,
		dat_emi,
		dat_ini,
		dat_fin,
		num_ent,
		dur_esta,
		doc_viag,
		aver_vin,
		ref_decisao,
		vin_para,
		num_doc_viag,
		cri_dat,
		cri_uti,
		alt_dat,
		alt_uti)
	values (
		wvin.num_vin,
		wvin.ano_lote,
		wvin.num_lote,
		wvin.num_form,
		wvin.ano_form,
		wvin.est_vin,
		wvin.tip_vis,
		wvin.cod_pos,
		wvin.dat_emi,
		wvin.dat_ini,
		wvin.dat_fin,
		wvin.num_ent,
		wvin.dur_esta,
		wvin.doc_viag,
		wvin.aver_vin,
		wvin.ref_decisao,
		wvin.vin_para,
		wvin.num_doc_viag,
		wvin.cri_dat,
		wvin.cri_uti,
		wvin.alt_dat,
		wvin.alt_uti);
end;
END;
--
PROCEDURE insere_requisicao(wnum_fich integer) IS
	r requisicao%ROWTYPE;
BEGIN
	r.cod_pos := receber_pk.trata_item(wnum_fich,'Q','REQUISICAO.COD_POS',1);
	r.ano_req := receber_pk.trata_item(wnum_fich,'Q','REQUISICAO.ANO_REQ',1);
	r.num_req := receber_pk.trata_item(wnum_fich,'Q','REQUISICAO.NUM_REQ',1);
	r.dat_req := receber_pk.trata_item(wnum_fich,'Q','REQUISICAO.DAT_REQ',1);
	r.qt_req := receber_pk.trata_item(wnum_fich,'Q','REQUISICAO.QT_REQ',1);
	r.qt_satis := receber_pk.trata_item(wnum_fich,'Q','REQUISICAO.QT_SATIS',1);
	r.est_req := NVL(receber_pk.trata_item(wnum_fich,'Q','REQUISICAO.EST_REQ',1),'P');
   insert into requisicao(
	cod_pos,
	ano_req,
	num_req,
	dat_req,
	qt_req,
	qt_satis,
	est_req,
	cri_dat,
	cri_uti)
    values (
	r.cod_pos,
	r.ano_req,
	r.num_req,
	r.dat_req,
	r.qt_req,
	r.qt_satis,
	r.est_req,
	TO_char(sysdate,'YYYY/MM/DD HH24:MI:SS'),
	user);
END;
--
FUNCTION insere_vinheta2(wnum_fich integer)
		RETURN varchar IS
	wvin vinheta%ROWTYPE;
	wtipo varchar2(1) := 'V';
	wvin_para formulario.vin_para%TYPE;
	evol integer;
BEGIN
wvin.num_vin := receber_pk.trata_item(wnum_fich,wtipo,'VINHETA.NUM_VIN',1);
wvin.ano_lote := TO_NUMBER(receber_pk.trata_item(wnum_fich,wtipo,'VINHETA.ANO_LOTE',1),'FM0009');
wvin.num_lote := TO_NUMBER(receber_pk.trata_item(wnum_fich,wtipo,'VINHETA.NUM_LOTE',1),'FM000009');
wvin.num_form := TO_NUMBER(receber_pk.trata_item(wnum_fich,wtipo,'VINHETA.NUM_FORM',1),'FM0000009');
wvin.ano_form := TO_NUMBER(receber_pk.trata_item(wnum_fich,wtipo,'VINHETA.ANO_FORM',1),'FM0009');
wvin.est_vin := receber_pk.trata_item(wnum_fich,wtipo,'VINHETA.EST_VIN',1);
wvin.tip_vis := receber_pk.trata_item(wnum_fich,wtipo,'VINHETA.TIP_VIS',1);
wvin.cod_pos := TO_NUMBER(receber_pk.trata_item(wnum_fich,wtipo,'VINHETA.COD_POS',1),'FM0009');
wvin.dat_emi := TO_DATE(receber_pk.trata_item(wnum_fich,wtipo,'VINHETA.DAT_EMI',1),'YYYYMMDD');
wvin.dat_ini := TO_DATE(receber_pk.trata_item(wnum_fich,wtipo,'VINHETA.DAT_INI',1),'YYYYMMDD');
wvin.dat_fin := TO_DATE(receber_pk.trata_item(wnum_fich,wtipo,'VINHETA.DAT_FIN',1),'YYYYMMDD');
wvin.num_ent := receber_pk.trata_item(wnum_fich,wtipo,'VINHETA.NUM_ENT',1);
wvin.dur_esta := receber_pk.trata_item(wnum_fich,wtipo,'VINHETA.DUR_ESTA',1);
wvin.doc_viag := receber_pk.trata_item(wnum_fich,wtipo,'VINHETA.DOC_VIAG',1);
wvin.aver_vin := receber_pk.trata_item(wnum_fich,wtipo,'VINHETA.AVER_VIN',1);
wvin.ref_decisao :=  receber_pk.trata_item(wnum_fich,wtipo,'VINHETA.REF_DECISAO',1);
wvin.vin_para :=  receber_pk.trata_item(wnum_fich,wtipo,'VINHETA.VIN_PARA',1);
wvin.num_doc_viag :=  receber_pk.trata_item(wnum_fich,wtipo,'VINHETA.NUM_DOC_VIAG',1);
wvin.cri_dat := to_char(sysdate,'YYYY/MM/DD HH24:MI:SS');
wvin.cri_uti := user;
insert into vinheta(
	num_vin,
	ano_lote,
	num_lote,
	num_form,
	ano_form,
	est_vin,
	tip_vis,
	cod_pos,
	dat_emi,
	dat_ini,
	dat_fin,
	num_ent,
	dur_esta,
	doc_viag,
	aver_vin,
	ref_decisao,
	vin_para,
	num_doc_viag,
	cri_dat,
	cri_uti)
values (
	wvin.num_vin,
	wvin.ano_lote,
	wvin.num_lote,
	wvin.num_form,
	wvin.ano_form,
	wvin.est_vin,
	wvin.tip_vis,
	wvin.cod_pos,
	wvin.dat_emi,
	wvin.dat_ini,
	wvin.dat_fin,
	wvin.num_ent,
	wvin.dur_esta,
	wvin.doc_viag,
	wvin.aver_vin,
	wvin.ref_decisao,
	wvin.vin_para,
	wvin.num_doc_viag,
	wvin.cri_dat,
	wvin.cri_uti);
-- evol := TAREFA_MASTER.evolui_estado(wvin.ano_form, wvin.num_form, 'A');
 RETURN(wvin.num_vin);
 exception when others then
null;
END;
--
PROCEDURE insere_lote_vin(wnum_fich integer) IS
	wvin lote_vin%ROWTYPE;
	wtipo varchar2(1) := 'L';
BEGIN
wvin.ano_lote := TO_NUMBER(receber_pk.trata_item(wnum_fich,wtipo,'LOTE_VIN.ANO_LOTE',1) );
wvin.num_lote := TO_NUMBER(receber_pk.trata_item(wnum_fich,wtipo,'LOTE_VIN.NUM_LOTE',1) );
wvin.est_lote := receber_pk.trata_item(wnum_fich,wtipo,'LOTE_VIN.EST_LOTE',1);
wvin.dat_est := TO_DATE(receber_pk.trata_item(wnum_fich,wtipo,'LOTE_VIN.DAT_EST',1),'YYYYMMDD');
wvin.cod_pos := TO_NUMBER(receber_pk.trata_item(wnum_fich,wtipo,'LOTE_VIN.COD_POS',1) );
wvin.lim_min := TO_NUMBER(receber_pk.trata_item(wnum_fich,wtipo,'LOTE_VIN.LIM_MIN',1) );
wvin.lim_max := TO_NUMBER(receber_pk.trata_item(wnum_fich,wtipo,'LOTE_VIN.LIM_MAX',1) );
wvin.ano_req := TO_NUMBER(receber_pk.trata_item(wnum_fich,wtipo,'LOTE_VIN.ANO_REQ',1) );
wvin.num_req := TO_NUMBER(receber_pk.trata_item(wnum_fich,wtipo,'LOTE_VIN.NUM_REQ',1));
insert into lote_vin (
ano_lote,
num_lote,
est_lote,
dat_est,
cod_pos,
lim_min,
lim_max,
ano_req,
num_req,
cri_dat,
cri_uti
) values (
wvin.ano_lote,
wvin.num_lote,
wvin.est_lote,
wvin.dat_est,
wvin.cod_pos,
wvin.lim_min,
wvin.lim_max,
wvin.ano_req,
wvin.num_req,
to_char(sysdate,'YYYY/MM/DD HH24:MI:SS'),
user);
END;
--
PROCEDURE insere_redir(wnum_fich in integer, wano_form in number, wnum_form in number,
			word_pos_redir out number) IS
	wred posto_redir%ROWTYPE;
	wtipo varchar2(1) := 'D';
	wcod_pos number(4);
	v_form		formulario%ROWTYPE;
	refer		varchar2(19);
	posto_novo	posto.cod_pos%TYPE;
	CURSOR c_form IS
	SELECT f.* FROM formulario f
	WHERE f.ano_form = wano_form
	AND   f.num_form = wnum_form FOR UPDATE OF f.cod_pos;
BEGIN
	word_pos_redir := TO_NUMBER(receber_pk.trata_item(wnum_fich,wtipo,'POSTO_REDIR.ORD_POS_REDIR',1) ,'FM09');
	wred.dat_redir := TO_DATE(receber_pk.trata_item(wnum_fich,wtipo,'POSTO_REDIR.DAT_REDIR',1),'YYYYMMDD');
	posto_novo := TO_NUMBER(receber_pk.trata_item(wnum_fich,wtipo,
				'FORMULARIO.COD_POS',1), 'FM0009');
	wred.cod_pos := TO_NUMBER(receber_pk.trata_item(wnum_fich,wtipo,
				'POSTO_REDIR.COD_POS',1), 'FM0009');
	OPEN c_form;
	FETCH c_form INTO v_form;
	IF c_form%NOTFOUND THEN RAISE NO_DATA_FOUND;
	END IF;
		wred.num_form := v_form.num_form;
		wred.ano_form := v_form.ano_form;
		UPDATE formulario
		SET cod_pos = posto_novo
		WHERE CURRENT OF c_form;
	CLOSE c_form;
	insert into posto_redir(
		num_form,
		ano_form,
		ord_pos_redir,
		cod_pos,
		dat_redir,
		cri_dat,
		cri_uti)
	values (
		wred.num_form,
		wred.ano_form,
		word_pos_redir,
		wred.cod_pos,
		wred.dat_redir,
		to_char(sysdate,'YYYY/MM/DD HH24:MI:SS'),
		user);
END;
--
PROCEDURE insere_form_r(wnum_fich integer) IS
	wf form_r%ROWTYPE;
	wtipo varchar2(1) := 'R';
BEGIN
wf.ano_form := TO_NUMBER(receber_pk.trata_item(wnum_fich,wtipo,'FORM_R.NUM_FORM',1) ,'FM0000009');
wf.num_form := TO_NUMBER(receber_pk.trata_item(wnum_fich,wtipo,'FORM_R.ANO_FORM',1) ,'FM0009');
wf.ord_form_r := TO_NUMBER(receber_pk.trata_item(wnum_fich,wtipo,'FORM_R.ORD_FORM_R',1) ,'FM09');
wf.dat_reapr := TO_DATE(receber_pk.trata_item(wnum_fich,wtipo,'FORM_R.DAT_REAPR',1),'YYYYMMDD');
wf.dat_resp := TO_DATE(receber_pk.trata_item(wnum_fich,wtipo,'FORM_R.DAT_RESP',1),'YYYYMMDD');
wf.cod_pare := receber_pk.trata_item(wnum_fich,wtipo,'FORM_R.COD_PARE',1);
insert into form_r(
ano_form,
num_form,
ord_form_r,
dat_reapr,
dat_resp,
cod_pare,
cri_dat,
cri_uti)
values(
wf.ano_form,
wf.num_form,
wf.ord_form_r,
wf.dat_reapr,
wf.dat_resp,
wf.cod_pare,
to_char(sysdate,'YYYY/MM/DD HH24:MI:SS'),
user);
END;
--
PROCEDURE insere_form_i(wnum_fich integer, wano_form in number, wnum_form in number,
			wcod_ser out varchar2, wnum_ord out number, word_form_i out number) IS
	wi form_i%ROWTYPE;
	wtipo varchar2(1) := 'I';

      cursor c_anexos is
          select nome_fich
            from temp_rec_anexos
          where recebe_num_fich = wnum_fich;
      r_anexos c_anexos%rowtype;

      cursor c_anexo_id(p_fich varchar2) is
          select anexo_id
            from tipo_anexos
            where upper(extensao) = upper(substr(p_fich,instr(p_fich,'.',-1,1)+1));
      r_anexo_id c_anexo_id%rowtype;

BEGIN
wi.cod_ser := receber_pk.trata_item(wnum_fich,wtipo,'FORM_I.COD_SER',1);
wi.num_ord := TO_NUMBER(receber_pk.trata_item(wnum_fich,wtipo,'FORM_I.NUM_ORD',1) ,'FM09');
wi.ord_form_i := TO_NUMBER(receber_pk.trata_item(wnum_fich,wtipo,'FORM_I.ORD_FORM_I',1) ,'FM09');
wi.dat_inf := TO_DATE(receber_pk.trata_item(wnum_fich,wtipo,'FORM_I.DAT_INF',1),'YYYYMMDD');
wi.obs := receber_pk.trata_item(wnum_fich,wtipo,'FORM_I.OBS',1);
wi.deve_aguard := receber_pk.trata_item(wnum_fich,wtipo,'FORM_I.DEVE_AGUARD',1);
wi.cri_dat := to_Char(sysdate,'YYYY/MM/DD HH24:MI:SS');
wi.cri_uti := user;
wcod_ser := wi.cod_ser;
wnum_ord := wi.num_ord;
word_form_i := wi.ord_form_i;
insert into FORM_I(
	ano_form,
	num_form,
	cod_ser,
	num_ord,
	ord_form_i,
	dat_inf,
	obs,
	cri_dat,
	cri_uti,
	deve_aguard,
	tip_i)
values (
	wano_form,
	wnum_form,
	wi.cod_ser,
	wi.num_ord,
	wi.ord_form_i,
	wi.dat_inf,
	wi.obs,
	wi.cri_dat,
	wi.cri_uti,
	wi.deve_aguard,
	'R' );

-- insere os anexos
open c_anexos;
loop
    fetch c_anexos into r_anexos;
    exit when c_anexos%notfound;

    r_anexo_id.anexo_id := null;
    open c_anexo_id(r_anexos.nome_fich);
    fetch c_anexo_id into r_anexo_id;
    close c_anexo_id;

    insert into anexos (nome_fich, tip_form,
                        ano_form, num_form, cod_ser_i,num_ord_i,ord_form_i,
                        anexo_id
                       )
                values ( r_anexos.nome_fich,'I',
                         wano_form, wnum_form,wi.cod_ser,wi.num_ord,wi.ord_form_i,
                         r_anexo_id.anexo_id
                       );
end loop;
close c_anexos;

EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN NULL;
END;
--
--
PROCEDURE insere_form_z(wnum_fich integer, wano_form number, wnum_form number) IS
wz form_Z%ROWTYPE;
wtipo varchar2(1) := 'Z';
BEGIN
   wz.cod_pos := Taref.Busca_Param_Glo1(3, null);
   wz.dat_conced_ped := TO_DATE(receber_pk.trata_item(wnum_fich,wtipo,'FORM_Z.DAT_CONCED_PED',1),'YYYYMMDD');
   insert into form_z(ano_form,num_form,dat_conced_ped, cod_pos)
   values(wano_form,wnum_form,wz.dat_conced_ped, wz.cod_pos);
   exception when others then null;
END;
--
END;
/

prompt
prompt Creating package body REGRAS
prompt ============================
prompt
CREATE OR REPLACE PACKAGE BODY RPV.REGRAS AS
--
FUNCTION V_Name(campo in varchar2) RETURN number IS
  c_false boolean := TRUE ;
  conjunto varchar2(255) ;
  letra varchar2(1) ;
BEGIN
  conjunto := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ''-/.? ' ;
  letra := substr(campo,1,1) ;
  if letra = '+' and length(campo) > 1 then
    return(2) ;
  end if ;
  for i in 1..length(campo) loop
    letra := substr(campo,i,1) ;
    c_false := (conjunto like '%'||letra||'%') ;
    if not c_false then
      return(i) ;
    end if ;
  end loop ;
  return(0) ;
END;
--
FUNCTION V_Name2(campo in varchar2) RETURN number IS
  c_false boolean := TRUE ;
  conjunto varchar2(255) ;
  letra varchar2(1) ;
BEGIN
  conjunto := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ''-/.? ' ;
  if nvl(campo,'+') = '+' then
     return(0) ;
  end if ;
  letra := substr(campo,1,1) ;
  if letra = '+' and length(campo) > 1 then
    return(2) ;
  end if ;
  for i in 1..length(campo) loop
    letra := substr(campo,i,1) ;
    c_false := (conjunto like '%'||letra||'%') ;
    if not c_false then
      return(i) ;
    end if ;
  end loop ;
  return(0) ;
END;
--
FUNCTION V_ALPHANUM(campo in varchar2) RETURN number IS
  c_false boolean := TRUE ;
  conjunto varchar2(255) ;
  letra varchar2(1) ;
BEGIN
  conjunto := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' ;
  if campo is null then
     return(0) ;
  end if ;
  for i in 1..length(campo) loop
    letra := substr(campo,i,1) ;
    c_false := (conjunto like '%'||letra||'%') ;
    if not c_false then
      return(i) ;
    end if ;
  end loop ;
  return(0) ;
END;
--
FUNCTION V_ALPHANUMBlank(campo in varchar2) RETURN number IS
  c_false boolean := TRUE ;
  conjunto varchar2(255) ;
  letra varchar2(1) ;
BEGIN
  conjunto := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.,-()/''=:? ' ;
  letra := substr(campo,1,1) ;
  if letra = '+' and length(campo) > 1 then
    return(2) ;
  end if ;
  for i in 1..length(campo) loop
    letra := substr(campo,i,1) ;
    c_false := (conjunto like '%'||letra||'%') ;
    if not c_false then
      return(i) ;
    end if ;
  end loop ;
  return(0) ;
END;
--
FUNCTION V_ALPHANUMBlank2(campo in varchar2) RETURN number IS
  c_false boolean := TRUE ;
  conjunto varchar2(255) ;
  letra varchar2(1) ;
BEGIN
  conjunto := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.,-()/''=:? ' ;
  if nvl(campo,'+') = '+' then
     return(0) ;
  end if ;
  letra := substr(campo,1,1) ;
  if letra = '+' and length(campo) > 1 then
    return(2) ;
  end if ;
  for i in 1..length(campo) loop
    letra := substr(campo,i,1) ;
    c_false := (conjunto like '%'||letra||'%') ;
    if not c_false then
      return(i) ;
    end if ;
  end loop ;
  return(0) ;
END;
--
FUNCTION V_NUMBER(campo in varchar2) RETURN number IS
  c_false boolean := TRUE ;
  conjunto varchar2(255) ;
  letra varchar2(1) ;
BEGIN
  conjunto := '0123456789' ;
  for i in 1..length(campo) loop
    letra := substr(campo,i,1) ;
    c_false := (conjunto like '%'||letra||'%') ;
    if not c_false then
      return(i) ;
    end if ;
  end loop ;
  return(0) ;
END;
--
FUNCTION V_DATE(campo in varchar2) RETURN number IS
	c_false boolean := TRUE ;
	conjunto varchar2(255) ;
	letra varchar2(1) ;
	wano number(4);
	wmes number(2);
	wdia number(2);
        wdat2 varchar2(8);
	ult_dia number(2);
BEGIN
	IF length(campo) != 8 THEN
		RETURN(1);
	END IF;
	conjunto := '0123456789' ;
	for i in 1..length(campo) loop
	    letra := substr(campo,i,1) ;
	    c_false := (conjunto like '%'||letra||'%') ;
	    if not c_false then
	      return(i) ;
	    end if ;
	end loop ;
--
	wano := TO_NUMBER(SUBSTR(campo,1,4));
	wmes := TO_NUMBER(SUBSTR(campo,5,2));
	wdia := TO_NUMBER(SUBSTR(campo,7,2));
	if wmes > 12 THEN
		RETURN(1);
	end if;
	if wano > 0 and wmes > 0 and wdia > 0 then
		wdat2 := substr(campo,1,6)||'01';
		ult_dia := TO_NUMBER(TO_CHAR(LAST_DAY(TO_DATE(wdat2,'YYYYMMDD')),'DD'));
		if wdia > ult_dia THEN
			RETURN(1);
		else
			RETURN(0);
		end if;
	end if;
  return(0) ;
END;
--
FUNCTION V_DATE_FORMAT(campo in varchar2,formato in varchar2) RETURN number IS
	wano number(4);
	wmes number(2);
	wdia number(2);
	wano_form varchar2(4);
	wmes_form varchar2(2);
	wdia_form varchar2(2);
BEGIN
	wano := to_number(substr(campo,1,4));
	wmes := to_number(substr(campo,5,2));
	wdia := to_number(substr(campo,7,2));
	wano_form := substr(formato,1,4);
	wmes_form := substr(formato,5,2);
	wdia_form := substr(formato,7,2);
--
	if wano_form = 'YYYY' and wano = 0 then
		RETURN(1);
	end if;
	if wmes_form = 'MM' and wmes = 0 then
		RETURN(2);
	end if;
	if wdia_form = 'DD' and wdia = 0 then
		RETURN(3);
	end if;
	RETURN(0);
--
exception when others then
	insert into horta(campo,conteudo,erro) values('V_DATE_FORMAT',formato||'#'||campo,901);
	RETURN(1);
END;
--
FUNCTION V_Code(Nome_var in varchar2, campo in varchar2)
		RETURN number IS
	wret number;
BEGIN
        IF Nome_var = 'ENVIO.REF_PED_ENVIO' THEN
	     wret := ENVIAR_PK.existe_codigo(substr(Nome_var,1,3), campo);
        ELSE
	     wret := ENVIAR_PK.existe_codigo(Nome_var, campo);
        END IF;
	if wret = 0 then
		RETURN(0);
	else
		RETURN(1);
	end if;
END;
--
FUNCTION V_LENGTH(formato in varchar2, campo in varchar2)
		RETURN number IS
	wtipo char(1);
	wlength number;
BEGIN
	if formato is null then
		RETURN(0);
	end if;
	wtipo := substr(formato,1,1);
	if V_Number(substr(formato,2)) = 0 then
		wlength	:= to_number(substr(formato,2));
	else
		RETURN(0);
	end if;
	if wtipo = 'F' then
		if length(campo) != wlength then
			RETURN(1);
		end if;
	end if;
	if wtipo = 'V' then
		if length(campo) > wlength then
			RETURN(1);
		end if;
	end if;
	RETURN(0);
END;
--
FUNCTION FN_REGRA_1(Conteudo varchar2)
		RETURN number IS
	wdat_sys varchar2(8) := to_Char(sysdate,'YYYYMMDD');
	wano varchar2(4) := substr(conteudo,1,4);
	wmes varchar2(2) := substr(conteudo,5,2);
	wdia varchar2(2) := substr(conteudo,7,2);
BEGIN
	IF wano = '0000' or wmes = '00' or wdia = '00' THEN
		RETURN(0);
	END IF;
	IF conteudo >= wdat_sys then
		RETURN(0);
	ELSE
		RETURN(1);
	END IF;
exception when others then
	insert into horta(campo,erro) values('Regras',1);
END;
--
FUNCTION FN_REGRA_2(Conteudo varchar2)
		RETURN number IS
	wdat_sys varchar2(8) := to_Char(sysdate,'YYYYMMDD');
	wano varchar2(4) := substr(conteudo,1,4);
	wmes varchar2(2) := substr(conteudo,5,2);
	wdia varchar2(2) := substr(conteudo,7,2);
BEGIN
	IF wano = '0000' or wmes = '00' or wdia = '00' THEN
		RETURN(0);
	END IF;
	IF conteudo <= wdat_sys then
		RETURN(0);
	ELSE
		RETURN(1);
	END IF;
exception when others then
	insert into horta(campo,erro) values('Regras',2);
END;
--
FUNCTION FN_REGRA_3(Conteudo varchar2, Num_Fich Number)
		RETURN number IS
	wdat_ped varchar2(8);
	CURSOR c1 IS
		SELECT conteudo from temp_rec_detalhe
			WHERE Recebe_Num_Fich = Num_Fich
			  AND Num_Campo = 25;
BEGIN
	OPEN c1;
	FETCH c1 INTO wdat_ped;
	IF c1%NOTFOUND THEN
		CLOSE c1;
		RETURN(0);
	END IF;
	IF conteudo > wdat_ped then
		RETURN(0);
	ELSE
		RETURN(1);
	END IF;
exception when others then
	insert into horta(campo,erro) values('Regras',3);
END;
--
FUNCTION FN_REGRA_4(Conteudo varchar2, Num_Fich Number)
		RETURN number IS
	wdat_ped varchar2(8);
	CURSOR c1 IS
		SELECT conteudo from temp_rec_detalhe
			WHERE Recebe_Num_Fich = Num_Fich
			  AND Num_Campo = 25;
BEGIN
	OPEN c1;
	FETCH c1 INTO wdat_ped;
	IF c1%NOTFOUND THEN
		CLOSE c1;
		RETURN(0);
	END IF;
	IF conteudo < wdat_ped then
		RETURN(0);
	ELSE
		RETURN(1);
	END IF;
exception when others then
	insert into horta(campo,erro) values('Regras',4);
END;
--
FUNCTION FN_REGRA_5(Conteudo varchar2, Num_Fich Number)
		RETURN number IS
	wdat_ida varchar2(8);
	CURSOR c1 IS
		SELECT conteudo from temp_rec_detalhe
			WHERE Recebe_Num_Fich = Num_Fich
			  AND Num_Campo = 13;
BEGIN
	OPEN c1;
	FETCH c1 INTO wdat_ida;
	IF c1%NOTFOUND THEN
		CLOSE c1;
		RETURN(0);
	END IF;
	IF conteudo > wdat_ida then
		RETURN(0);
	ELSE
		RETURN(1);
	END IF;
exception when others then
	insert into horta(campo,erro) values('Regras',5);
END;
--
FUNCTION FN_REGRA_6(Conteudo varchar2, Num_Fich Number)
		RETURN number IS
	wnome_conj varchar2(120);
	CURSOR c1 IS
		SELECT conteudo from temp_rec_detalhe
			WHERE Recebe_Num_Fich = Num_Fich
			  AND Num_Campo = 29;
BEGIN
	OPEN c1;
	FETCH c1 INTO wnome_conj;
	IF c1%NOTFOUND THEN
		CLOSE c1;
		RETURN(0);
	END IF;
	IF wnome_conj = '+' THEN
		IF conteudo = '00000000' THEN
			RETURN(0);
		ELSE
			RETURN(1);
		END IF;
	END IF;
	if V_Date(conteudo) = 0 then
		RETURN(0);
	else
		RETURN(1);
	end if;
exception when others then
	insert into horta(campo,erro) values('Regras',6);
END;
--
FUNCTION FN_REGRA_7(Conteudo varchar2, Num_Fich Number)
		RETURN number IS
	CURSOR c1 IS
		SELECT conteudo from temp_rec_detalhe
			WHERE Recebe_Num_Fich = Num_Fich
			  AND Num_Campo = 29;
	wnome_conj varchar2(120);
BEGIN
	OPEN c1;
	FETCH c1 INTO wnome_conj;
	IF c1%NOTFOUND THEN
		CLOSE c1;
		RETURN(0);
	END IF;
	CLOSE c1;
	IF wnome_conj = '+' THEN
		IF conteudo = '+' THEN
			RETURN(0);
		else
			RETURN(1);
		end if;
	END IF;
	IF V_Name(conteudo) = 0 THEN
		RETURN(0);
	ELSE
		RETURN(1);
	END IF;
exception when others then
	insert into horta(campo,erro) values('Regras',7);
END;
--
FUNCTION FN_REGRA_8(Conteudo in out varchar2, Tipo_Form in varchar2)
		RETURN number IS
	CURSOR c1 IS
		SELECT tip_vis from t_visto
			where NVL(des_multi_pais, 'X') = Conteudo
			  and con_sch = 'S';
	wtip_vis varchar2(2);
BEGIN
	if Tipo_Form != 'C' then
		return(0);
	end if;
	open c1;
	fetch c1 into wtip_vis;
	if c1%NOTFOUND then
		close c1;
		return(0);
	end if;
	close c1;
	conteudo := wtip_vis ;
	RETURN(0);
	exception when others then
	RETURN(1);
END;
--
FUNCTION FN_REGRA_9(Conteudo varchar2)
	RETURN number IS
	wvalor number := to_number(conteudo);
BEGIN
	if wvalor < 0 or wvalor > 90 then
		RETURN(1);
	else
		RETURN(0);
	end if;
exception when others then
	insert into horta(campo,erro) values('Regras',9);
END;
--
FUNCTION FN_REGRA_10(Conteudo varchar2, Num_Fich Number, Erro OUT number)
		RETURN number IS
	CURSOR c1 IS
		SELECT conteudo from temp_rec_detalhe
			WHERE Recebe_Num_Fich = Num_Fich
			  AND Num_Campo = 51;
	CURSOR c2 IS
		SELECT conteudo from temp_rec_detalhe
			WHERE Recebe_Num_Fich = Num_Fich
			  AND Num_Campo = 52;
	conteudo2 varchar2(120);
BEGIN
	IF conteudo = '1' THEN
		OPEN c1;
		FETCH c1 INTO conteudo2;
		IF c1%NOTFOUND THEN
			CLOSE c1;
			Erro := 51;
			RETURN(1);
		END IF;
		CLOSE c1;
	ELSIF conteudo = '2' THEN
		OPEN c2;
		FETCH c2 INTO conteudo2;
		IF c2%NOTFOUND THEN
			CLOSE c2;
			Erro := 52;
			RETURN(1);
		END IF;
		CLOSE c2;
	ELSE
		Erro := 50;
		RETURN(1);
	END IF;
	RETURN(0);
exception when others then
	insert into horta(campo,erro) values('Regras',10);
END;
--
FUNCTION FN_REGRAS(Num_Fich in Number, Situacao in varchar2,
		   Tipo_Form in varchar2, Num_Campo in number, Ordem in number,
		   Dir_Comm in varchar2, Conteudo in out varchar2, Erro_Sup OUT number)
		RETURN number IS
--
	werro 		number(1) := 0;
	werro_sup 	number(3);
--
	CURSOR c_id IS
		SELECT * from id_campo_form i
			WHERE i.Tip_form = Tipo_Form
			  AND i.Dir_Comm = Dir_Comm
			  AND i.Num_Camp = Num_Camp
			  AND i.Ordem = Ordem;
	w_id	id_campo_Form%ROWTYPE;
	regra	number(3);
--
BEGIN
  IF Situacao is null then
	RETURN(0);
  END IF;
--
  OPEN c_id;
  FETCH c_id into w_id;
  IF c_id%NOTFOUND then
	CLOSE c_id;
	RETURN(0);
  END IF;
  CLOSE c_id;
--
-- Situacao "1" (Testes suplementares)
--
  Erro_Sup := Num_Campo;
  IF Situacao = '1' THEN
	if w_id.regra = 1 then
		werro := FN_REGRA_1(Conteudo);
	elsif w_id.regra = 2 then
		werro := FN_REGRA_2(Conteudo);
	elsif w_id.regra = 3 then
		werro := FN_REGRA_3(Conteudo, Num_Fich);
	elsif w_id.regra = 4 then
		werro := FN_REGRA_4(Conteudo, Num_Fich);
	elsif w_id.regra = 5 then
		werro := FN_REGRA_5(Conteudo, Num_Fich);
	elsif w_id.regra = 6 then
		werro := FN_REGRA_6(Conteudo, Num_Fich);
	elsif w_id.regra = 7 then
		werro := FN_REGRA_7(Conteudo, Num_Fich);
	elsif w_id.regra = 9 then
		werro := FN_REGRA_9(Conteudo);
	elsif w_id.regra = 10 then
		werro := FN_REGRA_10(Conteudo, Num_Fich, Werro_Sup);
		Erro_Sup := Werro_Sup;
	end if;
	if w_id.tip_form = 'A' and
	   num_campo = 26 and
	   conteudo not in ('B', 'C', 'C1', 'C2', 'C3', 'C5') then
	   werro := 1;
	end if;
--
-- Situacao "2" (OperaÃ§Ãµes PÃ³s-testes suplementares)
--
  ELSE /* sÃ³ existe um caso */
	  werro := FN_REGRA_8(Conteudo, Tipo_Form);
  END IF;
--
  RETURN(werro);
--
exception when others then
	insert into horta(campo,erro) values('Regras',101);
	RETURN(1);
--
END;
--
FUNCTION FASE_2A (Num_Fich number, Tipo_Form varchar2, Erro_Sup OUT number)
		RETURN number IS
	CURSOR c1 IS
		SELECT * FROM temp_rec_detalhe
			WHERE recebe_num_fich = Num_Fich
			 ORDER BY num_campo;
	det temp_rec_detalhe%ROWTYPE;
--
	CURSOR c2 IS
		SELECT * FROM id_campo_form
			WHERE tip_form = Tipo_Form
			  AND Dir_Comm = 'R'
			  AND TO_CHAR(Num_Camp,'FM009') = det.num_campo;
	id id_campo_form%ROWTYPE;
--
	werro number(1);
BEGIN
	OPEN c1;
	LOOP
		FETCH c1 into det;
		if c1%NOTFOUND then
			EXIT;
		end if;
		Erro_Sup := det.Num_Campo;
		OPEN c2;
		FETCH c2 into id;
		if c2%NOTFOUND then
			CLOSE c2;
			CLOSE c1;
			RETURN(1);
		end if;
		CLOSE c2;
		if id.tipo_campo = 1 then
			werro := V_AlphaNum(det.conteudo);
			if werro = 0 then
				werro := V_LENGTH(id.formato_entrada, det.conteudo);
			end if;
		elsif id.tipo_campo = 2 then
			werro := V_Number(det.conteudo);
		elsif id.tipo_campo = 3 then
			werro := V_Date(det.conteudo);
			if werro = 0 then
				werro := V_DATE_FORMAT(det.conteudo, id.formato_entrada);
			end if;
		elsif id.tipo_campo = 4 then
			werro := V_AlphaNumBlank(det.conteudo);
			if werro = 0 then
				werro := V_LENGTH(id.formato_entrada, det.conteudo);
			end if;
		elsif id.tipo_campo = 5 then
			werro := V_Code(id.Nome_var,det.conteudo);
			if werro = 0 then
				werro := V_LENGTH(id.formato_entrada, det.conteudo);
			end if;
		elsif id.tipo_campo = 6 then
			werro := V_Name(det.conteudo);
			if werro = 0 then
				werro := V_LENGTH(id.formato_entrada, det.conteudo);
			end if;
		elsif id.tipo_campo = 7 then
			werro := V_AlphaNumBlank2(det.conteudo);
			if werro = 0 then
				werro := V_LENGTH(id.formato_entrada, det.conteudo);
			end if;
		elsif id.tipo_campo = 8 then
			werro := V_Name2(det.conteudo);
			if werro = 0 then
				werro := V_LENGTH(id.formato_entrada, det.conteudo);
			end if;
		end if;
		if werro != 0 then
			CLOSE c1;
			RETURN(1);
		else
			if FN_REGRAS(Num_Fich, '1', id.Tip_Form, id.Num_Camp,
			 		   id.Ordem,'R', det.Conteudo, Erro_Sup) = 1 then
				CLOSE c1;
				RETURN(1);
			end if;
		end if;
	END LOOP;
	CLOSE c1;
--
	RETURN(0);
--
exception when others then
	insert into horta(campo,conteudo,erro) values('Regras',to_char(id.Num_Camp),102);
	RETURN(1);
--
END;
--
FUNCTION CONTEUDO_CAMPO(Wnum_fich in number, Wnum_campo in varchar2)
		RETURN varchar2 IS
	CURSOR c_det IS
		SELECT * from temp_rec_detalhe
			WHERE recebe_num_fich = Wnum_fich
			  AND to_number(Num_campo) = to_number(Wnum_campo);
	w_det temp_rec_detalhe%ROWTYPE;
--
BEGIN
	OPEN c_det;
	FETCH c_det into w_det;
	IF c_det%NOTFOUND then
		RETURN(NULL);
	END IF;
	CLOSE c_det;
	RETURN(w_det.conteudo);
END;
--
FUNCTION TESTE_DUP(WTipo_Form in varchar2,WRef_Ped_Recep in varchar2, WNum_Fich in number)
		RETURN number IS
	CURSOR c_recep IS
		SELECT * from recep
			where Tip_Form_Recep = WTipo_Form
			  and Ref_Ped_Recep = WRef_Ped_Recep
			  and Est_Recep in ('N','L');
	w_recep recep%ROWTYPE;
--
	wcontador number := 0;
BEGIN
	OPEN c_recep;
	FETCH c_recep INTO w_recep;
	IF c_recep%NOTFOUND then
		wcontador := 0;
	ELSE
		wcontador := 1;
	END IF;
	CLOSE c_recep;
	if WTipo_Form in ('A','C') then
		if wcontador != 0 then
			RETURN(1);
		end if;
		RETURN(0);
	end if;
	if WTipo_Form = 'B' then
		if wcontador != 0 then
			if conteudo_campo(WNum_Fich,'40') =
			   conteudo_campo(w_recep.recebe_num_fich,'40') then
				RETURN(1);
			end if;
		end if;
		return(0);
	end if;
	if WTipo_Form = 'E' then
		if wcontador != 0 then
			if conteudo_campo(WNum_Fich,'47') =
			   conteudo_campo(w_recep.recebe_num_fich,'47') then
				RETURN(1);
			end if;
		end if;
		return(0);
	end if;
	RETURN(0);
END;
--
END regras;
/

prompt
prompt Creating package body SISII
prompt ===========================
prompt
CREATE OR REPLACE PACKAGE BODY RPV.SISII
IS

/*******************************************************************************
 *
 * Procedure Name : generate_envelope
 *
 * Description    : Generates SOAP envelope from WebService request.
 *
 * Parameters     : (IO) req - Request for WebService
 *                  (IO) env - SOAP Envelope.
 *
 ******************************************************************************/
PROCEDURE show_envelope(env IN VARCHAR2) AS
    i   pls_integer;
    len pls_integer;
  BEGIN
    i := 1; len := length(env);
    WHILE (i <= len) LOOP
      dbms_output.put_line(substr(env, i, 60));
      i := i + 60;
    END LOOP;
  END;
PROCEDURE generate_envelope(req IN OUT request,
                            env IN OUT VARCHAR2)
IS
BEGIN

    env :=  '<?xml version="1.0" encoding = "UTF-8"?>' ||
      '<SOAP-ENV:Envelope ' ||
		  'xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" ' ||
		  'xmlns:wan="http://person.ws.sis2.sef.pt/"> ' ||
		  '<SOAP-ENV:Header/> ' ||
      '<SOAP-ENV:Body>'||
		  req.BODY ||
		  '</SOAP-ENV:Body>' ||
		  '</SOAP-ENV:Envelope>';

END;

/*******************************************************************************
 *
 * Procedure Name : check_fault
 *
 * Description    : Check WebService response for faults.
 *
 * Parameters     : (IO) resp    - WebService SOAP response
 *
 ******************************************************************************/
PROCEDURE check_fault(resp IN OUT response)
IS
   fault_node XMLTYPE;
   fault_code VARCHAR2(256);
   fault_string VARCHAR2(32767);
BEGIN
   fault_node := resp.doc.EXTRACT('/soap:Fault',
  'xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/');
  IF (fault_node IS NOT NULL) THEN
     fault_code := fault_node.EXTRACT('/soap:Fault/faultcode/child::text()',
     'xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/').getstringval();
     fault_string := fault_node.EXTRACT('/soap:Fault/faultstring/child::text()',
     'xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/').getstringval();
  RAISE_APPLICATION_ERROR(-20000, fault_code || ' - ' || fault_string);
 END IF;
END check_fault;

/*******************************************************************************
 *
 * Function  Name : invoke
 *
 * Description    : Invoke WebService with given SOAP request.
 *
 * Parameters     : (IO) req    - SOAP request for WebService
 *                  (I)  url    - WebService endpoint.
 *                  (I)  action - SOAP Action.
 *
 * Returns        : response - WebService response to request
 *
 ******************************************************************************/
FUNCTION invoke(req IN OUT NOCOPY request,
                url IN VARCHAR2,
                action IN VARCHAR2,
				        username IN VARCHAR2,
                passwd   IN VARCHAR2,
                env_msg OUT VARCHAR2,
                v_ano_form IN NUMBER,
                v_num_form IN NUMBER)
RETURN response
IS
    env          VARCHAR2(32767);
    env_tratado  VARCHAR2(32767);
    http_req     UTL_HTTP.REQ;
    http_resp    UTL_HTTP.RESP;
    resp         response;
BEGIN
   -- Generate SOAP Envelope
   generate_envelope(req, env);
   UTL_HTTP.set_proxy('192.168.169.190:80', NULL);
   http_req := UTL_HTTP.BEGIN_REQUEST(url, 'POST', 'HTTP/1.1');

   UTL_HTTP.set_persistent_conn_support(http_req, true);

   UTL_HTTP.SET_COOKIE_SUPPORT(FALSE);

   -- Set HTTP Basic Authentication user and password
   UTL_HTTP.SET_AUTHENTICATION(
    http_req,
    username,
    passwd,
    'Basic', --Basic authtorization scheme
    FALSE);  --False, as its not for proxy
   insert into LOG_NSISII(ANO_FORM, NUM_FORM, TIPO,XML_ENV,CRI_DAT)
   values(v_ano_form, v_num_form, 'E',env,to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'));

   UTL_HTTP.SET_HEADER(http_req, 'Content-Type', 'text/xml');
   UTL_HTTP.SET_HEADER(http_req, 'Content-Length', LENGTH(env));
   UTL_HTTP.SET_HEADER(http_req, 'SOAPAction', action);

   UTL_HTTP.WRITE_TEXT(http_req, env);
   env_msg := env;
   http_resp := UTL_HTTP.GET_RESPONSE(http_req);

   UTL_HTTP.READ_TEXT(http_resp, env);
   UTL_HTTP.END_RESPONSE(http_resp);
   insert into LOG_NSISII(ANO_FORM, NUM_FORM,TIPO,XML_ENV,CRI_DAT)
   values(v_ano_form, v_num_form,'R',env,to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'));
   env_tratado := replace(env,'xsi:nil=''1''','');

   resp.doc := XMLTYPE.createxml(env_tratado);

   resp.doc := resp.doc.EXTRACT('/soap:Envelope/soap:Body/child::node()',
       'xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"');

   check_fault(resp);

   RETURN resp;
END invoke;

/*******************************************************************************
 *
 * Procedure  Name : generate_body_envelope
 *
 * Description    : Generate body envelope
 *
 * Parameters     : (IO) req    - Type of query.
 *                  (IO) env    - XML Body generated.
 *
 ******************************************************************************/

PROCEDURE generate_body_envelope(req IN OUT WPQuery,
                                 env IN OUT VARCHAR2)
IS
BEGIN
   if req.firstName like '%+%' then
      env :='<wan:Query>' ||
         '<wan:criteria>' ||
         '<wan:gender xmlns:ns2="http://www.w3.org/2001/XMLSchema-instance" ns2:nil="true"/>' ||
         '<wan:dateOfBirth>' ||
         '<wan:value>' ||
         req.birthDate ||
         '</wan:value>' ||
         '<wan:searchMode xmlns:ns2="http://www.w3.org/2001/XMLSchema-instance" ns2:nil="true"/>' ||
         '</wan:dateOfBirth>' ||
         '<wan:firstNames xmlns:ns2="http://www.w3.org/2001/XMLSchema-instance" ns2:nil="true"/>' ||
         '<wan:nationality xmlns:ns2="http://www.w3.org/2001/XMLSchema-instance" ns2:nil="true"/>' ||
         '<wan:familyNames>' ||
         '<wan:value>' ||
         req.lastName ||
         '</wan:value>' ||
         '<wan:searchMode>' ||
         '0003.01' ||
         '</wan:searchMode>' ||
         '</wan:familyNames>' ||
         '</wan:criteria>' ||
         '</wan:Query>';
   elsif req.lastName like '%+%' then
      env :='<wan:Query>' ||
         '<wan:criteria>' ||
         '<wan:gender xmlns:ns2="http://www.w3.org/2001/XMLSchema-instance" ns2:nil="true"/>' ||
         '<wan:dateOfBirth>' ||
         '<wan:value>' ||
         req.birthDate ||
         '</wan:value>' ||
         '<wan:searchMode xmlns:ns2="http://www.w3.org/2001/XMLSchema-instance" ns2:nil="true"/>' ||
         '</wan:dateOfBirth>' ||
         '<wan:firstNames xmlns:ns2="http://www.w3.org/2001/XMLSchema-instance" ns2:nil="true"/>' ||
         '<wan:nationality xmlns:ns2="http://www.w3.org/2001/XMLSchema-instance" ns2:nil="true"/>' ||
         '<wan:familyNames>' ||
         '<wan:value>' ||
         req.firstName ||
         '</wan:value>' ||
         '<wan:searchMode>' ||
         '0003.01' ||
         '</wan:searchMode>' ||
         '</wan:familyNames>' ||
         '</wan:criteria>' ||
         '</wan:Query>';
   else
   if substr(req.birthDate,5,2) = '00' or substr(req.birthDate,7,2) = '00' then
   env :='<wan:Query>' ||
         '<wan:criteria>' ||
         '<wan:gender xmlns:ns2="http://www.w3.org/2001/XMLSchema-instance" ns2:nil="true"/>' ||
         '<wan:dateOfBirth>' ||
         '<wan:value>' ||
         req.birthDate ||
         '</wan:value>' ||
         '<wan:searchMode>' ||
         '0008.01' ||
         '</wan:searchMode>' ||
         '</wan:dateOfBirth>' ||
         '<wan:firstNames>' ||
         '<wan:value>' ||
         req.firstName ||
         '</wan:value>' ||
         '<wan:searchMode xmlns:ns2="http://www.w3.org/2001/XMLSchema-instance" ns2:nil="true"/>' ||
         '</wan:firstNames>' ||
         '<wan:nationality xmlns:ns2="http://www.w3.org/2001/XMLSchema-instance" ns2:nil="true"/>' ||
         '<wan:familyNames>' ||
         '<wan:value>' ||
         req.lastName ||
         '</wan:value>' ||
         '<wan:searchMode xmlns:ns2="http://www.w3.org/2001/XMLSchema-instance" ns2:nil="true"/>' ||
         '</wan:familyNames>' ||
         '</wan:criteria>' ||
         '</wan:Query>';
   else
   env :='<wan:Query>' ||
         '<wan:criteria>' ||
         '<wan:gender xmlns:ns2="http://www.w3.org/2001/XMLSchema-instance" ns2:nil="true"/>' ||
         '<wan:dateOfBirth>' ||
         '<wan:value>' ||
         req.birthDate ||
         '</wan:value>' ||
         '<wan:searchMode xmlns:ns2="http://www.w3.org/2001/XMLSchema-instance" ns2:nil="true"/>' ||
         '</wan:dateOfBirth>' ||
         '<wan:firstNames>' ||
         '<wan:value>' ||
         req.firstName ||
         '</wan:value>' ||
         '<wan:searchMode xmlns:ns2="http://www.w3.org/2001/XMLSchema-instance" ns2:nil="true"/>' ||
         '</wan:firstNames>' ||
         '<wan:nationality xmlns:ns2="http://www.w3.org/2001/XMLSchema-instance" ns2:nil="true"/>' ||
         '<wan:familyNames>' ||
         '<wan:value>' ||
         req.lastName ||
         '</wan:value>' ||
         '<wan:searchMode xmlns:ns2="http://www.w3.org/2001/XMLSchema-instance" ns2:nil="true"/>' ||
         '</wan:familyNames>' ||
         '</wan:criteria>' ||
         '</wan:Query>';
    end if;
    end if;

END generate_body_envelope;


/*******************************************************************************
 *
 * Function  Name : WantedPersonWSQueryRequest
 *
 * Description    : Wanted Person Query Request.
 *
 * Parameters     : (IO) req    - SOAP request for WebService
 *                  (I)  url    - WebService endpoint.
 *                  (I)  action - SOAP Action.
 *
 * Returns        : response - WebService response to request
 *
 ******************************************************************************/

FUNCTION WantedPersonWSQueryRequest(v_ano_form in number, v_num_form in number, nome1 in varchar2, apel1 in varchar2, env_msg out varchar2)
RETURN Response
IS
    wpQ WPQuery;
    env VARCHAR(32767);
    req request;
    rsp response;
    v_dat_nasc   formulario.dat_nasc%type;

BEGIN
    select substr(f.dat_nasc,1,4) || substr(f.dat_nasc,6,2) || substr(f.dat_nasc,9,2)
    into v_dat_nasc
    from formulario f, pais p
    where f.ano_form = v_ano_form and f.num_form = v_num_form
    and f.cod_pais_nac_1 = p.cod_pais;

    wpQ.lastName := apel1;
    wpQ.firstName := nome1;
    wpQ.birthDate := v_dat_nasc;

    generate_body_envelope(wpQ,env);

    req.BODY := env;

    --rsp := invoke(req,'http://sis2tst.sefad.pt/schengen-model/WSWantedPerson','Query','WSDGACCP','ob8cxh',env_msg, v_ano_form, v_num_form);
    rsp := invoke(req,'http://sis2.sefad.pt/schengen-model/WSWantedPerson','Query','WSDGACCP','dr2zuv9f',env_msg, v_ano_form, v_num_form);
    --rsp := invoke(req,'http://sis2.rnsi.local/schengen-model/WSWantedPerson','Query','WSDGACCP','dr2zuv9f',env_msg, v_ano_form, v_num_form);
    return(rsp);
END WantedPersonWSQueryRequest;
FUNCTION WantedPersonWSQueryRequest_Man(nome1 in varchar2, apel1 in varchar2, dat_nasc1 in varchar2)
RETURN Response
IS
    wpQ WPQuery;
    env VARCHAR(32767);
    req request;
    rsp response;
    v_dat_nasc   formulario.dat_nasc%type;
    teste        varchar2(32000);
BEGIN
    select substr(dat_nasc1,1,4) || substr(dat_nasc1,6,2) || substr(dat_nasc1,9,2)
    into v_dat_nasc
    from dual;

    wpQ.lastName := apel1;
    wpQ.firstName := nome1;
    wpQ.birthDate := v_dat_nasc;

    generate_body_envelope(wpQ,env);

    req.BODY := env;

    --rsp := invoke(req,'http://sis2tst.sefad.pt/schengen-model/WSWantedPerson','Query','WSDGACCP','ob8cxh',teste,null,null);
    --rsp := invoke(req,'http://sis2.sefad.pt/schengen-model/WSWantedPerson','Query','WSDGACCP','dr2zuv9f',teste,0,0);
    rsp := invoke(req,'http://sis2.rnsi.local/schengen-model/WSWantedPerson','Query','WSDGACCP','dr2zuv9f',teste,0,0);
    return(rsp);
END WantedPersonWSQueryRequest_Man;
FUNCTION CHAMA_SISII(ano_form1 in number, num_form1 in number, nome1 in varchar2, apel1 in varchar2, env_msg out varchar2)
RETURN VARCHAR2
IS
x         Response;
BEGIN
x := WantedPersonWSQueryRequest(ano_form1,num_form1, nome1, apel1, env_msg);
return(x.doc.getstringval());
END CHAMA_SISII;

FUNCTION CHAMA_SISII_MAN(nome1 in varchar2, apel1 in varchar2, dat_nasc1 in varchar2, retorno out varchar2, retorno2 out varchar2)
RETURN varchar2
IS
x         Response;
BEGIN
x := WantedPersonWSQueryRequest_Man(nome1, apel1, dat_nasc1);

retorno := substr(x.doc.getstringval(),1,2000);
retorno2 := substr(x.doc.getstringval(),2001,2000);
return substr(x.doc.getstringval(),4001);

END CHAMA_SISII_MAN;

FUNCTION ANALISA(mensagem in varchar2, cod_pais_indef out varchar2)
RETURN VARCHAR2
IS
doc            xmldom.DOMDocument;
node           xmldom.DOMNode;
node2      	   xmldom.DOMNode;
chldrn     	   xmldom.DOMNodeList;
len	   	       number;
xmlfile        CLOB;
p              xmlparser.parser;
flag           number(3):=0;
begin
xmlfile := mensagem;
-- create a parser
p := xmlparser.newParser;
-- parse the XML document
xmlparser.ParseCLOB(p,xmlfile);

-- get document
doc := xmlparser.getDocument(p);

-- free the parser
xmlparser.freeParser(p);

-- get all elements
chldrn := xmldom.getElementsByTagName(doc, '*');
len := xmldom.getLength(chldrn);

for i in 0..len-1 loop
  node := xmldom.item(chldrn, i);
  node2 := xmldom.getFirstChild(node);
  if not xmldom.IsNull(node2) then
     if xmldom.getNodeType(node2) = xmldom.TEXT_NODE then
        if xmldom.getNodeName(node) = 'ns0:errors' then
              flag := -1;
              exit;
        end if;
        if xmldom.getNodeName(node) = 'ns0:wiFirstnames' then
           flag := flag + 1;
	      end if;
        if xmldom.getNodeName(node) = 'ns0:siSchengenId' then
           cod_pais_indef := xmldom.getNodeValue(node2);
           cod_pais_indef := substr(cod_pais_indef,1,4);
	      end if;
     end if;
  end if;
end loop;

-- free the memory used by XML document
if not xmldom.isnull(doc) then
   xmldom.freeDocument(doc);
end if;
if flag = 0 then
   return('0');
elsif flag = 1 then
   return('1');
elsif flag = -1 then
   return('I');
elsif flag > 1 then
   --return('1');
   return(to_char(flag));
end if;



-- deal with exceptions
exception
when xmldom.INDEX_SIZE_ERR then
   raise_application_error(-20120, 'Index Size error');

when xmldom.DOMSTRING_SIZE_ERR then
   raise_application_error(-20120, 'String Size error');

when xmldom.HIERARCHY_REQUEST_ERR then
   raise_application_error(-20120, 'Hierarchy request error');

when xmldom.WRONG_DOCUMENT_ERR then
   raise_application_error(-20120, 'Wrong doc error');

when xmldom.INVALID_CHARACTER_ERR then
   raise_application_error(-20120, 'Invalid Char error');

when xmldom.NO_DATA_ALLOWED_ERR then
   raise_application_error(-20120, 'Nod data allowed error');

when xmldom.NO_MODIFICATION_ALLOWED_ERR then
   raise_application_error(-20120, 'No mod allowed error');

when xmldom.NOT_FOUND_ERR then
   raise_application_error(-20120, 'Not found error');

when xmldom.NOT_SUPPORTED_ERR then
   raise_application_error(-20120, 'Not supported error');

when xmldom.INUSE_ATTRIBUTE_ERR then
   raise_application_error(-20120, 'In use attr error');
END ANALISA;

END;
/

prompt
prompt Creating package body TAREF
prompt ===========================
prompt
CREATE OR REPLACE PACKAGE BODY RPV.TAREF AS
FUNCTION estado_actual(ano_form1 in number, num_form1 in number,
                  cod_estado_actual out varchar2, cod_taref_actual out varchar2,
                  form_reg_actual out varchar2, tip_vis_actual out varchar2)
            RETURN boolean IS
/* FUNÃ¿Ã¿O QUE :
 DEVOLVE TRUE, se nÃ£o existe ainda nenhum registo em form_est ou
              jÃ¡ existe e tem data de realizaÃ§Ã£o nula (os campos out
              sÃ£o preenchidos) ;
 DEVOLVE FALSE, se todas as tarefas tÃªm data de realizaÃ§Ã£o
              preenchidas. - Em principio tem todas as tarefas
                            terminadas.
*/
  cursor c1 is
   select * from form_est f
     where f.ano_form = ano_form1 and f.num_form = num_form1
     order by to_number(f.seq_insercao) desc;
  r_fe FORM_EST%ROWTYPE ;
  encontrou boolean := FALSE;
BEGIN
  open c1 ;
  fetch c1 into r_fe;
  if c1%notfound then
     encontrou := TRUE; -- caso do primeiro estado, com primeira tarefa
  else
     cod_estado_actual	:= r_fe.cod_est ;
     cod_taref_actual 	:= r_fe.cod_taref ;
     form_reg_actual 	:= r_fe.form_reg ;
     tip_vis_actual 	:= r_fe.tip_vis ;
     encontrou 		:= TRUE ;
  end if ;
  close c1 ;
--tarefa_master.grava_erro('taref.estado_actual', 'fechou cursor f_e');
  return(encontrou) ;
END;
FUNCTION busca_param_glo1(ind_para1 in number,
                      valor in varchar2 Default NULL) RETURN varchar2 IS
  val_para1 Varchar2(255);
  cursor e is
   select val_param
     from param_det
     where ind_para = ind_para1 and UPPER(Val_Param) = UPPER(Valor);
BEGIN
  select val_para
   into Val_Para1
   from Param_Glo
   where ind_para = Ind_Para1;
 if val_Para1 is null and valor is not null then
   for e1 in e loop
     Val_Para1 := e1.Val_Param;
   end loop ;
 end if ;
 return (val_para1);
 exception
  when others then
    Val_para1 := NULL;
    return (val_para1);
END;
FUNCTION tarefa_nula RETURN boolean IS
BEGIN
  return (TRUE) ;
END;
FUNCTION INSERE_FORM_SCH(f_s_ANO_FORM in number, f_s_NUM_FORM in number,
                f_s_COD_PAIS in varchar2, f_s_DAT_LIM_RESP in date,
                f_s_DAT_PARE_SCH in date, f_s_DAT_PRORR in date,
                f_s_COD_PARE in varchar2, f_s_CRI_DAT in varchar2,
                f_s_CRI_UTI in varchar2, f_s_ALT_DAT in varchar2,
                f_s_ALT_UTI in varchar2, VVTL1 in Boolean)
        return Boolean Is
   cursor b_f_s is
	select * from Form_Sch
		where Ano_Form = f_s_ANO_FORM and
		      Num_Form = f_s_NUM_FORM and
		      Cod_Pais = f_s_COD_PAIS;
   aj_f_s FORM_SCH%ROWTYPE;
   aj_vvtl Varchar2(1) ;
 Begin
   if vvtl1 then
	aj_vvtl := 'S' ;
     else
	aj_vvtl := 'N' ;
   End if;
   open b_f_s;
   fetch b_f_s into aj_f_s;
   if b_f_s%FOUND then
	if VVTL1 and nvl(aj_f_s.VVTL,'N') = 'N' then
	   Update Form_Sch set 	VVTL = aj_vvtl,
				ALT_DAT = to_char(Sysdate,'YYYY/MM/DD HH24:MI:SS'),
				ALT_UTI = User
		where Ano_Form = f_s_ANO_FORM and
		      Num_Form = f_s_NUM_FORM and
		      Cod_Pais = f_s_COD_PAIS;
	End if ;
     else
	Insert into Form_Sch(Ano_Form, Num_Form, COD_PAIS, DAT_LIM_RESP,
                  DAT_PARE_SCH, DAT_PRORR, COD_PARE, VVTL,
                  CRI_DAT, CRI_UTI, ALT_DAT, ALT_UTI)
        Values(F_S_Ano_Form, f_s_Num_Form, f_s_COD_PAIS,
           f_s_DAT_LIM_RESP, f_s_DAT_PARE_SCH,
           f_s_DAT_PRORR, f_s_COD_PARE, aj_vvtl,
           to_char(Sysdate,'YYYY/MM/DD HH24:MI:SS'), User, NULL, NULL);
   End if ;
   return(TRUE);
  Exception
   when DUP_VAL_ON_INDEX then
     Return(TRUE) ; --JÃ¡ existia, logo nÃ£o Ã© necessÃ¡rio inserir novamente
   when others then
     Return(FALSE) ;
 End ;
FUNCTION Insere_Form_Ser(f_s_ANO_FORM in number, f_s_NUM_FORM in number,
     f_s_COD_SER in varchar2, f_s_NUM_ORD in number, f_s_NUM_ORD_FORMR in number,
     f_s_DAT_LOTE in date, f_s_ORD_LOTE in number, f_s_TIP_VIS in varchar2,
     f_s_COD_PARE_SER in varchar2, f_s_DAT_LIM_RESP in date,
     f_s_DAT_PARE_SER in date, f_s_DAT_PRORR in date, f_s_PED_POS in varchar2,
     f_s_CRI_DAT in varchar2, f_s_CRI_UTI in varchar, f_s_ALT_DAT in varchar2,
     f_s_ALT_UTI in varchar2, f_s_DEVIDO_A in Varchar2, Reapr in boolean,
     Estado in varchar2) return Boolean Is
  cursor existe_pare is
    select Num_Ord, cod_pare_ser, Num_Ord_FormR, Devido_A
      from form_ser
      where ano_form = F_S_Ano_Form and
            num_Form = F_S_Num_Form and
            cod_ser = F_S_Cod_Ser and
	    instr(devido_a, Estado||':') > 0
--	    num_ord = F_S_Num_Ord
	order by NUM_ORD DESC;
  e_p form_ser.cod_pare_ser%TYPE ;
  e_p_reapr Form_Ser.Num_Ord_FormR%TYPE ;
  num_ord1 Form_Ser.Num_Ord%TYPE;
  Devido_A1 Form_Ser.Devido_A%TYPE;
  Num_ord_formr1 form_Ser.Num_ord_formr%TYPE ;
  Param_SIS servico.cod_ser%TYPE;
  Faz_Update BOOLEAN := FALSE;
  Function Ve_Update Return BOOLEAN IS
  BEGIN
	if f_s_Devido_A is NOT NULL then
--	   if f_s_Devido_A like '%'||Devido_A1||'%' then
		Return(TRUE) ;
--	    else
		Return(TRUE);
--	  End if ;
	 else /* se for consulta normal */
	  Return(FALSE);
	End if ;
  END ;
 Begin
Tarefa_Master.grava_erro('INSERE_FORM_SER', 'Inicio  e vai buscar param_glo1(32) para '||f_s_cod_ser, null);
   Param_SIS := Busca_Param_Glo1(32, F_S_COD_SER);
	/* fica nulo se o serviÃ§o Ã© tomado em
	  conta em reapreciaÃ§Ãµes */
Tarefa_Master.grava_erro('INSERE_FORM_SER', 'Open existe_pare e PARAM_SIS = '||PARAM_SIS);
   open existe_pare;
--Tarefa_Master.grava_erro('INSERE_FORM_SER', 'Antes do fetch de  existe_pare', null);
   fetch existe_pare into Num_Ord1, e_p, e_p_Reapr, Devido_A1;
Tarefa_Master.grava_erro('INSERE_FORM_SER', 'Depois do fetch de  existe_pare', null);
   IF existe_pare%notfound THEN
      close existe_pare ;
Tarefa_Master.grava_erro('INSERE_FORM_SER', 'Close de  existe_pare apos notfound', null);
      IF F_S_Cod_Ser = Nvl(PAram_SIS,'xpto') AND Reapr
         THEN RETURN (TRUE);
      ELSE NULL;
        /* Tem que inserir pela primeira vez */
      END IF;
   ELSE /* se jÃ¡ existe em FORM_SER */
      close existe_pare ;
Tarefa_Master.grava_erro('INSERE_FORM_SER', 'Faz update do form_ser', null);
/*
	Faz_Update := Ve_Update;
	If Not Faz_Update then
	   Return(TRUE);
	End if ;
*/
	Faz_Update := TRUE;
   end if ;
--Tarefa_Master.grava_erro('INSERE_FORM_SER', 'Testa Faz_Update', null);
   If Faz_Update then
Tarefa_Master.grava_erro('INSERE_FORM_SER', 'Update Form_Ser '||F_S_COD_SER, null);
	Update Form_Ser set Devido_A = substr(Devido_A||'; '||'Estado'||': '||f_s_Devido_A,1,120)
	where ano_form = F_S_Ano_Form and
	      num_Form = F_S_Num_Form and
	      cod_ser = F_S_Cod_Ser and
	      num_ord = F_S_Num_Ord;
Tarefa_Master.grava_erro('INSERE_FORM_SER', 'Sucesso no Update Form_Ser', null);
	Return(TRUE);
   End if ;
   SELECT NVL(MAX(num_ord), 0) + 1 INTO Num_ord1
   FROM form_ser
   WHERE ano_form = F_S_ano_form
   AND   num_form = F_S_num_form
   AND   cod_ser  = F_S_cod_ser;
   If Reapr then
      Num_Ord_FormR1 := nvl(e_p_Reapr,0) + 1  ; /* apenas pode ser 1 */
   end if ;
   Insert into Form_Ser(Ano_Form, Num_Form, COD_SER, NUM_ORD,
                  NUM_ORD_FORMR, DAT_LOTE, ORD_LOTE, TIP_VIS,
                  COD_PARE_SER, DAT_LIM_RESP, DAT_PARE_SER,
                  DAT_PRORR, PED_POS, CRI_DAT, CRI_UTI, ALT_DAT,
                  ALT_UTI, DEVIDO_A)
        Values(F_S_Ano_Form, F_S_Num_Form, F_S_COD_SER,
           Num_Ord1, Num_Ord_FormR1, F_S_DAT_LOTE,
           F_S_ORD_LOTE, F_S_TIP_VIS, F_S_COD_PARE_SER,
           F_S_DAT_LIM_RESP, F_S_DAT_PARE_SER, F_S_DAT_PRORR,
           F_S_PED_POS, to_char(Sysdate, 'yyyy/mm/dd hh24:mi:ss'),
	   User, NULL, NULL, Nvl(f_s_DEVIDO_A,Estado||': '||'Consulta Normal'));
Tarefa_Master.Grava_Erro('ENV_TAC','Update a formulario(dat_lim_resp).', null) ;
    UPDATE formulario
    SET    dat_lim_resp = f_s_dat_lim_resp
    WHERE  ano_form = f_s_ano_form
    AND    num_form = f_s_num_form
    AND    NVL(dat_lim_resp, f_s_dat_lim_resp) < f_s_dat_lim_resp;
Tarefa_Master.grava_erro('INSERE_FORM_SER', 'Fim de Procedimento Form_Ser', null);
   return(TRUE);
  Exception
   when DUP_VAL_ON_INDEX then
     Return(TRUE) ; -- NÃ£o pode acontecer
   when others then
     Return(FALSE) ;
 End ;
FUNCTION Envia_FormP(ANO_FORM1 in number, NUM_FORM1 in number,
	Posto1 In VARCHAR2 DEFAULT 'C',
	Estado_Envio IN Varchar2 DEFAULT 'P')
	RETURN BOOLEAN Is
 --	Funcao que preenche envio com form_p para enviar entre
 -- posto<->central (Posto tem o posto ou se for null, vai buscar a central)
 --
 -- Retorna TRUE se preencheu ou FALSE se nÃ£o conseguiu preencher
     CURSOR F Is
	Select Cod_Pais_Sch_Ref||Ref_Form_2||Ref_Form_3, Cod_Pos
	From Formulario
	Where Ano_Form = Ano_Form1 and Num_Form = Num_Form1;
     wref_ped_envio VARCHAR2(19);
     --
     CURSOR c_envio IS
        SELECT NVL(MAX(num_msg_envio), 0) FROM envio
     WHERE
        tip_form_envio = 'P'
        AND ref_ped_envio = wref_ped_envio;
     --
     Aj_Posto POSTO.COD_POS%TYPE;
     CURSOR c_posto IS
	SELECT end_envio
		FROM POSTO
		WHERE cod_pos = Aj_Posto;
     --
     wnum_msg_envio NUMBER(2);
     wassunto VARCHAR2(50);
     --
     wendereco_envio VARCHAR2(120);
     --
  BEGIN
     Open F;
     FETCH F into wref_ped_envio, Aj_Posto;
     If F%NOTFOUND THEN
	Close F;
	Return (FALSE);
     End if ;
     Close F;
     --
     If nvl(Posto1,'C') is null then
	Aj_Posto := TO_NUMBER(Busca_Param_Glo1(2, null)) ;
     End if ;
     --
     OPEN c_envio;
     FETCH c_envio INTO wnum_msg_envio;
     IF c_envio%NOTFOUND THEN
        wnum_msg_envio := 0;
     END IF;
     CLOSE c_envio;
     --
     wnum_msg_envio := wnum_msg_envio + 1;
     --
     wassunto := wref_ped_envio||'.P';
     --
     OPEN c_posto;
     FETCH c_posto INTO wendereco_envio;
     CLOSE c_posto;
     --

     INSERT INTO envio(
           tip_form_envio,
           ref_ped_envio,
           num_msg_envio,
           tip_dest,
           importanc_envio,
           assunto,
           dat_envio,
           uti_envio,
           est_envio,
           tip_envio,
           endereco_envio,
           dr_ndr,
           seq_envio,
	   FOR_ano_form,
	   FOR_num_form
	)
     VALUES
        (
           'P',
           wref_ped_envio,
           wnum_msg_envio,
           'C',
           '3',
           wassunto,
           sysdate,
           user,
           Estado_Envio,
           'R',
           wendereco_envio,
           'S',
           envio_seq_envio.nextval,
           ano_form1,
           num_form1
    	);

     Return (TRUE);
   EXCEPTION
	When others then
	  Return (FALSE);
  END;
END TAREF;
/

prompt
prompt Creating package body TAREFA_MASTER
prompt ===================================
prompt
CREATE OR REPLACE PACKAGE BODY RPV.TAREFA_MASTER AS
  conta_erros NUMBER := 0;
  Aj_Help Varchar2(255);
Procedure Grava_Erro(de in varchar2, Erro in varchar2,linha IN NUMBER := 0) is
Begin
/*conta_erros := conta_erros + 1;
insert into horta values(de, erro, conta_erros);*/
NULL;
End ;
FUNCTION proximo_estado(cod_est in 	varchar2,
			VVTL in 	BOOLEAN,
			REAPR IN 	BOOLEAN,
			ANO_FORM1	NUMBER := NULL,
			NUM_FORM1	NUMBER := NULL)
  RETURN varchar2 IS
/* funÃ§Ã£o que devolve o prÃ³ximo estado por default ou NULL se nÃ£o se seguir nenhum estado */
  CURSOR c1 IS
	SELECT 'x' FROM form_est
	WHERE	ano_form = ano_form1
	AND	num_form = num_form1
	AND	cod_est	 = 'REA';
  var_aux	VARCHAR2(1);
  CURSOR c2 IS
	SELECT cod_pare_pos FROM formulario
	WHERE	ano_form = ano_form1
	AND	num_form = num_form1;
  v_cod_pare_pos	formulario.cod_pare_pos%TYPE;
BEGIN
GRAVA_ERRO('tarefa_master', 'inicio do procedimento proximo_estado e cod_est = '||cod_est, null);
	if cod_est is NULL then /* o primeiro estado Ã© "em apreciaÃ§Ã£o". */
		open c2;
		fetch c2 into v_cod_pare_pos;
			if c2%notfound then v_cod_pare_pos := null;
			end if;
		close c2;
		if v_cod_pare_pos = Taref.Busca_Param_Glo1(33, null) then
			return('CP');
		elsif v_cod_pare_pos = Taref.Busca_Param_Glo1(41, null) then
			return('IP');
		elsif VVTL then
			return('CON');
		else
			return('APR');
		end if;
--		if VVTL then return('CON');
--		else return('APR') ;
--		end if;
	elsif cod_est in ('APR','REA','AP')
		then /* Os estados "em apreciaÃ§Ã£o" ou "em reapreciaÃ§Ã£o" evoluem para "Concedido". */
		   return('CON') ;
	elsif cod_est = 'CON'
		then /* O estado "Concedido" evolui para "Vinheta Emitida" */
		   return('VEM') ;
	elsif cod_est = 'VEM'
		then /* O estado "Vinheta Emitida" evolui para "Vinheta Expirada" */
			return('VEX') ;
	elsif cod_est = 'IND' AND REAPR
		then /* O estado "INDEFERIDO" evolui para "Reapreciacao" */
		open c1;
		fetch c1 into var_aux;
		if c1%notfound then
			close c1;
			return('REA') ;
		else
			close c1;
			return(NULL) ;
		end if;
	elsif cod_est = 'IND' AND VVTL
		then  /* O estado "INDEFERIDO" evolui para "CONCEDIDO" */
		   return('CON') ;
	elsif cod_est = 'IP' AND VVTL
		then  /* O estado "INDEFERIDO" evolui para "CONCEDIDO" */
		   return('CON') ;
	else /* qualquer evoluÃ§Ã£o de outros estados nÃ£o existe */
		return(NULL) ; -- NÃ£o devera fazer nada
	end if ;
END;
FUNCTION insere_form_est(ano_form1 in number, num_form1 in number,
			cod_est1 in varchar2, tip_vis1 in varchar2,
			form_reg1 in varchar2, cod_taref1 in varchar2,
			realiz1 in varchar2 := 'N',
			dat_realiz1 in date := NULL) RETURN boolean IS
BEGIN
   insert into form_est	(ano_form, num_form, cod_est, tip_vis,
			form_reg, cod_taref, realiz, dat_realiz,
			alt_uti, alt_dat, seq_insercao)
   values		(ano_form1, num_form1, cod_est1, tip_vis1,
			form_reg1, cod_taref1, realiz1, dat_realiz1,
			USER, sysdate, seq_form_est.nextval) ;
   return (TRUE) ;
EXCEPTION
when others then
	Grava_Erro('INSERE_FORM_EST', sqlerrm);
	return (FALSE) ;
END;
FUNCTION termina_tarefa(ano_form1 in number, num_form1 in number,
			form_reg1 in varchar2, tip_vis1 in varchar2,
			cod_est1 in varchar2, cod_taref1 in varchar2) RETURN boolean IS
BEGIN
Grava_Erro('termina_tarefa', 'vai fazer termina_tarefa para: '||
to_char(ano_form1)||' '||to_char(num_form1)||' '||cod_est1||' '||
tip_vis1||' '||form_reg1||' '||cod_taref1);
	update form_est
	set realiz = 'S', dat_realiz = sysdate, alt_uti = user
	where ano_form = ano_form1
	and num_form = num_form1
	and cod_est = cod_est1
	and form_reg = form_reg1
	and cod_taref = cod_taref1 ;
	if sql%notfound then
Grava_Erro('termina_tarefa', 'vai inserir em form_est: '||
to_char(ano_form1)||' '||to_char(num_form1)||' '||cod_est1||' '||
tip_vis1||' '||form_reg1||' '||cod_taref1);
		if insere_form_est(ano_form1, num_form1, cod_est1, tip_vis1,
				   form_reg1, cod_taref1, 'S', SYSDATE)
			then null;
		else return (FALSE);
		end if;
	end if;
Grava_Erro('termina_tarefa', 'Vai terminar termina_tarefa', null);
return (TRUE) ;
EXCEPTION
when others then
Grava_Erro('termina_tarefa', 'Vai terminar termina_tarefa e dÃ¡ exception when-others', null);
return (FALSE) ;
END;
FUNCTION apaga_form_est(ano_form1 in number, num_form1 in number) RETURN boolean IS
BEGIN
	delete from form_est
	where ano_form = ano_form1
	and num_form = num_form1 ;
	return(TRUE) ;
exception
when no_data_found then
	return(FALSE) ;
when others then
	return(FALSE) ;
END;
FUNCTION Busca_Tarefa	(Estad1 IN VARCHAR2, Tip_Vis1 IN VARCHAR2,
			Form_Reg1 IN VARCHAR2, Taref1 OUT VARCHAR2,
			Valid_Prox OUT VARCHAR2) RETURN boolean IS
 -- Vai buscar a primeira tarefa do estado
	CURSOR B_T IS
	select *
	From EST_TAREFA
	Where 	Tip_Vis = Tip_Vis1
	and 	Cod_Est = Estad1
	and  	form_reg = Form_Reg1
	Order By Ord_Exe;
	AJ_B_T EST_TAREFA%ROWTYPE;
BEGIN
	Open B_T;
	FETCH B_T into AJ_B_T;
	IF B_T%NOTFOUND THEN
		CLOSE B_T;
		Raise NO_DATA_FOUND;
	END IF;
	CLOSE B_T;
	Taref1 := AJ_B_T.Cod_Taref ;
	Valid_Prox := AJ_B_T.Tip_Valid ;
	RETURN(TRUE);
exception
when no_data_found then
	return(FALSE) ;
when others then
	return(FALSE) ;
END;
FUNCTION proximo_est_taref(ano_form1 in number, num_form1 in number,
          cod_est_actual in varchar2, cod_taref_actual in varchar2,
          form_reg_actual in varchar2, tip_vis_actual in varchar2,
          cod_est_prox out varchar2, cod_taref_prox out varchar2,
          tip_valid_prox out varchar2, SCH IN BOOLEAN,
          VVTL IN BOOLEAN, Reapr IN BOOLEAN, pare_pos IN NUMBER)
	RETURN Boolean IS
/* vai buscar o proximo estado/tarefa, devolvendo se o encontrou ou
  nÃ£o e qual. Note-se que o procedimento sÃ³ pÃ¡ra assim que encontrar
  a prÃ³xima tarefa obrigatÃ³ria, quer pertenÃ§a ou nÃ£o ao mesmo estado.
*/
	aj_sch Varchar2(1);
	aj_vvtl Varchar2(1);
	aj_Reapr Varchar2(1);
	est_actual est_tarefa.cod_est%TYPE ;
	cursor prox_taref is
	select * from est_tarefa
	where cod_est = est_actual
	and ((aj_sch='S' and (cod_taref not like '%SCH')) or (Aj_Sch = 'N')) and
        ((Aj_VVTL='N') or (Aj_Vvtl = 'S' And COD_EST <> 'APR')) And
--        cod_taref = nvl(cod_taref_actual, cod_taref) and
	form_reg = form_reg_actual and tip_vis = tip_vis_actual and
	tip_realiz = 'O' and
	((cod_est, cod_taref, tip_vis, form_reg) not in
	(select cod_est, cod_taref, tip_vis, form_reg
	from form_est
	where ano_form = ano_form1 and num_form = num_form1))
	order by ord_exe ;
	et est_tarefa%rowtype ;
	encontrou boolean := FALSE;
	sai boolean := FALSE ;
	proximo	boolean := TRUE;
  v_cod_pare formulario.cod_pare%type;
  v_tip_vis_conced formulario.tip_vis_conced%type;
BEGIN
grava_erro('cxvc', '1. proximo_est_tarefa e estado_actual = '||cod_est_actual);
	If Sch then aj_sch := 'S';
	else aj_sch := 'N';
	end if;
	If VVTL then aj_vvtl := 'S';
	else aj_vvtl := 'N';
	end if;
	If Reapr then aj_reapr := 'S';
	else aj_Reapr := 'N';
	end if;
	IF pare_pos = taref.Busca_param_glo1(33, null) and cod_est_actual IS NOT NULL AND
	   cod_est_actual != 'CAN' THEN
	   est_actual :=  'CAN';
	   proximo := FALSE;
	elsif pare_pos = taref.Busca_param_glo1(41, null) and cod_est_actual IS NOT NULL AND
	   cod_est_actual != 'IP' THEN
		est_actual :=  'IP';
	   	proximo := FALSE;
	elsif pare_pos = taref.Busca_param_glo1(45, null) and cod_est_actual IS NOT NULL AND
     cod_est_actual != 'IP' THEN
 	   select nvl(cod_pare,'9'), tip_vis_conced into v_cod_pare, v_tip_vis_conced from formulario
     where ano_form = ano_form1 and num_form = num_form1;
     if v_cod_pare = Taref.Busca_Param_Glo1(9, null) and v_tip_vis_conced is null
     and cod_est_actual not in ('REA','APR') then
      est_actual :=  'IP';
	   	proximo := FALSE;
     else
       est_actual := nvl(cod_est_actual,
			proximo_estado(cod_est_actual, VVTL, REAPR, ano_form1, num_form1)) ;
     end if;
  ELSE
	   est_actual := nvl(cod_est_actual,
			proximo_estado(cod_est_actual, VVTL, REAPR, ano_form1, num_form1)) ;
	END IF;
grava_erro('cxvc', '3. proximo_est_tarefa e estado_actual = '||est_actual);
	open prox_taref ;
	fetch prox_taref into et ;
	while prox_taref%notfound and not sai
	loop
grava_erro('cxvc', 'esta dentro do loop e encontrou registo de tarefa '||et.cod_est||'-'||
et.cod_taref);
		IF proximo THEN
		   est_actual := proximo_estado(est_actual, VVTL, REAPR, ano_form1, num_form1);
		ELSE proximo := TRUE;
		END IF;
		sai := (est_actual is null) ;
		if not sai then
			close prox_taref ;
			open prox_taref ;
			fetch prox_taref into et ;
		end if ;
	end loop ;
	if prox_taref%found then
		cod_est_prox := et.cod_est ;
		cod_taref_prox := et.cod_taref ;
		tip_valid_prox := et.tip_valid ;
		encontrou := TRUE ;
	end if ;
	close prox_taref ;
grava_erro('cxvc', '4. proximo_est_tarefa e estado_actual = '||est_actual);
return(encontrou) ;
END;
FUNCTION busca_form_tip_vis	(ano_form1 in number, num_form1 in number,
				form_reg1 out varchar2, tip_vis1 out varchar2,
				SCH OUT BOOLEAN, VVTL OUT BOOLEAN, REAPR1 OUT BOOLEAN,
				pare_pos_actual out number)
	RETURN boolean IS
Tip_Form1 	Formulario.Tip_Form%TYPE;
Tip_Vis_Conced1 Formulario.Tip_Vis_Conced%TYPE;
Reapr2 		Formulario.Reapr%TYPE;
aj_vvtl		T_VISTO.VVTL%TYPE;
Begin
	select FORM_REG, TIP_VIS_PED, Tip_Form, Tip_Vis_Conced, Reapr, cod_pare_pos
	into form_reg1, tip_vis1, Tip_Form1, Tip_Vis_Conced1, Reapr2, pare_pos_actual
	from formulario
	where ano_form = ANO_FORM1 and num_form = NUM_FORM1 ;
	if nvl(Reapr2,'N') = 'S' then
		REAPR1 := TRUE;
	else
		REAPR1 := FALSE;
	end if;
	if Tip_Form1 = 'P' then
		SCH := FALSE;
		if Tip_Vis_Conced1 is NULL then
			VVTL := FALSE ;
		else
			BEGIN
				select VVTL into aj_vvtl
				from T_VISTO
				where Tip_Vis in
				(select Tip_Vis from vinheta
				where	Ano_Form = Ano_Form1
				and	Num_Form = Num_Form1
				and	Est_vin = 'E');
			EXCEPTION
			WHEN NO_DATA_FOUND then aj_vvtl := 'N' ;
			END ;
			if nvl(aj_vvtl,'N') = 'S' then
				VVTL := TRUE;
			else
				VVTL := FALSE;
			end if;
		end if;
	else
		SCH := TRUE ;
		if Tip_Form1 = 'C' then
			VVTL := TRUE ;
		end if;
	end if;
return(TRUE);
Exception
when others then return(FALSE) ;
End ;
FUNCTION Evolui_Automatico(Ano_Form IN NUMBER, Num_Form IN NUMBER,
		Estado IN VARCHAR2, Tarefa1 IN VARCHAR2,
		SCH IN BOOLEAN, VVTL IN BOOLEAN, REAPR IN BOOLEAN)
  RETURN NUMBER IS
  -- Retorna:
  --		0, se deve evoluir de estado;
  --		1, se deu alguma exception;
  --		93, se deve cancelar;
  --		95, se deve acabar a tarefa e depois indeferir;
  --		96, se deve indeferir;
  --		97, se deve acabar a tarefa e depois conceder;
  --		98, se deve conceder;
  --		99, se nÃ£o deve evoluir de tarefa porque a tarefa
  --		   nÃ£o acabou.
Erro_Tarefa 	EXCEPTION;
estado_Tarefa 	NUMBER := 0;
aj_Tarefa 	FORM_EST.COD_TAREF%TYPE := Tarefa1;
v_cod_pare	param_glo.val_para%type;
BEGIN
if Aj_Tarefa = 'VER_INDE' then
grava_erro('VER_INDE', 'Vai fazer analise de indeferidos com estado tarefa '||
to_char(estado_tarefa)||'.');
	estado_tarefa := taref1.Tarefa_Analise_Indeferidos(Ano_Form, Num_Form, Reapr, Estado);
grava_erro('VER_INDE', 'Fez analise de indeferidos e estado tarefa '||
to_char(estado_tarefa)||'.');
	if estado_tarefa = 2 then
		raise erro_tarefa;
        else estado_tarefa := 0;
	end if ;
elsif Aj_Tarefa = 'VER_PEND' then
	estado_tarefa := taref1.Tarefa_Analise_Apreciacao(Ano_Form, Num_Form, Reapr, Estado);
	if estado_tarefa = 2 then
		raise erro_tarefa;
        else estado_tarefa := 0;
	end if ;
elsif Aj_Tarefa = 'PEDE_SCH' then
	estado_tarefa := Taref1.Tarefa_Pede_Cons_Sch(Ano_Form, Num_Form, VVTL);
Grava_Erro('TAREFA_MASTER', 'Fez Tarefa_Pede_Cons_Sch e estado_tarefa = '||to_char(estado_tarefa));
	if estado_tarefa = 2 then
		raise erro_tarefa;
	end if ;
elsif Aj_Tarefa like 'PEDE%' then /* VERIFICA TODAS as Tarefas individualmente */
	if nvl(substr(Aj_Tarefa,6),'OUT') = 'OUT' then
		Aj_Tarefa := 'PEDE';
	end if;
grava_erro('Evolui Estado', 'Vai pedir consulta a servicos com '||substr(Aj_Tarefa,6)||'.');
	estado_tarefa := taref1.Tarefa_Pede_Cons_Serv	(Ano_Form, Num_Form,
							substr(Aj_Tarefa,6), REAPR, Estado);
	if estado_tarefa = 2 then
		raise erro_tarefa;
	end if ;
elsif Aj_Tarefa LIKE 'ENV_CENT' then /* prepara Envio de formp  */
grava_erro('ENV_CENT', 'ESTADO = '||estado);
	Estado_Tarefa := Taref2.Tarefa_Envia_Central(Ano_Form, Num_Form);
	if estado_tarefa = 1 then
		raise erro_tarefa;
	elsif estado_tarefa = 99 then
		estado_tarefa := 0;
	else estado_tarefa := 0;
	End if ;
elsif Aj_Tarefa = 'NULO_AUT' then
	if not Taref.Tarefa_Nula then
		raise erro_tarefa;
	end if ;
elsif Aj_Tarefa = 'FIM_PED' then
	if not Taref.Tarefa_Nula then
		raise erro_tarefa;
	end if ;
elsif Aj_Tarefa = 'ENVI_TAC' then
	Estado_Tarefa := Taref2.Tarefa_Envia_Tacito(Ano_Form, Num_Form);
	if estado_tarefa = 1 then
		raise erro_tarefa;
	else estado_tarefa := 0;
	End if ;
elsif Aj_Tarefa = 'ENV_PARE' then
grava_erro('ENV_PARE', 'ESTADO = '||estado);
	if estado = 'CON' then
		v_cod_pare := Taref.Busca_Param_Glo1(9, null);
	elsif estado = 'IND' then
		v_cod_pare := Taref.Busca_Param_Glo1(10, null);
	elsif estado = 'IP' then
		v_cod_pare := Taref.Busca_Param_Glo1(41, null);
	elsif estado = 'CAN' then
		v_cod_pare := Taref.Busca_Param_Glo1(33, null);
	end if;
	Estado_Tarefa := Funcoes.Envia_Parecer(Ano_Form, Num_Form, v_cod_pare);
grava_erro('ENV_PARE', 'Fez Funcoes.Envia_Parecer e ESTADO = '||to_char(estado_tarefa));
	if estado_tarefa = 1 then
		raise erro_tarefa;
	else estado_tarefa := 0;
	End if ;
else -- devolve sempre 0, visto ser uma tarefa automatica
	NULL;
end if ;
Return(Estado_Tarefa) ;
Exception
When Erro_Tarefa Then
	Grava_Erro('Evolui_Automatico','Erro na tarefa:'||Aj_Tarefa);
	Return(1);
When OTHERS Then
	Aj_Help := SQLERRM;
Grava_Erro('Evolui_Automatico','OUTROS na tarefa:'||Aj_Tarefa||' - '||Aj_Help);
	Return(1);
END ;
FUNCTION Evolui_Manual(Ano_Form IN NUMBER, Num_Form IN NUMBER,
		Estado IN VARCHAR2, Tarefa1 IN VARCHAR2,
		SCH IN BOOLEAN, VVTL IN BOOLEAN, REAPR IN BOOLEAN, TIPO_EVOL IN VARCHAR2)
	RETURN NUMBER IS
-- Retorna:
--		0, se deve evoluir de estado;
--		1, se deu alguma exception;
--		92, se nÃ£o deve fazer nada
--		93, se deve CANCELAR
--		94, se nÃ£o deve acabar a tarefa mas deve evoluir de tarefa;
--		   (caso de VVTL entretanto concedido)
--		95, se deve acabar a tarefa e depois indeferir;
--		96, se deve indeferir;
--		97, se deve acabar a tarefa e depois conceder;
--		98, se deve conceder;
--		99, se nÃ£o deve evoluir de tarefa porque a tarefa
--		   nÃ£o acabou.
Erro_Tarefa	EXCEPTION;
estado_Tarefa	NUMBER := 99;
aj_Tarefa	FORM_EST.COD_TAREF%TYPE := Tarefa1;
Aj_SCH		Varchar2(1);
Aj_Est		NUMBER;
Aj_Reapr	Varchar2(1);
Todos_Deram	NUMBER;
v_aud_previa formulario.aud_previa%type;
ano_form1    formulario.ano_form%type;
num_form1    formulario.num_form%type;
BEGIN
	if SCH and VVTL then
		Aj_Sch := 'C';
	elsif SCH then
		Aj_Sch := 'A';
	else Aj_Sch := 'P';
	end if;
	if REAPR then
		Aj_Reapr := 'S';
	else Aj_reapr := 'N';
	end if;
	if Aj_Tarefa = 'RESP_SCH' then
		estado_tarefa := FUNCOES.Ve_Resp_Sch(Ano_Form, Num_Form, Todos_Deram);
		if estado_tarefa = 1 then
			raise erro_tarefa;
		elsif estado_tarefa = 97 then
--			estado_tarefa := 92;
			estado_tarefa := 99;
		elsif estado_tarefa = 98 then
			estado_tarefa := 96; -- NÃ£o deve acontecer
		elsif estado_tarefa = 99 then
			estado_tarefa := 96;
		-- Se devolver 0, entao continua com 0
		end if ;
	elsif Aj_Tarefa LIKE 'RESP%' then
 /* VERIFICA TODAS as Tarefas de resposta dos servicos individualmente */
		if nvl(substr(Aj_Tarefa,6),'OUT') = 'OUT' then
			Aj_Tarefa := 'RESP';
		end if;
		estado_tarefa := FUNCOES.Ve_Resp_Serv(Ano_Form,Num_Form,Aj_Reapr,
						Substr(Aj_Tarefa, 6),Todos_Deram, Estado);
		if estado_tarefa = 1 then
			raise erro_tarefa;
		elsif estado_tarefa = 97 then
--			estado_tarefa := 92;
			estado_tarefa := 99;
		elsif estado_tarefa = 98 then
			estado_tarefa := 96; -- NÃ£o deve acontecer
		elsif estado_tarefa = 99 then
			estado_tarefa := 96;
		-- Se devolver 0, entao continua com 0
		end if ;
	elsif Aj_Tarefa LIKE 'NULO%' then
		if not Taref.Tarefa_Nula then
			raise erro_tarefa;
		end if ;
	elsif Aj_Tarefa LIKE 'AGU_DOCP' then /* aguarda documentos no posto */
		Estado_Tarefa := Taref2.Tarefa_Espera_Docs(Ano_Form, Num_Form, 'E');
		if estado_tarefa = 1 then
			raise erro_tarefa;
/*
		elsif estado_tarefa = 99 then
			estado_tarefa := 0;
		else estado_tarefa := 0;
*/
		End if ;
	elsif Aj_Tarefa LIKE 'AGU_DOCC' then /* aguarda documentos na central */
		Estado_Tarefa := Taref2.Tarefa_Espera_Docs(Ano_Form, Num_Form, 'C');
		if estado_tarefa = 1 then
			raise erro_tarefa;
		End if ;
	elsif Aj_Tarefa LIKE 'AGU_PARP' then /* aguarda Parecer do posto */
		Estado_Tarefa := Taref2.Tarefa_Espera_Pare_Pos(Ano_Form, Num_Form);
		if estado_tarefa = 1 then
			raise erro_tarefa;
		elsif estado_tarefa IN (99) then
			estado_tarefa := 96;
		elsif estado_tarefa = 97 then
			estado_tarefa := 99;
		End if ;
	elsif Aj_Tarefa LIKE 'AGU_PARC' then /* aguarda Parecer das autoridades */
		Estado_Tarefa := Taref2.Tarefa_Espera_Pare_Central(Ano_Form, Num_Form);
gRAVA_ERRO('evolui_estado', 'acabou tarefa_espera_par_central e estado_tarefa = '||
to_char(estado_tarefa));
		if estado_tarefa = 1 then
			raise erro_tarefa;
		elsif estado_tarefa = 97 then
			estado_tarefa := 99;
		End if ;
	elsif Aj_Tarefa LIKE 'AGU_VIST' then /* aguarda VISTO Concedido */
		Estado_Tarefa := Taref2.Tarefa_Espera_Visto(Ano_Form, Num_Form, Tipo_Evol);
Grava_Erro('Evolui_Manual','Fez AGU_VIST e devolveu : '||to_char(estado_tarefa));
		if estado_tarefa = 1 then
			raise erro_tarefa;
		End if ;
	elsif Aj_Tarefa LIKE 'AGU_VIN' then /* aguarda Emissao vinheta */
		Estado_Tarefa := Taref2.Tarefa_Espera_vinheta(Ano_Form, Num_Form);
		if estado_tarefa = 1 then
			raise erro_tarefa;
		End if ;
	elsif Aj_Tarefa LIKE 'AGU_VEXP' then /* aguarda vinheta expirada*/
		Estado_Tarefa := Taref2.Tarefa_Espera_vin_EXP(Ano_Form, Num_Form);
Grava_Erro('Evolui_Manual','Fez AGU_VEXP e devolveu : '||to_char(estado_tarefa));
		if estado_tarefa = 1 then
			raise erro_tarefa;
		End if ;
	elsif Aj_Tarefa LIKE 'AGU_NOT' then /* aguarda Emissao Notificacao */
    ano_form1 := ano_form;
    num_form1 := num_form;
    select aud_previa into v_aud_previa
    from formulario
    where ano_form = ano_form1 and num_form = num_form1;
    if v_aud_previa = 'N' then
       estado_tarefa := 99;
    else
       estado_tarefa := 0;
    end if;
  elsif Aj_Tarefa LIKE 'AGU_REQ' then /* aguarda Resposta Requerente */
    ano_form1 := ano_form;
    num_form1 := num_form;
    select aud_previa into v_aud_previa
    from formulario
    where ano_form = ano_form1 and num_form = num_form1;
    if v_aud_previa = 'P' then
       estado_tarefa := 99;
    else
       estado_tarefa := 0;
    end if;
  else -- devolve sempre 99, visto ser uma tarefa manual ou
	-- devolve 0 se foi despoletado manualmente.
		If Tipo_Evol = 'M' then
			estado_tarefa := 99;
		else
			estado_tarefa := 0;
		end if ;
	end if ;
	If Estado_Tarefa = 99 and not funcoes.eh_posto then
		Aj_Est := Taref2.Ve_Cancelados(Ano_Form,Num_Form);
		If Aj_Est = 1 Then
			Raise Erro_Tarefa;
		elsif aj_est = 99 then
			Estado_Tarefa := 93;
		End if;
	End if;
	If Estado_Tarefa = 99 and not funcoes.eh_posto then -- Tem que verificar se Sch indeferiu
		Aj_Est := FUNCOES.Atribuiu_indeferido	(Ano_Form, Num_Form,
					  		Aj_Sch, Aj_Reapr, VVTL, Estado);
		If Aj_Est = 1 Then
			Raise Erro_Tarefa;
		elsif aj_est = 99 then
			Estado_Tarefa := 96;
		End if;
	End If;
	If Estado_Tarefa = 99 And VVTL
	   and Aj_Tarefa NOT LIKE 'AGU_VEXP' then
		Estado_Tarefa := 94;
	End if;
grava_erro('','Fim do evolui_manual e estado_tarefa = '||to_char(estado_tarefa));
Return(Estado_Tarefa) ;
Exception
When Erro_Tarefa Then
	Grava_Erro('Evolui_Manual','Erro na tarefa:'||Aj_Tarefa);
	Return(1);
When OTHERS Then
	Aj_Help := SQLERRM;
Grava_Erro('Evolui_Manual','OUTROS na tarefa:'||Aj_Tarefa||' - '||Aj_Help);
	Return(1);
END ;
/* MAIN */
FUNCTION evolui_estado(ano_form in number, num_form in number, Evol_Man in Varchar2 default 'A')
	RETURN number IS
form_reg		FORMULARIO.FORM_REG%TYPE;
tip_vis			FORMULARIO.TIP_VIS_PED%TYPE;
cod_est			FORM_EST.COD_EST%TYPE := NULL;
cod_taref		FORM_EST.COD_TAREF%TYPE := NULL;
estava_ult_estado	EXCEPTION ;
parametros_errados	EXCEPTION ;
erro_trancar_ult_tarefa	EXCEPTION ;
erro_apaga_form_est	EXCEPTION ;
fim_estados		EXCEPTION ;
erro_tarefa		EXCEPTION ;
tarefa_nao_implementada	EXCEPTION ;
erro_insere_form_est	EXCEPTION ;
erro_termina_tarefa	EXCEPTION;
formulario_errado	EXCEPTION;
Erro_Buscar_Tarefa	EXCEPTION;
VVTL			BOOLEAN;
SCH			BOOLEAN;
REAPR			BOOLEAN;
est_actual		boolean ;
cod_est_actual		est_tarefa.cod_est%TYPE ;
cod_taref_actual	est_tarefa.cod_taref%TYPE ;
aj_cod_est_actual	est_tarefa.cod_est%TYPE ;
aj_cod_taref_actual	est_tarefa.cod_taref%TYPE ;
form_reg_actual		est_tarefa.form_reg%TYPE ;
tip_vis_actual		est_tarefa.tip_vis%TYPE ;
cod_est_prox		est_tarefa.cod_est%TYPE ;
cod_taref_prox		est_tarefa.cod_taref%TYPE ;
form_reg_prox		est_tarefa.form_reg%TYPE ;
tip_vis_prox		est_tarefa.tip_vis%TYPE ;
tip_valid_prox		est_tarefa.tip_valid%TYPE ;
foi_estado_actual	boolean := FALSE ;
pare_pos_actual		formulario.cod_pare_pos%type;
estado_tarefa		NUMBER := 0;
Busca_Actual		BOOLEAN;
Continua_Evolucao	BOOLEAN := TRUE;
Concede			BOOLEAN := FALSE;
Cancela			BOOLEAN := FALSE;
Indefere		BOOLEAN := FALSE;
Audiencia_Previa BOOLEAN := FALSE;
Primeira_Vez		BOOLEAN := TRUE;
v_ap_ind        varchar2(1);
v_aud_previa    formulario.aud_previa%type;
v_cod_pare_pos  formulario.cod_pare_pos%type;
ano_form1       formulario.ano_form%type;
num_form1       formulario.num_form%type;
BEGIN
Grava_Erro('Evolui_Estado','Inicio do procedimento de tarefas.');
	Busca_actual := busca_form_tip_vis(ano_form, num_form,
					form_reg, tip_vis, SCH, VVTL, REAPR, pare_pos_actual) ;
Grava_Erro('Evolui_Estado','busca_form_tip_vis visto='||Tip_Vis||' Form_Reg='||Form_Reg||'.');
	if not Busca_actual then
		raise formulario_errado;
	end if ;
Grava_Erro('Evolui_Estado','inicio do estado_actual e est_actual='||cod_est_actual||' '||cod_taref_actual);
	est_actual := taref.estado_actual(ano_form, num_form, cod_est_actual,
					cod_taref_actual, form_reg_actual, tip_vis_actual);
grava_erro('Evolui Estado', 'JÃ¡ viu o estado actual '||cod_est_actual||'-'||cod_taref_actual);
	if not est_actual then /* nunca acontece. JÃ¡ tinha chegado Ã  ultima tarefa */
Grava_erro('Evolui_Estado', 'Ultima tarefa');
		if nvl(form_reg, nvl(form_reg_actual,'xpto')) <> nvl(form_reg_actual,'xpto')
			or
		   nvl(tip_vis, nvl(tip_vis_actual,'xpto')) <>
			nvl(tip_vis_actual,'xpto')
		   then -- Recomeca todos os estados
Grava_Erro('Evolui_Estado','inicio do apaga_form_est');
			if not apaga_form_est(ano_form,num_form) then
				null ;
			end if ;
			Cod_Est_Actual := NULL;
			Cod_Taref_Actual := NULL;
Grava_Erro('Evolui_Estado','inicio do Proximo_estado');
			if not proximo_est_taref(ano_form, num_form,
				cod_est_actual,
				cod_taref_actual, form_reg, tip_vis,
				cod_est_prox, cod_taref_prox, tip_valid_prox,
				SCH, VVTL, REAPR, pare_pos_actual) then
			raise fim_estados;
			end if ;
Grava_Erro('Evolui_Estado','fim do Proximo_estado');
		else
		raise estava_ult_estado ; /* evoluÃ§Ã£o impossivel */
		end if ;
	elsif cod_est_actual is null then
		/* primeira vez para o formulario passado por parametros */
		if form_reg is null or tip_vis is null then
			raise parametros_errados ;
		end if ;
Grava_Erro('Evolui_Estado','inicio do Proximo_estado');
		if not proximo_est_taref(ano_form, num_form, cod_est_actual,
					cod_taref_actual, form_reg, tip_vis,
					cod_est_prox, cod_taref_prox,
					tip_valid_prox, SCH, VVTL, REAPR, pare_pos_actual) then
		raise fim_estados;
		end if ;
Grava_Erro('Evolui_Estado','fim do Proximo_estado');
	else /* A evoluÃ§Ã£o encontra-se Ã  espera para continuar. */
		if nvl(tip_vis, tip_vis_actual) <> tip_vis_actual or
			nvl(form_reg, form_reg_actual) <> form_reg_actual
		then
Grava_Erro('Evolui_Estado','inicio do apaga_form_est');
			if not apaga_form_est(ano_form,num_form) then
				raise erro_apaga_form_est ;
			end if ;
Grava_Erro('Evolui_Estado','fim do apaga_form_est');
     		else /* Encontra-se Ã  espera para evoluir */
			if Evol_Man = 'M' then -- passa por cima da tarefa
Grava_Erro('Evolui_Estado','Inicio do Proximo_est_taref '||cod_est_actual||'-'||
cod_taref_actual||'   '||cod_est_prox||'-'||cod_taref_prox);
				if not proximo_est_taref(ano_form, num_form, cod_est_actual,
							cod_taref_actual, form_reg_actual,
							tip_vis_actual,
							cod_est_prox, cod_taref_prox,
							tip_valid_prox, SCH, VVTL, REAPR, pare_pos_actual)
				then
					raise fim_estados;
				end if ;
Grava_Erro('Evolui_Estado','Fim do Proximo_est_taref '||cod_est_actual||'-'||
cod_taref_actual||'   '||cod_est_prox||'-'||cod_taref_prox);
			else -- tarefa manual Ã  espera de poder evoluir
				Cod_Est_Prox := Cod_Est_Actual;
				Cod_Taref_Prox := Cod_Taref_Actual;
				Tip_Valid_Prox := 'M' ;
				Primeira_Vez := TRUE;
			end if ;
		end if ;
	end if ;
	cod_est_actual := nvl(cod_est, cod_est_actual) ;
	cod_taref_actual := nvl(cod_taref, cod_taref_actual) ;
	form_reg_actual := nvl(form_reg, form_reg_actual) ;
	tip_vis_actual := nvl(tip_vis, tip_vis_actual) ;
Grava_Erro('Evolui_Estado','Inicio do while');
	while Continua_Evolucao
	loop
		if Tip_Valid_Prox = 'A' then -- EvoluÃ§Ã£o AUTOMÃ¿TICA
Grava_Erro('Evolui_Estado','TIP_VALID_PROX Automatica com estado='||Cod_Est_Prox||' e tarefa='||cod_taref_prox||'.');
			Estado_Tarefa := Evolui_Automatico	(Ano_Form, Num_Form,
								Cod_Est_Prox, Cod_Taref_Prox,
								SCH, VVTL, REAPR);
Grava_Erro('Evolui_Estado','TIP_VALID_PROX Automatica com estado='||Cod_Est_Prox||' e tarefa='||cod_taref_prox||' e esta


do_tarefa = '||to_char(estado_tarefa)||'.');
			Primeira_Vez := FALSE;
		else -- Evolucao MANUAL
Grava_Erro('Evolui_Estado','TIP_VALID_PROX Manual com estado='||Cod_Est_Prox||
' e tarefa='||cod_taref_prox||'.');
			Estado_Tarefa :=
				Evolui_Manual	(Ano_Form, Num_Form,
						Cod_Est_Prox, Cod_Taref_Prox,
						SCH, VVTL, REAPR, Evol_Man);
Grava_Erro('Evolui_Estado','TIP_VALID_PROX Manual com estado='||Cod_Est_Prox||
' e tarefa='||cod_taref_prox||' e estado_tarefa = '||to_char(estado_tarefa)||'.');
		end if;
		if estado_tarefa = 0 then
			NULL; -- Continua a evoluÃ§Ã£o para a proxima tarefa.
		elsif estado_tarefa = 1 then
			raise ERRO_TAREFA; -- Deu Exception numa tarefa
		elsif estado_tarefa = 92 then
			Continua_Evolucao := FALSE;
		elsif estado_tarefa = 93 then
			Continua_Evolucao := FALSE; -- a tarefa nÃ£o acabou
			Cancela := TRUE;
		elsif estado_tarefa = 98 then
			IF Cod_taref_prox = 'AGU_PARC' THEN NULL;
			ELSE
			Continua_Evolucao := FALSE; -- continua a evoluÃ§Ã£o
			Concede := TRUE;
			END IF;
		elsif estado_tarefa = 95 then
			Indefere := TRUE; -- acaba a tarefa e indefere
		elsif estado_tarefa = 96 then
			Continua_Evolucao := FALSE; -- a tarefa nÃ£o acabou
      --Verifica se vai para o estado AP ou IND
      begin
      select 'S' into v_ap_ind
      from t_visto t
      where t.tip_vis = tip_vis_actual and t.con_sch = 'N' and
      t.disponivel = 'M';
      exception when no_data_found then
                v_ap_ind := 'N';
      end;
      if v_ap_ind = 'N' then
			   Indefere := TRUE;
      else
         ano_form1 := ano_form;
         num_form1 := num_form;
         select aud_previa, cod_pare_pos into v_aud_previa, v_cod_pare_pos
         from formulario
         where ano_form = ano_form1 and num_form = num_form1;
         if v_aud_previa = 'X' then
            Indefere := TRUE;
         else
            if v_cod_pare_pos in (2,3) then
               Indefere := TRUE;
            else
               if cod_est_actual = 'AP' then
                  Indefere := TRUE;
               else
                  Audiencia_Previa := TRUE;
               end if;
            end if;
         end if;
      end if;
		elsif estado_tarefa = 97 then
			Concede := TRUE; -- e continua a evolucao
		elsif estado_tarefa = 99 then -- pÃ¡ra a evoluÃ§Ã£o porque nÃ£o cumpriu a tarefa
			--Concede	:= FALSE;
			--Indefere := FALSE;
			Continua_Evolucao := FALSE;
		end if ;
--------
	If Continua_Evolucao then
		If Primeira_Vez then -- Estava num estado MANUAL
grava_erro('Evolui_Estado','Ã¿ PRIMEIRA VEZ '||cod_est_prox||'/'||cod_taref_prox||'.');
			if Not Termina_Tarefa(Ano_Form, Num_Form, Form_Reg_Actual, Tip_Vis_Actual,
				Cod_Est_Prox, Cod_Taref_Prox) then
				if not insere_form_est(ano_form, num_form, cod_est_prox,
							tip_vis_actual, form_reg_actual,
							cod_taref_prox, 'S', SYSDATE)
			        then raise erro_insere_form_est ;
				end if ;
			end if ;
		else -- Se Continua a evoluÃ§Ã£o normalmente
grava_erro('Evolui_Estado','Vai inserir o estado/tarefa acabada '||cod_est_prox||'/'||cod_taref_prox||'.');
			if not insere_form_est(ano_form, num_form, cod_est_prox,
						tip_vis_actual, form_reg_actual, cod_taref_prox,
						'S', sysdate) then
				raise erro_insere_form_est ;
			end if ;
		End if;
	else -- Se a evoluÃ§Ã£o nÃ£o deve continuar (a tarefa e manual)
grava_erro('Evolui_Estado','Vai terminar o estado/tarefa acabada '||cod_est_prox||'/'||
cod_taref_prox||' e estado_tarefa = '||to_char(estado_tarefa));
		if estado_tarefa = 92 then null;
			else
			if Not Termina_Tarefa(Ano_Form, Num_Form, Form_Reg_Actual, Tip_Vis_Actual,
						Cod_Est_Prox, Cod_Taref_Prox)
				then
grava_erro('Evolui_Estado','fez termina_tarefa e deu erro: faz raise erro_insere_form_est', null);
				raise erro_insere_form_est;
				/*
				if not insere_form_est(ano_form, num_form, cod_est_prox,
					tip_vis_actual, form_reg_actual, cod_taref_prox, 'N')
				then raise erro_insere_form_est ;
				end if ;
				*/
			end if ;
		end if;
	End if;
---
	Primeira_Vez := FALSE;
	if Concede Then
		Cod_Est_Prox := 'CON' ;
grava_erro('Evolui_Estado','Vai buscar o Concedido entretanto '||cod_est_prox||'/'||cod_taref_prox||'.');
		if NOT Busca_Tarefa('CON', Tip_Vis_Actual, Form_Reg_Actual,
					Cod_Taref_Prox, Tip_Valid_Prox) Then
			Raise Erro_Buscar_Tarefa;
		end if;
		Continua_Evolucao := TRUE;
		Concede := FALSE;
	elsif Indefere Then
		if NVL(pare_pos_actual, '9') = Taref.Busca_Param_Glo1(41, null) then
			cod_est_prox := 'IP';
		else
			Cod_Est_Prox := 'IND' ;
		end if;
grava_erro('Evolui_Estado','Vai buscar o Indeferido entretanto '||cod_est_prox||'/'||cod_taref_prox||'.');
		if NOT Busca_Tarefa(Cod_Est_Prox, Tip_Vis_Actual, Form_Reg_Actual,
					Cod_Taref_Prox, Tip_Valid_Prox) Then
		Raise Erro_Buscar_Tarefa;
		end if;
		Continua_Evolucao := TRUE;
		Indefere := FALSE;
	elsif Audiencia_Previa Then
    cod_est_prox := 'AP';
    if NOT Busca_Tarefa(Cod_Est_Prox, Tip_Vis_Actual, Form_Reg_Actual,
					Cod_Taref_Prox, Tip_Valid_Prox) Then
		Raise Erro_Buscar_Tarefa;
		end if;
    Continua_Evolucao := TRUE;
    Audiencia_Previa := FALSE;
  elsif Cancela Then
		Cod_Est_Prox := 'CAN' ;
grava_erro('Evolui_Estado','Vai buscar o cancelado entretanto '||cod_est_prox||'/'||cod_taref_prox||'.');
		if NOT Busca_Tarefa('CAN', Tip_Vis_Actual, Form_Reg_Actual,
					Cod_Taref_Prox, Tip_Valid_Prox) Then
		Raise Erro_Buscar_Tarefa;
		end if;
		Continua_Evolucao := TRUE;
		Cancela := FALSE;
	elsif Continua_Evolucao then -- Tarefa automatica ou manual terminada
grava_erro('Evolui_Estado','Vai buscar o novo estado '||cod_est_prox||'/'||cod_taref_prox||'.');
		if not proximo_est_taref(ano_form, num_form, cod_est_prox,
					cod_taref_prox, form_reg_actual, tip_vis_actual,
					cod_est_prox, cod_taref_prox, tip_valid_prox,
					SCH, VVTL, REAPR, pare_pos_actual) then
		raise fim_estados;
		end if ;
grava_erro('Evolui_Estado','O novo estado Ã© '||cod_est_prox||'/'||cod_taref_prox||'.');
		if Cod_Taref_Prox is NULL then
			Continua_Evolucao := FALSE;
		end if ;
--
	else /* nÃ£o deve chegar aqui, excepto se nÃ£o deverÃ¡ continuar */
grava_erro('Evolui_Estado','NÃ£o deve continuar a evoluÃ§Ã£o em '||cod_est_prox||'/'||cod_taref_prox||'.');
		null;
	End if;
	end loop ;
return(0) ;
exception
when erro_termina_tarefa then
Grava_Erro('Evolui_Estado','RPV - Erro a terminar a tarefa.');
return(1) ;
when estava_ult_estado then
Grava_Erro('Evolui_Estado','RPV - Erro estava no ultimo estado.');
return(2) ;
when parametros_errados then
Grava_Erro('Evolui_Estado','RPV - Parametros passados Ã  funÃ§Ã£o errados.');
return(3) ;
when erro_trancar_ult_tarefa then
Grava_Erro('Evolui_Estado','RPV - Erro a trancar a ultima tarefa.');
return(4) ;
when erro_apaga_form_est then
Grava_Erro('Evolui_Estado','RPV - Erro, nÃ£o se consegue apagar o form_est');
return(5) ;
when fim_estados then -- o ultimo estado era automÃ¡tico
Grava_Erro('Evolui_Estado','RPV - Foi atingido o ultimo estado do formulario');
return(6) ;
when tarefa_nao_implementada then
Grava_Erro('Evolui_Estado','RPV - Erro, tarefa nÃ£o implementada '||cod_taref_prox||'.');
return(7) ;
when erro_insere_form_est then
Grava_Erro('Evolui_Estado','RPV - Erro a inserir na tabela form_est '||
','||to_char(ano_form)||','||to_char(num_form)||','||cod_est_prox||
','||tip_vis_actual||','||form_reg_actual||','||cod_taref_prox);
return(8) ;
when erro_tarefa then
Grava_Erro('Evolui_Estado','RPV - Erro na tarefa '||cod_taref_prox||'.');
return(9);
When Erro_Buscar_Tarefa then
Grava_Erro('Evolui_Estado','RPV - Erro a buscar tarefa '||cod_taref_prox||'.');
Return(10);
when others then --ERRO NO COMMIT
Grava_Erro('Evolui_Estado','RPV - Outros Erros '||SQLERRM);
return(99) ;
END;
END Tarefa_Master;
/

prompt
prompt Creating package body TAREF1
prompt ============================
prompt
CREATE OR REPLACE PACKAGE BODY RPV.TAREF1 AS
Function Verifica_Restr_1(Pais_Sch In Varchar2, Ano_Form1 In Number Default 0,
          Num_Form1 In Number Default 0, Pais_Sch_Dest_Princ In Varchar2)
       Return Number Is
 /* FunÃ§Ã£o que devolve 0 se a consulta a Pais_Sch deve ser efectuada,
               devolve 1 caso contrario */
 	CURSOR R_1 Is select cod_pais from pais_transito
	    where ano_form = ano_form1
            and num_form   = num_form1
            and cod_pais = Pais_Sch ;
 aj_pais 	pais_transito.cod_pais%TYPE;
 retorna 	number := 1;
Begin
  if pais_sch = nvl(Pais_Sch_Dest_Princ,'0') or
     (Ano_Form1 = 0 and Num_Form1 = 0) then
     return(0) ;
  end if ;
  open R_1;
  fetch R_1 into aj_pais;
  if R_1%Found then
     retorna := 0;
   else
     retorna := 1;
  end if ;
  close R_1;
  return(retorna);
End ;
Function Verifica_Restr_2(Pais_Sch In Varchar2,
                          Pais_Emi_Doc In Varchar2 Default NULL)
       Return Number Is
 /* FunÃ§Ã£o que devolve 0 se a consulta a Pais_Sch deve ser efectuada,
               devolve 2 caso contrario */
	CURSOR R_2 is
	select 'X'
	from Pais_Emi_Restr
	where cod_pais_sch = Pais_Sch
	and cod_pais = nvl(Pais_Emi_Doc,cod_pais) ;
	aj 		Varchar2(1);
	retorna 	number := 2;
Begin
  Open R_2;
  Fetch R_2 into aj;
  if R_2%Found then
    retorna := 0;
  elsif Pais_Emi_Doc is null then
    retorna := 0;
  else
    retorna := 2;
  end if ;
  close R_2;
  return(retorna);
End ;
Function Verifica_Lst_Nomes(Pais_Sch In Varchar2, Nome1 In Varchar2,
                            Apelido1 In Varchar2, Dat_Nasc1 In Varchar2)
           Return NUMBER IS
-- FunÃ§Ã£o que verifica se um determinado Nome, Apelido ou Data_Nasc existe em Lst_Nomes
  dummy Varchar2(1);
  Ano Varchar2(4) := nvl(Substr(Dat_Nasc1,1,4),'0000');
  Mes Varchar2(2) := nvl(Substr(Dat_Nasc1,6,2),'00');
  Dia Varchar2(2) := nvl(Substr(Dat_Nasc1,9,2),'00');
	Cursor P_Nomes is
	Select 'x'
	From	Lst_Nomes
	Where	Cod_Pais_Sch = Pais_Sch
	and	Nome = nvl(Nome1,Nome)
	And	Apelido = nvl(Apelido1, Apelido)
	And	(Ano = '0000' or decode(nvl(Substr(Dat_Nasc,1,4),'0000'),'0000',Ano) = Ano)
	And	(Mes = '00' or decode(nvl(Substr(Dat_Nasc,6,2),'00'),'00',Mes) = Mes)
	And	(Dia = '00' or decode(nvl(Substr(Dat_Nasc,9,2),'00'),'00',Dia) = Dia);
	Encontrou Number := 1;
BEGIN
  OPEN P_Nomes;
  FETCH p_nomes INTO dummy ;
  IF P_Nomes%FOUND THEN
     encontrou := 0;
  ELSE
     encontrou := 1 ;
  END IF;
  CLOSE P_Nomes;
  RETURN (encontrou);
END ;
Function Verifica_Restr_4(Pais_Sch In Varchar2, Posto In Number,
                          Doc_Viag In Varchar2, Nome In Varchar2,
                          Apelido In Varchar2, Data_Nasc In Varchar2)
       RETURN NUMBER Is
 /* FunÃ§Ã£o que devolve 0 se a consulta a Pais_Sch deve ser efectuada,
               devolve 4 caso contrario */
 	CURSOR Ve_P IS
	SELECT * FROM Pais_Emi_Restr
	WHERE Cod_Pais_Sch = Pais_Sch and Cod_Pos = Posto;
	Aj_P 		Pais_Emi_Restr%ROWTYPE;
	Consulta 	NUMBER := 4;
BEGIN
   IF Posto is null Then /* Se nÃ£o se sabe o posto de onde vem, deve consultar */
      Return(0);
   END IF;
   OPEN Ve_P;
   Fetch Ve_P INTO Aj_P;
   IF Ve_P%NOTFOUND THEN
      Consulta := 0; /* Se o Posto nÃ£o estÃ¡ na lista, deve consultar */
   END IF;
   WHILE Ve_P%Found and (Consulta <> 0) LOOP
	IF Aj_P.Cod_Doc IS NOT NULL THEN
       /* Significa que tem que ver pelo tipo de doc */
      	   IF Aj_P.Cod_Doc = Doc_Viag Then
	      Consulta := 0;
	   END IF;
	END IF ;
	IF Aj_P.Tem_Lista is not null and Consulta <> 0 then
       /* Significa que tem que ver pela lista de nomes */
	   IF Verifica_Lst_Nomes(Pais_Sch, Nome, Apelido, Data_Nasc) = 0 then
	      Consulta := 0;
	   END IF;
	END IF ;
	FETCH Ve_P INTO Aj_P;
  END LOOP;
  CLOSE Ve_P;
  RETURN(Consulta);
End ;
Function verifica_restricao(restr in varchar2, pais_sch in varchar2,
                   Ano_Form1 in Number, Num_Form1 in number,
                   pais_sch_dest_princ in varchar2,
                   pais_emi_doc in varchar2,
                   posto in number, doc in varchar2,
                   apelido in varchar2, nome in varchar2,
                   dat_nasc in varchar2) Return Number is
BEGIN
   IF Restr = '1' then
      Return(Verifica_Restr_1(pais_sch, Ano_Form1, Num_Form1, pais_sch_dest_princ));
   ELSIF Restr = '2' then
      Return(Verifica_Restr_2(pais_sch, Pais_Emi_Doc));
   ELSIF Restr = '4' then
      Return(Verifica_Restr_4(pais_sch, posto, doc, apelido, nome, dat_nasc));
   END IF;
RETURN(0);
END ;
FUNCTION tarefa_pede_cons_sch(ano_form1 in number,
                              num_form1 in number,
			      VVTL IN BOOLEAN)
     RETURN NUMBER IS
 /* devolve: 0, se estÃ¡ tudo correcto (tabela preenchida);
             2, outros erros.
            99, se nÃ£o existem paises a consultar */
  erro 		number := 0;
  Param_Glob7 	Varchar2(30) := Taref.Busca_Param_Glo1(7, null) ;
  Param_PRT 	Varchar2(30) := Taref.Busca_Param_Glo1(1, null) ;
  cursor f0 is
    select cod_pais_nac_1, cod_pais_nac_2, cod_pais_nac_3,
           cod_pais_sch_dest_prin,
           cod_pais_emi_doc,
           cod_pos, cod_doc, apel, nome, dat_nasc
    from formulario
    where ano_form = ano_form1 and num_form = num_form1 ;
  formul_cod_pais_nac_1 	formulario.cod_pais_nac_1%type ;
  formul_cod_pais_nac_2 	formulario.cod_pais_nac_2%type ;
  formul_cod_pais_nac_3 	formulario.cod_pais_nac_3%type ;
  formul_cod_pais_sch_dest_prin formulario.cod_pais_sch_dest_prin%type;
  formul_cod_pais_emi_doc 	formulario.cod_pais_emi_doc%type;
  formul_cod_pos 		formulario.cod_pos%type;
  formul_cod_doc 		formulario.cod_doc%type;
  formul_apel 			formulario.apel%TYPE;
  formul_nome 			formulario.nome%TYPE;
  formul_dat_nasc 		formulario.dat_nasc%TYPE;
  cursor f1 is
    select distinct cod_pais_sch, tip_restr
    from consulta_sch_det csd
    where (cod_pais in (nvl(formul_cod_pais_nac_1,'xpto'),
                         nvl(formul_cod_pais_nac_2,'xpto'),
                         nvl(formul_cod_pais_nac_3,'xpto'))) and
           cod_cons_sch = param_glob7 and
           cod_pais_sch <> Param_PRT and
           tip_valid = 'A'
    order by 1,2;
-- and
--           cod_restr not in (select cod_restr from pais_emi_restr
--                   where cod_pais = csd.cod_pais);
  c_s_d_cod_pais_sch consulta_sch_det.cod_pais_sch%Type ;
  c_s_d_tip_restr consulta_sch_det.tip_restr%TYPE;
  f_s form_sch%rowtype ;
  inseriu boolean ;
  insere boolean ;
BEGIN
  open f0 ;
  fetch f0 into formul_cod_pais_nac_1,
                formul_cod_pais_nac_2,
                formul_cod_pais_nac_3,
                formul_cod_pais_sch_dest_prin,
                formul_cod_pais_emi_doc,
                formul_cod_pos,
                formul_cod_doc,
                formul_apel,
                formul_nome,
                formul_dat_nasc;
  if f0%notfound then
    erro := 2 ;
    return(erro) ;
  end if ;
  close f0 ;
  f_s.ano_form := ano_form1 ;
  f_s.num_form := num_form1 ;
--  f_s.cod_pais := null ; calculado no ciclo
  f_s.dat_lim_resp := sysdate + to_number(Taref.Busca_Param_Glo1(5, null));
  f_s.dat_pare_sch := null;
  f_s.dat_prorr := null;
  f_s.cod_pare := null;
  f_s.cod_pais := null ;
  OPEN f1 ;
  FETCH f1 INTO c_s_d_cod_pais_sch, c_s_d_tip_restr ;
  WHILE f1%FOUND AND erro = 0 LOOP
    IF nvl(f_s.cod_pais,'x') <> c_s_d_cod_pais_sch then
      f_s.cod_pais := c_s_d_cod_pais_sch ;
      inseriu := FALSE;
      insere := FALSE;
    END IF ;
    IF NOT inseriu THEN
      IF c_s_d_tip_restr is null then
         insere := TRUE;
      ELSIF verifica_restricao(c_s_d_tip_restr, c_s_d_cod_pais_sch,
                   ano_form1, num_form1,
                   formul_cod_pais_sch_dest_prin,
                   formul_cod_pais_emi_doc,
                   formul_cod_pos,
                   formul_cod_doc,
                   formul_apel,
                   formul_nome,
                   formul_dat_nasc) = 0 then
          insere := TRUE;
      END IF;
      IF insere THEN
Tarefa_master.Grava_Erro ('TAREF1', 'Vai fazer Taref.Insere_Form_Sch');
	 IF NOT Taref.Insere_Form_Sch(f_s.ANO_FORM, f_s.NUM_FORM, f_s.COD_PAIS,
                 f_s.DAT_LIM_RESP, f_s.DAT_PARE_SCH, f_s.DAT_PRORR,
                 f_s.COD_PARE, f_s.CRI_DAT, f_s.CRI_UTI, f_s.ALT_DAT,
                 f_s.ALT_UTI, VVTL) then
Tarefa_master.Grava_Erro ('TAREF1', 'Fez Taref.Insere_Form_Sch e nÃ£o inseriu');
	    erro := 2 ;
         ELSE
	    inseriu := TRUE;
Tarefa_master.Grava_Erro ('TAREF1', 'Fez Taref.Insere_Form_Sch e inseriu');
         END IF;
       END IF;
    END IF ;
  FETCH f1 into c_s_d_cod_pais_sch, c_s_d_tip_restr ;
  END LOOP ;
  CLOSE f1 ;
  RETURN (erro) ;
END;
FUNCTION tarefa_pede_cons_serv(ano_form1 in number,
                               num_form1 in number,
                               cod_servico in varchar2 := NULL,
			       Reapr In BOOLEAN, Estado in varchar2)
     RETURN NUMBER IS
 /* devolve: 0, se estÃ¡ tudo correcto (tabela preenchida);
             2, outros erros ou
            99, se nÃ£o existiram serviÃ§os.
 */
  CURSOR f0 is
  SELECT cod_pais_nac_1, cod_pais_nac_2,
         cod_pais_nac_3, cod_pais_nac_orig, cod_pais_emi_doc,
         tip_vis_ped, tip_form, dat_ini_praz, dat_lim_resp
  from	formulario
  where ano_form = ano_form1 and num_form = num_form1 ;
  formul_cod_pais_nac_1 	formulario.cod_pais_nac_1%type ;
  formul_cod_pais_nac_2 	formulario.cod_pais_nac_2%type ;
  formul_cod_pais_nac_3 	formulario.cod_pais_nac_3%type ;
  formul_cod_pais_nac_orig 	formulario.cod_pais_nac_orig%type ;
  formul_cod_pais_emi_doc 	formulario.cod_pais_emi_doc%type ;
  formul_tip_vis_ped 		formulario.tip_vis_ped%TYPE ;
  tip_vis1 			formulario.tip_vis_ped%TYPE ;
  formul_tip_form 		formulario.tip_form%TYPE ;
  formul_dat_ini_praz 		formulario.dat_ini_praz%TYPE;
  formul_dat_lim_resp 		formulario.dat_lim_resp%TYPE;
  cursor f01 is
    select cod_pais_nasc, cod_pais_conj, cod_pais_dest,
           cod_pais_emi_aut
    from form_p
    where ano_form = ano_form1 and num_form = num_form1 ;
  formp_cod_pais_nasc 		form_p.cod_pais_nasc%type ;
  formp_cod_pais_conj 		form_p.cod_pais_conj%type ;
  formp_cod_pais_dest		form_p.cod_pais_dest%type ;
  formp_cod_pais_emi_aut	form_p.cod_pais_emi_aut%type ;
  servico 			varchar2(30) := NULL;
  v_cod_pare_ser		form_ser.cod_pare_ser%TYPE := Taref.Busca_Param_Glo1(10, null);
  cursor f1 is
    select distinct f.cod_ser from consulta_ser f
    where f.tip_vis = tip_vis1 and
           f.cod_ser = nvl(servico,cod_ser) and
           (f.cod_pais in (nvl(formp_cod_pais_nasc,'xpto'),
                         nvl(formul_cod_pais_nac_1,'xpto'),
                         nvl(formul_cod_pais_nac_2,'xpto'),
                         nvl(formul_cod_pais_nac_3,'xpto'),
                         nvl(formul_cod_pais_nac_orig,'xpto'),
                         nvl(formp_cod_pais_conj,'xpto'),
                         nvl(formul_cod_pais_emi_doc,'xpto'),
                         nvl(formp_cod_pais_dest,'xpto'),
                         nvl(formp_cod_pais_emi_aut,'xpto')) or
            f.cod_pais in (select nvl(cod_pais,'xpto')
                         from descendente
                         where ano_form = ano_form1 and
                               num_form = num_form1))
    /*and (
	(reapr and f.cod_ser = f.cod_ser) or
	(reapr and f.cod_ser in
		(select f2.cod_ser from form_ser f2
		 where f2.ano_form = ano_form1
		 and   f2.num_form = num_form1
		 and   f2.cod_pare_ser = v_cod_pare_ser)))*/
    ;
  v_cod_ser 		consulta_ser.cod_ser%type ;
  f_s 			form_ser%rowtype ;
  erro 			number := 0;
  existe_prazo_esp	BOOLEAN := FALSE;
  f_s_estado		form_est.cod_est%type := estado;
BEGIN
  servico := cod_servico;
  open f0 ;
  FETCH f0 into formul_cod_pais_nac_1, formul_cod_pais_nac_2,
           formul_cod_pais_nac_3, formul_cod_pais_nac_orig,
           formul_cod_pais_emi_doc, formul_tip_vis_ped,
           formul_tip_form,
	   formul_dat_ini_praz, formul_dat_lim_resp;
  IF f0%NOTFOUND THEN
     erro := 2 ;
     CLOSE f0 ;
     RETURN(erro) ;
  END IF ;
  CLOSE f0 ;
  IF formul_tip_vis_ped is null then
     erro := 2;
     return(erro) ;
  ELSE
     tip_vis1 := formul_tip_vis_ped ;
  END IF;
  IF formul_tip_form = 'P' THEN
     OPEN f01 ;
     FETCH f01 into formp_cod_pais_nasc, formp_cod_pais_conj,
                    formp_cod_pais_dest, formp_cod_pais_emi_aut ;
     IF f01%NOTFOUND THEN
        erro := 2 ;
        CLOSE f01 ;
        RETURN (erro) ;
     END IF ;
     CLOSE f01 ;
  END IF ;
  f_s.ano_form := ano_form1 ;
  f_s.num_form := num_form1 ;
--  f_s.num_ord_formr := null ; se for reapr Ã© seq in parent ;
  f_s.dat_lote := null ;
  f_s.ord_lote := null ;
  f_s.tip_vis := tip_vis1 ;
  f_s.cod_pare_ser := null ;
  f_s.dat_pare_ser := null;
  f_s.dat_prorr := null;
  IF formul_tip_form = 'P' THEN
     f_s.ped_pos := 'S';
  ELSE
     f_s.ped_pos := 'N';
  END IF;
  f_s.Devido_A := Estado||': '||'Consulta Normal';
  IF Nvl(Servico,'OUT') = 'OUT' then /* consulta geral */
     OPEN f1 ;
     FETCH f1 into v_cod_ser ;
     WHILE f1%FOUND AND erro = 0 LOOP
Tarefa_Master.Grava_Erro('Taref1', 'Encontrou o servico '||v_COD_SER||' Para ser consultado.');
        f_s.cod_ser := v_cod_ser ;
        f_s.num_ord := null ; -- calculado no Taref.Insere_Form_Ser
        f_s.dat_lim_resp := sysdate +
			    to_number(Taref.Busca_Param_Glo1(6, null));
			-- 6 -> Indice parametrizado p/ NÂº
			-- de dias para a Consulta de ServiÃ§os
        existe_prazo_esp := (Taref.Busca_Param_Glo1(37, formul_tip_vis_ped) is not null);
	-- verifica se existe prazo especial para o tipo de visto em causa
        IF existe_prazo_esp THEN
	   existe_prazo_esp := (Taref.Busca_Param_Glo1(36, f_s.cod_ser) is not null);
	   -- caso exista prazo especial para o visto, Ã© necessÃ¡rio verificar qual o
	   -- prazo para o serviÃ§o a ser tratado
	   IF existe_prazo_esp THEN
	      f_s.dat_lim_resp := 	sysdate +
					to_number(Taref.Busca_Param_Glo1(38, null));
			-- 38 ->Indice parametrizado p/ o NÂº de dias
			-- para a consulta a serviÃ§os
			-- com um tipo de visto de parametrizado no indice 37 (normalmente de
			--							longa duraÃ§Ã£o)
	   END IF;
         END IF;
         IF NVL(formul_dat_lim_resp, f_s.dat_lim_resp) < f_s.dat_lim_resp
	    THEN
	       f_s.dat_lim_resp := formul_dat_lim_resp;
         END IF ;
         IF NOT Taref.Insere_Form_Ser(f_s.ANO_FORM, f_s.NUM_FORM,
                       f_s.COD_SER, f_s.NUM_ORD, f_s.NUM_ORD_FORMR,
                       f_s.DAT_LOTE, f_s.ORD_LOTE, f_s.TIP_VIS,
                       f_s.COD_PARE_SER, f_s.DAT_LIM_RESP,
                       f_s.DAT_PARE_SER, f_s.DAT_PRORR, f_s.PED_POS,
                       f_s.CRI_DAT, f_s.CRI_UTI, f_s.ALT_DAT,
                       f_s.ALT_UTI, f_s.Devido_A, Reapr, f_s_Estado) then
        	erro := 2 ;
        	close f1 ;
        	return(erro);
         END IF ;
Tarefa_Master.Grava_Erro('Taref1',
'Inseriu no form_ser o servico '||f_S.COD_SER||' e retornou o erro '||to_char(erro));
      FETCH f1 INTO v_cod_ser ;
      END LOOP ;
      CLOSE f1 ;
   ELSE /* consulta o servico indicado em est_tarefa */
      f_s.cod_ser := Servico ;
      f_s.num_ord := null ; -- calculado no insere
      f_s.dat_lim_resp := sysdate +
			  to_number(Taref.Busca_Param_Glo1(6, null));
			-- 6 -> Indice parametrizado p/ NÂº
			-- de dias para a Consulta de ServiÃ§os
      existe_prazo_esp := (Taref.Busca_Param_Glo1(37, formul_tip_vis_ped) is not null);
	-- verifica se existe prazo especial para o tipo de visto em causa
      IF existe_prazo_esp
	 THEN
	 existe_prazo_esp := (Taref.Busca_Param_Glo1(36, f_s.cod_ser) is not null);
	 -- caso exista prazo especial para o visto, Ã© necessÃ¡rio verificar qual o
	 -- prazo para o serviÃ§o a ser tratado
	 IF existe_prazo_esp Then
	    f_s.dat_lim_resp := 	sysdate +
					to_number(Taref.Busca_Param_Glo1(38, null));
	    -- 38 ->Indice parametrizado p/ o NÂº de dias
	    -- para a consulta a serviÃ§os
	    -- com um tipo de visto de parametrizado no indice 37 (normalmente de longa duraÃ§Ã£o)
	 END IF;
      END IF;
      IF NVL(formul_dat_lim_resp, f_s.dat_lim_resp) < f_s.dat_lim_resp
	 THEN
	       f_s.dat_lim_resp := formul_dat_lim_resp;
      END IF;
      IF NOT Taref.Insere_Form_Ser(f_s.ANO_FORM, f_s.NUM_FORM,
			f_s.COD_SER, f_s.NUM_ORD, f_s.NUM_ORD_FORMR,
			f_s.DAT_LOTE, f_s.ORD_LOTE, f_s.TIP_VIS,
			f_s.COD_PARE_SER, f_s.DAT_LIM_RESP,
			f_s.DAT_PARE_SER, f_s.DAT_PRORR, f_s.PED_POS,
			f_s.CRI_DAT, f_s.CRI_UTI, f_s.ALT_DAT,
			f_s.ALT_UTI, f_s.Devido_A, Reapr, f_s_estado)
	 THEN
	 erro := 2 ;
         RETURN (erro);
      END IF ;
Tarefa_Master.Grava_Erro('Taref1',
'Inseriu no form_ser o servico '||f_S.COD_SER||' no estado '||f_s_estado||' e retornou o erro '||to_char(erro));
   END IF ;
   RETURN (erro) ;
END;
FUNCTION tarefa_analise_indeferidos(ano_form1 in number, num_form1 in number,
		Reapr IN BOOLEAN, Estado_Tarefa IN VARCHAR2)
     RETURN NUMBER IS
 /* devolve: 0, se estÃ¡ tudo correcto (nÃ£o existem pedidos
              indeferidos para o mesmo indivÃ­duo);
             2, se nÃ£o consegue fazer a procura.
 */
  erro number := 0;
  cod_pare_indef Varchar2(1) := taref.Busca_Param_Glo1(10, null) ;
  cursor f1 is
    select apel, nome, dat_nasc, cod_pais_nac_1, cod_pais_nac_2,
            cod_pais_nac_3, tip_vis_ped, dat_lim_resp
      from formulario
      where ano_form = ano_form1 and num_form = num_form1 ;
  form1_apel formulario.apel%TYPE;
  form1_nome formulario.nome%TYPE;
  form1_dat_nasc formulario.dat_nasc%TYPE;
  form1_cod_pais_nac_1 formulario.cod_pais_nac_1%TYPE;
  form1_cod_pais_nac_2 formulario.cod_pais_nac_2%TYPE;
  form1_cod_pais_nac_3 formulario.cod_pais_nac_3%TYPE;
  form1_tip_vis_ped formulario.tip_vis_ped%TYPE;
  form1_dat_lim_resp formulario.dat_lim_resp%TYPE;
  cursor f2 is
    select cod_pare, ano_form, num_form, cod_pais_sch_ref,
	    ref_form_2, ref_form_3
     from formulario f
     where ((ano_form != ano_form1) OR (Num_Form != Num_Form1)) and
           nvl(cod_pare,'xpto') = cod_pare_indef and
           apel = form1_apel and nome = form1_nome and
           dat_nasc = form1_dat_nasc and
	   dat_ini_praz >= (sysdate - 365)
	ORDER BY ano_form desc, num_form desc;
  dummy_cod_pare formulario.cod_pare%TYPE;
  dummy_ano_form formulario.ano_form%TYPE;
  dummy_num_form formulario.num_form%TYPE;
  dummy_cod_pais_sch_ref formulario.cod_pais_sch_ref%TYPE;
  dummy_ref_form_2 formulario.ref_form_2%TYPE;
  dummy_ref_form_3 formulario.ref_form_3%TYPE;
  f_s Form_Ser%RowType ;
  encontrou BOOLEAN := FALSE;
  cursor p_d is
     select val_param from param_det
     where ind_para = 19 ; -- Cod's de serviÃ§o a consultar
  cursor copia_fs is
     select cod_ser from form_ser
     where ano_form = dummy_ano_form and num_form = dummy_num_form
     and cod_pare_ser in (select cod_pare_ser from parecer_ser
			  where cod_pare = cod_pare_indef);
 erro_t varchar2(255);
BEGIN
Tarefa_Master.grava_erro('Analise de indeferidos','inicio');
   open f1 ; /* formulÃ¡rio que se estÃ¡ a tratar */
   fetch f1 into form1_apel, form1_nome, form1_dat_nasc,
        form1_cod_pais_nac_1, form1_cod_pais_nac_2,
        form1_cod_pais_nac_3, form1_tip_vis_ped, form1_dat_lim_resp;
      if f1%found then
         null;
      else
         erro := 2 ;
      end if ;
   close f1 ;
Tarefa_Master.Grava_erro('Analise de indeferidos','Close f1');
   IF erro = 0 THEN /* verifica consultas indeferidas */
Tarefa_Master.grava_erro('Analise de indeferidos','Open f2');
      OPEN f2 ; /* formulÃ¡rios indeferidos */
Tarefa_Master.grava_erro('Analise de indeferidos','ApÃ³s Open f2');
      FETCH f2 INTO dummy_cod_pare, dummy_ano_form, dummy_num_form,
	dummy_cod_pais_sch_ref, dummy_ref_form_2, dummy_ref_form_3 ;
Tarefa_Master.grava_erro('Analise de indeferidos','ApÃ³s Fetch f2');
      IF f2%NOTFOUND THEN
         null ; /* nÃ£o faz consultas */
Tarefa_Master.grava_erro('Analise de indeferidos','NÃ£o faz consultas');
      ELSE /* f2%found - faz consultas ou update ao form_ser */
Tarefa_Master.grava_erro('Analise de indeferidos','encontrou indeferidos');
	 f_s.ano_form := ano_form1 ;
	 f_s.num_form := num_form1 ;
	 f_s.num_ord_formr := null ; -- se for reapr Ã© seq in parent do form_r;
	 f_s.dat_lote := null ;
	 f_s.ord_lote := null ;
	 f_s.tip_vis := form1_tip_vis_ped ;
	 f_s.cod_pare_ser :=  null;
	 f_s.dat_lim_resp := sysdate + to_number(Taref.Busca_Param_Glo1(19, null));
	 IF f_s.dat_lim_resp > form1_dat_lim_resp then
 	    f_s.dat_lim_resp := form1_dat_lim_resp ;
         END IF ;
	 f_s.dat_pare_ser := null;
	 f_s.dat_prorr := null;
	 IF dummy_cod_pais_sch_ref = Taref.Busca_Param_Glo1(1, null) THEN
	    f_s.ped_pos := 'S';
	 ELSE
	    f_s.ped_pos := 'N';
	 END IF;
	 f_s.devido_a := Estado_Tarefa||': '||'Indef. em '||dummy_cod_pais_sch_ref||
			dummy_ref_form_2||dummy_ref_form_3;
	 encontrou := TRUE;
	 WHILE f2%FOUND LOOP
        -- um por cada registo encontrado no form_ser em
        -- indeferidos
	   encontrou := FALSE;
	   FOR aj_c_f_s IN copia_fs LOOP
	       encontrou := TRUE;
	       f_s.cod_ser := aj_c_f_s.cod_ser ;
	       IF NOT Taref.insere_form_ser(f_s.ANO_FORM, f_s.NUM_FORM,
                       f_s.COD_SER, f_s.NUM_ORD, f_s.NUM_ORD_FORMR,
                       f_s.DAT_LOTE, f_s.ORD_LOTE, f_s.TIP_VIS,
                       f_s.COD_PARE_SER, f_s.DAT_LIM_RESP,
                       f_s.DAT_PARE_SER, f_s.DAT_PRORR, f_s.PED_POS,
                       f_s.CRI_DAT, f_s.CRI_UTI, f_s.ALT_DAT,
                       f_s.ALT_UTI, f_s.DEVIDO_A, Reapr, 'IND') then
                  erro := 2 ;
		  CLOSE f2 ;
		  RETURN(erro);
		END IF ;
	   END LOOP;
	   FETCH f2 INTO dummy_cod_pare, dummy_ano_form, dummy_num_form,
	  		 dummy_cod_pais_sch_ref, dummy_ref_form_2, dummy_ref_form_3 ;
        END LOOP ; /* fim dos formularios */
     END IF ;
     CLOSE f2 ;
        -- um por cada registo encontrado nos parametros e se nÃ£o encontrou
        -- indeferidos pelos serviÃ§os
Tarefa_Master.grava_erro('Analise de indeferidos','close f2');
   END IF ;
Tarefa_Master.grava_erro('Analise de indeferidos','fim de indeferidos');
   RETURN (erro) ;
-- exception
--	When OTHERS then
--erro_t := sqlerrm;
--insert into horta
--values('Analise de indeferidos','Exception'||erro_t,9);
--	Raise;
END;
FUNCTION Tarefa_Analise_Apreciacao(ano_form1 in number, num_form1 in number,
		Reapr IN BOOLEAN, Estado_Tarefa IN VARCHAR2)
     RETURN NUMBER IS
 /* devolve: 0, se estÃ¡ tudo correcto, a tarefa correu bem;
             2, se nÃ£o consegue fazer a procura.
 */
  erro number := 0;
  Est_CAN Form_Est.Cod_Est%TYPE := 'CAN';
  cursor f1 is
    select apel, nome, dat_nasc, cod_pais_nac_1, cod_pais_nac_2,
            cod_pais_nac_3, tip_vis_ped, dat_lim_resp
      from formulario
      where ano_form = ano_form1 and num_form = num_form1 ;
  form1_apel formulario.apel%TYPE;
  form1_nome formulario.nome%TYPE;
  form1_dat_nasc formulario.dat_nasc%TYPE;
  form1_cod_pais_nac_1 formulario.cod_pais_nac_1%TYPE;
  form1_cod_pais_nac_2 formulario.cod_pais_nac_2%TYPE;
  form1_cod_pais_nac_3 formulario.cod_pais_nac_3%TYPE;
  form1_tip_vis_ped formulario.tip_vis_ped%TYPE;
  form1_dat_lim_resp formulario.dat_lim_resp%TYPE;
  cursor f2 is
    select cod_pare, ano_form, num_form, cod_pais_sch_ref,
	    ref_form_2, ref_form_3
     from formulario f
     where ((ano_form != ano_form1) OR (Num_Form != num_form1)) and
           cod_pare is null and
           apel = form1_apel and nome = form1_nome and
           dat_nasc = form1_dat_nasc and
	   (ano_form, Num_Form) not in
		(select ano_form, num_form from form_est
		 where cod_est = Est_CAN)
	ORDER BY ano_form desc, num_form desc;
  dummy_cod_pare formulario.cod_pare%TYPE;
  dummy_ano_form formulario.ano_form%TYPE;
  dummy_num_form formulario.num_form%TYPE;
  dummy_cod_pais_sch_ref formulario.cod_pais_sch_ref%TYPE;
  dummy_ref_form_2 formulario.ref_form_2%TYPE;
  dummy_ref_form_3 formulario.ref_form_3%TYPE;
  f_s Form_Ser%RowType ;
  encontrou BOOLEAN := FALSE;
  cursor p_d is
     select val_param from param_det
      where ind_para = 20 ; -- Cod's de serviÃ§o a consultar em anÃ¡lise de pendentes
BEGIN
  open f1 ; /* formulÃ¡rio que se estÃ¡ a tratar */
  fetch f1 into form1_apel, form1_nome, form1_dat_nasc,
        form1_cod_pais_nac_1, form1_cod_pais_nac_2,
        form1_cod_pais_nac_3, form1_tip_vis_ped, form1_dat_lim_resp;
  if f1%found then
    null;
   else
    erro := 2 ;
  end if ;
  close f1 ;
  if erro = 0 then /* verifica consultas em apreciacÃ£o */
    open f2 ; /* formulÃ¡rios em apreciaÃ§Ã£o */
    fetch f2 into dummy_cod_pare, dummy_ano_form, dummy_num_form,
	dummy_cod_pais_sch_ref, dummy_ref_form_2, dummy_ref_form_3 ;
    if f2%notfound then
      null ; /* nÃ£o faz consultas - devolve 0 */
     else /* f2%found - faz consultas ou update ao form_ser */
      f_s.ano_form := ano_form1 ;
      f_s.num_form := num_form1 ;
      f_s.num_ord_formr := null ; -- se for reapr Ã© seq in parent do form_r;
      f_s.dat_lote := null ;
      f_s.ord_lote := null ;
      f_s.tip_vis := form1_tip_vis_ped ;
      f_s.cod_pare_ser :=  null;
      f_s.dat_lim_resp := sysdate + to_number(Taref.Busca_Param_Glo1(20, null));
      if f_s.dat_lim_resp >
         nvl(form1_dat_lim_resp, f_s.dat_lim_resp) then
	f_s.dat_lim_resp := form1_dat_lim_resp ;
      end if ;
      f_s.dat_pare_ser := null;
      f_s.dat_prorr := null;
      IF dummy_cod_pais_sch_ref = Taref.Busca_Param_Glo1(1, null) THEN
	    f_s.ped_pos := 'S';
      ELSE
	    f_s.ped_pos := 'N';
      END IF;
      while f2%found loop
        -- um por cada registo encontrado nos parametros
        f_s.devido_a := Estado_Tarefa||': '||'Em apreciaÃ§Ã£o com a ref. '||dummy_cod_pais_sch_ref||
			dummy_ref_form_2||dummy_ref_form_3;
        for aj_pd in p_d loop
          f_s.cod_ser := aj_pd.val_param ;
Tarefa_Master.grava_erro('ANALISE_APRECIACAO', 'Consulta ao serviÃ§o '||f_s.cod_ser||' devido a '||f_s.devido_a, null);
          if not Taref.insere_form_ser(f_s.ANO_FORM, f_s.NUM_FORM,
                       f_s.COD_SER, f_s.NUM_ORD, f_s.NUM_ORD_FORMR,
                       f_s.DAT_LOTE, f_s.ORD_LOTE, f_s.TIP_VIS,
                       f_s.COD_PARE_SER, f_s.DAT_LIM_RESP,
                       f_s.DAT_PARE_SER, f_s.DAT_PRORR, f_s.PED_POS,
                       f_s.CRI_DAT, f_s.CRI_UTI, f_s.ALT_DAT,
                       f_s.ALT_UTI, f_s.DEVIDO_A, Reapr, 'APR') then
--Tarefa_Master.grava_erro('ANALISE_APRECIACAO', 'Erro a inserir em form_ser', null);
            erro := 2 ;
            close f2 ;
            return(erro);
--else
--Tarefa_Master.grava_erro('ANALISE_APRECIACAO', 'Sucesso a inserir em form_ser', null);
          end if ;
        end loop ;
--Tarefa_Master.grava_erro('ANALISE_APRECIACAO', 'fim do loop e vai fazer fetch do f2', null);
	fetch f2 into dummy_cod_pare, dummy_ano_form, dummy_num_form,
	  dummy_cod_pais_sch_ref, dummy_ref_form_2, dummy_ref_form_3 ;
--Tarefa_Master.grava_erro('ANALISE_APRECIACAO', 'fim do loop e fez fetch do f2', null);
      end loop ; /* fim dos formularios */
    end if ;
--Tarefa_Master.grava_erro('ANALISE_APRECIACAO', 'fim do loop e faz close dod f2', null);
    close f2 ;
  end if;
--Tarefa_Master.grava_erro('ANALISE_APRECIACAO', 'acabou e devolve:'||to_char(erro), null);
  return(erro) ;
END;
END Taref1;
/

prompt
prompt Creating package body TAREF2
prompt ============================
prompt
CREATE OR REPLACE PACKAGE BODY RPV.TAREF2 AS
PROCEDURE insere_form_r (v_ano_form NUMBER, v_num_form NUMBER) IS
  v_ord_form_r 	form_r.ord_form_r%TYPE;
BEGIN
   BEGIN
	SELECT NVL(MAX(fr.ord_form_r), 0) INTO v_ord_form_r
	FROM form_r fr
	WHERE fr.ano_form = v_ano_form
	AND   fr.num_form = v_num_form;
   END;
   v_ord_form_r := v_ord_form_r + 1;
   INSERT INTO form_r
	(ano_form,
	 num_form,
	 ord_form_r,
	 dat_reapr,
	 cri_dat,
	 cri_uti)
   VALUES
	(v_ano_form,
	 v_num_form,
	 v_ord_form_r,
	 sysdate,
	 to_char(sysdate, 'yyyy/mm/dd hh24:mi:ss'),
	 user);
END;
FUNCTION Tarefa_Espera_Docs(	Ano_Form1 in NUMBER,
				Num_Form1 in NUMBER,
				Tipo in Varchar2) Return NUMBER IS
--	função que verifica se os documentos já
--	foram entregues (se tipo = 'E') ou se já chegaram (tipo = 'C')
--	Retorna	0: se pode continuar a evolução de estados;
-- 		1: se existiu um erro qualquer na função (EXCEPTION);
--		99: se deve aguardar
  cursor f1 is
  select ENTREGOU_DOCS, CHEGARAM_DOCS
  from formulario
  where ano_form = ano_form1 and num_form = num_form1 ;
 entregou 	Formulario.ENTREGOU_DOCS%TYPE;
 chegou 	Formulario.CHEGARAM_DOCS%TYPE;
Begin
 Open f1;
 FETCH F1 into entregou, chegou;
 if f1%NOTFOUND then
    CLOSE F1;
    Raise NO_DATA_FOUND ;
 End if ;
 CLOSE F1;
 if nvl(chegou,'N') = 'S' and Tipo = 'C' then
	Return(0) ;
 elsif nvl(entregou,'N') = 'S' and Tipo = 'E' then
	Return(0) ;
 End if ;
 Return(99);
 Exception
   When OTHERS then
	Return(1);
End ;
FUNCTION Ve_Cancelados(		Ano_Form1 in NUMBER,
				Num_Form1 in NUMBER)
	Return NUMBER IS
--	função que verifica se o pedido foi cancelado
--	Retorna	0: se Não foi atribuido cancelado ou este já existia;
-- 		1: se existiu um erro qualquer na função (EXCEPTION);
--		99: se o pedido foi cancelado
	Est_CAN Varchar2(3) := 'CAN' ;
	cursor f1 is
	select COD_PARE_POS
	from formulario
	where ano_form = ano_form1
	and num_form = num_form1
	and (ano_form,num_form) NOT IN
		(Select ano_form, num_form
		 from form_est
		 where cod_est = Est_CAN) ;
	Parecer 	Formulario.COD_PARE_POS%TYPE;
	Cancelado 	Formulario.Cod_Pare%TYPE ;
	CURSOR C1 is
	select cod_pare
	from parecer_posto
	where cod_pare_pos = Parecer ;
	Aj_C1 		Parecer_posto.Cod_Pare%TYPE ;
	CURSOR C2 is
	select 'X'
	from ENVIO
	where	FOR_ano_form = Ano_Form1
	and	FOR_num_form = num_form1
	and	Est_Envio in ('E','S') ;
	dummy Varchar2(1);
Begin
 Open f1;
 FETCH F1 into Parecer;
 if f1%NOTFOUND then
    CLOSE F1;
    Return(0) ;
 End if ;
 CLOSE F1;
 if Parecer is NOT NULL then
	OPEN C1;
	FETCH C1 INTO Aj_C1;
	CLOSE C1;
	if Cancelado = Nvl(Aj_C1,'X') then
	  OPEN C2; -- Verifica se existem cancelados
	  FETCH C2 INTO dummy;
	  If C2%NOTFOUND then /* Faz cancelamento */
	    if FUNCOES.EH_POSTO then /* envia cancelado se já enviou pedido */
	      If FUNCOES.ENVIA_PARECER(Ano_Form1, Num_Form1,
			 Aj_C1) = 1 then
		CLOSE C2;
		Raise NO_DATA_FOUND; /* retorna 1 */
	      End if ;
	    End if ;
	    CLOSE C2;
	    Return(99);
	  End if ;
	  CLOSE C2;
	End if ;
 End if ;
 Return(0);
 Exception
   When OTHERS then
	Return(1);
End ;
FUNCTION Tarefa_Espera_Pare_Pos(Ano_Form1 in NUMBER,
				Num_Form1 in NUMBER)
	Return NUMBER IS
--	função que verifica se o parecer do posto já foi atribuído
--	Retorna	0: se pode continuar a evolução de estados;
-- 		1: se existiu um erro qualquer na função (EXCEPTION);
--		97: se deve aguardar
--		99: se foi indeferido
--		93: se foi cancelado
	cursor f1 is
	select	COD_PARE_POS
	from	formulario
	where	ano_form = ano_form1 and num_form = num_form1 ;
	Parecer 	Formulario.COD_PARE_POS%TYPE;
Begin
 Open f1;
 FETCH F1 into Parecer;
 if f1%NOTFOUND then
   CLOSE F1;
   Return (97);
 End if ;
 CLOSE F1;
 if Parecer is NOT NULL then
    if Parecer = Taref.Busca_Param_Glo1(41,NULL)
       then Return (99);
    elsif Parecer = Taref.Busca_Param_Glo1(33,NULL)
       then Return (93);
    end if;
    Return (0) ;
 Else
    Return (97);
 End if ;
 Exception
   When OTHERS then
	Return(1);
End ;
FUNCTION Tarefa_Espera_Pare_Central(Ano_Form1 in NUMBER,
				    Num_Form1 in NUMBER)
	Return NUMBER IS
--	função que verifica se o parecer da central já foi atribuído
--	Retorna	0: se pode continuar a evolução de estados;
-- 		1: se existiu um erro qualquer na função (EXCEPTION);
--		99: se deve aguardar
	cursor f1 is
	select	COD_PARE, TIP_VIS_CONCED, REAPR, dat_lim_resp, aud_previa
	from	formulario
	where	ano_form = ano_form1 and num_form = num_form1
	FOR UPDATE OF cod_pare, obs_pare_aut;
	cursor p1 is
	select	p.cons_central
	from	form_p p
	where	p.ano_form = ano_form1 and p.num_form = num_form1;

	v_cons_central	form_p.cons_central%TYPE;
  v_aud_previa    formulario.aud_previa%type;
	Parecer 	Formulario.COD_PARE%TYPE;
	visto		Formulario.tip_vis_conced%TYPE;
	v_reapr	Formulario.reapr%TYPE;
	novo_parecer	formulario.cod_pare%TYPE;
	resultado 	number(2);
	v_dat_lim_resp	formulario.dat_lim_resp%TYPE;

Begin
     OPEN p1;
     FETCH p1 INTO v_cons_central;
     IF p1%NOTFOUND THEN
	CLOSE p1;
	return (97);
     END IF;
     CLOSE p1;
     IF NVL(v_cons_central, 'S') = 'S' THEN
     Open f1;
	   FETCH F1 into Parecer, Visto, v_reapr, v_dat_lim_resp, v_aud_previa;
	   if f1%NOTFOUND then
	      CLOSE F1;
	      Return (97);
	   End if ;
      if Parecer is NOT NULL then
	 if (parecer = Taref.Busca_param_Glo1(9, null)) OR (parecer = Taref.Busca_param_Glo1(43, null)) then
	    resultado := 98;
	 elsif parecer in (Taref.Busca_param_Glo1(10, null),Taref.Busca_param_Glo1(76, null)) then
	    resultado := 96;
	 elsif parecer = Taref.Busca_param_Glo1(33, null) then
	    resultado := 93;
	 else
	    resultado := 97;
	 end if;
      ELSIF (TRUNC(NVL(v_dat_lim_resp, SYSDATE) + 1)) <= TRUNC(SYSDATE) and v_reapr = 'N' and v_aud_previa is null THEN
	 resultado := 0;
	 novo_parecer := Taref.Busca_param_Glo1(9, null);
	 UPDATE formulario
	 SET cod_pare = novo_parecer,
	     obs_pare_aut = 'Parecer obtido por ter sido ultrapassada a data limite resposta'
	 WHERE CURRENT OF f1;
      Else

         IF Visto IS NOT NULL THEN
	    resultado := 0;
         ELSE
	    resultado := 97;
         END IF;
      End if ;
   CLOSE F1;
   ELSE resultado := 0;

   END IF;
   RETURN (resultado);
Exception
   When OTHERS then
	Return(1);
End ;
FUNCTION Tarefa_Envia_Central(	Ano_Form1 in NUMBER,
				Num_Form1 in NUMBER)
	Return NUMBER IS
--	função que prepara o envio do posto para a central
--	Retorna	0: se pode continuar a evolução de estados;
-- 		1: se existiu um erro qualquer na função (EXCEPTION);
-- 		99: se deve aguardar porque ainda não foi dado parecer
--		   do posto;
	cursor f1 is
	select	COD_PARE_POS, Tip_Vis_Conced,
		cod_pais_sch_ref||ref_form_2||ref_form_3, COD_PARE
	from	formulario
	where	ano_form = ano_form1 and num_form = num_form1 ;

	cursor p1 is
	select	p.cons_central, f.num_proc, f.cod_pare_pos, f.tip_vis_conced
	from	form_p p, formulario f
	where	p.ano_form = ano_form1 and p.num_form = num_form1
                and p.ano_form = f.ano_form and p.num_form = f.num_form;

	Cursor E1 is
	Select est_envio FROM envio
	WHERE  for_ano_form = ano_form1 and for_num_form = num_form1 ;

	Cursor R1 is
	select distinct est_recep from recep
	where for_ano_form = ano_form1 and for_num_form = num_form1 and
	tip_form_recep = 'P';

--	Parecer 	Formulario.COD_PARE_POS%TYPE;
	Parecer 	Varchar2(1);
	Vis_Conced 	Formulario.Tip_Vis_Conced%TYPE;
	Estado_Envio 	Varchar2(1) := 'P' ;
	referencia	Varchar2(19);
	erro1		NUMBER(2);
	v_est_envio	envio.est_envio%type;
	v_est_recep	recep.est_recep%type;
	parecer_central	formulario.cod_pare%TYPE;
	v_cons_central	form_p.cons_central%TYPE;
        v_num_proc	formulario.num_proc%type;
 	v_cod_pare_pos	formulario.cod_pare_pos%type;
	v_tip_vis_conced formulario.tip_vis_conced%type;



Begin
   OPEN p1;
   FETCH p1 INTO v_cons_central, v_num_proc, v_cod_pare_pos, v_tip_vis_conced;
   IF p1%NOTFOUND THEN
	CLOSE p1;
	RAISE NO_DATA_FOUND;
   END IF;
   CLOSE p1;

   IF NVL(v_cons_central, 'S') = 'S' THEN
	   Open f1;
	   FETCH F1 into Parecer, Vis_Conced, Referencia, parecer_central;
	   if f1%NOTFOUND then
	      CLOSE F1;
	      Raise NO_DATA_FOUND ;
	   End if ;
	   CLOSE F1;

	   /*Open R1;
 	   Fetch R1 Into v_est_recep;
 	   if R1%notfound then v_est_recep := 'Z';
 	   end if;
 	   Close R1;   */

     IF (parecer_central IS NOT NULL and Parecer not in (Taref.Busca_Param_Glo1(33, null),Taref.Busca_Param_Glo1(41,null),Taref.Busca_Param_Glo1(45,null))) THEN Return (0);
	   END IF;

	   /*IF v_est_recep = 'L' then return(0);
	   END IF;      */

	   Open E1;
 	   Fetch E1 Into v_est_envio;
 	   if E1%notfound then v_est_envio := 'N';
 	   end if;
 	   Close E1;
 	   Estado_Envio := 'P';
	 if Parecer is NOT NULL then
		-- Prepara envio para a central;
	    if Parecer = Taref.Busca_Param_Glo1(33, null) then
	       if v_est_envio != 'P' then
		  If Taref.Envia_FormP(Ano_Form1, Num_Form1, NULL, Estado_Envio) then
		     Return(0) ;
		  else
		     Raise NO_DATA_FOUND;
		  End if ;
       	       end if;
    	    else
		If Taref.Envia_FormP(Ano_Form1, Num_Form1, NULL, Estado_Envio) then
	   		Return(0) ;
		else
	   		Raise NO_DATA_FOUND;
	    	End if ;
	    end if;
        End if ;
   ELSE
      IF V_NUM_PROC IS NOT NULL AND V_TIP_VIS_CONCED = 'T4' AND V_COD_PARE_POS = Taref.Busca_param_Glo1(41, null) THEN
	If Taref.Envia_FormP(Ano_Form1, Num_Form1, NULL, Estado_Envio) then
   		Return(0) ;
	else
   		Raise NO_DATA_FOUND;
    	End if ;
      END IF;
      RETURN (0);
   END IF;
   Return(99);
   Exception
   When OTHERS then
	Return(1);
End ;
FUNCTION Tarefa_Espera_Visto( Ano_Form1 in NUMBER,
			      Num_Form1 in NUMBER, Tipo_Evol in VARCHAR2)
	Return NUMBER IS
--	função que verifica se o visto já foi atribuído
--	Retorna	0: se pode continuar a evolução de estados;
-- 		1: se existiu um erro qualquer na função (EXCEPTION);
--		99: se deve aguardar
	cursor f1 is
	select 	TIP_VIS_CONCED, COD_PARE, DAT_LIM_RESP, COD_PARE_POS
	from 	formulario
	where 	ano_form = ano_form1 and num_form = num_form1 FOR UPDATE OF cod_pare;
	VISTO 		FORMULARIO.TIP_VIS_CONCED%TYPE;
	v_cod_pare 	FORMULARIO.COD_PARE%TYPE;
	v_dat_lim_resp 	FORMULARIO.DAT_LIM_RESP%TYPE;
	v_cod_pare_pos 	FORMULARIO.COD_PARE_POS%TYPE;

Begin
   Open f1;
   FETCH F1 into Visto, v_cod_pare, v_dat_lim_resp, v_cod_pare_pos;
   if f1%NOTFOUND then
      CLOSE F1;
      Raise NO_DATA_FOUND ;
   End if ;
   IF Tipo_Evol = 'M' THEN
	IF v_cod_pare IS NULL THEN
	   v_cod_pare := Taref.Busca_Param_Glo1(9, null);
	   UPDATE formulario
	   SET cod_pare = v_cod_pare WHERE CURRENT OF F1;
        END IF;
   END IF;
   CLOSE F1;
   if (Visto is NOT NULL) or (v_cod_pare_pos = Taref.Busca_Param_Glo1(41, null)) then
      Return(0) ;

   End if ;
 Return(99);
 Exception
   When OTHERS then
	Return(1);
End ;
FUNCTION Tarefa_Espera_Vinheta( Ano_Form1 in NUMBER,
			        Num_Form1 in NUMBER)
	Return NUMBER IS
--	função que verifica se a vinheta já foi emitida
--	Retorna	0: se pode continuar a evolução de estados;
-- 		1: se existiu um erro qualquer na função (EXCEPTION);
--		99: se deve aguardar
	cursor f1 is
	select	Num_Vin
	from	VINHETA
	where	ano_form = ano_form1
	and 	num_form = num_form1
	and 	est_vin = 'E';
	Num_Vin1 VINHETA.NUM_VIN%TYPE;
        v_num_proc        formulario.num_proc%type;
        v_tip_vis_conced  formulario.tip_vis_conced%type;
        v_cod_pare_pos    formulario.cod_pare_pos%type;
Begin
 Open f1;
 FETCH F1 into Num_Vin1;
 Tarefa_master.Grava_Erro(' Tarefa_Espera_Vinheta',
 'Encontrou a Vinheta '||Num_Vin1||' para o num_form = '||to_char(num_form1));
 if f1%NOTFOUND then
   CLOSE F1;
   select cod_pare_pos, num_proc, tip_vis_conced
   into v_cod_pare_pos, v_num_proc, v_tip_vis_conced
   from formulario
   where ano_form = ano_form1 and num_form = num_form1;
   if v_cod_pare_pos = Taref.Busca_Param_Glo1(41, null) and v_num_proc is not null and v_tip_vis_conced = 'T4' then
	   Return(0);
   else
	   Return (99) ;
   end if;
 End if ;
 CLOSE F1;
 Return(0) ;
 Exception
   When OTHERS then
	Return(1);
End ;
FUNCTION Tarefa_Espera_Vin_EXP( Ano_Form1 in NUMBER,
			        Num_Form1 in NUMBER)
	Return NUMBER IS
--	função que verifica se a vinheta já foi expirada
--	Retorna	0: se pode continuar a evolução de estados;
-- 		1: se existiu um erro qualquer na função (EXCEPTION);
--		99: se deve aguardar
	cursor f1 is
	select	dat_fin
	from	VINHETA
	where	ano_form = ano_form1
	and	num_form = num_form1
	and	est_vin = 'E';
	dat_fin1	VINHETA.DAT_FIN%TYPE;
	aj_data		DATE;
Begin
	Open f1;
	FETCH F1 into DAT_FIN1;
	if f1%NOTFOUND then
		CLOSE F1;
		Return (99) ;
	End if ;
	CLOSE F1;
	aj_data := to_date(dat_fin1,'YYYY/MM/DD');
	if trunc(sysdate) > aj_data then
		Return(0);
	End if ;
	Return(99) ;
Exception
When OTHERS then Return(1);
End ;
FUNCTION Tarefa_Envia_Tacito( Ano_Form1 in NUMBER,
			      Num_Form1 in NUMBER)
	Return NUMBER Is
--	função que prepara o envio de um parecer tácito para um formulário do tipo P
--	Retorna	0: se pode continuar a evolução de estados;
-- 		1: se existiu um erro qualquer na função (EXCEPTION);
	CURSOR c1 IS
	SELECT dat_ini_praz, dat_lim_resp, cod_pos FROM formulario
	WHERE ano_form = ano_form1
	AND   num_form = num_form1;
	v_dat_ini_praz	formulario.dat_ini_praz%TYPE;
	v_dat_lim_resp	formulario.dat_lim_resp%TYPE;
	v_cod_pos	formulario.cod_pos%TYPE;
	CURSOR c2 IS
	SELECT MAX(f1.dat_lim_resp)
	FROM   form_sch f1
	WHERE  f1.ano_form = ano_form1
	AND    f1.num_form = num_form1;
	v_dat_c2	form_ser.dat_lim_resp%TYPE;
	CURSOR c3 IS
	SELECT MAX(f2.dat_lim_resp)
	FROM   form_ser f2
	WHERE  f2.ano_form = ano_form1
	AND    f2.num_form = num_form1;
	v_dat_c3	formulario.dat_lim_resp%TYPE;
	v_num1	NUMBER := TO_NUMBER(Taref.Busca_Param_Glo1(5, null));
	v_num2	NUMBER := TO_NUMBER(Taref.Busca_Param_Glo1(6, null));
BEGIN
Tarefa_Master.Grava_Erro('ENV_TAC','Inicio.', null) ;
   OPEN c1;
   FETCH c1 INTO v_dat_ini_praz, v_dat_lim_resp, v_cod_pos;
   IF c1%NOTFOUND THEN RETURN (1);
   END IF;
   CLOSE c1;
Tarefa_Master.Grava_Erro('ENV_TAC','Fim de C1.', null) ;
--   IF v_dat_lim_resp IS NOT NULL THEN
--Tarefa_Master.Grava_Erro('ENV_TAC','Já existe limite de resposta.', null) ;
--	 RETURN (0);
--   ELSE
Tarefa_Master.Grava_Erro('ENV_TAC','C2 - ini.', null) ;
	   OPEN c2;
	   FETCH c2 INTO v_dat_c2;
	   IF c2%NOTFOUND THEN v_dat_c2 := v_dat_ini_praz;
	   END IF;
	   CLOSE c2;
Tarefa_Master.Grava_Erro('ENV_TAC','C2 fim.', null) ;
	   OPEN c3;
	   FETCH c3 INTO v_dat_c3;
	   IF c3%NOTFOUND THEN v_dat_c3 := v_dat_ini_praz;
	   END IF;
	   CLOSE c3;
Tarefa_Master.Grava_Erro('ENV_TAC','C3 fim.', null) ;
	   IF v_num1 < v_num2 THEN
		v_dat_lim_resp := v_dat_ini_praz + v_num2;
	    ELSE
		v_dat_lim_resp := v_dat_ini_praz + v_num1;
	   END IF;
	   IF v_dat_lim_resp < v_dat_c2 THEN
		v_dat_lim_resp := v_dat_c2;
	   END IF;
	   IF v_dat_lim_resp < v_dat_c3 THEN
		v_dat_lim_resp := v_dat_c3;
	   END IF;
Tarefa_Master.Grava_Erro('ENV_TAC','Update a formulario(dat_lim_resp).', null) ;
	UPDATE formulario
	SET    dat_lim_resp = v_dat_lim_resp
	WHERE  ano_form = ano_form1
	AND    num_form = num_form1;
Tarefa_Master.Grava_Erro('ENV_TAC','Insert into FORM_Z.', null) ;
	INSERT INTO form_z (ano_form, num_form ,dat_conced_ped, cod_pos)
	VALUES (ano_form1, num_form1, (v_dat_lim_resp + 1), v_cod_pos);
--   END IF;
Tarefa_Master.Grava_Erro('ENV_TAC','Fim de tarefa.', null) ;
   RETURN (0);
EXCEPTION
WHEN OTHERS THEN
Tarefa_Master.Grava_Erro('ENV_TAC','Fim de tarefa com exception:'||
sqlerrm, null) ;
 RETURN (1);
END;
END TAREF2;
/

prompt
prompt Creating package body VISMAIL
prompt =============================
prompt
create or replace package body rpv.VISMAIL is
TYPE vTUSER_NODE IS TABLE OF xmldom.DOMNode;
vUSER_NODE vTUSER_NODE := vTUSER_NODE();
function Fdatetz(data in date) return varchar2 is
  TZ varchar2(7);
  begin
    execute immediate 'select dbtimezone from dual' into tz;
    return(trim(to_char(data,'yyyy-mm-dd') || 'T' || to_char(data,'hh24:mi:ss')|| 'Z'));
  end;

function Extrai_Valor_XML(inpfile clob, nome_no varchar2, nome_sub_no varchar2, posicao number, tipo_msg varchar2 default null, tipo_extract number default 1)
 return varchar2 is

doc            dbms_xmldom.DOMDocument;
node           dbms_xmldom.DOMNode;
node2          dbms_xmldom.DOMNode;
chldrn         dbms_xmldom.DOMNodeList;
len            number;
xmlfile        CLOB;
p              dbms_xmlparser.parser;
valor_no       varchar2(32000);
flag           number(1):=0;
conta          number(10):=0;
v_seq_vismail  vismail_aux.camponumber%type;
v_extract      varchar2(100);
v_tipo_msg     tabelas_vis.desc_tabela%type;
begin
xmlfile := inpfile;
if tipo_extract = 1 then
-- create a parser
p := dbms_xmlparser.newParser;
-- parse the XML document
dbms_xmlparser.ParseCLOB(p,xmlfile);
-- get document
doc := dbms_xmlparser.getDocument(p);
-- free the parser
dbms_xmlparser.freeParser(p);

-- get all elements
if nome_sub_no is null then
   chldrn := dbms_xmldom.getElementsByTagName(doc, nome_no);
elsif nome_sub_no is not null or posicao is not null then
   chldrn := dbms_xmldom.getElementsByTagName(doc, '*');
end if;
len := dbms_xmldom.getLength(chldrn);
for i in 0..len-1 loop
    node := dbms_xmldom.item(chldrn, i);
    node2 := dbms_xmldom.getFirstChild(node);

    if posicao is not null and dbms_xmldom.getNodeName(node) = nome_no then
       conta := conta + 1;
    end if;
    if (dbms_xmldom.getNodeName(node) = nome_no and conta = posicao) or (flag = 1) then
        if nome_sub_no is null then
           valor_no := dbms_xmldom.getNodeValue(node2);
           dbms_xmldom.freeDocument(doc);
           return(valor_no);
        else
           if dbms_xmldom.getNodeName(node) = nome_sub_no then
              valor_no := dbms_xmldom.getNodeValue(node2);
              dbms_xmldom.freeDocument(doc);
              return(valor_no);
           end if;
        end if;
        flag := 1;
    end if;
end loop;
dbms_xmldom.freeDocument(doc);
return('nada');
elsif tipo_extract = 2 then
 select seq_vismail.nextval into v_seq_vismail from dual;
 select desc_tabela
 into v_tipo_msg
 from tabelas_vis
 where cod_tabela = tipo_msg;

 INSERT INTO vismail_aux (CAMPOA,CAMPOB,CAMPOXML,CAMPOCHAR,CAMPONUMBER)
 VALUES (null,null, XMLType(xmlfile),null,v_seq_vismail);
 if nome_sub_no is null then
    v_extract := '/env:Envelope/env:Body/' || v_tipo_msg || '/' || nome_no || '/text()';
 else
    v_extract := '/env:Envelope/env:Body/' || v_tipo_msg || '/' || nome_no || '/' || nome_sub_no || '/text()';
 end if;
 begin
 SELECT l.campoxml.extract(v_extract).getStringVal()
 into valor_no
 FROM vismail_aux l
 where CAMPONUMBER = v_seq_vismail;
 exception when others then
           if nome_sub_no is null then
              v_extract := '/SOAP-ENV:Envelope/SOAP-ENV:Body/' || v_tipo_msg || '/' || nome_no || '/text()';
           else
              v_extract := '/SOAP-ENV:Envelope/SOAP-ENV:Body/' || v_tipo_msg || '/' || nome_no || '/' || nome_sub_no || '/text()';
           end if;
           begin
           SELECT l.campoxml.extract(v_extract).getStringVal()
           into valor_no
           FROM vismail_aux l
           where CAMPONUMBER = v_seq_vismail;
           exception when others then
              if nome_sub_no is null then
                 v_extract := '/S:Envelope/S:Body/' || v_tipo_msg || '/' || nome_no || '/text()';
              else
                 v_extract := '/S:Envelope/S:Body/' || v_tipo_msg || '/' || nome_no || '/' || nome_sub_no || '/text()';
              end if;
              begin
              SELECT l.campoxml.extract(v_extract).getStringVal()
              into valor_no
              FROM vismail_aux l
              where CAMPONUMBER = v_seq_vismail;
              exception when others then
                 if nome_sub_no is null then
                    v_extract := '/soap:Envelope/soap:Body/' || v_tipo_msg || '/' || nome_no || '/text()';
                 else
                    v_extract := '/soap:Envelope/soap:Body/' || v_tipo_msg || '/' || nome_no || '/' || nome_sub_no || '/text()';
                 end if;
                 begin
                 SELECT l.campoxml.extract(v_extract).getStringVal()
                 into valor_no
                 FROM vismail_aux l
                 where CAMPONUMBER = v_seq_vismail;
                 exception when others then
                    if nome_sub_no is null then
                       v_extract := '/s:Envelope/s:Body/' || v_tipo_msg || '/' || nome_no || '/text()';
                    else
                       v_extract := '/s:Envelope/s:Body/' || v_tipo_msg || '/' || nome_no || '/' || nome_sub_no || '/text()';
                    end if;
                    begin
                    SELECT l.campoxml.extract(v_extract).getStringVal()
                    into valor_no
                    FROM vismail_aux l
                    where CAMPONUMBER = v_seq_vismail;
                    exception when others then
                    if nome_sub_no is null then
                       v_extract := '/soapenv:Envelope/soapenv:Body/' || v_tipo_msg || '/' || nome_no || '/text()';
                    else
                       v_extract := '/soapenv:Envelope/soapenv:Body/' || v_tipo_msg || '/' || nome_no || '/' || nome_sub_no || '/text()';
                    end if;
                    begin
                    SELECT l.campoxml.extract(v_extract).getStringVal()
                    into valor_no
                    FROM vismail_aux l
                    where CAMPONUMBER = v_seq_vismail;


                    exception when others then
                    if nome_sub_no is null then
                       v_extract := '/ns2:Envelope/ns2:Body/' || v_tipo_msg || '/' || nome_no || '/text()';
                    else
                       v_extract := '/ns2:Envelope/ns2:Body/' || v_tipo_msg || '/' || nome_no || '/' || nome_sub_no || '/text()';
                    end if;
                    SELECT l.campoxml.extract(v_extract).getStringVal()
                    into valor_no
                    FROM vismail_aux l
                    where CAMPONUMBER = v_seq_vismail;
                    end;


                    end;
                  end;
              end;
           end;
 end;
 delete from vismail_aux where CAMPONUMBER = v_seq_vismail;

 if valor_no is null then
    valor_no := 'nada';
 end if;
 return(valor_no);
elsif tipo_extract = 3 then

 select seq_vismail.nextval into v_seq_vismail from dual;
 select desc_tabela
 into v_tipo_msg
 from tabelas_vis
 where cod_tabela = tipo_msg;

 INSERT INTO vismail_aux (CAMPOA,CAMPOB,CAMPOXML,CAMPOCHAR,CAMPONUMBER)
 VALUES (null,null, XMLType(xmlfile),null,v_seq_vismail);

 v_extract := '/env:Envelope/env:Body/' || v_tipo_msg || '/' || nome_no || '/*/text()';

 begin
 SELECT l.campoxml.extract(v_extract).getStringVal()
 into valor_no
 FROM vismail_aux l
 where CAMPONUMBER = v_seq_vismail;
 exception when others then
           v_extract := '/SOAP-ENV:Envelope/SOAP-ENV:Body/' || v_tipo_msg || '/' || nome_no || '/*/text()';
           SELECT l.campoxml.extract(v_extract).getStringVal()
           into valor_no
           FROM vismail_aux l
           where CAMPONUMBER = v_seq_vismail;
 end;

 delete from vismail_aux where CAMPONUMBER = v_seq_vismail;
 if valor_no is null then
    valor_no := 'nada';
 else
    valor_no := 'cheio';
 end if;
 return(valor_no);
else
 return('erxml');
end if;
exception when others then
       return('erxml');
end;

function Extrai_NrOcorrencias_XML(inpfile clob, nome_no varchar2, campo1 varchar2, campo2 varchar2, campo3 varchar2)
 return number is

j    number := 0;
Ct1  number := 0;
Ct2  number := 0;
Ct3  number := 0;

doc            dbms_xmldom.DOMDocument;
node           dbms_xmldom.DOMNode;
chldrn         dbms_xmldom.DOMNodeList;
len            number;
xmlfile        CLOB;
p              dbms_xmlparser.parser;

begin
xmlfile := inpfile;
-- create a parser
p := dbms_xmlparser.newParser;
-- parse the XML document
dbms_xmlparser.ParseCLOB(p,xmlfile);
-- get document
doc := dbms_xmlparser.getDocument(p);
-- free the parser
dbms_xmlparser.freeParser(p);
-- get all elements
chldrn := dbms_xmldom.getElementsByTagName(doc, '*');
len := dbms_xmldom.getLength(chldrn);
for i in 0..len-1 loop
    node := dbms_xmldom.item(chldrn, i);

    if dbms_xmldom.getNodeName(node) = nome_no then
       j := 1;
    end if;

    if j = 1 then
       if campo1 is not null and dbms_xmldom.getNodeName(node) = campo1 then
          Ct1 := Ct1 + 1;
       end if;
       if campo2 is not null and dbms_xmldom.getNodeName(node) = campo2 then
          Ct2 := Ct2 + 1;
       end if;
       if campo3 is not null and dbms_xmldom.getNodeName(node) = campo3 then
          Ct3 := Ct3 + 1;
       end if;
    end if;

end loop;
dbms_xmldom.freeDocument(doc);
if campo2 is not null and campo3 is not null then
  if Ct1 = Ct2 and Ct1 = Ct3 then
    return Ct1;
  else
    return 999;
  end if;
elsif campo2 is not null then
  if Ct1 = Ct2 then
    return Ct1;
  else
    return 999;
  end if;
else
  return Ct1;
end if;
exception when others then
 return (0);
end;

function Extrai_Valor_Ocorr_XML(inpfile clob, nome_no varchar2, referencia varchar2, campo varchar2, ocorrencia number, sentido varchar2)
 return clob is

j    number := 0;
k    number := 0;

doc            dbms_xmldom.DOMDocument;
node           dbms_xmldom.DOMNode;
node2          dbms_xmldom.DOMNode;
no_aux         dbms_xmldom.DOMNode;
no_aux2        dbms_xmldom.DOMNode;
chldrn         dbms_xmldom.DOMNodeList;
len            number;
xmlfile        CLOB;
p              dbms_xmlparser.parser;
retorno        clob;

begin
xmlfile := inpfile;
-- create a parser
p := dbms_xmlparser.newParser;
-- parse the XML document
dbms_xmlparser.ParseCLOB(p,xmlfile);
-- get document
doc := dbms_xmlparser.getDocument(p);
-- free the parser
dbms_xmlparser.freeParser(p);
-- get all elements
chldrn := dbms_xmldom.getElementsByTagName(doc, '*');
len := dbms_xmldom.getLength(chldrn);
k := 1;
for i in 0..len-1 loop
    node := dbms_xmldom.item(chldrn, i);
    node2 := dbms_xmldom.getFirstChild(node);

    if dbms_xmldom.getNodeName(node) = nome_no then
       j := 1;
    end if;

    if j = 1 then
       if dbms_xmldom.getNodeName(node) = referencia then
          if k = ocorrencia then
            if referencia = campo then
              if dbms_xmldom.getNodeName(node) = campo then
                retorno := dbms_xmldom.getNodeValue(node2);
                dbms_xmldom.freeDocument(doc);
                return(retorno);
              else
                dbms_xmldom.freeDocument(doc);
                return null;
              end if;
            else
              --dbms_xmldom.freeDocument(doc);
              if sentido = '-' then
                no_aux := dbms_xmldom.item(chldrn, i-1);
              else
                no_aux := dbms_xmldom.item(chldrn, i+1);
              end if;
              no_aux2 := dbms_xmldom.getFirstChild(no_aux);
              if dbms_xmldom.getNodeName(no_aux) = campo then
                retorno := dbms_xmldom.getNodeValue(no_aux2);
                dbms_xmldom.freeDocument(doc);
                return(retorno);
              else
                dbms_xmldom.freeDocument(doc);
                return null;
              end if;
            end if;
          end if;
          k := k + 1;
       end if;
    end if;
end loop;
dbms_xmldom.freeDocument(doc);
return null;
end;
procedure NSConsularCooperationRequest(p_MESSAGEID in varchar2,p_REFNUMBEREXCH in varchar2,p_VISAPPNUMBER in varchar2, p_URGENTCASE in varchar2,
                                        p_SENDERID in varchar2,p_COUNTRYSEND in varchar2,p_LOCATIONSEND in varchar2,p_NAMESEND in varchar2,
                                        p_TYPESEND in varchar2,p_COUNTRYREC in varchar2,p_LOCATIONREC in varchar2,p_NAMEREC in varchar2,
                                        p_TYPEREC in varchar2,p_MSGTXTMAND in varchar2,p_RETRYCOUNT in varchar2,p_PATH in varchar2) is
    vDOCUMENTO      xmldom.DOMDocument;
    vELEMENTOS_ROOT xmldom.DOMElement;
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    v_clob          clob:='xxx';
    fHandle         utl_file.file_type;
    buf             varchar2(32000);
    l_amt           number := 1;
    offset          number := 1;
    i               number(10):=1;
    req             demo_soap.request;
    id              UTL_FILE.FILE_TYPE;
    filedata        varchar2(32000);
    CURSOR c1 IS
       select a.id_trec, a.msgtext, a.msgattach_fich, a.typedoc, a.typeattach
       from trec_vismail_attachgroup a
       where a.messageid = p_MESSAGEID;
    v_msg_descr      trec_vismail_attachgroup.msgtext%type;
    v_tipo_doc       trec_vismail_attachgroup.typedoc%type;
    v_tipo_attach    trec_vismail_attachgroup.typeattach%type;
    v_id_trec        trec_vismail_attachgroup.id_trec%type;
    v_msgattach_fich trec_vismail_attachgroup.msgattach_fich%type;
    p_Clob           clob;
    flag             number(1):=0;
    attach           clob;
    pos              number(10);
    sql_script       varchar2(100);
    TYPE nt_fName    IS TABLE OF VARCHAR2 (512);
    fname            nt_fName;
begin
    vDOCUMENTO := xmldom.newDOMDocument;
    vUSER_NODE.EXTEND;
    vUSER_NODE(1) := xmldom.makeNode(vDOCUMENTO);
    /*Identificador*/
    vELEMENTOS_ROOT := xmldom.createElement(vDOCUMENTO,
                                            'NSConsularCooperationRequest');
    vUSER_NODE.EXTEND;
    vUSER_NODE(2) := xmldom.appendChild(vUSER_NODE(1),
                                        xmldom.makeNode(vELEMENTOS_ROOT));
    vUSER_NODE.EXTEND;
    /*MessageId*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'MessageId');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_MESSAGEID);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*ReferenceNumberOfExchange*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'ReferenceNumberOfExchange');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_REFNUMBEREXCH);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*VISApplicationNumber*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'VISApplicationNumber');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_VISAPPNUMBER);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*UrgentCase*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'UrgentCase');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_URGENTCASE);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*DateAndTimeOfSending*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'DateAndTimeOfSending');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         Fdatetz(SYSDATE));
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    if p_SENDERID is not null then
    /*SenderIdentification*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'SenderIdentification');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_SENDERID);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    end if;
    /*SendingAuthority*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'SendingAuthority');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vUSER_NODE.EXTEND;
    /*Country*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Country');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_COUNTRYSEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Location*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Location');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_LOCATIONSEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Name*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Name');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_NAMESEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Type*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Type');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_TYPESEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*RecipientAuthority*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'RecipientAuthority');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vUSER_NODE.EXTEND;
    /*Country*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Country');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_COUNTRYREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Location*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Location');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_LOCATIONREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Name*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Name');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_NAMEREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Type*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Type');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_TYPEREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*MessageTextMandatory*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'MessageTextMandatory');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_MSGTXTMAND);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));


    /*RetryCounter*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'RetryCounter');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_RETRYCOUNT);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));

    xmldom.writeToClob(vDOCUMENTO, v_clob);

    OPEN C1;
    LOOP
      FETCH C1 INTO v_id_trec, v_msg_descr, v_msgattach_fich, v_tipo_doc,
      v_tipo_attach;
      EXIT WHEN C1%NOTFOUND;
      --
      funcoes.ExportBlob ('d:\fotos\tratadas\'|| v_id_trec || '.pdf', v_msgattach_fich);
      shell('d:\rpv\base64\base64.exe -e' || ' "d:\fotos\tratadas\' || v_id_trec || '.pdf" "d:\rpv\base64\' || v_id_trec ||'.txt"' );
      sql_script := 'alter table vismail_temp location(' || '''' || v_id_trec  || '.txt' || '''' || ')';
      execute immediate (sql_script);
      p_Clob := null;

      SELECT txt_line
      BULK COLLECT INTO fName
      FROM vismail_temp;

      FOR idx IN 1..fName.COUNT
      LOOP
        p_Clob := p_Clob || fName(idx);
      END LOOP;
      update trec_vismail_attachgroup
      set msgattach = p_Clob
      where id_trec =  v_id_trec;

      attach := attach || '<AttachmentGroup>' ||
         '<MessageText>' ||
         v_msg_descr ||
         '</MessageText>' ||
         '<MessageAttachments>' ||
         p_Clob ||
         '</MessageAttachments>' ||
         '<TypeOfDocument>' ||
         v_tipo_doc ||
         '</TypeOfDocument>' ||
         '<TypeOfAttachment>' ||
         v_tipo_attach ||
         '</TypeOfAttachment>' ||
         '</AttachmentGroup>';
      flag := 1;
    END LOOP;
    CLOSE C1;
    if flag = 1 then
       pos := instr(v_clob,'<RetryCounter>');
       v_clob := substr(v_clob,1,pos -1) || attach || substr(v_clob,pos);
       flag := 0;
    end if;

    req := demo_soap.new_request('env:Envelope','xmlns:env="http://www.w3.org/2003/05/soap-envelope"');
    demo_soap.generate_envelope_vismail(req,v_clob);

    /*v_blob := funcoes.ClobToBlob64(replace(v_clob,chr(10),''));*/
    fHandle := UTL_FILE.FOPEN_NCHAR(p_PATH,p_MESSAGEID || '.xml', 'w',32767 );
    if length(v_clob) > 10000 then
       i := 1;
       while i <= length(v_clob) loop
          if i = 1 then
             dbms_lob.read(v_clob,l_amt,10000,buf);
             buf := substr(v_clob,i,10000);
             UTL_FILE.PUT_NCHAR(fHandle,buf);
             UTL_FILE.PUT_LINE_NCHAR(fHandle, '');
          else
             dbms_lob.read(v_clob,l_amt,(offset * i),buf);
             buf := substr(v_clob,i,10000);
             UTL_FILE.PUT_NCHAR(fHandle,buf);
             UTL_FILE.PUT_LINE_NCHAR(fHandle, '');
          end if;
          i := i + 10000;
          buf := null;
       end loop;
    else
       UTL_FILE.PUT_NCHAR(fHandle,v_clob);
    end if;

    UTL_FILE.PUT_LINE_NCHAR(fHandle, '');
    UTL_FILE.FCLOSE(fHandle);

    /*Libertar os recursos*/
    xmldom.freeDocument(vDOCUMENTO);
end;
procedure NSConsularCooperationInfo(p_MESSAGEID in varchar2,p_REFNUMBEREXCH in varchar2,p_VISAPPNUMBER in varchar2,
                                    p_SENDERID in varchar2,p_COUNTRYSEND in varchar2,p_LOCATIONSEND in varchar2,p_NAMESEND in varchar2,
                                    p_TYPESEND in varchar2,p_COUNTRYREC in varchar2,p_LOCATIONREC in varchar2,p_NAMEREC in varchar2,
                                    p_TYPEREC in varchar2,p_MSGTXTMAND in varchar2,p_RETRYCOUNT in varchar2,p_PATH in varchar2) is
    vDOCUMENTO      xmldom.DOMDocument;
    vELEMENTOS_ROOT xmldom.DOMElement;
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    v_clob          clob:='xxx';
    fHandle         utl_file.file_type;
    buf             varchar2(32000);
    l_amt           number := 1;
    offset          number := 1;
    i               number(10):=1;
    req             demo_soap.request;
    id              UTL_FILE.FILE_TYPE;
    filedata        varchar2(32000);
    CURSOR c1 IS
       select a.id_trec, a.msgtext, a.msgattach_fich, a.typedoc, a.typeattach
       from trec_vismail_attachgroup a
       where a.messageid = p_MESSAGEID;
    v_msg_descr      trec_vismail_attachgroup.msgtext%type;
    v_tipo_doc       trec_vismail_attachgroup.typedoc%type;
    v_tipo_attach    trec_vismail_attachgroup.typeattach%type;
    v_id_trec        trec_vismail_attachgroup.id_trec%type;
    v_msgattach_fich trec_vismail_attachgroup.msgattach_fich%type;
    p_Clob           clob;
    flag             number(1):=0;
    attach           clob;
    pos              number(10);
    sql_script       varchar2(100);
    TYPE nt_fName    IS TABLE OF VARCHAR2 (512);
    fname            nt_fName;
begin
    vDOCUMENTO := xmldom.newDOMDocument;
    vUSER_NODE.EXTEND;
    vUSER_NODE(1) := xmldom.makeNode(vDOCUMENTO);
    /*Identificador*/
    vELEMENTOS_ROOT := xmldom.createElement(vDOCUMENTO,
                                            'NSConsularCooperationInformation');
    vUSER_NODE.EXTEND;
    vUSER_NODE(2) := xmldom.appendChild(vUSER_NODE(1),
                                        xmldom.makeNode(vELEMENTOS_ROOT));
    vUSER_NODE.EXTEND;
    /*MessageId*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'MessageId');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_MESSAGEID);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*ReferenceNumberOfExchange*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'ReferenceNumberOfExchange');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_REFNUMBEREXCH);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*VISApplicationNumber*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'VISApplicationNumber');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_VISAPPNUMBER);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*DateAndTimeOfSending*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'DateAndTimeOfSending');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         Fdatetz(SYSDATE));
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    if p_SENDERID is not null then
    /*SenderIdentification*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'SenderIdentification');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_SENDERID);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    end if;
    /*SendingAuthority*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'SendingAuthority');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vUSER_NODE.EXTEND;
    /*Country*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Country');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_COUNTRYSEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Location*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Location');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_LOCATIONSEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Name*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Name');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_NAMESEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Type*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Type');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_TYPESEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*RecipientAuthority*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'RecipientAuthority');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vUSER_NODE.EXTEND;
    /*Country*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Country');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_COUNTRYREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Location*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Location');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_LOCATIONREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Name*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Name');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_NAMEREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Type*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Type');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_TYPEREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*MessageTextMandatory*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'MessageTextMandatory');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_MSGTXTMAND);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));


    /*RetryCounter*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'RetryCounter');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_RETRYCOUNT);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));

    xmldom.writeToClob(vDOCUMENTO, v_clob);

    OPEN C1;
    LOOP
      FETCH C1 INTO v_id_trec, v_msg_descr, v_msgattach_fich, v_tipo_doc,
      v_tipo_attach;
      EXIT WHEN C1%NOTFOUND;
      --
      funcoes.ExportBlob ('d:\fotos\tratadas\'|| v_id_trec || '.pdf', v_msgattach_fich);
      shell('d:\rpv\base64\base64.exe -e' || ' "d:\fotos\tratadas\' || v_id_trec || '.pdf" "d:\rpv\base64\' || v_id_trec ||'.txt"' );
      sql_script := 'alter table vismail_temp location(' || '''' || v_id_trec  || '.txt' || '''' || ')';
      execute immediate (sql_script);
      p_Clob := null;

      SELECT txt_line
      BULK COLLECT INTO fName
      FROM vismail_temp;

      FOR idx IN 1..fName.COUNT
      LOOP
        p_Clob := p_Clob || fName(idx);
      END LOOP;
      update trec_vismail_attachgroup
      set msgattach = p_Clob
      where id_trec =  v_id_trec;

      attach := attach || '<AttachmentGroup>' ||
         '<MessageText>' ||
         v_msg_descr ||
         '</MessageText>' ||
         '<MessageAttachments>' ||
         p_Clob ||
         '</MessageAttachments>' ||
         '<TypeOfDocument>' ||
         v_tipo_doc ||
         '</TypeOfDocument>' ||
         '<TypeOfAttachment>' ||
         v_tipo_attach ||
         '</TypeOfAttachment>' ||
         '</AttachmentGroup>';
      flag := 1;
    END LOOP;
    CLOSE C1;
    if flag = 1 then
       pos := instr(v_clob,'<RetryCounter>');
       v_clob := substr(v_clob,1,pos -1) || attach || substr(v_clob,pos);
       flag := 0;
    end if;

    req := demo_soap.new_request('env:Envelope','xmlns:env="http://www.w3.org/2003/05/soap-envelope"');
    demo_soap.generate_envelope_vismail(req,v_clob);

    /*v_blob := funcoes.ClobToBlob64(replace(v_clob,chr(10),''));*/
    fHandle := UTL_FILE.FOPEN_NCHAR(p_PATH,p_MESSAGEID || '.xml', 'w',32767 );
    if length(v_clob) > 10000 then
       i := 1;
       while i <= length(v_clob) loop
          if i = 1 then
             dbms_lob.read(v_clob,l_amt,10000,buf);
             buf := substr(v_clob,i,10000);
             UTL_FILE.PUT_NCHAR(fHandle,buf);
             UTL_FILE.PUT_LINE_NCHAR(fHandle, '');
          else
             dbms_lob.read(v_clob,l_amt,(offset * i),buf);
             buf := substr(v_clob,i,10000);
             UTL_FILE.PUT_NCHAR(fHandle,buf);
             UTL_FILE.PUT_LINE_NCHAR(fHandle, '');
          end if;
          i := i + 10000;
          buf := null;
       end loop;
    else
       UTL_FILE.PUT_NCHAR(fHandle,v_clob);
    end if;

    UTL_FILE.PUT_LINE_NCHAR(fHandle, '');
    UTL_FILE.FCLOSE(fHandle);

    /*Libertar os recursos*/
    xmldom.freeDocument(vDOCUMENTO);
end;
procedure NSConsularCooperationResponse(p_MESSAGEID in varchar2,p_REFNUMBEREXCH in varchar2,p_VISAPPNUMBER in varchar2,
                                        p_SENDERID in varchar2,p_COUNTRYSEND in varchar2,p_LOCATIONSEND in varchar2,p_NAMESEND in varchar2,
                                        p_TYPESEND in varchar2,p_COUNTRYREC in varchar2,p_LOCATIONREC in varchar2,p_NAMEREC in varchar2,
                                        p_TYPEREC in varchar2,p_MSGTXTMAND in varchar2,p_RETRYCOUNT in varchar2,p_PATH in varchar2) is
    vDOCUMENTO      xmldom.DOMDocument;
    vELEMENTOS_ROOT xmldom.DOMElement;
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    v_clob          clob:='xxx';
    fHandle         utl_file.file_type;
    buf             varchar2(32000);
    l_amt           number := 1;
    offset          number := 1;
    i               number(10):=1;
    req             demo_soap.request;
    id              UTL_FILE.FILE_TYPE;
    filedata        varchar2(32000);
    CURSOR c1 IS
       select a.id_trec, a.msgtext, a.msgattach_fich, a.typedoc, a.typeattach
       from trec_vismail_attachgroup a
       where a.messageid = p_MESSAGEID;
    v_msg_descr      trec_vismail_attachgroup.msgtext%type;
    v_tipo_doc       trec_vismail_attachgroup.typedoc%type;
    v_tipo_attach    trec_vismail_attachgroup.typeattach%type;
    v_id_trec        trec_vismail_attachgroup.id_trec%type;
    v_msgattach_fich trec_vismail_attachgroup.msgattach_fich%type;
    p_Clob           clob;
    flag             number(1):=0;
    attach           clob;
    pos              number(10);
    sql_script       varchar2(100);

    TYPE nt_fName   IS TABLE OF VARCHAR2 (512);
    fname   nt_fName;
begin
    vDOCUMENTO := xmldom.newDOMDocument;
    vUSER_NODE.EXTEND;
    vUSER_NODE(1) := xmldom.makeNode(vDOCUMENTO);
    /*Identificador*/
    vELEMENTOS_ROOT := xmldom.createElement(vDOCUMENTO,
                                            'NSConsularCooperationResponse');
    vUSER_NODE.EXTEND;
    vUSER_NODE(2) := xmldom.appendChild(vUSER_NODE(1),
                                        xmldom.makeNode(vELEMENTOS_ROOT));
    vUSER_NODE.EXTEND;
    /*MessageId*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'MessageId');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_MESSAGEID);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*ReferenceNumberOfExchange*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'ReferenceNumberOfExchange');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_REFNUMBEREXCH);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*VISApplicationNumber*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'VISApplicationNumber');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_VISAPPNUMBER);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*DateAndTimeOfSending*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'DateAndTimeOfSending');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         Fdatetz(SYSDATE));
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    if p_SENDERID is not null then
    /*SenderIdentification*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'SenderIdentification');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_SENDERID);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    end if;
    /*SendingAuthority*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'SendingAuthority');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vUSER_NODE.EXTEND;
    /*Country*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Country');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_COUNTRYSEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Location*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Location');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_LOCATIONSEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Name*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Name');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_NAMESEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Type*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Type');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_TYPESEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*RecipientAuthorityForResponse*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'RecipientAuthorityForResponse');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vUSER_NODE.EXTEND;
    /*Country*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Country');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_COUNTRYREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Location*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Location');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_LOCATIONREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Name*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Name');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_NAMEREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Type*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Type');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_TYPEREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*MessageTextMandatory*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'MessageTextMandatory');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_MSGTXTMAND);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));


    /*RetryCounter*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'RetryCounter');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_RETRYCOUNT);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));

    xmldom.writeToClob(vDOCUMENTO, v_clob);

    OPEN C1;
    LOOP
      FETCH C1 INTO v_id_trec, v_msg_descr, v_msgattach_fich, v_tipo_doc,
      v_tipo_attach;
      EXIT WHEN C1%NOTFOUND;

      funcoes.ExportBlob ('d:\fotos\tratadas\'|| v_id_trec || '.pdf', v_msgattach_fich);
      shell('d:\rpv\base64\base64.exe -e' || ' "d:\fotos\tratadas\' || v_id_trec || '.pdf" "d:\rpv\base64\' || v_id_trec ||'.txt"' );

      sql_script := 'alter table vismail_temp location(' || '''' || v_id_trec  || '.txt' || '''' || ')';
      execute immediate (sql_script);
      p_Clob := null;

      SELECT txt_line
      BULK COLLECT INTO fName
      FROM vismail_temp;

      FOR idx IN 1..fName.COUNT
      LOOP
        p_Clob := p_Clob || fName(idx);
      END LOOP;

      update trec_vismail_attachgroup
      set msgattach = p_Clob
      where id_trec =  v_id_trec;

      attach := attach || '<AttachmentGroup>' ||
         '<MessageText>' ||
         v_msg_descr ||
         '</MessageText>' ||
         '<MessageAttachments>' ||
         p_Clob ||
         '</MessageAttachments>' ||
         '<TypeOfDocument>' ||
         v_tipo_doc ||
         '</TypeOfDocument>' ||
         '<TypeOfAttachment>' ||
         v_tipo_attach ||
         '</TypeOfAttachment>' ||
         '</AttachmentGroup>';
      flag := 1;
    END LOOP;
    CLOSE C1;
    if flag = 1 then
       pos := instr(v_clob,'<RetryCounter>');
       v_clob := substr(v_clob,1,pos -1) || attach || substr(v_clob,pos);
       flag := 0;
    end if;

    req := demo_soap.new_request('env:Envelope','xmlns:env="http://www.w3.org/2003/05/soap-envelope"');
    demo_soap.generate_envelope_vismail(req,v_clob);

    /*v_blob := funcoes.ClobToBlob64(replace(v_clob,chr(10),''));*/
    fHandle := UTL_FILE.FOPEN_NCHAR(p_PATH,p_MESSAGEID || '.xml', 'w',32767 );
    if length(v_clob) > 10000 then
       i := 1;
       while i <= length(v_clob) loop
          if i = 1 then
             dbms_lob.read(v_clob,l_amt,10000,buf);
             buf := substr(v_clob,i,10000);
             UTL_FILE.PUT_NCHAR(fHandle,buf);
             UTL_FILE.PUT_LINE_NCHAR(fHandle, '');
          else
             dbms_lob.read(v_clob,l_amt,(offset * i),buf);
             buf := substr(v_clob,i,10000);
             UTL_FILE.PUT_NCHAR(fHandle,buf);
             UTL_FILE.PUT_LINE_NCHAR(fHandle, '');
          end if;
          i := i + 10000;
          buf := null;
       end loop;
    else
       UTL_FILE.PUT_NCHAR(fHandle,v_clob);
    end if;

    UTL_FILE.PUT_LINE_NCHAR(fHandle, '');
    UTL_FILE.FCLOSE(fHandle);

    /*Libertar os recursos*/
    xmldom.freeDocument(vDOCUMENTO);
end;
procedure NSSupportingDocumentRequest(p_MESSAGEID in varchar2,p_REFNUMBEREXCH in varchar2,p_VISAPPNUMBER in varchar2, p_URGENTCASE in varchar2,
                                        p_SENDERID in varchar2,p_COUNTRYSEND in varchar2,p_LOCATIONSEND in varchar2,p_NAMESEND in varchar2,
                                        p_TYPESEND in varchar2,p_COUNTRYREC in varchar2,p_LOCATIONREC in varchar2,p_NAMEREC in varchar2,
                                        p_TYPEREC in varchar2,p_MSGTXTMAND in varchar2,p_RETRYCOUNT in varchar2,p_PATH in varchar2) is
    vDOCUMENTO      xmldom.DOMDocument;
    vELEMENTOS_ROOT xmldom.DOMElement;
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    v_clob          clob:='xxx';
    fHandle         utl_file.file_type;
    buf             varchar2(32000);
    l_amt           number := 1;
    offset          number := 1;
    i               number(10):=1;
    req             demo_soap.request;
    id              UTL_FILE.FILE_TYPE;
    filedata        varchar2(32000);
    CURSOR c1 IS
       select a.id_trec, a.msgtext, a.msgattach_fich, a.typedoc, a.typeattach
       from trec_vismail_attachgroup a
       where a.messageid = p_MESSAGEID;
    CURSOR c2 IS
       select ar.msgtext, ar.typedoc
       from trec_vismail_attachreqgroup ar
       where ar.messageid = p_MESSAGEID;
    v_msg_descr      trec_vismail_attachgroup.msgtext%type;
    v_tipo_doc       trec_vismail_attachgroup.typedoc%type;
    v_tipo_attach    trec_vismail_attachgroup.typeattach%type;
    v_id_trec        trec_vismail_attachgroup.id_trec%type;
    v_msgattach_fich trec_vismail_attachgroup.msgattach_fich%type;
    v_msg_descrreq	trec_vismail_attachreqgroup.msgtext%type;
    v_tipo_docreq		trec_vismail_attachreqgroup.typedoc%type;
    p_Clob           clob;
    flag             number(1):=0;
    attach           clob;
    pos              number(10);
    sql_script       varchar2(100);
    TYPE nt_fName    IS TABLE OF VARCHAR2 (512);
    fname            nt_fName;
begin
    vDOCUMENTO := xmldom.newDOMDocument;
    vUSER_NODE.EXTEND;
    vUSER_NODE(1) := xmldom.makeNode(vDOCUMENTO);
    /*Identificador*/
    vELEMENTOS_ROOT := xmldom.createElement(vDOCUMENTO,
                                            'NSSupportingDocumentRequest');
    vUSER_NODE.EXTEND;
    vUSER_NODE(2) := xmldom.appendChild(vUSER_NODE(1),
                                        xmldom.makeNode(vELEMENTOS_ROOT));
    vUSER_NODE.EXTEND;
    /*MessageId*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'MessageId');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_MESSAGEID);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*ReferenceNumberOfExchange*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'ReferenceNumberOfExchange');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_REFNUMBEREXCH);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*VISApplicationNumber*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'VISApplicationNumber');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_VISAPPNUMBER);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*UrgentCase*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'UrgentCase');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_URGENTCASE);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*DateAndTimeOfSending*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'DateAndTimeOfSending');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         Fdatetz(SYSDATE));
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    if p_SENDERID is not null then
    /*SenderIdentification*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'SenderIdentification');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_SENDERID);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    end if;
    /*SendingAuthority*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'SendingAuthority');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vUSER_NODE.EXTEND;
    /*Country*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Country');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_COUNTRYSEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Location*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Location');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_LOCATIONSEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Name*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Name');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_NAMESEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Type*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Type');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_TYPESEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*RecipientAuthority*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'RecipientAuthority');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vUSER_NODE.EXTEND;
    /*Country*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Country');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_COUNTRYREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Location*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Location');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_LOCATIONREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Name*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Name');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_NAMEREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Type*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Type');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_TYPEREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    ---
    OPEN C2;
    LOOP
    FETCH C2 INTO v_msg_descrreq, v_tipo_docreq;
    EXIT WHEN C2%NOTFOUND;

    /*AttachmentRequestGroup*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'AttachmentRequestGroup');
    vUSER_NODE.extend;
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));

    /*MessageText*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'MessageText');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,v_msg_descrreq);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
	  /*TypeOfDocument*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'TypeOfDocument');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,v_tipo_docreq);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    END LOOP;
    CLOSE C2;
    ---
    /*RetryCounter*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'RetryCounter');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_RETRYCOUNT);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));

    xmldom.writeToClob(vDOCUMENTO, v_clob);

    OPEN C1;
    LOOP
      FETCH C1 INTO v_id_trec, v_msg_descr, v_msgattach_fich, v_tipo_doc,
      v_tipo_attach;
      EXIT WHEN C1%NOTFOUND;
      --
      funcoes.ExportBlob ('d:\fotos\tratadas\'|| v_id_trec || '.pdf', v_msgattach_fich);
      shell('d:\rpv\base64\base64.exe -e' || ' "d:\fotos\tratadas\' || v_id_trec || '.pdf" "d:\rpv\base64\' || v_id_trec ||'.txt"' );
      sql_script := 'alter table vismail_temp location(' || '''' || v_id_trec  || '.txt' || '''' || ')';
      execute immediate (sql_script);
      p_Clob := null;

      SELECT txt_line
      BULK COLLECT INTO fName
      FROM vismail_temp;

      FOR idx IN 1..fName.COUNT
      LOOP
        p_Clob := p_Clob || fName(idx);
      END LOOP;
      update trec_vismail_attachgroup
      set msgattach = p_Clob
      where id_trec =  v_id_trec;

      attach := attach || '<AttachmentGroup>' ||
         '<MessageText>' ||
         v_msg_descr ||
         '</MessageText>' ||
         '<MessageAttachments>' ||
         p_Clob ||
         '</MessageAttachments>' ||
         '<TypeOfDocument>' ||
         v_tipo_doc ||
         '</TypeOfDocument>' ||
         '<TypeOfAttachment>' ||
         v_tipo_attach ||
         '</TypeOfAttachment>' ||
         '</AttachmentGroup>';
      flag := 1;
    END LOOP;
    CLOSE C1;
    if flag = 1 then
       pos := instr(v_clob,'<AttachmentRequestGroup>');
       v_clob := substr(v_clob,1,pos -1) || attach || substr(v_clob,pos);
       flag := 0;
    end if;

    req := demo_soap.new_request('env:Envelope','xmlns:env="http://www.w3.org/2003/05/soap-envelope"');
    demo_soap.generate_envelope_vismail(req,v_clob);

    /*v_blob := funcoes.ClobToBlob64(replace(v_clob,chr(10),''));*/
    fHandle := UTL_FILE.FOPEN_NCHAR(p_PATH,p_MESSAGEID || '.xml', 'w',32767 );
    if length(v_clob) > 10000 then
       i := 1;
       while i <= length(v_clob) loop
          if i = 1 then
             dbms_lob.read(v_clob,l_amt,10000,buf);
             buf := substr(v_clob,i,10000);
             UTL_FILE.PUT_NCHAR(fHandle,buf);
             UTL_FILE.PUT_LINE_NCHAR(fHandle, '');
          else
             dbms_lob.read(v_clob,l_amt,(offset * i),buf);
             buf := substr(v_clob,i,10000);
             UTL_FILE.PUT_NCHAR(fHandle,buf);
             UTL_FILE.PUT_LINE_NCHAR(fHandle, '');
          end if;
          i := i + 10000;
          buf := null;
       end loop;
    else
       UTL_FILE.PUT_NCHAR(fHandle,v_clob);
    end if;

    UTL_FILE.PUT_LINE_NCHAR(fHandle, '');
    UTL_FILE.FCLOSE(fHandle);

    /*Libertar os recursos*/
    xmldom.freeDocument(vDOCUMENTO);
end;
procedure NSSupportingDocumentResponse(p_MESSAGEID in varchar2,p_REFNUMBEREXCH in varchar2,p_VISAPPNUMBER in varchar2,
                                       p_SENDERID in varchar2,p_COUNTRYSEND in varchar2,p_LOCATIONSEND in varchar2,p_NAMESEND in varchar2,
                                       p_TYPESEND in varchar2,p_COUNTRYREC in varchar2,p_LOCATIONREC in varchar2,p_NAMEREC in varchar2,
                                       p_TYPEREC in varchar2,p_MSGTXTOPTIONAL in varchar2,p_RETRYCOUNT in varchar2,p_PATH in varchar2) is
    vDOCUMENTO      xmldom.DOMDocument;
    vELEMENTOS_ROOT xmldom.DOMElement;
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    v_clob          clob:='xxx';
    fHandle  	      utl_file.file_type;
    buf             varchar2(32000);
    l_amt           number := 1;
    offset          number := 1;
    i               number(10):=1;
    req             demo_soap.request;
    id              UTL_FILE.FILE_TYPE;
    filedata        varchar2(32000);
    CURSOR c1 IS
       select a.id_trec, a.msgtext, a.msgattach_fich, a.typedoc, a.typeattach
       from trec_vismail_attachgroup a
       where a.messageid = p_MESSAGEID;
    v_msg_descr      trec_vismail_attachgroup.msgtext%type;
    v_tipo_doc       trec_vismail_attachgroup.typedoc%type;
    v_tipo_attach    trec_vismail_attachgroup.typeattach%type;
    v_id_trec        trec_vismail_attachgroup.id_trec%type;
    v_msgattach_fich trec_vismail_attachgroup.msgattach_fich%type;
    p_Clob           clob;
    flag             number(1):=0;
    attach           clob;
    pos              number(10);
    sql_script       varchar2(100);
    TYPE nt_fName    IS TABLE OF VARCHAR2 (512);
    fname            nt_fName;
begin
    vDOCUMENTO := xmldom.newDOMDocument;
    vUSER_NODE.EXTEND;
    vUSER_NODE(1) := xmldom.makeNode(vDOCUMENTO);
    /*Identificador*/
    vELEMENTOS_ROOT := xmldom.createElement(vDOCUMENTO,
                                            'NSSupportingDocumentResponse');
    vUSER_NODE.EXTEND;
    vUSER_NODE(2) := xmldom.appendChild(vUSER_NODE(1),
                                        xmldom.makeNode(vELEMENTOS_ROOT));
    vUSER_NODE.EXTEND;
    /*MessageId*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'MessageId');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_MESSAGEID);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*ReferenceNumberOfExchange*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'ReferenceNumberOfExchange');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_REFNUMBEREXCH);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*VISApplicationNumber*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'VISApplicationNumber');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_VISAPPNUMBER);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));

    /*DateAndTimeOfSending*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'DateAndTimeOfSending');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         Fdatetz(SYSDATE));
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    if p_SENDERID is not null then
    /*SenderIdentification*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'SenderIdentification');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_SENDERID);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    end if;
    /*SendingAuthority*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'SendingAuthority');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vUSER_NODE.EXTEND;
    /*Country*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Country');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_COUNTRYSEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Location*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Location');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_LOCATIONSEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Name*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Name');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_NAMESEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Type*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Type');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_TYPESEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*RecipientAuthorityForResponse*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'RecipientAuthorityForResponse');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vUSER_NODE.EXTEND;
    /*Country*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Country');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_COUNTRYREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Location*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Location');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_LOCATIONREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Name*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Name');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_NAMEREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Type*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Type');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_TYPEREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*MessageTextOptional*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'MessageTextOptional');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_MSGTXTOPTIONAL);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));

    /*RetryCounter*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'RetryCounter');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_RETRYCOUNT);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));

    xmldom.writeToClob(vDOCUMENTO, v_clob);

    OPEN C1;
    LOOP
      FETCH C1 INTO v_id_trec, v_msg_descr, v_msgattach_fich, v_tipo_doc,
      v_tipo_attach;
      EXIT WHEN C1%NOTFOUND;

      funcoes.ExportBlob ('d:\fotos\tratadas\'|| v_id_trec || '.pdf', v_msgattach_fich);
      shell('d:\rpv\base64\base64.exe -e' || ' "d:\fotos\tratadas\' || v_id_trec || '.pdf" "d:\rpv\base64\' || v_id_trec ||'.txt"' );

      sql_script := 'alter table vismail_temp location(' || '''' || v_id_trec  || '.txt' || '''' || ')';
      execute immediate (sql_script);
      p_Clob := null;

      SELECT txt_line
      BULK COLLECT INTO fName
      FROM vismail_temp;

      FOR idx IN 1..fName.COUNT
      LOOP
        p_Clob := p_Clob || fName(idx);
      END LOOP;

      update trec_vismail_attachgroup
      set msgattach = p_Clob
      where id_trec =  v_id_trec;

      attach := attach || '<AttachmentGroup>' ||
         '<MessageText>' ||
         v_msg_descr ||
         '</MessageText>' ||
         '<MessageAttachments>' ||
         p_Clob ||
         '</MessageAttachments>' ||
         '<TypeOfDocument>' ||
         v_tipo_doc ||
         '</TypeOfDocument>' ||
         '<TypeOfAttachment>' ||
         v_tipo_attach ||
         '</TypeOfAttachment>' ||
         '</AttachmentGroup>';
      flag := 1;
    END LOOP;
    CLOSE C1;
    if flag = 1 then
       pos := instr(v_clob,'<RetryCounter>');
       v_clob := substr(v_clob,1,pos -1) || attach || substr(v_clob,pos);
       flag := 0;
    end if;

    req := demo_soap.new_request('env:Envelope','xmlns:env="http://www.w3.org/2003/05/soap-envelope"');
    demo_soap.generate_envelope_vismail(req,v_clob);

    fHandle := UTL_FILE.FOPEN_NCHAR(p_PATH,p_MESSAGEID || '.xml', 'w',32767 );

    --if length(v_clob) > 32000 then
       i := 1;
       while i <= length(v_clob) loop
          if i = 1 then
             dbms_lob.read(v_clob,l_amt,10000,buf);
             buf := substr(v_clob,i,10000);
             UTL_FILE.PUT_NCHAR(fHandle,buf);
             UTL_FILE.PUT_LINE_NCHAR(fHandle, '');
          else
             dbms_lob.read(v_clob,l_amt,(offset * i),buf);
             buf := substr(v_clob,i,10000);
             UTL_FILE.PUT_NCHAR(fHandle,buf);
             UTL_FILE.PUT_LINE_NCHAR(fHandle, '');
          end if;
          i := i + 10000;
       end loop;
    --else
    --   UTL_FILE.PUT_NCHAR(fHandle,v_clob);
    --end if;

    UTL_FILE.PUT_LINE_NCHAR(fHandle, '');
    UTL_FILE.FCLOSE(fHandle);

    /*Libertar os recursos*/
    xmldom.freeDocument(vDOCUMENTO);
end;
procedure NSDataAmendmentRequest(p_MESSAGEID in varchar2,p_REFNUMBEREXCH in varchar2,p_VISAPPNUMBER in varchar2, p_URGENTCASE in varchar2,
                                        p_SENDERID in varchar2,p_COUNTRYSEND in varchar2,p_LOCATIONSEND in varchar2,p_NAMESEND in varchar2,
                                        p_TYPESEND in varchar2,p_COUNTRYREC in varchar2,p_LOCATIONREC in varchar2,p_NAMEREC in varchar2,
                                        p_TYPEREC in varchar2,p_MSGTXTMAND in varchar2,p_RETRYCOUNT in varchar2,p_PATH in varchar2) is
    vDOCUMENTO      xmldom.DOMDocument;
    vELEMENTOS_ROOT xmldom.DOMElement;
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    v_clob          clob:='xxx';
    fHandle         utl_file.file_type;
    buf             varchar2(32000);
    l_amt           number := 1;
    offset          number := 1;
    i               number(10):=1;
    req             demo_soap.request;
    id              UTL_FILE.FILE_TYPE;
    filedata        varchar2(32000);
    CURSOR c1 IS
       select a.id_trec, a.msgtext, a.msgattach_fich, a.typedoc, a.typeattach
       from trec_vismail_attachgroup a
       where a.messageid = p_MESSAGEID;
    v_msg_descr      trec_vismail_attachgroup.msgtext%type;
    v_tipo_doc       trec_vismail_attachgroup.typedoc%type;
    v_tipo_attach    trec_vismail_attachgroup.typeattach%type;
    v_id_trec        trec_vismail_attachgroup.id_trec%type;
    v_msgattach_fich trec_vismail_attachgroup.msgattach_fich%type;
    p_Clob           clob;
    flag             number(1):=0;
    attach           clob;
    pos              number(10);
    sql_script       varchar2(100);
    TYPE nt_fName    IS TABLE OF VARCHAR2 (512);
    fname            nt_fName;
begin
    vDOCUMENTO := xmldom.newDOMDocument;
    vUSER_NODE.EXTEND;
    vUSER_NODE(1) := xmldom.makeNode(vDOCUMENTO);
    /*Identificador*/
    vELEMENTOS_ROOT := xmldom.createElement(vDOCUMENTO,
                                            'NSDataAmendmentRequest');
    vUSER_NODE.EXTEND;
    vUSER_NODE(2) := xmldom.appendChild(vUSER_NODE(1),
                                        xmldom.makeNode(vELEMENTOS_ROOT));
    vUSER_NODE.EXTEND;
    /*MessageId*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'MessageId');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_MESSAGEID);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*ReferenceNumberOfExchange*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'ReferenceNumberOfExchange');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_REFNUMBEREXCH);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*VISApplicationNumber*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'VISApplicationNumber');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_VISAPPNUMBER);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*UrgentCase*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'UrgentCase');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_URGENTCASE);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*DateAndTimeOfSending*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'DateAndTimeOfSending');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         Fdatetz(SYSDATE));
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    if p_SENDERID is not null then
    /*SenderIdentification*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'SenderIdentification');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_SENDERID);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    end if;
    /*SendingAuthority*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'SendingAuthority');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vUSER_NODE.EXTEND;
    /*Country*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Country');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_COUNTRYSEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Location*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Location');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_LOCATIONSEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Name*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Name');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_NAMESEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Type*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Type');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_TYPESEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*RecipientAuthority*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'RecipientAuthority');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vUSER_NODE.EXTEND;
    /*Country*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Country');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_COUNTRYREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Location*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Location');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_LOCATIONREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Name*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Name');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_NAMEREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Type*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Type');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_TYPEREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*MessageTextMandatory*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'MessageTextMandatory');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_MSGTXTMAND);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));


    /*RetryCounter*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'RetryCounter');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_RETRYCOUNT);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));

    xmldom.writeToClob(vDOCUMENTO, v_clob);

    OPEN C1;
    LOOP
      FETCH C1 INTO v_id_trec, v_msg_descr, v_msgattach_fich, v_tipo_doc,
      v_tipo_attach;
      EXIT WHEN C1%NOTFOUND;
      --
      funcoes.ExportBlob ('d:\fotos\tratadas\'|| v_id_trec || '.pdf', v_msgattach_fich);
      shell('d:\rpv\base64\base64.exe -e' || ' "d:\fotos\tratadas\' || v_id_trec || '.pdf" "d:\rpv\base64\' || v_id_trec ||'.txt"' );
      sql_script := 'alter table vismail_temp location(' || '''' || v_id_trec  || '.txt' || '''' || ')';
      execute immediate (sql_script);
      p_Clob := null;

      SELECT txt_line
      BULK COLLECT INTO fName
      FROM vismail_temp;

      FOR idx IN 1..fName.COUNT
      LOOP
        p_Clob := p_Clob || fName(idx);
      END LOOP;
      update trec_vismail_attachgroup
      set msgattach = p_Clob
      where id_trec =  v_id_trec;

      attach := attach || '<AttachmentGroup>' ||
         '<MessageText>' ||
         v_msg_descr ||
         '</MessageText>' ||
         '<MessageAttachments>' ||
         p_Clob ||
         '</MessageAttachments>' ||
         '<TypeOfDocument>' ||
         v_tipo_doc ||
         '</TypeOfDocument>' ||
         '<TypeOfAttachment>' ||
         v_tipo_attach ||
         '</TypeOfAttachment>' ||
         '</AttachmentGroup>';
      flag := 1;
    END LOOP;
    CLOSE C1;
    if flag = 1 then
       pos := instr(v_clob,'<RetryCounter>');
       v_clob := substr(v_clob,1,pos -1) || attach || substr(v_clob,pos);
       flag := 0;
    end if;

    req := demo_soap.new_request('env:Envelope','xmlns:env="http://www.w3.org/2003/05/soap-envelope"');
    demo_soap.generate_envelope_vismail(req,v_clob);

    /*v_blob := funcoes.ClobToBlob64(replace(v_clob,chr(10),''));*/
    fHandle := UTL_FILE.FOPEN_NCHAR(p_PATH,p_MESSAGEID || '.xml', 'w',32767 );
    if length(v_clob) > 10000 then
       i := 1;
       while i <= length(v_clob) loop
          if i = 1 then
             dbms_lob.read(v_clob,l_amt,10000,buf);
             buf := substr(v_clob,i,10000);
             UTL_FILE.PUT_NCHAR(fHandle,buf);
             UTL_FILE.PUT_LINE_NCHAR(fHandle, '');
          else
             dbms_lob.read(v_clob,l_amt,(offset * i),buf);
             buf := substr(v_clob,i,10000);
             UTL_FILE.PUT_NCHAR(fHandle,buf);
             UTL_FILE.PUT_LINE_NCHAR(fHandle, '');
          end if;
          i := i + 10000;
          buf := null;
       end loop;
    else
       UTL_FILE.PUT_NCHAR(fHandle,v_clob);
    end if;

    UTL_FILE.PUT_LINE_NCHAR(fHandle, '');
    UTL_FILE.FCLOSE(fHandle);

    /*Libertar os recursos*/
    xmldom.freeDocument(vDOCUMENTO);
end;
procedure NSDataAmendmentResponse(p_MESSAGEID in varchar2,p_REFNUMBEREXCH in varchar2,p_VISAPPNUMBER in varchar2,
                                  p_SENDERID in varchar2,p_COUNTRYSEND in varchar2,p_LOCATIONSEND in varchar2,p_NAMESEND in varchar2,
                                  p_TYPESEND in varchar2,p_COUNTRYREC in varchar2,p_LOCATIONREC in varchar2,p_NAMEREC in varchar2,
                                  p_TYPEREC in varchar2,p_MSGTXTMAND in varchar2,p_RETRYCOUNT in varchar2,p_PATH in varchar2) is
    vDOCUMENTO      xmldom.DOMDocument;
    vELEMENTOS_ROOT xmldom.DOMElement;
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    v_clob          clob:='xxx';
    fHandle         utl_file.file_type;
    buf             varchar2(32000);
    l_amt           number := 1;
    offset          number := 1;
    i               number(10):=1;
    req             demo_soap.request;
    id              UTL_FILE.FILE_TYPE;
    filedata        varchar2(32000);
    CURSOR c1 IS
       select a.id_trec, a.msgtext, a.msgattach_fich, a.typedoc, a.typeattach
       from trec_vismail_attachgroup a
       where a.messageid = p_MESSAGEID;
    v_msg_descr      trec_vismail_attachgroup.msgtext%type;
    v_tipo_doc       trec_vismail_attachgroup.typedoc%type;
    v_tipo_attach    trec_vismail_attachgroup.typeattach%type;
    v_id_trec        trec_vismail_attachgroup.id_trec%type;
    v_msgattach_fich trec_vismail_attachgroup.msgattach_fich%type;
    p_Clob           clob;
    flag             number(1):=0;
    attach           clob;
    pos              number(10);
    sql_script       varchar2(100);
    TYPE nt_fName    IS TABLE OF VARCHAR2 (512);
    fname            nt_fName;
begin
    vDOCUMENTO := xmldom.newDOMDocument;
    vUSER_NODE.EXTEND;
    vUSER_NODE(1) := xmldom.makeNode(vDOCUMENTO);
    /*Identificador*/
    vELEMENTOS_ROOT := xmldom.createElement(vDOCUMENTO,
                                            'NSDataAmendmentResponse');
    vUSER_NODE.EXTEND;
    vUSER_NODE(2) := xmldom.appendChild(vUSER_NODE(1),
                                        xmldom.makeNode(vELEMENTOS_ROOT));
    vUSER_NODE.EXTEND;
    /*MessageId*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'MessageId');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_MESSAGEID);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*ReferenceNumberOfExchange*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'ReferenceNumberOfExchange');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_REFNUMBEREXCH);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*VISApplicationNumber*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'VISApplicationNumber');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_VISAPPNUMBER);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*DateAndTimeOfSending*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'DateAndTimeOfSending');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         Fdatetz(SYSDATE));
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    if p_SENDERID is not null then
    /*SenderIdentification*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'SenderIdentification');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_SENDERID);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    end if;
    /*SendingAuthority*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'SendingAuthority');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vUSER_NODE.EXTEND;
    /*Country*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Country');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_COUNTRYSEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Location*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Location');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_LOCATIONSEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Name*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Name');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_NAMESEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Type*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Type');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_TYPESEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*RecipientAuthorityForResponse*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'RecipientAuthorityForResponse');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vUSER_NODE.EXTEND;
    /*Country*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Country');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_COUNTRYREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Location*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Location');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_LOCATIONREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Name*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Name');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_NAMEREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Type*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Type');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_TYPEREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*MessageTextMandatory*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'MessageTextMandatory');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_MSGTXTMAND);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));


    /*RetryCounter*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'RetryCounter');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_RETRYCOUNT);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));

    xmldom.writeToClob(vDOCUMENTO, v_clob);

    OPEN C1;
    LOOP
      FETCH C1 INTO v_id_trec, v_msg_descr, v_msgattach_fich, v_tipo_doc,
      v_tipo_attach;
      EXIT WHEN C1%NOTFOUND;
      --
      funcoes.ExportBlob ('d:\fotos\tratadas\'|| v_id_trec || '.pdf', v_msgattach_fich);
      shell('d:\rpv\base64\base64.exe -e' || ' "d:\fotos\tratadas\' || v_id_trec || '.pdf" "d:\rpv\base64\' || v_id_trec ||'.txt"' );
      sql_script := 'alter table vismail_temp location(' || '''' || v_id_trec  || '.txt' || '''' || ')';
      execute immediate (sql_script);
      p_Clob := null;

      SELECT txt_line
      BULK COLLECT INTO fName
      FROM vismail_temp;

      FOR idx IN 1..fName.COUNT
      LOOP
        p_Clob := p_Clob || fName(idx);
      END LOOP;
      update trec_vismail_attachgroup
      set msgattach = p_Clob
      where id_trec =  v_id_trec;

      attach := attach || '<AttachmentGroup>' ||
         '<MessageText>' ||
         v_msg_descr ||
         '</MessageText>' ||
         '<MessageAttachments>' ||
         p_Clob ||
         '</MessageAttachments>' ||
         '<TypeOfDocument>' ||
         v_tipo_doc ||
         '</TypeOfDocument>' ||
         '<TypeOfAttachment>' ||
         v_tipo_attach ||
         '</TypeOfAttachment>' ||
         '</AttachmentGroup>';
      flag := 1;
    END LOOP;
    CLOSE C1;
    if flag = 1 then
       pos := instr(v_clob,'<RetryCounter>');
       v_clob := substr(v_clob,1,pos -1) || attach || substr(v_clob,pos);
       flag := 0;
    end if;

    req := demo_soap.new_request('env:Envelope','xmlns:env="http://www.w3.org/2003/05/soap-envelope"');
    demo_soap.generate_envelope_vismail(req,v_clob);

    /*v_blob := funcoes.ClobToBlob64(replace(v_clob,chr(10),''));*/
    fHandle := UTL_FILE.FOPEN_NCHAR(p_PATH,p_MESSAGEID || '.xml', 'w',32767 );
    if length(v_clob) > 10000 then
       i := 1;
       while i <= length(v_clob) loop
          if i = 1 then
             dbms_lob.read(v_clob,l_amt,10000,buf);
             buf := substr(v_clob,i,10000);
             UTL_FILE.PUT_NCHAR(fHandle,buf);
             UTL_FILE.PUT_LINE_NCHAR(fHandle, '');
          else
             dbms_lob.read(v_clob,l_amt,(offset * i),buf);
             buf := substr(v_clob,i,10000);
             UTL_FILE.PUT_NCHAR(fHandle,buf);
             UTL_FILE.PUT_LINE_NCHAR(fHandle, '');
          end if;
          i := i + 10000;
          buf := null;
       end loop;
    else
       UTL_FILE.PUT_NCHAR(fHandle,v_clob);
    end if;

    UTL_FILE.PUT_LINE_NCHAR(fHandle, '');
    UTL_FILE.FCLOSE(fHandle);

    /*Libertar os recursos*/
    xmldom.freeDocument(vDOCUMENTO);
end;
procedure NSNationalityAcquiredInfo(p_MESSAGEID in varchar2,p_REFNUMBEREXCH in varchar2,p_VISAPPNUMBER in varchar2,
                                    p_SENDERID in varchar2,p_COUNTRYSEND in varchar2,p_LOCATIONSEND in varchar2,p_NAMESEND in varchar2,
                                    p_TYPESEND in varchar2,p_COUNTRYREC in varchar2,p_LOCATIONREC in varchar2,p_NAMEREC in varchar2,
                                    p_TYPEREC in varchar2,p_MSGTXTMAND in varchar2,p_RETRYCOUNT in varchar2,p_PATH in varchar2) is
    vDOCUMENTO      xmldom.DOMDocument;
    vELEMENTOS_ROOT xmldom.DOMElement;
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    v_clob          clob:='xxx';
    fHandle         utl_file.file_type;
    buf             varchar2(32000);
    l_amt           number := 1;
    offset          number := 1;
    i               number(10):=1;
    req             demo_soap.request;
    id              UTL_FILE.FILE_TYPE;
    filedata        varchar2(32000);
    CURSOR c1 IS
       select a.id_trec, a.msgtext, a.msgattach_fich, a.typedoc, a.typeattach
       from trec_vismail_attachgroup a
       where a.messageid = p_MESSAGEID;
    v_msg_descr      trec_vismail_attachgroup.msgtext%type;
    v_tipo_doc       trec_vismail_attachgroup.typedoc%type;
    v_tipo_attach    trec_vismail_attachgroup.typeattach%type;
    v_id_trec        trec_vismail_attachgroup.id_trec%type;
    v_msgattach_fich trec_vismail_attachgroup.msgattach_fich%type;
    p_Clob           clob;
    flag             number(1):=0;
    attach           clob;
    pos              number(10);
    sql_script       varchar2(100);
    TYPE nt_fName    IS TABLE OF VARCHAR2 (512);
    fname            nt_fName;
begin
    vDOCUMENTO := xmldom.newDOMDocument;
    vUSER_NODE.EXTEND;
    vUSER_NODE(1) := xmldom.makeNode(vDOCUMENTO);
    /*Identificador*/
    vELEMENTOS_ROOT := xmldom.createElement(vDOCUMENTO,
                                            'NSNationalityAcquiredInformation');
    vUSER_NODE.EXTEND;
    vUSER_NODE(2) := xmldom.appendChild(vUSER_NODE(1),
                                        xmldom.makeNode(vELEMENTOS_ROOT));
    vUSER_NODE.EXTEND;
    /*MessageId*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'MessageId');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_MESSAGEID);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*ReferenceNumberOfExchange*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'ReferenceNumberOfExchange');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_REFNUMBEREXCH);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*VISApplicationNumber*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'VISApplicationNumber');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_VISAPPNUMBER);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*DateAndTimeOfSending*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'DateAndTimeOfSending');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         Fdatetz(SYSDATE));
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    if p_SENDERID is not null then
    /*SenderIdentification*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'SenderIdentification');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_SENDERID);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));
    end if;
    /*SendingAuthority*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'SendingAuthority');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vUSER_NODE.EXTEND;
    /*Country*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Country');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_COUNTRYSEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Location*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Location');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_LOCATIONSEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Name*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Name');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_NAMESEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Type*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Type');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_TYPESEND);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*RecipientAuthority*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'RecipientAuthority');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vUSER_NODE.EXTEND;
    /*Country*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Country');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_COUNTRYREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Location*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Location');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_LOCATIONREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Name*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Name');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_NAMEREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Type*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Type');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_TYPEREC);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*MessageTextMandatory*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'MessageTextMandatory');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_MSGTXTMAND);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));


    /*RetryCounter*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'RetryCounter');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         p_RETRYCOUNT);
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vTEXTO_ITEM));

    xmldom.writeToClob(vDOCUMENTO, v_clob);

    OPEN C1;
    LOOP
      FETCH C1 INTO v_id_trec, v_msg_descr, v_msgattach_fich, v_tipo_doc,
      v_tipo_attach;
      EXIT WHEN C1%NOTFOUND;
      --
      funcoes.ExportBlob ('d:\fotos\tratadas\'|| v_id_trec || '.pdf', v_msgattach_fich);
      shell('d:\rpv\base64\base64.exe -e' || ' "d:\fotos\tratadas\' || v_id_trec || '.pdf" "d:\rpv\base64\' || v_id_trec ||'.txt"' );
      sql_script := 'alter table vismail_temp location(' || '''' || v_id_trec  || '.txt' || '''' || ')';
      execute immediate (sql_script);
      p_Clob := null;

      SELECT txt_line
      BULK COLLECT INTO fName
      FROM vismail_temp;

      FOR idx IN 1..fName.COUNT
      LOOP
        p_Clob := p_Clob || fName(idx);
      END LOOP;
      update trec_vismail_attachgroup
      set msgattach = p_Clob
      where id_trec =  v_id_trec;

      attach := attach || '<AttachmentGroup>' ||
         '<MessageText>' ||
         v_msg_descr ||
         '</MessageText>' ||
         '<MessageAttachments>' ||
         p_Clob ||
         '</MessageAttachments>' ||
         '<TypeOfDocument>' ||
         v_tipo_doc ||
         '</TypeOfDocument>' ||
         '<TypeOfAttachment>' ||
         v_tipo_attach ||
         '</TypeOfAttachment>' ||
         '</AttachmentGroup>';
      flag := 1;
    END LOOP;
    CLOSE C1;
    if flag = 1 then
       pos := instr(v_clob,'<RetryCounter>');
       v_clob := substr(v_clob,1,pos -1) || attach || substr(v_clob,pos);
       flag := 0;
    end if;

    req := demo_soap.new_request('env:Envelope','xmlns:env="http://www.w3.org/2003/05/soap-envelope"');
    demo_soap.generate_envelope_vismail(req,v_clob);

    /*v_blob := funcoes.ClobToBlob64(replace(v_clob,chr(10),''));*/
    fHandle := UTL_FILE.FOPEN_NCHAR(p_PATH,p_MESSAGEID || '.xml', 'w',32767 );
    if length(v_clob) > 10000 then
       i := 1;
       while i <= length(v_clob) loop
          if i = 1 then
             dbms_lob.read(v_clob,l_amt,10000,buf);
             buf := substr(v_clob,i,10000);
             UTL_FILE.PUT_NCHAR(fHandle,buf);
             UTL_FILE.PUT_LINE_NCHAR(fHandle, '');
          else
             dbms_lob.read(v_clob,l_amt,(offset * i),buf);
             buf := substr(v_clob,i,10000);
             UTL_FILE.PUT_NCHAR(fHandle,buf);
             UTL_FILE.PUT_LINE_NCHAR(fHandle, '');
          end if;
          i := i + 10000;
          buf := null;
       end loop;
    else
       UTL_FILE.PUT_NCHAR(fHandle,v_clob);
    end if;

    UTL_FILE.PUT_LINE_NCHAR(fHandle, '');
    UTL_FILE.FCLOSE(fHandle);

    /*Libertar os recursos*/
    xmldom.freeDocument(vDOCUMENTO);
end;
procedure TratarRecepcao(v_msg_resp in clob, flag in varchar2 DEFAULT '0',v_id in number) is
encontrou                boolean;
id 			                 UTL_FILE.FILE_TYPE;
msg_resp                 clob;
v_tipo                   temp_rec_vismail.tipo%type;
v_messageid              temp_rec_vismail.messageid%type;
v_refnumberexch          temp_rec_vismail.refnumberexch%type;
v_messageexch            temp_rec_vismail.refnumberexch%type;
v_visappnumber           temp_rec_vismail.visappnumber%type;
v_urgentcase             temp_rec_vismail.urgentcase%type;
v_datetimesend           temp_rec_vismail.datetimesend%type;
v_senderid               temp_rec_vismail.senderid%type;
v_countrysend            temp_rec_vismail.countrysend%type;
v_locationsend           temp_rec_vismail.locationsend%type;
v_namesend               temp_rec_vismail.namesend%type;
v_typesend               temp_rec_vismail.typesend%type;
v_countryrec             temp_rec_vismail.countryrec%type;
v_locationrec            temp_rec_vismail.locationrec%type;
v_namerec                temp_rec_vismail.namerec%type;
v_typerec                temp_rec_vismail.typerec%type;
v_msgtxtmand             temp_rec_vismail.msgtxtmand%type;
v_msgtxtoptional         temp_rec_vismail.msgtxtoptional%type;
v_retrycount             temp_rec_vismail.retrycount%type;
v_SendingAuthority       varchar2(50);
v_msgtext                trec_vismail_attachgroup.msgtext%type;
v_id_trec                trec_vismail_attachgroup.id_trec%type;
v_msgattach              trec_vismail_attachgroup.msgattach%type;
v_msgattach_fich         trec_vismail_attachgroup.msgattach_fich%type;
v_typedoc                trec_vismail_attachgroup.typedoc%type;
v_typeattach             trec_vismail_attachgroup.typeattach%type;
v_erros                  errordescription.ERRORELEM%type;
ocorr                    number(4);
erros                    varchar2(2000);
messageid                varchar2(50);
teste                    varchar2(50);
flag_erros               number(1);
v_type                   varchar2(4);
begin
           msg_resp := ltrim(v_msg_resp);
           v_tipo := flag;
           flag_erros := 0;
           if v_tipo in ('01','02','03','04','05','06','07','08') then
             v_messageid     := visxml_cs.extrai_valor_xml(msg_resp,'MessageId',null,null,1);
             If v_messageid = 'nada' then
               erros := erros || '0003/000;';
             end if;
             If v_messageid is null then
               erros := erros || '0003/000;';
             end if;
             If v_messageid = 'erxml' then
               erros := erros || '1001/999;';
             end if;
             v_refnumberexch     := visxml_cs.extrai_valor_xml(msg_resp,'ReferenceNumberOfExchange',null,null,1);
             If v_refnumberexch = 'nada' then
               erros := erros || '0003/001;';
             end if;
             If v_refnumberexch is null then
               erros := erros || '0003/001;';
             end if;
             If v_refnumberexch = 'erxml' then
                v_refnumberexch := v_messageexch;
             end if;

             if v_messageexch <> v_refnumberexch then
                if v_refnumberexch <> 'erxml' then
                   erros := erros || '2003/001;';
                end if;
             end if;

             v_visappnumber := visxml_cs.extrai_valor_xml(msg_resp,'VISApplicationNumber',null,null,1);
             If v_visappnumber = 'nada' then
                erros := erros || '0003/002;';
             end if;
             If v_visappnumber is null then
               erros := erros || '0003/002;';
             end if;
             v_datetimesend := visxml_cs.extrai_valor_xml(msg_resp,'DateAndTimeOfSending',null,null,1);
             If v_datetimesend = 'nada' then
               erros := erros || '0003/004;';
             end if;
             If v_datetimesend is null then
               erros := erros || '0003/004;';
             end if;

             v_senderid := visxml_cs.extrai_valor_xml(msg_resp,'SenderIdentification',null,null,1);
             If v_senderid = 'nada' then
               v_senderid := null;
             end if;

             v_SendingAuthority := Extrai_Valor_XML(msg_resp, 'SendingAuthority', null, 1, v_tipo, 3);
             If v_SendingAuthority = 'nada' then
                erros := erros || '0003/006;';
                flag_erros := 1;
             end if;

             if flag_erros <> 1 then
             v_countrysend   := Extrai_Valor_XML(msg_resp, 'SendingAuthority', 'Country', 1, v_tipo, 2);
             If v_countrysend = 'nada' then
                  erros := erros || '0003/301;';
                  erros := erros || '0001/006;';
              end if;
             If v_countrysend is null then
               erros := erros || '0003/006;';
             end if;
             v_locationsend  := Extrai_Valor_XML(msg_resp, 'SendingAuthority', 'Location', 1, v_tipo, 2);
             If v_locationsend = 'nada' then
                  erros := erros || '0003/302;';
                  erros := erros || '0001/006;';
             end if;
             If v_locationsend is null then
               erros := erros || '0003/006;';
             end if;
             v_namesend      := Extrai_Valor_XML(msg_resp, 'SendingAuthority', 'Name', 1, v_tipo, 2);
             If v_namesend = 'nada' then
                  erros := erros || '0002/006;';
             end if;
             If v_namesend is null then
               erros := erros || '0003/006;';
             end if;

             v_typesend      := Extrai_Valor_XML(msg_resp, 'SendingAuthority', 'Type', 1, v_tipo, 2);
             If v_typesend = 'nada' then
                  erros := erros || '0002/006;';
             end if;
             If v_typesend is null then
               erros := erros || '0003/006;';
             end if;
             end if;
             v_retrycount    := Extrai_Valor_XML(msg_resp, 'RetryCounter', null, 1, v_tipo, 2);
             If v_retrycount = 'nada' then
                  erros := erros || '0003/015;';
             end if;
             If v_retrycount = 'X' then
               erros := erros || '0001/015;';
             end if;
             If v_retrycount is null then
               erros := erros || '0003/015;';
             end if;
             teste := Extrai_Valor_XML(msg_resp, 'TestCase', null, 1, v_tipo, 2);
             if nvl(teste,'nada') not in ('nada','erxml') then
                erros := erros || '0002/999;';
             end if;
          end if;

           if v_tipo in ('01','04','06') then
             v_urgentcase := visxml_cs.extrai_valor_xml(msg_resp,'UrgentCase',null,null,1);
             If v_urgentcase = 'nada' then
               erros := erros || '0003/003;';
             end if;
             If v_urgentcase is null then
               erros := erros || '0003/003;';
             end if;
           end if;
           if v_tipo in ('01','02','04','06','08') then
             v_countryrec  := Extrai_Valor_XML(msg_resp, 'RecipientAuthority', 'Country', 1, v_tipo, 2);
             If v_countryrec = 'nada' then
               erros := erros || '0003/007;';
             end if;
             If v_countryrec is null then
               erros := erros || '0003/007;';
             end if;
             v_locationrec := Extrai_Valor_XML(msg_resp, 'RecipientAuthority', 'Location', 1, v_tipo, 2);
             If v_locationrec = 'nada' then
               erros := erros || '0002/007;';
             end if;
             If v_locationrec is null then
               erros := erros || '0003/007;';
             end if;
             v_namerec     := Extrai_Valor_XML(msg_resp, 'RecipientAuthority', 'Name', 1, v_tipo, 2);
             If v_namerec = 'nada' then
                 erros := erros || '0003/303;';
                 erros := erros || '0001/007;';
             end if;
             If v_namerec is null then
               erros := erros || '0003/007;';
             end if;
             v_typerec := Extrai_Valor_XML(msg_resp, 'RecipientAuthority', 'Type', 1, v_tipo, 2);
             if v_typerec = 'nada' then
                  erros := erros || '0002/007;';
             end if;
             if v_typerec is null then
               erros := erros || '0003/007;';
             end if;
             if v_type <> v_typerec then
                erros := erros || '2003/007;';
             end if;
           end if;

           if v_tipo in ('03','05','07') then
             v_countryrec  := Extrai_Valor_XML(msg_resp, 'RecipientAuthorityForResponse', 'Country', 1, v_tipo, 2);
             If v_countryrec = 'nada' then
               erros := erros || '0003/008;';
             end if;
             If v_countryrec is null then
               erros := erros || '0003/008;';
             end if;
             v_locationrec := Extrai_Valor_XML(msg_resp, 'RecipientAuthorityForResponse', 'Location', 1, v_tipo, 2);
             If v_locationrec = 'nada' then
               erros := erros || '0002/008;';
             end if;
             If v_locationrec is null then
               erros := erros || '0003/008;';
             end if;
             v_namerec     := Extrai_Valor_XML(msg_resp, 'RecipientAuthorityForResponse', 'Name', 1, v_tipo, 2);
             If v_namerec = 'nada' then
               erros := erros || '0002/008;';
             end if;
             If v_namerec is null then
               erros := erros || '0003/008;';
             end if;
             v_typerec     := Extrai_Valor_XML(msg_resp, 'RecipientAuthorityForResponse', 'Type', 1, v_tipo, 2);
             If v_typerec = 'nada' then
               erros := erros || '0003/304;';
               erros := erros || '0001/008;';
             end if;
             If v_typerec is null then
               erros := erros || '0003/008;';
             end if;
             if v_type <> v_typerec then
                erros := erros || '2003/008;';
             end if;
           end if;

           if v_tipo in ('01','02','03','06','07','08') then
             v_msgtxtmand := visxml_cs.extrai_valor_xml(msg_resp,'MessageTextMandatory',null,null,1);
             If v_msgtxtmand = 'nada' then
                   erros := erros || '0003/009;';
             end if;
             If v_msgtxtmand is null then
               erros := erros || '0003/009;';
             end if;
           end if;
           if v_tipo in ('05') then
             v_msgtxtoptional := visxml_cs.extrai_valor_xml(msg_resp,'MessageTextOptional',null,null,1);
             If v_msgtxtoptional = 'nada' then
               erros := erros || '0002/010;';
             end if;
           end if;
           --Ajustes
           If v_namesend like 'Minist%' and v_refnumberexch like 'FRA%' then
                v_namesend := 'Ministère des Affaires Etrangères';
           elsif v_namesend like 'BAMF: Ankunftszentrum K%Bonn' and v_refnumberexch like 'DEU%' then
                v_namesend := 'BAMF: Ankunftszentrum Köln-Bonn';
           elsif v_namesend like 'BAMF-A%Bad Fallingbostel' and v_refnumberexch like 'DEU%' then
                v_namesend := 'BAMF-AuÃenst. Bad Fallingbostel';
           end if;
           --
           begin
           insert into temp_rec_vismail (messageid,tipo,refnumberexch,visappnumber,urgentcase,datetimesend,senderid,countrysend,locationsend,namesend,typesend,countryrec,locationrec,namerec,typerec,msgtxtmand,msgtxtoptional,retrycount,cri_uti,cri_dat,lido)
           values(v_messageid,v_tipo,v_refnumberexch,v_visappnumber,v_urgentcase,v_datetimesend,v_senderid,v_countrysend,v_locationsend,v_namesend,v_typesend,v_countryrec,v_locationrec,v_namerec,v_typerec,v_msgtxtmand,v_msgtxtoptional,v_retrycount,user,sysdate,'N');
           exception when dup_val_on_index then
                     erros := erros || '1002/999;';
           end;

           if v_tipo in ('01','02','03','04','05','06','07','08') then
             ocorr := Extrai_NrOcorrencias_XML(msg_resp, 'AttachmentGroup', 'MessageAttachments', null, 'TypeOfAttachment');
             if ocorr != 999 then
               for i in 1..ocorr loop
                  v_typedoc    := Extrai_Valor_Ocorr_XML(msg_resp, 'AttachmentGroup', 'TypeOfDocument', 'TypeOfDocument', i, null);
                  If v_typedoc is null then
                    erros := erros || '0003/803;';
                  end if;
                  begin
                  v_msgtext    := Extrai_Valor_Ocorr_XML(msg_resp, 'AttachmentGroup', 'MessageText', 'MessageText', i, null);
                  exception when others then
                    v_msgtext := 'sem texto';
                   end;
                  if v_msgtext is null and v_typedoc = '00' then
                     erros := erros || '0003/801;';
                     erros := erros || '0001/011;';
                  end if;
                  if v_msgtext is null then
                     v_msgtext := 'sem texto';
                  end if;

                  select substr(theclob,instr(theclob,'<MessageAttachments>',1,i)+20,instr(theclob,'</MessageAttachments>',1,i)-instr(theclob,'<MessageAttachments>',1,i)-20)
                  into v_msgattach
                  FROM TEMP_READ_VISMAIL where id = v_id;
                  v_msgattach := replace(v_msgattach,chr(13),'');
                  If v_msgattach is null then
                    erros := erros || '0003/802;';
                    erros := erros || '0001/011;';
                  end if;
                  v_typeattach := Extrai_Valor_Ocorr_XML(msg_resp, 'AttachmentGroup', 'TypeOfAttachment', 'TypeOfAttachment', i,null);
                  If v_typeattach is null then
                    erros := erros || '0003/804;';
                  end if;
                  select seq_vismail.nextval into v_id_trec from dual;
                  v_msgattach_fich := funcoes.ClobToBlob64(replace(v_msgattach,chr(10),''));
                  insert into trec_vismail_attachgroup(id_trec,refnumberexch,dir_comm,messageid,tipo,msgtext,msgattach,msgattach_fich,typedoc,typeattach,cri_uti,cri_dat)
                  values(v_id_trec,v_refnumberexch,'R',v_messageid,v_tipo,v_msgtext,v_msgattach,v_msgattach_fich,v_typedoc,v_typeattach,user,sysdate);
               end loop;
               if ocorr > 10 then
                 erros := erros || '9001/011;';
               end if;
             else
               ocorr := Extrai_NrOcorrencias_XML(msg_resp, 'AttachmentGroup', 'MessageAttachments', null, null);
               if ocorr = 0 then
                  erros := erros || '0003/802;';
                  erros := erros || '0001/011;';
               else
                  ocorr := Extrai_NrOcorrencias_XML(msg_resp, 'AttachmentGroup', 'TypeOfAttachment ', null, null);
                  if ocorr = 0 then
                     erros := erros || '0003/804;';
                     erros := erros || '0001/011;';
                  end if;
               end if;
             end if;
           end if;

           if v_tipo = '04' then
             ocorr := Extrai_NrOcorrencias_XML(msg_resp, 'AttachmentRequestGroup', 'TypeOfDocument', null, null);
             if ocorr != 999 then
               if ocorr = 0 then
                 erros := erros || '0003/603;';
                 erros := erros || '0001/012;';
               else
               for i in 1..ocorr loop
                  v_msgtext := Extrai_Valor_Ocorr_XML(msg_resp, 'AttachmentRequestGroup', 'MessageText', 'MessageText', i, null);
                  v_typedoc := Extrai_Valor_Ocorr_XML(msg_resp, 'AttachmentRequestGroup', 'TypeOfDocument', 'TypeOfDocument', i, null);
                  If v_typedoc is null then
                    erros := erros || '0003/603;';
                  end if;

                  insert into trec_vismail_attachreqgroup(messageid,tipo,msgtext,typedoc,cri_uti,cri_dat)
                  values(v_messageid,v_tipo,v_msgtext,v_typedoc,user,sysdate);
               end loop;
               end if;
             else
               erros := erros || '9001/012;';
             end if;
           end if;
           while substr(erros,9,1) = ';' loop
               if substr(erros,6,3) = '999' then
                  v_erros := null;
               else
                   v_erros := substr(erros,6,3);
               end if;
               insert into errordescription(messageid,tipo,descrerror,errorelem,cri_uti,cri_dat)
               values(v_messageid,99,substr(erros,1,4),v_erros,user,sysdate);
               erros := substr(erros,10);
           end loop;
           commit;
--exception
--         when others then
--              encontrou := pk_mail.fu_send_mail('pmarques99@gmail.com','ERRO TRATA RECEPCAO','Erro em VISMAIL.TRATARECEPCAO','noreplyvistos@dgaccp.pt');

end;
end;
/

prompt
prompt Creating package body VISXML
prompt ============================
prompt
CREATE OR REPLACE PACKAGE BODY RPV."VISXML"         is
  TYPE vTUSER_NODE IS TABLE OF xmldom.DOMNode;
  vUSER_NODE vTUSER_NODE := vTUSER_NODE();
  /*Constantes Globais*/
  vCcaminhoXML varchar2(100) := 'C:\PSAT\LOAD\ENVIO\';
  vCcaminhoXSD varchar2(100) := 'M:\Simulator\XSD\VIS\nsmessages\';
  vHEADER_MESSAGEID varchar2(20);
  -- Web Services a serem usados a parti de 24/03/2010
  -- Assyncronas
  v_web_service varchar2(2000):='http://192.168.177.130:18080/Broker-Project1-context-root/VISSyncPort';
  v_web_service_Unordered varchar2(2000):='http://192.168.177.130:18080/Broker-Project1-context-root/VISSyncPort';
  v_web_service_bio varchar2(2000):='http://192.168.177.130:18080/Broker-Project1-context-root/VISSyncPort';
  -- Syncronas
  v_web_service_retrieval varchar2(2000):='http://192.168.177.130:18080/Broker-Project1-context-root/VISSyncPort';
  v_web_service_search varchar2(2000):='http://192.168.177.130:18080/Broker-Project1-context-root/VISSyncPort';
  v_web_service_bio_sync varchar2(2000):='http://192.168.177.130:18080/Broker-Project1-context-root/VISSyncPort';

  msg_resp_vis varchar2(32767);
  vContract_env    tipo_comm_vistos.contract%type;
  vOperation_env   tipo_comm_vistos.operation%type;
  function Fdatetz(data in date) return varchar2 is
  begin
      if to_char(data,'HH24:MI:SS') = '00:00:00' then
          return(trim(to_char(data,'yyyy-mm-dd') || 'T' || '00:00:00.000Z'));
      else
          return(trim(to_char(data,'yyyy-mm-dd') || 'T' || to_char(data,'HH24:MI:SS') || to_char(systimestamp,'.FF3') || 'Z'));
      end if;
  end;
  function Fchartz(data in varchar2) return varchar2 is
  begin
       return(replace(data,'/','-') || 'T' || to_char(sysdate,'HH24:MI:SS') || to_char(systimestamp,'.FF3') || 'Z');
  end;
  function FtrataNome(pNome              in varchar2,
                      pPosicaoPretendida in varchar2 /*N = NOME A = Apelido*/)
    return formulario.apel%type is
    RNome formulario.apel%type;
  begin
    /*Se pretender o Nome*/
    if upper(pPosicaoPretendida) = 'N' then
      if instr(pNome,' ') = 0 then
        /*Não tem apelido*/
        rnome := pNome;
      else
        rnome := substr(Pnome,1,instr(pNome,' ', -1) - 1);
      end if;
      /*Se pretender o Apelido*/
    elsif upper(pPosicaoPretendida) = 'A' then
      if instr(pNome,' ') = 0 then
        /*Não tem apelido*/
        rnome := ' ';
      else
        rnome := substr(Pnome,instr(pNome,' ', -1) + 1);
      end if;
    else
      rnome := upper(pnome);
    end if;
    return(rnome);
  end;
  procedure PComum(p_returnValue   out xmldom.DOMDocument,vELEMENTOS_ROOT out xmldom.DOMElement,
                   identificador in varchar2, vHEADER_MESSAGEID out varchar2, vContract in varchar2, vOperation in varchar2,
                   vEndUserID in varchar2, vVariant in varchar2, vRole in varchar2, vTest in varchar2, ValRepresentanteID in varchar2 DEFAULT null) is
    vDOCUMENTO xmldom.DOMDocument;
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    /*Constantes*/
    vHEADER_DateTime          varchar2(25) := Fdatetz(SYSDATE);
    vHEADER_DaEndUserID       varchar2(50) := vEndUserID;
    vHEADER_DaUser            varchar2(7)  := '0022.01';
    vHEADER_Role              varchar2(7)  := vRole;
    vHEADER_DaSystemID        varchar2(50)  := 'PT NS';
    vHEADER_Contract          varchar2(7)  := vContract;
    vHEADER_Operation         varchar2(7)  := vOperation;
    vHEADER_DaRepresentedUser varchar2(100):= ValRepresentanteID;
    vHEADER_Variant           varchar2(4)  := vVariant;
    vHEADER_Test              varchar2(255)  := vTest;
    v_prefix_vis              posto.prefix_vis%type;

  begin
    vDOCUMENTO := xmldom.newDOMDocument;
    --xmldom.setVersion(vDOCUMENTO,
      --                xmldom.getVersion(vDOCUMENTO));
    --xmldom.setCharset(vDOCUMENTO,
      --                xmldom.getCharset(vDOCUMENTO));
    vUSER_NODE.EXTEND;
    vUSER_NODE(1) := xmldom.makeNode(vDOCUMENTO);
    /*Identificador*/
    vELEMENTOS_ROOT := xmldom.createElement(vDOCUMENTO,
                                            identificador);
    vUSER_NODE.EXTEND;
    vUSER_NODE(2) := xmldom.appendChild(vUSER_NODE(1),
                                        xmldom.makeNode(vELEMENTOS_ROOT));
    vUSER_NODE.EXTEND;
    /*Header*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Header');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));

    vUSER_NODE.EXTEND;
    /*vdtc:MessageID*/
    select prefix_vis into v_prefix_vis
    from posto
    where cod_pos = Taref.Busca_Param_Glo1(3,null);
    select v_prefix_vis || to_char(seq_vis_messageid.nextval,'FM0000000000009')
    into vHEADER_MESSAGEID from dual;
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:MessageID');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         vHEADER_MESSAGEID);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));

    /*vdtc:LogicalSessionID*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:LogicalSessionID');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         vHEADER_MESSAGEID);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));

    /*vdtc:DateTime*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:DateTime');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         vHEADER_DateTime);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));

    /*vdtc:EndUserID*/
    /*if vHEADER_DaEndUserID is not null then
       vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:EndUserID');
       vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
       vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         vHEADER_DaEndUserID);
       vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    end if;*/

    /*vdtc:User*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:User');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         vHEADER_DaUser);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*vdtc:EndUserRole*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:EndUserRole');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         vHEADER_Role);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));

    /*vdtc:SystemID*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:SystemID');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         vHEADER_DaSystemID);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));

    /*vdtc:Contract*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:Contract');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         vHEADER_Contract);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));

    /*vdtc:Operation*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:Operation');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         vHEADER_Operation);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));

    /*vdtc:RepresentedUser*/
    if vHEADER_DaRepresentedUser is not null then
       vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:RepresentedUser');
       vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
       vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         vHEADER_DaRepresentedUser);
       vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    end if;

    if vVariant is not null then
       /*vdtc:Variant*/
       vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:Variant');
       vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
       vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         vHEADER_Variant);
       vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    end if;
    if vTest is not null then
       /*vdtc:TestCaseID*/
       vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:TestCaseID');
       vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
       vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                             vHEADER_Test);
       vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    end if;
    vUSER_NODE.delete(3,4);

    /*Fim do Header*/
    p_returnValue := vDOCUMENTO;
  end;
  procedure PComBodySearch(vDOCUMENTO in out xmldom.DOMDocument, ano_form1 in number, num_form1 in number, identificador in varchar2) is
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    /*Constantes*/
    vMaxDossiers VARCHAR2(10) := '999';
    vMaxMatches  VARCHAR2(10) := '99';
    v_valor_vis  conversao_vis.valor_vis%type;
    v_cid_pos    posto.cid_pos%type;
    v_des_pos    posto.des_pos%type;
    v_loa_id     posto.loa_id%type;
  BEGIN
    select funcoes.obtem_valor_vis(p.cod_pais,'PAIS'), p.cid_pos, p.des_pos, p.loa_id
    into  v_valor_vis, v_cid_pos, v_des_pos, v_loa_id
    from formulario f, posto p
    where f.cod_pos = p.cod_pos
    and ano_form = ano_form1 and num_form = num_form1;

    /*request*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Request');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    /*Authority*/
    vUSER_NODE.extend;
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Authority');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));

    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:AuthorityUniqueID');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         v_loa_id);
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(5),
                                        xmldom.makeNode(vTEXTO_ITEM));

    vUSER_NODE.extend;
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:AuthorityLocation');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vELEMTENTO_ITEM));

    vUSER_NODE.extend;
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:Country');
    vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         v_valor_vis);
    vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(6),
                                        xmldom.makeNode(vTEXTO_ITEM));

    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:Place');
    vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         v_cid_pos);
    vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(6),
                                        xmldom.makeNode(vTEXTO_ITEM));

    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:AuthorityName');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         'MNE');
                                         --v_des_pos || ' ' || v_cid_pos);
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(5),
                                        xmldom.makeNode(vTEXTO_ITEM));

    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:AuthorityType');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         '0001.01');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(5),
                                        xmldom.makeNode(vTEXTO_ITEM));

    /*MaxDossierCap*/
    /*vUSER_NODE.extend;
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'MaxDossierCap');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         vMaxDossiers);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));*/
    /*MaxMatchesInDossiers*/
    /*vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'MaxMatchesInDossier');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         vMaxMatches);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));*/

    if identificador = 'NSSearch' then
       /*ExcludeAppsWithFingerprints*/
       vUSER_NODE.extend;
       vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'ExcludeAppsWithFingerprints');
       vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
       vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         'false');
       vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    end if;

    /*OptionList*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'OptionList');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdta:FacialImageDataSourceIncluded');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         'true');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(5),
                                        xmldom.makeNode(vTEXTO_ITEM));

    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdta:FingerprintSetDataSourceIncluded');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         'false');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(5),
                                        xmldom.makeNode(vTEXTO_ITEM));

    /*Action*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'Action');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

  end;
  procedure PSearchAsylumExamination(pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,
                                     pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE,
                                     msg_resp_vis OUT clob, vRole in varchar2, TestId in varchar2) is
    vDOCUMENTO      xmldom.DOMDocument;
    vCONTADOR       NUMBER;
    vELEMENTOS_ROOT xmldom.DOMElement;
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    v_clob          clob:='xxx';
    CURSOR CLREGS1 IS
      select A.*
        from FORMULARIO A
       WHERE A.ANO_FORM = pANO_FORM AND
             A.NUM_FORM = pNUM_FORM;
    CURSOR CLREGS2 IS
      select B.*
        from FORM_P B
       WHERE B.ANO_FORM = pANO_FORM AND
             B.NUM_FORM = pNUM_FORM;
    CREGS1    FORMULARIO%ROWTYPE;
    CREGS2    FORM_P%ROWTYPE;
    vCOD_CONC concelho_sef.des_conc%TYPE;
    v_des_pais pais.des_pais%TYPE;
    ValRepresentanteID conversao_vis.valor_vis%type;
  BEGIN
    /*VERIFICAR A EXISTENCIA DO REGISTO*/
    SELECT COUNT(*)
      INTO vCONTADOR
      FROM FORMULARIO A
     WHERE ANO_FORM = pANO_FORM AND
           NUM_FORM = pNUM_FORM AND
           ROWNUM = 1;
    IF vCONTADOR = 1
    THEN
      OPEN CLREGS1;
      FETCH CLREGS1
        INTO CREGS1;
      IF CLREGS1%NOTFOUND
      THEN
        RAISE NO_DATA_FOUND;
      END IF;
      CLOSE CLREGS1;
      OPEN CLREGS2;
      FETCH CLREGS2
        INTO CREGS2;
      CLOSE CLREGS2;
      select cs.des_conc
      INTO vCOD_CONC
      from concelho_sef cs, direccao_sef ds
      where cs.cod_direc = ds.cod_direc AND
      cs.cod_conc = CREGS2.COD_CONC;

      select des_pais into v_des_pais
      from pais where cod_pais = CREGS1.cod_pais_emi_doc;

      Funcoes.obtem_header_det('NSSearch',vContract_env, vOperation_env);
      if CREGS1.COD_PAIS_SCH_REPRES is not null then
        ValRepresentanteID := funcoes.obtem_valor_vis(CREGS1.COD_PAIS_SCH_REPRES,'CT70_USER');
      end if;
      PComum(vDOCUMENTO,vELEMENTOS_ROOT,'NSSearch',vHEADER_MESSAGEID,vContract_env, vOperation_env, 'SearchAsylumExamination', '0006',vRole,TestId,ValRepresentanteID);

      PComBodySearch(vDOCUMENTO, pANO_FORM, pNUM_FORM,'NSSearch');
      if CREGS2.APEL_NASC = '+'
      then
        CREGS2.APEL_NASC := CREGS1.APEL;
      end if;

      /*AsylumExamination*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'AsylumExamination');
      vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      /*CriteriaApplicant*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'CriteriaApplicant');
      vUSER_NODE.extend;
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      /*vdta:AnyName*/
      vUSER_NODE.extend;
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:AnyName');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'true');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:Surname*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Surname');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdta:SearchCriteria*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
      vUSER_NODE.extend;
      xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0004');-- Assumi 'Exact' ST03_SearchMode

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           CREGS1.APEL);
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:Firstnames*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Firstnames');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdta:SearchCriteria*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
      vUSER_NODE.extend;
      xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0004');-- Assumi 'Exact' ST03_SearchMode

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           CREGS1.NOME);
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));


      /*vdta:Sex*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Sex');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis(CREGS1.Sexo,'SEXO'));
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:DateOfBirth*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:DateOfBirth');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdtc:From*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:From');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           substr(CREGS1.DAT_NASC,1,4) || substr(CREGS1.DAT_NASC,6,2) || substr(CREGS1.DAT_NASC,9,2));
                                           --TO_CHAR(TO_DATE(CREGS1.DAT_NASC,'YYYY/MM/DD'),'YYYYMMDD'));
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));
      /*vdtc:To*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:To');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           substr(CREGS1.DAT_NASC,1,4) || substr(CREGS1.DAT_NASC,6,2) || substr(CREGS1.DAT_NASC,9,2));
                                           --TO_CHAR(TO_DATE(CREGS1.DAT_NASC,'YYYY/MM/DD'),'YYYYMMDD'));
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdtc:IgnoreInexact*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:IgnoreInexact');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'false');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdta:PlaceOfBirth*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:PlaceOfBirth');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                             xmldom.makeNode(vELEMTENTO_ITEM));

      /*vdta:Country*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Country');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis(CREGS2.COD_PAIS_NASC,'PAIS_NAC'));
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*CriteriaTravelDocument*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'CriteriaTravelDocument');
      vUSER_NODE.extend;
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      /*vdta:TypeOfTravelDocument*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:TypeOfTravelDocument');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis(CREGS1.COD_DOC,'TIPO_PASS'));
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdta:TravelDocumentNumber*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:TravelDocumentNumber');
      vUSER_NODE.extend;
      xmldom.setAttribute(vELEMTENTO_ITEM,
                          'SearchMode',
                          '0004');-- Assumi 'Exact' ST03_SearchMode

      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           CREGS1.NUM_DOC_VIAG);
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdta:IssuingAuthorityOfTravelDocument*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:IssuingAuthorityOfTravelDocument');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdta:SearchCriteria*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
      vUSER_NODE.extend;
      xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0004');-- Assumi 'Exact' ST03_SearchMode

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           v_des_pais);
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:ExpiringDateOfTravelDocument*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:ExpiringDateOfTravelDocument');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                             xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdtc:From*/
     vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:From');
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
     vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         to_char(CREGS2.VALI_DOC_VIAG,
                                                 'yyyymmdd'));
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));
     /*vdtc:To*/
     vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:To');
     vUSER_NODE.extend;
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
     vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                       to_char(CREGS2.VALI_DOC_VIAG,
                                                 'yyyymmdd'));
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdtc:IgnoreInexact*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:IgnoreInexact');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'false');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdta:IssuingDateOfTravelDocument*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:IssuingDateOfTravelDocument');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                             xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdtc:From*/
     vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:From');
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
     vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         substr(CREGS2.DAT_EMI_DOC,1,4) || substr(CREGS2.DAT_EMI_DOC,6,2) || substr(CREGS2.DAT_EMI_DOC,9,2));
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));
     /*vdtc:To*/
     vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:To');
     vUSER_NODE.extend;
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
     vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                       substr(CREGS2.DAT_EMI_DOC,1,4) || substr(CREGS2.DAT_EMI_DOC,6,2) || substr(CREGS2.DAT_EMI_DOC,9,2));
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdtc:IgnoreInexact*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:IgnoreInexact');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'false');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*NationalityAtBirth*/
      vUSER_NODE.extend;
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'NationalityAtBirth');
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis(CREGS2.COD_PAIS_NASC,'PAIS_NAC'));
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*NationalityForApplication*/
      vUSER_NODE.extend;
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'NationalityForApplication');
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis(CREGS1.COD_PAIS_NAC_1,'PAIS_NAC'));
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*Escrever para ficheiro*/
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdta',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Application');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdtc',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Common');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:xsi',
                                          'http://www.w3.org/2001/XMLSchema-instance');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xsi:schemaLocation',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages' ||
                                          chr(13) || vCcaminhoXSD ||
                                          'NSSearch.xsd');

      xmldom.writeToFile(vDOCUMENTO,
                         vCcaminhoXML || 'SearchAsylumExamination.xml');
      xmldom.writeToClob(vDOCUMENTO, v_clob);
      select replace(v_clob,'Header xmlns=""','Header') into v_clob from dual;
      select replace(v_clob,'Request xmlns=""','Request') into v_clob from dual;
      insert into temp_env_vis (id_env_vis,ano_form,num_form,cod_comm_vistos,message_xml,cri_uti,cri_dat)
      values(vHEADER_MESSAGEID,pANO_FORM,pNUM_FORM,3,v_clob,user,sysdate);
      --commit;
      --Chama VIS
      msg_resp_vis := funcoes.Envia_Vis(null,v_web_service_search,null,vHEADER_MESSAGEID);

      /*Libertar os recursos*/
      xmldom.freeDocument(vDOCUMENTO);
    ELSE
      RAISE NO_DATA_FOUND;
    END IF;
  END;
  procedure PSearchAsylumResponsibility(pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,
                                        pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE,
                                        pDateAsylum in varchar2, msg_resp_vis OUT clob, vRole in varchar2,TestId in varchar2) is
    vDOCUMENTO      xmldom.DOMDocument;
    vCONTADOR       NUMBER;
    vELEMENTOS_ROOT xmldom.DOMElement;
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    v_clob          clob:='xxx';
    CURSOR CLREGS1 IS
      select A.*
        from FORMULARIO A
       WHERE A.ANO_FORM = pANO_FORM AND
             A.NUM_FORM = pNUM_FORM;
    CURSOR CLREGS2 IS
      select B.*
        from FORM_P B
       WHERE B.ANO_FORM = pANO_FORM AND
             B.NUM_FORM = pNUM_FORM;
    CREGS1    FORMULARIO%ROWTYPE;
    CREGS2    FORM_P%ROWTYPE;
    vCOD_CONC concelho_sef.des_conc%TYPE;
    v_des_pais pais.des_pais%TYPE;
    ValRepresentanteID conversao_vis.valor_vis%type;
  BEGIN
    /*vERIFICAR A EXISTENCIA DO REGISTO*/
    SELECT COUNT(*)
      INTO vCONTADOR
      FROM FORMULARIO A
     WHERE ANO_FORM = pANO_FORM AND
           NUM_FORM = pNUM_FORM AND
           ROWNUM = 1;
    IF vCONTADOR = 1
    THEN
      OPEN CLREGS1;
      FETCH CLREGS1
        INTO CREGS1;
      IF CLREGS1%NOTFOUND
      THEN
        RAISE NO_DATA_FOUND;
      END IF;
      CLOSE CLREGS1;
      OPEN CLREGS2;
      FETCH CLREGS2
        INTO CREGS2;
      CLOSE CLREGS2;
      select cs.des_conc
      INTO vCOD_CONC
      from concelho_sef cs, direccao_sef ds
      where cs.cod_direc = ds.cod_direc AND
      cs.cod_conc = CREGS2.COD_CONC;

      select des_pais into v_des_pais
      from pais where cod_pais = CREGS1.cod_pais_emi_doc;
      Funcoes.obtem_header_det('NSSearch',vContract_env, vOperation_env);
      if CREGS1.COD_PAIS_SCH_REPRES is not null then
        ValRepresentanteID := funcoes.obtem_valor_vis(CREGS1.COD_PAIS_SCH_REPRES,'CT70_USER');
      end if;
      PComum(vDOCUMENTO,vELEMENTOS_ROOT,'NSSearch',vHEADER_MESSAGEID,vContract_env, vOperation_env, 'SearchAsylumResponsibility', '0005',vRole,TestId,ValRepresentanteID);

      PComBodySearch(vDOCUMENTO, pANO_FORM, pNUM_FORM,'NSSearch');
      if CREGS2.APEL_NASC = '+'
      then
        CREGS2.APEL_NASC := CREGS1.APEL;
      end if;

      /*AsylumResponsibility*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'AsylumResponsibility');
      vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      /*CriteriaApplicant*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'CriteriaApplicant');
      vUSER_NODE.extend;
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      /*vdta:AnyName*/
      vUSER_NODE.extend;
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:AnyName');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'true');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:Surname*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Surname');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdta:SearchCriteria*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
      vUSER_NODE.extend;
      xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0004');-- Assumi 'Exact' ST03_SearchMode

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           CREGS1.APEL);
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:Firstnames*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Firstnames');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdta:SearchCriteria*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
      vUSER_NODE.extend;
      xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0004');-- Assumi 'Exact' ST03_SearchMode

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           CREGS1.NOME);
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));


      /*vdta:Sex*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Sex');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis(CREGS1.Sexo,'SEXO'));
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:DateOfBirth*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:DateOfBirth');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdtc:From*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:From');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           TO_CHAR(TO_DATE(CREGS1.DAT_NASC,
                                                           'YYYY/MM/DD'),
                                                   'YYYYMMDD'));
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));
      /*vdtc:To*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:To');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           substr(CREGS1.DAT_NASC,1,4) || substr(CREGS1.DAT_NASC,6,2) || substr(CREGS1.DAT_NASC,9,2));
                                           --TO_CHAR(TO_DATE(CREGS1.DAT_NASC,'YYYY/MM/DD'),'YYYYMMDD'));
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdtc:IgnoreInexact*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:IgnoreInexact');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'false');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdta:PlaceOfBirth*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:PlaceOfBirth');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                             xmldom.makeNode(vELEMTENTO_ITEM));

      /*vdta:Country*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Country');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis(CREGS2.COD_PAIS_NASC,'PAIS_NAC'));
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*CriteriaTravelDocument*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'CriteriaTravelDocument');
      vUSER_NODE.extend;
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      /*vdta:TypeOfTravelDocument*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:TypeOfTravelDocument');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis(CREGS1.COD_DOC,'TIPO_PASS'));
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdta:TravelDocumentNumber*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:TravelDocumentNumber');
      vUSER_NODE.extend;
      xmldom.setAttribute(vELEMTENTO_ITEM,
                          'SearchMode',
                          '0004');-- Assumi 'Exact' ST03_SearchMode

      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           CREGS1.NUM_DOC_VIAG);
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdta:IssuingAuthorityOfTravelDocument*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:IssuingAuthorityOfTravelDocument');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdta:SearchCriteria*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
      vUSER_NODE.extend;
      xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0004');-- Assumi 'Exact' ST03_SearchMode

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           v_des_pais);
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:ExpiringDateOfTravelDocument*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:ExpiringDateOfTravelDocument');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                             xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdtc:From*/
     vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:From');
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
     vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         to_char(CREGS2.VALI_DOC_VIAG,
                                                 'yyyymmdd'));
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));
     /*vdtc:To*/
     vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:To');
     vUSER_NODE.extend;
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
     vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                       to_char(CREGS2.VALI_DOC_VIAG,
                                                 'yyyymmdd'));
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdtc:IgnoreInexact*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:IgnoreInexact');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'false');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdta:IssuingDateOfTravelDocument*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:IssuingDateOfTravelDocument');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                             xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdtc:From*/
     vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:From');
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
     vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         substr(CREGS2.DAT_EMI_DOC,1,4) || substr(CREGS2.DAT_EMI_DOC,6,2) || substr(CREGS2.DAT_EMI_DOC,9,2));
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));
     /*vdtc:To*/
     vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:To');
     vUSER_NODE.extend;
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
     vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                       substr(CREGS2.DAT_EMI_DOC,1,4) || substr(CREGS2.DAT_EMI_DOC,6,2) || substr(CREGS2.DAT_EMI_DOC,9,2));
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdtc:IgnoreInexact*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:IgnoreInexact');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'false');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*DateOfAsylumApplication*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'DateOfAsylumApplication');
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,Fdatetz(to_date(pDateAsylum,
                                                         'yyyy/mm/dd hh24:mi:ss')));
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*NationalityAtBirth*/
      vUSER_NODE.extend;
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'NationalityAtBirth');
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis(CREGS2.COD_PAIS_NASC,'PAIS_NAC'));
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*NationalityForApplication*/
      vUSER_NODE.extend;
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'NationalityForApplication');
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis(CREGS1.COD_PAIS_NAC_1,'PAIS_NAC'));
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*Escrever para ficheiro*/
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdta',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Application');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdtc',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Common');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:xsi',
                                          'http://www.w3.org/2001/XMLSchema-instance');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xsi:schemaLocation',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages' ||
                                          chr(13) || vCcaminhoXSD ||
                                          'NSSearch.xsd');

      xmldom.writeToFile(vDOCUMENTO,
                         vCcaminhoXML || 'SearchAsylumResponsibility.xml');
      xmldom.writeToClob(vDOCUMENTO, v_clob);
      select replace(v_clob,'Header xmlns=""','Header') into v_clob from dual;
      select replace(v_clob,'Request xmlns=""','Request') into v_clob from dual;
      insert into temp_env_vis (id_env_vis,ano_form,num_form,cod_comm_vistos,message_xml,cri_uti,cri_dat)
      values(vHEADER_MESSAGEID,pANO_FORM,pNUM_FORM,3,v_clob,user,sysdate);
      --commit;
      --Chama VIS
      msg_resp_vis := funcoes.Envia_Vis(null,v_web_service_search,null,vHEADER_MESSAGEID);

      /*Libertar os recursos*/
      xmldom.freeDocument(vDOCUMENTO);
    ELSE
      RAISE NO_DATA_FOUND;
    END IF;
  END;
  procedure PSearchIdentificationBorder(pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,
                                        pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE,
                                        msg_resp_vis OUT clob, vRole in varchar2, TestId in varchar2) is
    vDOCUMENTO      xmldom.DOMDocument;
    vCONTADOR       NUMBER;
    vELEMENTOS_ROOT xmldom.DOMElement;
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    v_clob          clob:='xxx';
    CURSOR CLREGS1 IS
      select A.*
        from FORMULARIO A
       WHERE A.ANO_FORM = pANO_FORM AND
             A.NUM_FORM = pNUM_FORM;
    CURSOR CLREGS2 IS
      select B.*
        from FORM_P B
       WHERE B.ANO_FORM = pANO_FORM AND
             B.NUM_FORM = pNUM_FORM;
    CREGS1    FORMULARIO%ROWTYPE;
    CREGS2    FORM_P%ROWTYPE;
    vCOD_CONC concelho_sef.des_conc%TYPE;
    v_des_pais pais.des_pais%TYPE;
    ValRepresentanteID conversao_vis.valor_vis%type;
  BEGIN
    /*vERIFICAR A EXISTENCIA DO REGISTO*/
    SELECT COUNT(*)
      INTO vCONTADOR
      FROM FORMULARIO A
     WHERE ANO_FORM = pANO_FORM AND
           NUM_FORM = pNUM_FORM AND
           ROWNUM = 1;
    IF vCONTADOR = 1
    THEN

      OPEN CLREGS1;
      FETCH CLREGS1
        INTO CREGS1;
      IF CLREGS1%NOTFOUND
      THEN
        RAISE NO_DATA_FOUND;
      END IF;
      CLOSE CLREGS1;
      OPEN CLREGS2;
      FETCH CLREGS2
        INTO CREGS2;
      CLOSE CLREGS2;
      select cs.des_conc
      INTO vCOD_CONC
      from concelho_sef cs, direccao_sef ds
      where cs.cod_direc = ds.cod_direc AND
      cs.cod_conc = CREGS2.COD_CONC;

      select des_pais into v_des_pais
      from pais where cod_pais = CREGS1.cod_pais_emi_doc;
      Funcoes.obtem_header_det('NSSearch',vContract_env, vOperation_env);
      if CREGS1.COD_PAIS_SCH_REPRES is not null then
        ValRepresentanteID := funcoes.obtem_valor_vis(CREGS1.COD_PAIS_SCH_REPRES,'CT70_USER');
      end if;
      PComum(vDOCUMENTO,vELEMENTOS_ROOT,'NSSearch',vHEADER_MESSAGEID,vContract_env, vOperation_env, 'SearchIdentificationBorder', '0001',vRole,TestId,ValRepresentanteID);

      PComBodySearch(vDOCUMENTO, pANO_FORM, pNUM_FORM,'NSSearch');
      if CREGS2.APEL_NASC = '+'
      then
        CREGS2.APEL_NASC := CREGS1.APEL;
      end if;

      /*IdentificationBorder*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'IdentificationBorder');
      vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      /*CriteriaApplicant*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'CriteriaApplicant');
      vUSER_NODE.extend;
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      /*vdta:AnyName*/
      vUSER_NODE.extend;
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:AnyName');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'true');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:Surname*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Surname');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdta:SearchCriteria*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
      vUSER_NODE.extend;
      xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0002');-- Assumi 'Exact' ST03_SearchMode

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           CREGS1.APEL);
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:Firstnames*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Firstnames');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdta:SearchCriteria*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
      vUSER_NODE.extend;
      xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0002');-- Assumi 'Exact' ST03_SearchMode

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           CREGS1.NOME);
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:DateOfBirth*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:DateOfBirth');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdtc:From*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:From');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           substr(CREGS1.DAT_NASC,1,4) || substr(CREGS1.DAT_NASC,6,2) || substr(CREGS1.DAT_NASC,9,2));
                                           --TO_CHAR(TO_DATE(CREGS1.DAT_NASC,'YYYY/MM/DD'),'YYYYMMDD'));
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));
      /*vdtc:To*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:To');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           substr(CREGS1.DAT_NASC,1,4) || substr(CREGS1.DAT_NASC,6,2) || substr(CREGS1.DAT_NASC,9,2));
                                           --TO_CHAR(TO_DATE(CREGS1.DAT_NASC,'YYYY/MM/DD'),'YYYYMMDD'));
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdtc:IgnoreInexact*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:IgnoreInexact');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'false');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdta:PlaceOfBirth*/
      /*vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:PlaceOfBirth');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                             xmldom.makeNode(vELEMTENTO_ITEM));*/

      /*vdta:Country*/
      /*vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Country');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis(CREGS2.COD_PAIS_NASC,'PAIS_NAC'));
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));*/

      /*CriteriaTravelDocument*/
      /*vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'CriteriaTravelDocument');
      vUSER_NODE.extend;
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));*/
      /*vdta:TypeOfTravelDocument*/
      /*vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:TypeOfTravelDocument');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis(CREGS1.COD_DOC,'TIPO_PASS'));
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));*/

      /*vdta:TravelDocumentNumber*/
      /*vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:TravelDocumentNumber');
      vUSER_NODE.extend;
      xmldom.setAttribute(vELEMTENTO_ITEM,
                          'SearchMode',
                          '0002');

      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           CREGS1.NUM_DOC_VIAG);
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));*/

      /*vdta:IssuingAuthorityOfTravelDocument*/
      /*vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:IssuingAuthorityOfTravelDocument');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));*/

     /*vdta:SearchCriteria*/
      /*vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
      vUSER_NODE.extend;
      xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0002');

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           v_des_pais);
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));*/

     /*vdta:ExpiringDateOfTravelDocument*/
      /*vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:ExpiringDateOfTravelDocument');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                             xmldom.makeNode(vELEMTENTO_ITEM));*/

     /*vdtc:From*/
     /*vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:From');
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
     vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         to_char(CREGS2.VALI_DOC_VIAG,
                                                 'yyyymmdd'));
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));*/
     /*vdtc:To*/
     /*vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:To');
     vUSER_NODE.extend;
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
     vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                       to_char(CREGS2.VALI_DOC_VIAG,
                                                 'yyyymmdd'));
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));*/

      /*vdtc:IgnoreInexact*/
      /*vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:IgnoreInexact');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'false');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));*/

      /*vdta:IssuingDateOfTravelDocument*/
      /*vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:IssuingDateOfTravelDocument');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                             xmldom.makeNode(vELEMTENTO_ITEM));*/

     /*vdtc:From*/
     /*vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:From');
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
     vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         substr(CREGS2.DAT_EMI_DOC,1,4) || substr(CREGS2.DAT_EMI_DOC,6,2) || substr(CREGS2.DAT_EMI_DOC,9,2));
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));*/
     /*vdtc:To*/
     /*vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:To');
     vUSER_NODE.extend;
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
     vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                       substr(CREGS2.DAT_EMI_DOC,1,4) || substr(CREGS2.DAT_EMI_DOC,6,2) || substr(CREGS2.DAT_EMI_DOC,9,2));
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));*/

      /*vdtc:IgnoreInexact*/
      /*vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:IgnoreInexact');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'false');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));*/

      /*NationalityAtBirth*/
      /*vUSER_NODE.extend;
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'NationalityAtBirth');
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis(CREGS2.COD_PAIS_NASC,'PAIS_NAC'));
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vTEXTO_ITEM));*/

      /*NationalityForApplication*/
      /*vUSER_NODE.extend;
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'NationalityForApplication');
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis(CREGS1.COD_PAIS_NAC_1,'PAIS_NAC'));
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vTEXTO_ITEM));*/

      /*Escrever para ficheiro*/
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdta',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Application');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdtc',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Common');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:xsi',
                                          'http://www.w3.org/2001/XMLSchema-instance');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xsi:schemaLocation',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages' ||
                                          chr(13) || vCcaminhoXSD ||
                                          'NSSearch.xsd');

      /*xmldom.writeToFile(vDOCUMENTO,
                         vCcaminhoXML || 'SearchIdentificationBorder.xml');*/
      xmldom.writeToClob(vDOCUMENTO, v_clob);
      select replace(v_clob,'Header xmlns=""','Header') into v_clob from dual;
      select replace(v_clob,'Request xmlns=""','Request') into v_clob from dual;
      --funcoes.write_clob_tofile(vCcaminhoXML => vCcaminhoXML,vfilename => 'SearchIdentificationBorder',v_clob => v_clob);
      insert into temp_env_vis (id_env_vis,ano_form,num_form,cod_comm_vistos,message_xml,cri_uti,cri_dat)
      values(vHEADER_MESSAGEID,pANO_FORM,pNUM_FORM,3,v_clob,user,sysdate);
      --commit;
      --Chama VIS
      msg_resp_vis := funcoes.Envia_Vis(null,v_web_service_search,null,vHEADER_MESSAGEID);

      /*Libertar os recursos*/
      xmldom.freeDocument(vDOCUMENTO);
    ELSE
      RAISE NO_DATA_FOUND;
    END IF;
  END;
  procedure PSearchIdentificationTerrit(pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,
                                        pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE,
                                        msg_resp_vis OUT clob, vRole in varchar2,TestId in varchar2) is
    vDOCUMENTO      xmldom.DOMDocument;
    vCONTADOR       NUMBER;
    vELEMENTOS_ROOT xmldom.DOMElement;
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    v_clob          clob:='xxx';
    CURSOR CLREGS1 IS
      select A.*
        from FORMULARIO A
       WHERE A.ANO_FORM = pANO_FORM AND
             A.NUM_FORM = pNUM_FORM;
    CURSOR CLREGS2 IS
      select B.*
        from FORM_P B
       WHERE B.ANO_FORM = pANO_FORM AND
             B.NUM_FORM = pNUM_FORM;
    CREGS1    FORMULARIO%ROWTYPE;
    CREGS2    FORM_P%ROWTYPE;
    vCOD_CONC concelho_sef.des_conc%TYPE;
    v_des_pais pais.des_pais%TYPE;
    ValRepresentanteID conversao_vis.valor_vis%type;
  BEGIN
    /*vERIFICAR A EXISTENCIA DO REGISTO*/
    SELECT COUNT(*)
      INTO vCONTADOR
      FROM FORMULARIO A
     WHERE ANO_FORM = pANO_FORM AND
           NUM_FORM = pNUM_FORM AND
           ROWNUM = 1;
    IF vCONTADOR = 1
    THEN

      OPEN CLREGS1;
      FETCH CLREGS1
        INTO CREGS1;
      IF CLREGS1%NOTFOUND
      THEN
        RAISE NO_DATA_FOUND;
      END IF;
      CLOSE CLREGS1;
      OPEN CLREGS2;
      FETCH CLREGS2
        INTO CREGS2;
      CLOSE CLREGS2;
      select cs.des_conc
      INTO vCOD_CONC
      from concelho_sef cs, direccao_sef ds
      where cs.cod_direc = ds.cod_direc AND
      cs.cod_conc = CREGS2.COD_CONC;

      select des_pais into v_des_pais
      from pais where cod_pais = CREGS1.cod_pais_emi_doc;
      Funcoes.obtem_header_det('NSSearch',vContract_env, vOperation_env);
      if CREGS1.COD_PAIS_SCH_REPRES is not null then
        ValRepresentanteID := funcoes.obtem_valor_vis(CREGS1.COD_PAIS_SCH_REPRES,'CT70_USER');
      end if;
      PComum(vDOCUMENTO,vELEMENTOS_ROOT,'NSSearch',vHEADER_MESSAGEID,vContract_env, vOperation_env, 'SearchIdentificationTerritory', '0002',vRole,TestId,ValRepresentanteID);
      PComBodySearch(vDOCUMENTO, pANO_FORM, pNUM_FORM,'NSSearch');
      if CREGS2.APEL_NASC = '+'
      then
        CREGS2.APEL_NASC := CREGS1.APEL;
      end if;

      /*IdentificationTerritory*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'IdentificationTerritory');
      vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      /*CriteriaApplicant*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'CriteriaApplicant');
      vUSER_NODE.extend;
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      /*vdta:AnyName*/
      vUSER_NODE.extend;
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:AnyName');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'true');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:Surname*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Surname');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdta:SearchCriteria*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
      vUSER_NODE.extend;
      xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0004');-- Assumi 'Exact' ST03_SearchMode

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           CREGS1.APEL);
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:Firstnames*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Firstnames');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdta:SearchCriteria*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
      vUSER_NODE.extend;
      xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0004');-- Assumi 'Exact' ST03_SearchMode

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           CREGS1.NOME);
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));


      /*vdta:Sex*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Sex');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis(CREGS1.Sexo,'SEXO'));
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:DateOfBirth*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:DateOfBirth');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdtc:From*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:From');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           substr(CREGS1.DAT_NASC,1,4) || substr(CREGS1.DAT_NASC,6,2) || substr(CREGS1.DAT_NASC,9,2));
                                           --TO_CHAR(TO_DATE(CREGS1.DAT_NASC,'YYYY/MM/DD'),'YYYYMMDD'));
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));
      /*vdtc:To*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:To');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           substr(CREGS1.DAT_NASC,1,4) || substr(CREGS1.DAT_NASC,6,2) || substr(CREGS1.DAT_NASC,9,2));
                                           --TO_CHAR(TO_DATE(CREGS1.DAT_NASC,'YYYY/MM/DD'),'YYYYMMDD'));
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdtc:IgnoreInexact*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:IgnoreInexact');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'false');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdta:PlaceOfBirth*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:PlaceOfBirth');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                             xmldom.makeNode(vELEMTENTO_ITEM));

      /*vdta:Country*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Country');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis(CREGS2.COD_PAIS_NASC,'PAIS_NAC'));
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*CriteriaTravelDocument*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'CriteriaTravelDocument');
      vUSER_NODE.extend;
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      /*vdta:TypeOfTravelDocument*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:TypeOfTravelDocument');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis(CREGS1.COD_DOC,'TIPO_PASS'));
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdta:TravelDocumentNumber*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:TravelDocumentNumber');
      vUSER_NODE.extend;
      xmldom.setAttribute(vELEMTENTO_ITEM,
                          'SearchMode',
                          '0004');-- Assumi 'Exact' ST03_SearchMode

      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           CREGS1.NUM_DOC_VIAG);
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdta:IssuingAuthorityOfTravelDocument*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:IssuingAuthorityOfTravelDocument');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdta:SearchCriteria*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
      vUSER_NODE.extend;
      xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0004');-- Assumi 'Exact' ST03_SearchMode

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           v_des_pais);
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:ExpiringDateOfTravelDocument*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:ExpiringDateOfTravelDocument');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                             xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdtc:From*/
     vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:From');
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
     vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         to_char(CREGS2.VALI_DOC_VIAG,
                                                 'yyyymmdd'));
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));
     /*vdtc:To*/
     vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:To');
     vUSER_NODE.extend;
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
     vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                       to_char(CREGS2.VALI_DOC_VIAG,
                                                 'yyyymmdd'));
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdtc:IgnoreInexact*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:IgnoreInexact');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'false');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdta:IssuingDateOfTravelDocument*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:IssuingDateOfTravelDocument');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                             xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdtc:From*/
     vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:From');
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
     vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         substr(CREGS2.DAT_EMI_DOC,1,4) || substr(CREGS2.DAT_EMI_DOC,6,2) || substr(CREGS2.DAT_EMI_DOC,9,2));
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));
     /*vdtc:To*/
     vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:To');
     vUSER_NODE.extend;
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
     vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                       substr(CREGS2.DAT_EMI_DOC,1,4) || substr(CREGS2.DAT_EMI_DOC,6,2) || substr(CREGS2.DAT_EMI_DOC,9,2));
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdtc:IgnoreInexact*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:IgnoreInexact');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'false');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*NationalityAtBirth*/
      vUSER_NODE.extend;
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'NationalityAtBirth');
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis(CREGS2.COD_PAIS_NASC,'PAIS_NAC'));
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*NationalityForApplication*/
      vUSER_NODE.extend;
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'NationalityForApplication');
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis(CREGS1.COD_PAIS_NAC_1,'PAIS_NAC'));
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*Escrever para ficheiro*/
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdta',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Application');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdtc',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Common');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:xsi',
                                          'http://www.w3.org/2001/XMLSchema-instance');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xsi:schemaLocation',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages' ||
                                          chr(13) || vCcaminhoXSD ||
                                          'NSSearch.xsd');

      xmldom.writeToFile(vDOCUMENTO,
                         vCcaminhoXML || 'SearchIdentificationTerritory.xml');
      xmldom.writeToClob(vDOCUMENTO, v_clob);
      select replace(v_clob,'Header xmlns=""','Header') into v_clob from dual;
      select replace(v_clob,'Request xmlns=""','Request') into v_clob from dual;
      insert into temp_env_vis (id_env_vis,ano_form,num_form,cod_comm_vistos,message_xml,cri_uti,cri_dat)
      values(vHEADER_MESSAGEID,pANO_FORM,pNUM_FORM,3,v_clob,user,sysdate);
      --commit;
      --Chama VIS
      msg_resp_vis := funcoes.Envia_Vis(null,v_web_service_search,null,vHEADER_MESSAGEID);

      /*Libertar os recursos*/
      xmldom.freeDocument(vDOCUMENTO);
    ELSE
      RAISE NO_DATA_FOUND;
    END IF;
  END;
  procedure PSearchAppExamination(pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,
                                  pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE,
                                  msg_resp_vis OUT CLOB, vRole in varchar2,TestId in varchar2, tipo in varchar2 DEFAULT 'D') is
    vDOCUMENTO      xmldom.DOMDocument;
    vCONTADOR       NUMBER;
    vELEMENTOS_ROOT xmldom.DOMElement;
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    v_clob          clob:='xxx';
    CURSOR CLREGS1 IS
      select A.*
        from FORMULARIO A
       WHERE A.ANO_FORM = pANO_FORM AND
             A.NUM_FORM = pNUM_FORM;
    CURSOR CLREGS2 IS
      select B.*
        from FORM_P B
       WHERE B.ANO_FORM = pANO_FORM AND
             B.NUM_FORM = pNUM_FORM;
    CREGS1    FORMULARIO%ROWTYPE;
    CREGS2    FORM_P%ROWTYPE;
    v_apel_tratado formulario.apel%type;
    v_nome_tratado formulario.nome%type;
    pos_espaco     number(5);
    ValRepresentanteID conversao_vis.valor_vis%type;
  BEGIN
    /*vERIFICAR A EXISTENCIA DO REGISTO*/
    SELECT COUNT(*)
      INTO vCONTADOR
      FROM FORMULARIO A
     WHERE ANO_FORM = pANO_FORM AND
           NUM_FORM = pNUM_FORM AND
           ROWNUM = 1;
    IF vCONTADOR = 1
    THEN

      OPEN CLREGS1;
      FETCH CLREGS1
        INTO CREGS1;
      IF CLREGS1%NOTFOUND
      THEN
        RAISE NO_DATA_FOUND;
      END IF;
      CLOSE CLREGS1;
      OPEN CLREGS2;
      FETCH CLREGS2
        INTO CREGS2;
      CLOSE CLREGS2;
      Funcoes.obtem_header_det('NSSearch',vContract_env, vOperation_env);
      if CREGS1.COD_PAIS_SCH_REPRES is not null then
        ValRepresentanteID := funcoes.obtem_valor_vis(CREGS1.COD_PAIS_SCH_REPRES,'CT70_USER');
      end if;
      PComum(vDOCUMENTO,vELEMENTOS_ROOT,'NSSearch',vHEADER_MESSAGEID,vContract_env, vOperation_env, 'SearchApplicationExamination', '0000',vRole,TestId,ValRepresentanteID);

      PComBodySearch(vDOCUMENTO, pANO_FORM, pNUM_FORM,'NSSearch');
      if CREGS2.APEL_NASC = '+'
      then
        CREGS2.APEL_NASC := CREGS1.APEL;
      end if;

     /*Prepara Apelido*/
     if instr(trim(CREGS1.APEL),' ') = 0 then
        v_apel_tratado := trim(CREGS1.APEL);
     else
        pos_espaco := instr(trim(CREGS1.APEL),' ');
        v_apel_tratado := trim(CREGS1.APEL);
        while pos_espaco <> 0 loop
            v_apel_tratado := substr(v_apel_tratado,pos_espaco + 1);
            pos_espaco := instr(trim(v_apel_tratado),' ');
        end loop;
     end if;

     /*Prepara Nome*/
     if instr(trim(CREGS1.NOME),' ') = 0 then
        v_nome_tratado := trim(CREGS1.NOME);
     else
        pos_espaco := instr(trim(CREGS1.NOME),' ');
        v_nome_tratado := substr(trim(CREGS1.NOME),1,pos_espaco - 1);
        if length(v_nome_tratado) = 1 then
           v_nome_tratado := trim(CREGS1.NOME);
        end if;
     end if;


      /*ApplicationExamination*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'ApplicationExamination');
      vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

    if tipo = '1' then /*Inexact Fuzzy*/
      /*CriteriaApplicant*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'CriteriaApplicant');
      vUSER_NODE.extend;
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      /*vdta:AnyName*/
      vUSER_NODE.extend;
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:AnyName');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'true');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:Surname*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Surname');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdta:SearchCriteria*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
      vUSER_NODE.extend;
      xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0001');

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           v_apel_tratado);
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:DateOfBirth*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:DateOfBirth');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdtc:From*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:From');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           substr(CREGS1.DAT_NASC,1,4) || substr(CREGS1.DAT_NASC,6,2) || substr(CREGS1.DAT_NASC,9,2));

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));
      /*vdtc:To*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:To');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           substr(CREGS1.DAT_NASC,1,4) || substr(CREGS1.DAT_NASC,6,2) || substr(CREGS1.DAT_NASC,9,2));

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdtc:IgnoreInexact*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:IgnoreInexact');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'false');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

    ELSif tipo = '5' then /*Inexact Partial*/
      /*CriteriaApplicant*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'CriteriaApplicant');
      vUSER_NODE.extend;
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      /*vdta:AnyName*/
      vUSER_NODE.extend;
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:AnyName');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'true');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));

      if v_apel_tratado <> '+' then
     /*vdta:Surname*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Surname');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdta:SearchCriteria*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
      vUSER_NODE.extend;
      xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0002');

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                          v_apel_tratado);
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));
      end if;
      if v_nome_tratado <> '+' then
      /*vdta:Firstnames*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Firstnames');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdta:SearchCriteria*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
      vUSER_NODE.extend;
      xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0002');

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           v_nome_tratado);
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));
      end if;
     /*vdta:DateOfBirth*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:DateOfBirth');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdtc:From*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:From');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           substr(CREGS1.DAT_NASC,1,4) || substr(CREGS1.DAT_NASC,6,2) || substr(CREGS1.DAT_NASC,9,2));

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));
      /*vdtc:To*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:To');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           substr(CREGS1.DAT_NASC,1,4) || substr(CREGS1.DAT_NASC,6,2) || substr(CREGS1.DAT_NASC,9,2));

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdtc:IgnoreInexact*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:IgnoreInexact');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'false');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

    ELSif tipo = '2' then /*Exact*/
      /*CriteriaApplicant*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'CriteriaApplicant');
      vUSER_NODE.extend;
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      /*vdta:AnyName*/
      vUSER_NODE.extend;
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:AnyName');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'true');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:Surname*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Surname');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdta:SearchCriteria*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
      vUSER_NODE.extend;
      xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0004');

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           CREGS1.APEL);
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:Firstnames*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Firstnames');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdta:SearchCriteria*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
      vUSER_NODE.extend;
      xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0004');

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           CREGS1.NOME);
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:DateOfBirth*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:DateOfBirth');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdtc:From*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:From');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           substr(CREGS1.DAT_NASC,1,4) || substr(CREGS1.DAT_NASC,6,2) || substr(CREGS1.DAT_NASC,9,2));

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));
      /*vdtc:To*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:To');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           substr(CREGS1.DAT_NASC,1,4) || substr(CREGS1.DAT_NASC,6,2) || substr(CREGS1.DAT_NASC,9,2));

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdtc:IgnoreInexact*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:IgnoreInexact');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'true');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));
    ELSif tipo = '3' then /*Inexact Fuzzy and Partial*/
      /*CriteriaApplicant*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'CriteriaApplicant');
      vUSER_NODE.extend;
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      /*vdta:AnyName*/
      vUSER_NODE.extend;
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:AnyName');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'true');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:Surname*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Surname');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdta:SearchCriteria*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
      vUSER_NODE.extend;
      xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0003');

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           v_apel_tratado);
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:Firstnames*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Firstnames');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdta:SearchCriteria*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
      vUSER_NODE.extend;
      xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0003');

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           v_nome_tratado);
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:DateOfBirth*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:DateOfBirth');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdtc:From*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:From');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           substr(CREGS1.DAT_NASC,1,4) || substr(CREGS1.DAT_NASC,6,2) || substr(CREGS1.DAT_NASC,9,2));

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));
      /*vdtc:To*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:To');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           substr(CREGS1.DAT_NASC,1,4) || substr(CREGS1.DAT_NASC,6,2) || substr(CREGS1.DAT_NASC,9,2));

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdtc:IgnoreInexact*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:IgnoreInexact');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'false');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

    ELSif tipo = '4' then /*exact só com surname*/
      /*CriteriaApplicant*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'CriteriaApplicant');
      vUSER_NODE.extend;
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      /*vdta:AnyName*/
      vUSER_NODE.extend;
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:AnyName');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'false');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:Surname*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Surname');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdta:SearchCriteria*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
      vUSER_NODE.extend;
      xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0004');

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           CREGS1.APEL);
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));
      ELSif tipo = '6' then /*exact com numero documento viagem, data nascimento e sexo*/
      /*CriteriaApplicant*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'CriteriaApplicant');
      vUSER_NODE.extend;
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      /*vdta:AnyName*/
      vUSER_NODE.extend;
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:AnyName');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'false');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdta:Sex*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Sex');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis(CREGS1.Sexo,'SEXO'));
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:DateOfBirth*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:DateOfBirth');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdtc:From*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:From');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           substr(CREGS1.DAT_NASC,1,4) || substr(CREGS1.DAT_NASC,6,2) || substr(CREGS1.DAT_NASC,9,2));

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));
      /*vdtc:To*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:To');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           substr(CREGS1.DAT_NASC,1,4) || substr(CREGS1.DAT_NASC,6,2) || substr(CREGS1.DAT_NASC,9,2));

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdtc:IgnoreInexact*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:IgnoreInexact');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'true');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*CriteriaTravelDocument*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'CriteriaTravelDocument');
      vUSER_NODE.extend;
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

       /*vdta:TravelDocumentNumber*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:TravelDocumentNumber');
      vUSER_NODE.extend;
      xmldom.setAttribute(vELEMTENTO_ITEM,
                          'SearchMode',
                          '0004');-- Assumi 'Exact' ST03_SearchMode

      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           CREGS1.NUM_DOC_VIAG);

      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));

      ELSif tipo = '7' then /*exact só com data nascimento*/
      /*CriteriaApplicant*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'CriteriaApplicant');
      vUSER_NODE.extend;
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      /*vdta:AnyName*/
      vUSER_NODE.extend;
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:AnyName');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'false');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdta:Sex*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Sex');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis(CREGS1.Sexo,'SEXO'));
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:DateOfBirth*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:DateOfBirth');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdtc:From*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:From');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           substr(CREGS1.DAT_NASC,1,4) || substr(CREGS1.DAT_NASC,6,2) || substr(CREGS1.DAT_NASC,9,2));

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));
      /*vdtc:To*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:To');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           substr(CREGS1.DAT_NASC,1,4) || substr(CREGS1.DAT_NASC,6,2) || substr(CREGS1.DAT_NASC,9,2));

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdtc:IgnoreInexact*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:IgnoreInexact');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'true');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      else /*exact com outros criterios*/
      /*CriteriaApplicant*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'CriteriaApplicant');
      vUSER_NODE.extend;
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      /*vdta:AnyName*/
      vUSER_NODE.extend;
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:AnyName');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'true');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:Surname*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Surname');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdta:SearchCriteria*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
      vUSER_NODE.extend;
      xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0004');

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           CREGS1.APEL);
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:Firstnames*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Firstnames');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdta:SearchCriteria*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
      vUSER_NODE.extend;
      xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0004');

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           CREGS1.NOME);
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

    /*vdta:Sex*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Sex');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis(CREGS1.Sexo,'SEXO'));
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:DateOfBirth*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:DateOfBirth');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdtc:From*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:From');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           substr(CREGS1.DAT_NASC,1,4) || substr(CREGS1.DAT_NASC,6,2) || substr(CREGS1.DAT_NASC,9,2));
                                           --TO_CHAR(TO_DATE(CREGS1.DAT_NASC,'YYYY/MM/DD'),'YYYYMMDD'));
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));
      /*vdtc:To*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:To');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           substr(CREGS1.DAT_NASC,1,4) || substr(CREGS1.DAT_NASC,6,2) || substr(CREGS1.DAT_NASC,9,2));
                                           --TO_CHAR(TO_DATE(CREGS1.DAT_NASC,'YYYY/MM/DD'),'YYYYMMDD'));
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdtc:IgnoreInexact*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:IgnoreInexact');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'false');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdta:PlaceOfBirth*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:PlaceOfBirth');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                             xmldom.makeNode(vELEMTENTO_ITEM));

    /*vdta:Country*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Country');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis(CREGS2.COD_PAIS_NASC,'PAIS_NAC'));
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));
      --**********
      /*CriteriaHost*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'CriteriaHost');
      vUSER_NODE.extend;
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      --if v_organization_name is not null then
         /*vdta:SearchHostOrganisation*/
         vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchHostOrganisation');
         vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

         /*vdta:OrganisationName*/
         vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:OrganisationName');
         vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

          /*vdta:SearchCriteria*/
          vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
          vUSER_NODE.extend;
          xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0004');

          vUSER_NODE(9) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

          vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'ttt');
          vUSER_NODE(9) := xmldom.appendChild(vUSER_NODE(9),
                                          xmldom.makeNode(vTEXTO_ITEM));

          /*vdta:OrganisationAddress*/
          vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:OrganisationAddress');
          vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

          /*vdta:City*/
         vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:City');
         vUSER_NODE(9) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

          /*vdta:SearchCriteria*/
          vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
          vUSER_NODE.extend;
          xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0004');

          vUSER_NODE(10) := xmldom.appendChild(vUSER_NODE(9),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

          vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'city');
          vUSER_NODE(10) := xmldom.appendChild(vUSER_NODE(10),
                                          xmldom.makeNode(vTEXTO_ITEM));

          /*vdta:Country*/
          vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Country');
          vUSER_NODE(9) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
          vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis('PRT','PAIS'));
          vUSER_NODE(9) := xmldom.appendChild(vUSER_NODE(9),
                                          xmldom.makeNode(vTEXTO_ITEM));

          /*vdta:PostCode*/
          vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:PostCode');
          vUSER_NODE(9) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

          /*vdta:SearchCriteria*/
          vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
          vUSER_NODE.extend;
          xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0004');

          vUSER_NODE(10) := xmldom.appendChild(vUSER_NODE(9),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

          vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           '3333');
          vUSER_NODE(10) := xmldom.appendChild(vUSER_NODE(10),
                                          xmldom.makeNode(vTEXTO_ITEM));

          /*vdta:Street*/
          vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Street');
          vUSER_NODE(9) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

          /*vdta:SearchCriteria*/
          vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
          vUSER_NODE.extend;
          xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0004');

          vUSER_NODE(10) := xmldom.appendChild(vUSER_NODE(9),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

          vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           '2222');
          vUSER_NODE(10) := xmldom.appendChild(vUSER_NODE(10),
                                          xmldom.makeNode(vTEXTO_ITEM));
      --elsif v_hostfirstname is not null then
         /*vdta:SearchHostPerson*/
         vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchHostPerson');
         vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

         /*vdta:HostAddress*/
         vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:HostAddress');
         vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

          /*vdta:City*/
         vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:City');
         vUSER_NODE(9) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

          /*vdta:SearchCriteria*/
          vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
          vUSER_NODE.extend;
          xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0004');

          vUSER_NODE(10) := xmldom.appendChild(vUSER_NODE(9),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

          vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'city');
          vUSER_NODE(10) := xmldom.appendChild(vUSER_NODE(10),
                                          xmldom.makeNode(vTEXTO_ITEM));

          /*vdta:Country*/
          vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Country');
          vUSER_NODE(9) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
          vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis('PRT','PAIS'));
          vUSER_NODE(9) := xmldom.appendChild(vUSER_NODE(9),
                                          xmldom.makeNode(vTEXTO_ITEM));

          /*vdta:PostCode*/
          vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:PostCode');
          vUSER_NODE(9) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

          /*vdta:SearchCriteria*/
          vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
          vUSER_NODE.extend;
          xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0004');

          vUSER_NODE(10) := xmldom.appendChild(vUSER_NODE(9),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

          vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           '1111');
          vUSER_NODE(10) := xmldom.appendChild(vUSER_NODE(10),
                                          xmldom.makeNode(vTEXTO_ITEM));

          /*vdta:Street*/
          vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Street');
          vUSER_NODE(9) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

          /*vdta:SearchCriteria*/
          vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
          vUSER_NODE.extend;
          xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0004');

          vUSER_NODE(10) := xmldom.appendChild(vUSER_NODE(9),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

          vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'STREET');
          vUSER_NODE(10) := xmldom.appendChild(vUSER_NODE(10),
                                          xmldom.makeNode(vTEXTO_ITEM));

          /*vdta:HostFirstnames*/
          vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:HostFirstnames');
          vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

          /*vdta:SearchCriteria*/
          vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
          vUSER_NODE.extend;
          xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0004');

          vUSER_NODE(9) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

          vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'TESTE');
          vUSER_NODE(9) := xmldom.appendChild(vUSER_NODE(9),
                                          xmldom.makeNode(vTEXTO_ITEM));

          /*vdta:HostSurname*/
          vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:HostSurname');
          vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

          /*vdta:SearchCriteria*/
          vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
          vUSER_NODE.extend;
          xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0004');

          vUSER_NODE(9) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

          vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'TESTE');
          vUSER_NODE(9) := xmldom.appendChild(vUSER_NODE(9),
                                          xmldom.makeNode(vTEXTO_ITEM));
      --end if;
      --**********
      end if;
      /*Escrever para ficheiro*/
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdta',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Application');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdtc',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Common');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:xsi',
                                          'http://www.w3.org/2001/XMLSchema-instance');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xsi:schemaLocation',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages' ||
                                          chr(13) || vCcaminhoXSD ||
                                          'NSSearch.xsd');

      /*xmldom.writeToFile(vDOCUMENTO,
                         vCcaminhoXML || 'SearchApplicationExamination.xml');*/
      xmldom.writeToClob(vDOCUMENTO, v_clob);
      select replace(v_clob,'Header xmlns=""','Header') into v_clob from dual;
      select replace(v_clob,'Request xmlns=""','Request') into v_clob from dual;
      --funcoes.write_clob_tofile(vCcaminhoXML => vCcaminhoXML,vfilename => 'SearchApplicationExamination',v_clob => v_clob);
      insert into temp_env_vis (id_env_vis,ano_form,num_form,cod_comm_vistos,message_xml,cri_uti,cri_dat)
      values(vHEADER_MESSAGEID,pANO_FORM,pNUM_FORM,3,v_clob,user,sysdate);
      --commit;
      --Chama VIS
      msg_resp_vis := funcoes.Envia_Vis(null,v_web_service_search,null,vHEADER_MESSAGEID);

      /*Libertar os recursos*/
      xmldom.freeDocument(vDOCUMENTO);
    ELSE
      RAISE NO_DATA_FOUND;
    END IF;
  END;
  procedure PSearchLawEnforcement(pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,
                                  pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE,
                                  msg_resp_vis OUT clob, vRole in varchar2,TestId in varchar2) is
    vDOCUMENTO      xmldom.DOMDocument;
    vCONTADOR       NUMBER;
    vELEMENTOS_ROOT xmldom.DOMElement;
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    v_clob          clob:='xxx';
    CURSOR CLREGS1 IS
      select A.*
        from FORMULARIO A
       WHERE A.ANO_FORM = pANO_FORM AND
             A.NUM_FORM = pNUM_FORM;
    CURSOR CLREGS2 IS
      select B.*
        from FORM_P B
       WHERE B.ANO_FORM = pANO_FORM AND
             B.NUM_FORM = pNUM_FORM;
    CREGS1    FORMULARIO%ROWTYPE;
    CREGS2    FORM_P%ROWTYPE;
    vCOD_CONC concelho_sef.des_conc%TYPE;
    v_des_pais pais.des_pais%TYPE;
    ValRepresentanteID conversao_vis.valor_vis%type;
  BEGIN
    /*vERIFICAR A EXISTENCIA DO REGISTO*/
    SELECT COUNT(*)
      INTO vCONTADOR
      FROM FORMULARIO A
     WHERE ANO_FORM = pANO_FORM AND
           NUM_FORM = pNUM_FORM AND
           ROWNUM = 1;
    IF vCONTADOR = 1
    THEN

      OPEN CLREGS1;
      FETCH CLREGS1
        INTO CREGS1;
      IF CLREGS1%NOTFOUND
      THEN
        RAISE NO_DATA_FOUND;
      END IF;
      CLOSE CLREGS1;
      OPEN CLREGS2;
      FETCH CLREGS2
        INTO CREGS2;
      CLOSE CLREGS2;
      select cs.des_conc
      INTO vCOD_CONC
      from concelho_sef cs, direccao_sef ds
      where cs.cod_direc = ds.cod_direc AND
      cs.cod_conc = CREGS2.COD_CONC;

      select des_pais into v_des_pais
      from pais where cod_pais = CREGS1.cod_pais_emi_doc;
      Funcoes.obtem_header_det('NSSearch',vContract_env, vOperation_env);
      if CREGS1.COD_PAIS_SCH_REPRES is not null then
        ValRepresentanteID := funcoes.obtem_valor_vis(CREGS1.COD_PAIS_SCH_REPRES,'CT70_USER');
      end if;
      PComum(vDOCUMENTO,vELEMENTOS_ROOT,'NSSearch',vHEADER_MESSAGEID,vContract_env, vOperation_env, 'SearchLawEnforcement', '0007',vRole,TestId,ValRepresentanteID);

      PComBodySearch(vDOCUMENTO, pANO_FORM, pNUM_FORM,'NSSearch');
      if CREGS2.APEL_NASC = '+'
      then
        CREGS2.APEL_NASC := CREGS1.APEL;
      end if;

      /*LawEnforcement*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'LawEnforcement');
      vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                          xmldom.makeNode(vELEMTENTO_ITEM));



      /*vdta:NationalityAtBirth*/
      vUSER_NODE.extend;
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:NationalityAtBirth');
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis(CREGS2.COD_PAIS_NASC,'PAIS_NAC'));
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdta:NationalityForApplication*/
      vUSER_NODE.extend;
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:NationalityForApplication');
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis(CREGS1.COD_PAIS_NAC_1,'PAIS_NAC'));
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdta:PurposeOfTravel*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:PurposeOfTravel');
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      /*vdta:PurposeType*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:PurposeType');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis(CREGS1.cod_esta_1,'MOTIVO_ESTADA'));
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdta:VisaType*/
      vUSER_NODE.extend;
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:VisaType');
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis(CREGS1.TIP_VIS_PED,'VISA_TYPE'));
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdta:CriteriaApplicant*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:CriteriaApplicant');
      vUSER_NODE.extend;
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      /*vdta:AnyName*/
      vUSER_NODE.extend;
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:AnyName');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'true');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:Surname*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Surname');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdta:SearchCriteria*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
      vUSER_NODE.extend;
      xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0004');-- Assumi 'Exact' ST03_SearchMode

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           CREGS1.APEL);
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:Firstnames*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Firstnames');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdta:SearchCriteria*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
      vUSER_NODE.extend;
      xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0004');-- Assumi 'Exact' ST03_SearchMode

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           CREGS1.NOME);
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));


      /*vdta:Sex*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Sex');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis(CREGS1.Sexo,'SEXO'));
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:DateOfBirth*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:DateOfBirth');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdtc:From*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:From');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           substr(CREGS1.DAT_NASC,1,4) || substr(CREGS1.DAT_NASC,6,2) || substr(CREGS1.DAT_NASC,9,2));
                                           --TO_CHAR(TO_DATE(CREGS1.DAT_NASC,'YYYY/MM/DD'),'YYYYMMDD'));
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));
      /*vdtc:To*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:To');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           substr(CREGS1.DAT_NASC,1,4) || substr(CREGS1.DAT_NASC,6,2) || substr(CREGS1.DAT_NASC,9,2));
                                           --TO_CHAR(TO_DATE(CREGS1.DAT_NASC,'YYYY/MM/DD'),'YYYYMMDD'));
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdtc:IgnoreInexact*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:IgnoreInexact');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'false');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdta:PlaceOfBirth*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:PlaceOfBirth');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                             xmldom.makeNode(vELEMTENTO_ITEM));

      /*vdta:Country*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:Country');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis(CREGS2.COD_PAIS_NASC,'PAIS_NAC'));
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdta:CriteriaTravelDocument*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:CriteriaTravelDocument');
      vUSER_NODE.extend;
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      /*vdta:TypeOfTravelDocument*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:TypeOfTravelDocument');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           funcoes.obtem_valor_vis(CREGS1.COD_DOC,'TIPO_PASS'));
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdta:TravelDocumentNumber*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:TravelDocumentNumber');
      vUSER_NODE.extend;
      xmldom.setAttribute(vELEMTENTO_ITEM,
                          'SearchMode',
                          '0004');-- Assumi 'Exact' ST03_SearchMode

      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           CREGS1.NUM_DOC_VIAG);
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdta:IssuingAuthorityOfTravelDocument*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:IssuingAuthorityOfTravelDocument');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdta:SearchCriteria*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:SearchCriteria');
      vUSER_NODE.extend;
      xmldom.setAttribute(vELEMTENTO_ITEM,'SearchMode','0004');-- Assumi 'Exact' ST03_SearchMode

      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           v_des_pais);
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

     /*vdta:ExpiringDateOfTravelDocument*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:ExpiringDateOfTravelDocument');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                             xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdtc:From*/
     vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:From');
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
     vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         to_char(CREGS2.VALI_DOC_VIAG,
                                                 'yyyymmdd'));
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));
     /*vdtc:To*/
     vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:To');
     vUSER_NODE.extend;
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
     vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                       to_char(CREGS2.VALI_DOC_VIAG,
                                                 'yyyymmdd'));
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdtc:IgnoreInexact*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:IgnoreInexact');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'false');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdta:IssuingDateOfTravelDocument*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:IssuingDateOfTravelDocument');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                             xmldom.makeNode(vELEMTENTO_ITEM));

     /*vdtc:From*/
     vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:From');
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
     vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         substr(CREGS2.DAT_EMI_DOC,1,4) || substr(CREGS2.DAT_EMI_DOC,6,2) || substr(CREGS2.DAT_EMI_DOC,9,2));
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));
     /*vdtc:To*/
     vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:To');
     vUSER_NODE.extend;
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
     vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                       substr(CREGS2.DAT_EMI_DOC,1,4) || substr(CREGS2.DAT_EMI_DOC,6,2) || substr(CREGS2.DAT_EMI_DOC,9,2));
     vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*vdtc:IgnoreInexact*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:IgnoreInexact');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           'false');
      vUSER_NODE(8) := xmldom.appendChild(vUSER_NODE(8),
                                          xmldom.makeNode(vTEXTO_ITEM));

      /*Escrever para ficheiro*/
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdta',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Application');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdtc',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Common');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:xsi',
                                          'http://www.w3.org/2001/XMLSchema-instance');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xsi:schemaLocation',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages' ||
                                          chr(13) || vCcaminhoXSD ||
                                          'NSSearch.xsd');

      xmldom.writeToFile(vDOCUMENTO,
                         vCcaminhoXML || 'SearchLawEnforcement.xml');
      xmldom.writeToClob(vDOCUMENTO, v_clob);
      select replace(v_clob,'Header xmlns=""','Header') into v_clob from dual;
      select replace(v_clob,'Request xmlns=""','Request') into v_clob from dual;
      insert into temp_env_vis (id_env_vis,ano_form,num_form,cod_comm_vistos,message_xml,cri_uti,cri_dat)
      values(vHEADER_MESSAGEID,pANO_FORM,pNUM_FORM,3,v_clob,user,sysdate);
      --commit;
      --Chama VIS
      msg_resp_vis := funcoes.Envia_Vis(null,v_web_service_search,null,vHEADER_MESSAGEID);

      /*Libertar os recursos*/
      xmldom.freeDocument(vDOCUMENTO);
    ELSE
      RAISE NO_DATA_FOUND;
    END IF;
  END;
  procedure PComBodyReporting(vDOCUMENTO in out xmldom.DOMDocument) is
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    v_valor_vis     conversao_vis.valor_vis%type:='0173.01';
    v_cid_pos       posto.cid_pos%type:='LISBOA';
  BEGIN

    /*request*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Request');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    /*Authority*/
    vUSER_NODE.extend;
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Authority');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));

    vUSER_NODE.extend;
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:AuthorityLocation');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vELEMTENTO_ITEM));

    vUSER_NODE.extend;
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:Country');
    vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         v_valor_vis);
    vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(6),
                                        xmldom.makeNode(vTEXTO_ITEM));

    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:Place');
    vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         v_cid_pos);
    vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(6),
                                        xmldom.makeNode(vTEXTO_ITEM));

    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:AuthorityName');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         'MNE');

    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(5),
                                        xmldom.makeNode(vTEXTO_ITEM));

    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:AuthorityType');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         '0003.01');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(5),
                                        xmldom.makeNode(vTEXTO_ITEM));
  end;
  procedure PComBodyRetrieval(vDOCUMENTO in out xmldom.DOMDocument, ano_form1 in number, num_form1 in number) is
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    v_valor_vis  conversao_vis.valor_vis%type;
    v_cid_pos    posto.cid_pos%type;
    v_des_pos    posto.des_pos%type;
    v_loa_id     posto.loa_id%type;
  BEGIN

    select funcoes.obtem_valor_vis(cod_pais,'PAIS'), p.cid_pos, p.des_pos, p.loa_id
    into  v_valor_vis, v_cid_pos, v_des_pos, v_loa_id
    from formulario f, posto p
    where f.cod_pos = p.cod_pos
    and ano_form = ano_form1 and num_form = num_form1;

    /*request*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Request');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    /*Authority*/
    vUSER_NODE.extend;
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Authority');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));

    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:AuthorityUniqueID');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         v_loa_id);
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(5),
                                        xmldom.makeNode(vTEXTO_ITEM));

    vUSER_NODE.extend;
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:AuthorityLocation');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vELEMTENTO_ITEM));

    vUSER_NODE.extend;
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:Country');
    vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         v_valor_vis);
    vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(6),
                                        xmldom.makeNode(vTEXTO_ITEM));

    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:Place');
    vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         v_cid_pos);
    vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(6),
                                        xmldom.makeNode(vTEXTO_ITEM));

    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:AuthorityName');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         'MNE');
                                         --v_des_pos || v_cid_pos);
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(5),
                                        xmldom.makeNode(vTEXTO_ITEM));

    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:AuthorityType');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         '0001.01');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(5),
                                        xmldom.makeNode(vTEXTO_ITEM));
  end;

  procedure PRetrievalAppWithFullDec (pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,
                                      pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE,
                                      msg_resp_vis out clob, vRole in varchar2,TestId in varchar2) is
    vDOCUMENTO      xmldom.DOMDocument;
    vELEMENTOS_ROOT xmldom.DOMElement;
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    v_clob          clob:='xxx';
    v_ref_form_2    formulario.ref_form_2%type;
    v_cod_pais_sch_ref formulario.cod_pais_sch_ref%type;
    V_COD_PAIS_SCH_REPRES formulario.cod_pais_sch_repres%type;
    ValRepresentanteID conversao_vis.valor_vis%type;
  BEGIN
    select ref_form_2, cod_pais_sch_ref, cod_pais_sch_repres
    into v_ref_form_2, v_cod_pais_sch_ref, V_COD_PAIS_SCH_REPRES
    from formulario
    where ano_form = pANO_FORM and num_form = pNUM_FORM;

    Funcoes.obtem_header_det('NSRetrieveApplicationWithFullDecisionHistory',vContract_env, vOperation_env);
    if V_COD_PAIS_SCH_REPRES is not null then
        ValRepresentanteID := funcoes.obtem_valor_vis(V_COD_PAIS_SCH_REPRES,'CT70_USER');
    end if;
    PComum(vDOCUMENTO,vELEMENTOS_ROOT,'NSRetrieveApplicationWithFullDecisionHistory',vHEADER_MESSAGEID,vContract_env, vOperation_env, null, null,vRole,TestId,ValRepresentanteID);
    PComBodyRetrieval(vDOCUMENTO, pANO_FORM, pNUM_FORM);

    /*ApplicationNumber*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'ApplicationNumber');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         v_cod_pais_sch_ref || v_ref_form_2);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Escrever para ficheiro*/
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdta',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Application');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdtc',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Common');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:xsi',
                                          'http://www.w3.org/2001/XMLSchema-instance');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xsi:schemaLocation',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages' ||
                                          chr(13) || vCcaminhoXSD ||
                                          'NSRetrieveApplicationWithFullDecisionHistory.xsd');

    /*xmldom.writeToFile(vDOCUMENTO,
                       vCcaminhoXML || 'RetrieveApplicationWithFullDecisionHistory.xml');*/
    xmldom.writeToClob(vDOCUMENTO, v_clob);
    select replace(v_clob,'Header xmlns=""','Header') into v_clob from dual;
    select replace(v_clob,'Request xmlns=""','Request') into v_clob from dual;
    --funcoes.write_clob_tofile(vCcaminhoXML => vCcaminhoXML,vfilename => 'RetrieveApplicationWithFullDecisionHistory',v_clob => v_clob);
    insert into temp_env_vis (id_env_vis,ano_form,num_form,cod_comm_vistos,message_xml,cri_uti,cri_dat)
    values(vHEADER_MESSAGEID,pANO_FORM,pNUM_FORM,30,v_clob,user,sysdate);
    --commit;
    --Chama VIS
    msg_resp_vis := funcoes.Envia_Vis(null,v_web_service_retrieval,null,vHEADER_MESSAGEID);
    /*Libertar os recursos*/
    xmldom.freeDocument(vDOCUMENTO);
  END;
  procedure PRetrievalAppExamination(pAppNum in VARCHAR2,pVisaSticker in VARCHAR2,msg_resp_vis out clob,
                                     pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE, vRole in varchar2,TestId in varchar2,ambiente in varchar2 DEFAULT 'P') is

  -------- Só um parametro deve vir preenchido--------

    vDOCUMENTO      xmldom.DOMDocument;
    vELEMENTOS_ROOT xmldom.DOMElement;
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    v_clob          clob:='xxx';
    V_COD_PAIS_SCH_REPRES formulario.cod_pais_sch_repres%type;
    ValRepresentanteID conversao_vis.valor_vis%type;
  BEGIN
    begin
    select cod_pais_sch_repres into V_COD_PAIS_SCH_REPRES
    from formulario
    where ano_form = pANO_FORM and num_Form = pNUM_FORM;
    exception when no_data_found then
      V_COD_PAIS_SCH_REPRES := null;
    end;
    Funcoes.obtem_header_det('NSRetrieval',vContract_env, vOperation_env);
    if V_COD_PAIS_SCH_REPRES is not null then
        ValRepresentanteID := funcoes.obtem_valor_vis(V_COD_PAIS_SCH_REPRES,'CT70_USER');
    end if;
    PComum(vDOCUMENTO,vELEMENTOS_ROOT,'NSRetrieval',vHEADER_MESSAGEID,vContract_env, vOperation_env, 'RetrievalApplicationExamination', '0000',vRole,TestId,ValRepresentanteID);
    PComBodyRetrieval(vDOCUMENTO, pANO_FORM, pNUM_FORM);
   /*Action*/
   vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'Action');
   vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
   /*ApplicationExamination*/
   vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'ApplicationExamination');
   vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
    /*OptionList*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:OptionList');
    vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdta:FacialImageDataSourceIncluded');
    vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         'true');
    vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                        xmldom.makeNode(vTEXTO_ITEM));

    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdta:FingerprintSetDataSourceIncluded');
    vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         'false');
    vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                        xmldom.makeNode(vTEXTO_ITEM));
   /*IdentifierChoice*/
   vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:IdentifierChoice');
   vUSER_NODE.extend;
   vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
    IF pAppNum is not null THEN
      /*ApplicationNumber*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:ApplicationNumber');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,pAppNum);
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));
    END IF;
    IF pVisaSticker is not null THEN
      /*VisaStickerNumber*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:VisaStickerNumber');

      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,pVisaSticker);

      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));
     END IF;
      /*Escrever para ficheiro*/
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdtr',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Report');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdtc',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Common');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdta',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Application');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages');
      /*dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:xsi',
                                          'http://www.w3.org/2001/XMLSchema-instance');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xsi:schemaLocation',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages'); */--||
                                          /*chr(13) || vCcaminhoXSD ||
                                          'NSRetrieval.xsd');*/

    /*xmldom.writeToFile(vDOCUMENTO,
                       vCcaminhoXML ||
                       'RetrievalApplicationExamination.xml');*/
    xmldom.writeToClob(vDOCUMENTO, v_clob);
    select replace(v_clob,'Header xmlns=""','Header') into v_clob from dual;
    select replace(v_clob,'Request xmlns=""','Request') into v_clob from dual;
    --funcoes.write_clob_tofile(vCcaminhoXML => vCcaminhoXML,vfilename => 'RetrievalApplicationExamination',v_clob => v_clob);
    insert into temp_env_vis (id_env_vis,ano_form,num_form,cod_comm_vistos,message_xml,cri_uti,cri_dat)
    values(vHEADER_MESSAGEID,pANO_FORM,pNUM_FORM,10,v_clob,user,sysdate);
    --commit;
    --Chama VIS
    msg_resp_vis := funcoes.Envia_Vis(null,v_web_service_retrieval,null,vHEADER_MESSAGEID,ambiente);
    /*Libertar os recursos*/
    xmldom.freeDocument(vDOCUMENTO);
  END;
  procedure PRetrievalAsylumExamination(pAppNum in VARCHAR2,pVisaSticker in VARCHAR2,msg_resp_vis out VARCHAR2,
                                        pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE, vRole in varchar2,TestId in varchar2) is

  -------- Só um parametro deve vir preenchido--------

  vDOCUMENTO      xmldom.DOMDocument;
  vELEMENTOS_ROOT xmldom.DOMElement;
  vELEMTENTO_ITEM xmldom.DOMElement;
  vTEXTO_ITEM     xmldom.DOMText;
  v_clob          clob:='xxx';
  V_COD_PAIS_SCH_REPRES formulario.cod_pais_sch_repres%type;
  ValRepresentanteID conversao_vis.valor_vis%type;
  BEGIN
    select cod_pais_sch_repres into V_COD_PAIS_SCH_REPRES
    from formulario
    where ano_form = pANO_FORM and num_Form = pNUM_FORM;
    Funcoes.obtem_header_det('NSRetrieval',vContract_env, vOperation_env);
    if V_COD_PAIS_SCH_REPRES is not null then
        ValRepresentanteID := funcoes.obtem_valor_vis(V_COD_PAIS_SCH_REPRES,'CT70_USER');
    end if;
    PComum(vDOCUMENTO,vELEMENTOS_ROOT,'NSRetrieval',vHEADER_MESSAGEID,vContract_env, vOperation_env, 'RetrievalAsylumExamination', '0006',vRole,TestId,ValRepresentanteID);
    PComBodyRetrieval(vDOCUMENTO, pANO_FORM, pNUM_FORM);

   /*Action*/
   vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'Action');
   vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
   /*AsylumExamination*/
   vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'AsylumExamination');
   vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

   /*IdentifierChoice*/
   vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:IdentifierChoice');
   vUSER_NODE.extend;
   vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
    IF pAppNum is not null THEN
      /*ApplicationNumber*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:ApplicationNumber');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,pAppNum);
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));
    END IF;
    IF pVisaSticker is not null THEN
      /*VisaStickerNumber*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:VisaStickerNumber');

      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,pVisaSticker);

      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));
     END IF;
      /*Escrever para ficheiro*/
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdta',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Application');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdtc',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Common');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:xsi',
                                          'http://www.w3.org/2001/XMLSchema-instance');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xsi:schemaLocation',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages' ||
                                          chr(13) || vCcaminhoXSD ||
                                          'NSRetrieval.xsd');

    xmldom.writeToFile(vDOCUMENTO,
                       vCcaminhoXML ||
                       'RetrievalAsylumExamination.xml');
    xmldom.writeToClob(vDOCUMENTO, v_clob);
    select replace(v_clob,'Header xmlns=""','Header') into v_clob from dual;
    select replace(v_clob,'Request xmlns=""','Request') into v_clob from dual;
    insert into temp_env_vis (id_env_vis,ano_form,num_form,cod_comm_vistos,message_xml,cri_uti,cri_dat)
    values(vHEADER_MESSAGEID,pANO_FORM,pNUM_FORM,10,v_clob,user,sysdate);
    --commit;
    --Chama VIS
    msg_resp_vis := funcoes.Envia_Vis(null,v_web_service_retrieval,null,vHEADER_MESSAGEID);
    /*Libertar os recursos*/
    xmldom.freeDocument(vDOCUMENTO);
  END;
  procedure PRetrievalAsylumResponsibility(pAppNum in VARCHAR2, pDateAsylum in varchar2, msg_resp_vis out VARCHAR2,
                                           pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE, vRole in varchar2,TestId in varchar2) is

  vDOCUMENTO      xmldom.DOMDocument;
  vELEMENTOS_ROOT xmldom.DOMElement;
  vELEMTENTO_ITEM xmldom.DOMElement;
  vTEXTO_ITEM     xmldom.DOMText;
  v_clob          clob:='xxx';
  V_COD_PAIS_SCH_REPRES formulario.cod_pais_sch_repres%type;
  ValRepresentanteID conversao_vis.valor_vis%type;
  BEGIN
    select cod_pais_sch_repres into V_COD_PAIS_SCH_REPRES
    from formulario
    where ano_form = pANO_FORM and num_Form = pNUM_FORM;
    Funcoes.obtem_header_det('NSRetrieval',vContract_env, vOperation_env);
    if V_COD_PAIS_SCH_REPRES is not null then
        ValRepresentanteID := funcoes.obtem_valor_vis(V_COD_PAIS_SCH_REPRES,'CT70_USER');
    end if;
    PComum(vDOCUMENTO,vELEMENTOS_ROOT,'NSRetrieval',vHEADER_MESSAGEID,vContract_env, vOperation_env, 'RetrievalAsylumResponsibility', '0005',vRole,TestId,ValRepresentanteID);
    PComBodyRetrieval(vDOCUMENTO, pANO_FORM, pNUM_FORM);

   /*Action*/
   vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'Action');
   vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
   /*AsylumResponsibility*/
   vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'AsylumResponsibility');
   vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                          xmldom.makeNode(vELEMTENTO_ITEM));


   /*ApplicationNumber*/
   vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'ApplicationNumber');
   vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

   vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,pAppNum);
   vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vTEXTO_ITEM));

   /*DateOfAsylumApplication*/
   vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'DateOfAsylumApplication');
   vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

   vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,Fdatetz(to_date(pDateAsylum,
                                                         'yyyy/mm/dd hh24:mi:ss')));
   vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vTEXTO_ITEM));

   /*Escrever para ficheiro*/
   dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages');
   dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                         'xmlns:vdta',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Application');
   dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdtc',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Common');
   dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:xsi',
                                          'http://www.w3.org/2001/XMLSchema-instance');
   dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xsi:schemaLocation',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages' ||
                                          chr(13) || vCcaminhoXSD ||
                                          'NSRetrieval.xsd');

    xmldom.writeToFile(vDOCUMENTO,
                       vCcaminhoXML ||
                       'RetrievalAsylumResponsibility.xml');
    xmldom.writeToClob(vDOCUMENTO, v_clob);
    select replace(v_clob,'Header xmlns=""','Header') into v_clob from dual;
    select replace(v_clob,'Request xmlns=""','Request') into v_clob from dual;
    insert into temp_env_vis (id_env_vis,ano_form,num_form,cod_comm_vistos,message_xml,cri_uti,cri_dat)
    values(vHEADER_MESSAGEID,pANO_FORM,pNUM_FORM,10,v_clob,user,sysdate);
    --commit;
    --Chama VIS
    msg_resp_vis := funcoes.Envia_Vis(null,v_web_service_retrieval,null,vHEADER_MESSAGEID);
    /*Libertar os recursos*/
    xmldom.freeDocument(vDOCUMENTO);
  END;
  procedure PRetrievalIdentificationBorder(pAppNum in VARCHAR2,pVisaSticker in VARCHAR2,msg_resp_vis out VARCHAR2,
                                           pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE, vRole in varchar2,TestId in varchar2) is
  -------- Só um parametro deve vir preenchido--------

  vDOCUMENTO      xmldom.DOMDocument;
  vELEMENTOS_ROOT xmldom.DOMElement;
  vELEMTENTO_ITEM xmldom.DOMElement;
  vTEXTO_ITEM     xmldom.DOMText;
  v_clob          clob:='xxx';
  V_COD_PAIS_SCH_REPRES formulario.cod_pais_sch_repres%type;
  ValRepresentanteID conversao_vis.valor_vis%type;
  BEGIN
    select cod_pais_sch_repres into V_COD_PAIS_SCH_REPRES
    from formulario
    where ano_form = pANO_FORM and num_Form = pNUM_FORM;
    Funcoes.obtem_header_det('NSRetrieval',vContract_env, vOperation_env);
    if V_COD_PAIS_SCH_REPRES is not null then
        ValRepresentanteID := funcoes.obtem_valor_vis(V_COD_PAIS_SCH_REPRES,'CT70_USER');
    end if;
    PComum(vDOCUMENTO,vELEMENTOS_ROOT,'NSRetrieval',vHEADER_MESSAGEID,vContract_env, vOperation_env, 'RetrievalIdentificationBorder', '0001',vRole,TestId,ValRepresentanteID);
    PComBodyRetrieval(vDOCUMENTO, pANO_FORM, pNUM_FORM);

   /*Action*/
   vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'Action');
   vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
   /*IdentificationBorder*/
   vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'IdentificationBorder');
   vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

   /*IdentifierChoice*/
   vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:IdentifierChoice');
   vUSER_NODE.extend;
   vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
    IF pAppNum is not null THEN
      /*ApplicationNumber*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:ApplicationNumber');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,pAppNum);
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));
    END IF;
    IF pVisaSticker is not null THEN
      /*VisaStickerNumber*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:VisaStickerNumber');

      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,pVisaSticker);

      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));
     END IF;
      /*Escrever para ficheiro*/
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdta',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Application');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdtc',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Common');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:xsi',
                                          'http://www.w3.org/2001/XMLSchema-instance');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xsi:schemaLocation',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages' ||
                                          chr(13) || vCcaminhoXSD ||
                                          'NSRetrieval.xsd');

    /*xmldom.writeToFile(vDOCUMENTO,
                       vCcaminhoXML ||
                       'RetrievalIdentificationBorder.xml');*/
    xmldom.writeToClob(vDOCUMENTO, v_clob);
    select replace(v_clob,'Header xmlns=""','Header') into v_clob from dual;
    select replace(v_clob,'Request xmlns=""','Request') into v_clob from dual;
    --funcoes.write_clob_tofile(vCcaminhoXML => vCcaminhoXML,vfilename => 'RetrievalIdentificationBorder',v_clob => v_clob);
    insert into temp_env_vis (id_env_vis,ano_form,num_form,cod_comm_vistos,message_xml,cri_uti,cri_dat)
    values(vHEADER_MESSAGEID,pANO_FORM,pNUM_FORM,10,v_clob,user,sysdate);
    --commit;
    --Chama VIS
    msg_resp_vis := funcoes.Envia_Vis(null,v_web_service_retrieval,null,vHEADER_MESSAGEID);
    /*Libertar os recursos*/
    xmldom.freeDocument(vDOCUMENTO);
  END;
  procedure PRetrievalIdentificationTerrit(pAppNum in VARCHAR2,pVisaSticker in VARCHAR2,msg_resp_vis out VARCHAR2,
                                           pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE, vRole in varchar2, TestId in varchar2) is
  -------- Só um parametro deve vir preenchido--------

  vDOCUMENTO      xmldom.DOMDocument;
  vELEMENTOS_ROOT xmldom.DOMElement;
  vELEMTENTO_ITEM xmldom.DOMElement;
  vTEXTO_ITEM     xmldom.DOMText;
  v_clob          clob:='xxx';
  V_COD_PAIS_SCH_REPRES formulario.cod_pais_sch_repres%type;
  ValRepresentanteID conversao_vis.valor_vis%type;
  BEGIN
    select cod_pais_sch_repres into V_COD_PAIS_SCH_REPRES
    from formulario
    where ano_form = pANO_FORM and num_Form = pNUM_FORM;
    Funcoes.obtem_header_det('NSRetrieval',vContract_env, vOperation_env);
    if V_COD_PAIS_SCH_REPRES is not null then
        ValRepresentanteID := funcoes.obtem_valor_vis(V_COD_PAIS_SCH_REPRES,'CT70_USER');
    end if;
    PComum(vDOCUMENTO,vELEMENTOS_ROOT,'NSRetrieval',vHEADER_MESSAGEID,vContract_env, vOperation_env, 'RetrievalIdentificationTerritory', '0002',vRole,TestId,ValRepresentanteID);
    PComBodyRetrieval(vDOCUMENTO, pANO_FORM, pNUM_FORM);

   /*Action*/
   vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'Action');
   vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
   /*IdentificationTerritory*/
   vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'IdentificationTerritory');
   vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

   /*IdentifierChoice*/
   vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:IdentifierChoice');
   vUSER_NODE.extend;
   vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
    IF pAppNum is not null THEN
      /*ApplicationNumber*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:ApplicationNumber');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,pAppNum);
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));
    END IF;
    IF pVisaSticker is not null THEN
      /*VisaStickerNumber*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:VisaStickerNumber');

      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,pVisaSticker);

      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));
     END IF;
      /*Escrever para ficheiro*/
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdta',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Application');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdtc',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Common');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:xsi',
                                          'http://www.w3.org/2001/XMLSchema-instance');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xsi:schemaLocation',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages' ||
                                          chr(13) || vCcaminhoXSD ||
                                          'NSRetrieval.xsd');

    xmldom.writeToFile(vDOCUMENTO,
                       vCcaminhoXML ||
                       'RetrievalIdentificationTerritory.xml');
    xmldom.writeToClob(vDOCUMENTO, v_clob);
    select replace(v_clob,'Header xmlns=""','Header') into v_clob from dual;
    select replace(v_clob,'Request xmlns=""','Request') into v_clob from dual;
    insert into temp_env_vis (id_env_vis,ano_form,num_form,cod_comm_vistos,message_xml,cri_uti,cri_dat)
    values(vHEADER_MESSAGEID,pANO_FORM,pNUM_FORM,10,v_clob,user,sysdate);
    --commit;
    --Chama VIS
    msg_resp_vis := funcoes.Envia_Vis(null,v_web_service_retrieval,null,vHEADER_MESSAGEID);
    /*Libertar os recursos*/
    xmldom.freeDocument(vDOCUMENTO);
  END;
  procedure PRetrievalLawEnforcement(pAppNum in VARCHAR2,pVisaSticker in VARCHAR2,msg_resp_vis out VARCHAR2,
                                     pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE, vRole in varchar2, TestId in varchar2) is
  -------- Só um parametro deve vir preenchido--------

  vDOCUMENTO      xmldom.DOMDocument;
  vELEMENTOS_ROOT xmldom.DOMElement;
  vELEMTENTO_ITEM xmldom.DOMElement;
  vTEXTO_ITEM     xmldom.DOMText;
  v_clob          clob:='xxx';
  V_COD_PAIS_SCH_REPRES formulario.cod_pais_sch_repres%type;
  ValRepresentanteID conversao_vis.valor_vis%type;
  BEGIN
    select cod_pais_sch_repres into V_COD_PAIS_SCH_REPRES
    from formulario
    where ano_form = pANO_FORM and num_Form = pNUM_FORM;
    Funcoes.obtem_header_det('NSRetrieval',vContract_env, vOperation_env);
    if V_COD_PAIS_SCH_REPRES is not null then
        ValRepresentanteID := funcoes.obtem_valor_vis(V_COD_PAIS_SCH_REPRES,'CT70_USER');
    end if;
    PComum(vDOCUMENTO,vELEMENTOS_ROOT,'NSRetrieval',vHEADER_MESSAGEID,vContract_env, vOperation_env, 'RetrievalLawEnforcement', '0007',vRole,TestId,ValRepresentanteID);
    PComBodyRetrieval(vDOCUMENTO, pANO_FORM, pNUM_FORM);

   /*Action*/
   vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'Action');
   vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
   /*LawEnforcement*/
   vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'LawEnforcement');
   vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

   /*IdentifierChoice*/
   vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:IdentifierChoice');
   vUSER_NODE.extend;
   vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
    IF pAppNum is not null THEN
      /*ApplicationNumber*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:ApplicationNumber');
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,pAppNum);
      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));
    END IF;
    IF pVisaSticker is not null THEN
      /*VisaStickerNumber*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:VisaStickerNumber');

      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,pVisaSticker);

      vUSER_NODE(7) := xmldom.appendChild(vUSER_NODE(7),
                                          xmldom.makeNode(vTEXTO_ITEM));
     END IF;
      /*Escrever para ficheiro*/
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdta',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Application');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdtc',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Common');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:xsi',
                                          'http://www.w3.org/2001/XMLSchema-instance');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xsi:schemaLocation',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages' ||
                                          chr(13) || vCcaminhoXSD ||
                                          'NSRetrieval.xsd');

    xmldom.writeToFile(vDOCUMENTO,
                       vCcaminhoXML ||
                       'RetrievalLawEnforcement.xml');
    xmldom.writeToClob(vDOCUMENTO, v_clob);
    select replace(v_clob,'Header xmlns=""','Header') into v_clob from dual;
    select replace(v_clob,'Request xmlns=""','Request') into v_clob from dual;
    insert into temp_env_vis (id_env_vis,ano_form,num_form,cod_comm_vistos,message_xml,cri_uti,cri_dat)
    values(vHEADER_MESSAGEID,pANO_FORM,pNUM_FORM,10,v_clob,user,sysdate);
    --commit;
    --Chama VIS
    msg_resp_vis := funcoes.Envia_Vis(null,v_web_service_retrieval,null,vHEADER_MESSAGEID);
    /*Libertar os recursos*/
    xmldom.freeDocument(vDOCUMENTO);
  END;
  procedure PRetrievalVerificationBorder(pVisaSticker in VARCHAR2,msg_resp_vis out VARCHAR2,
                                         pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE, vRole in varchar2, TestId in varchar2) is

  vDOCUMENTO      xmldom.DOMDocument;
  vELEMENTOS_ROOT xmldom.DOMElement;
  vELEMTENTO_ITEM xmldom.DOMElement;
  vTEXTO_ITEM     xmldom.DOMText;
  v_clob          clob:='xxx';
  V_COD_PAIS_SCH_REPRES formulario.cod_pais_sch_repres%type;
  ValRepresentanteID conversao_vis.valor_vis%type;
  BEGIN
    select cod_pais_sch_repres into V_COD_PAIS_SCH_REPRES
    from formulario
    where ano_form = pANO_FORM and num_Form = pNUM_FORM;
    Funcoes.obtem_header_det('NSRetrieval',vContract_env, vOperation_env);
    if V_COD_PAIS_SCH_REPRES is not null then
        ValRepresentanteID := funcoes.obtem_valor_vis(V_COD_PAIS_SCH_REPRES,'CT70_USER');
    end if;
    PComum(vDOCUMENTO,vELEMENTOS_ROOT,'NSRetrieval',vHEADER_MESSAGEID,vContract_env, vOperation_env, 'RetrievalVerificationBorder', '0003',vRole,TestId,ValRepresentanteID);
    PComBodyRetrieval(vDOCUMENTO, pANO_FORM, pNUM_FORM);

   /*Action*/
   vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'Action');
   vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
   /*VerificationBorder*/
   vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'VerificationBorder');
   vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

   /*VisaStickerNumber*/
   vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'VisaStickerNumber');

   vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                         xmldom.makeNode(vELEMTENTO_ITEM));

   vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,pVisaSticker);

   vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vTEXTO_ITEM));

    /*Escrever para ficheiro*/
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdta',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Application');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdtc',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Common');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:xsi',
                                          'http://www.w3.org/2001/XMLSchema-instance');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xsi:schemaLocation',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages' ||
                                          chr(13) || vCcaminhoXSD ||
                                          'NSRetrieval.xsd');

    /*xmldom.writeToFile(vDOCUMENTO,
                       vCcaminhoXML ||
                       'RetrievalVerificationBorder.xml');*/
    xmldom.writeToClob(vDOCUMENTO, v_clob);
    select replace(v_clob,'Header xmlns=""','Header') into v_clob from dual;
    select replace(v_clob,'Request xmlns=""','Request') into v_clob from dual;
    --funcoes.write_clob_tofile(vCcaminhoXML => vCcaminhoXML,vfilename => 'RetrievalVerificationBorder',v_clob => v_clob);
    insert into temp_env_vis (id_env_vis,ano_form,num_form,cod_comm_vistos,message_xml,cri_uti,cri_dat)
    values(vHEADER_MESSAGEID,pANO_FORM,pNUM_FORM,10,v_clob,user,sysdate);
    --commit;
    --Chama VIS
    msg_resp_vis := funcoes.Envia_Vis(null,v_web_service_retrieval,null,vHEADER_MESSAGEID);
    /*Libertar os recursos*/
    xmldom.freeDocument(vDOCUMENTO);
  END;
  procedure PRetrievalVerificationTerrit(pVisaSticker in VARCHAR2,msg_resp_vis out VARCHAR2,
                                         pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE, vRole in varchar2,TestId in varchar2) is

  vDOCUMENTO      xmldom.DOMDocument;
  vELEMENTOS_ROOT xmldom.DOMElement;
  vELEMTENTO_ITEM xmldom.DOMElement;
  vTEXTO_ITEM     xmldom.DOMText;
  v_clob          clob:='xxx';
  V_COD_PAIS_SCH_REPRES formulario.cod_pais_sch_repres%type;
  ValRepresentanteID conversao_vis.valor_vis%type;
  BEGIN
    select cod_pais_sch_repres into V_COD_PAIS_SCH_REPRES
    from formulario
    where ano_form = pANO_FORM and num_Form = pNUM_FORM;
    Funcoes.obtem_header_det('NSRetrieval',vContract_env, vOperation_env);
    if V_COD_PAIS_SCH_REPRES is not null then
        ValRepresentanteID := funcoes.obtem_valor_vis(V_COD_PAIS_SCH_REPRES,'CT70_USER');
    end if;
    PComum(vDOCUMENTO,vELEMENTOS_ROOT,'NSRetrieval',vHEADER_MESSAGEID,vContract_env, vOperation_env, 'RetrievalVerificationTerritory', '0004',vRole,TestId,ValRepresentanteID);
    PComBodyRetrieval(vDOCUMENTO, pANO_FORM, pNUM_FORM);

   /*Action*/
   vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'Action');
   vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
   /*VerificationTerritory*/
   vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'VerificationTerritory');
   vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

   /*VisaStickerNumber*/
   vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'VisaStickerNumber');

   vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                         xmldom.makeNode(vELEMTENTO_ITEM));

   vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,pVisaSticker);

   vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vTEXTO_ITEM));

    /*Escrever para ficheiro*/
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdta',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Application');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdtc',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Common');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:xsi',
                                          'http://www.w3.org/2001/XMLSchema-instance');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xsi:schemaLocation',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages' ||
                                          chr(13) || vCcaminhoXSD ||
                                          'NSRetrieval.xsd');

    xmldom.writeToFile(vDOCUMENTO,
                       vCcaminhoXML ||
                       'RetrievalVerificationTerritory.xml');
    xmldom.writeToClob(vDOCUMENTO, v_clob);
    select replace(v_clob,'Header xmlns=""','Header') into v_clob from dual;
    select replace(v_clob,'Request xmlns=""','Request') into v_clob from dual;
    insert into temp_env_vis (id_env_vis,ano_form,num_form,cod_comm_vistos,message_xml,cri_uti,cri_dat)
    values(vHEADER_MESSAGEID,pANO_FORM,pNUM_FORM,10,v_clob,user,sysdate);
    --commit;
    --Chama VIS
    msg_resp_vis := funcoes.Envia_Vis(null,v_web_service_retrieval,null,vHEADER_MESSAGEID);
    /*Libertar os recursos*/
    xmldom.freeDocument(vDOCUMENTO);
  END;
  procedure PRetrievalBiometricData(vBioID in VARCHAR2,pANO_FORM IN NUMBER,pNUM_FORM IN NUMBER,msg_resp_vis out clob, vRole in varchar2,TestId in varchar2) is
    vDOCUMENTO      xmldom.DOMDocument;
    vELEMENTOS_ROOT xmldom.DOMElement;
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    v_clob          clob:='xxx';
    V_COD_PAIS_SCH_REPRES formulario.cod_pais_sch_repres%type;
    ValRepresentanteID conversao_vis.valor_vis%type;
  BEGIN
    select cod_pais_sch_repres into V_COD_PAIS_SCH_REPRES
    from formulario
    where ano_form = pANO_FORM and num_Form = pNUM_FORM;
    Funcoes.obtem_header_det('NSRetrieveBiometricData',vContract_env, vOperation_env);
    if V_COD_PAIS_SCH_REPRES is not null then
        ValRepresentanteID := funcoes.obtem_valor_vis(V_COD_PAIS_SCH_REPRES,'CT70_USER');
    end if;
    PComum(vDOCUMENTO,vELEMENTOS_ROOT,'NSRetrieveBiometricData',vHEADER_MESSAGEID,vContract_env, vOperation_env, null, null,vRole,TestId,ValRepresentanteID);
    PComBodyRetrieval(vDOCUMENTO, pANO_FORM, pNUM_FORM);

    /*AttachmentID*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'AttachmentID');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         vBioID);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));

    /*IncludeMasterData*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'IncludeMasterData');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         'true');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));

    /*IncludeBinaryData*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'IncludeBinaryData');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         'true');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));

    /*Escrever para ficheiro*/
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdta',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Application');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdtc',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Common');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:xsi',
                                          'http://www.w3.org/2001/XMLSchema-instance');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xsi:schemaLocation',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages' ||
                                          chr(13) || vCcaminhoXSD ||
                                          'NSRetrieveBiometricData.xsd');

    /*xmldom.writeToFile(vDOCUMENTO,
                       vCcaminhoXML || 'RetrievalBiometricData.xml');*/
    xmldom.writeToClob(vDOCUMENTO, v_clob);
    select replace(v_clob,'Header xmlns=""','Header') into v_clob from dual;
    select replace(v_clob,'Request xmlns=""','Request') into v_clob from dual;
    insert into temp_env_vis (id_env_vis,ano_form,num_form,cod_comm_vistos,message_xml,cri_uti,cri_dat)
    values(vHEADER_MESSAGEID,pANO_FORM,pNUM_FORM,31,v_clob,user,sysdate);
    --commit;
    --Chama VIS
    msg_resp_vis := funcoes.Envia_Vis(null,v_web_service_retrieval,null,vHEADER_MESSAGEID);

    /*Libertar os recursos*/
    xmldom.freeDocument(vDOCUMENTO);
  END;
  procedure PRetrievalFacialImageData(vBioID in VARCHAR2,pANO_FORM IN NUMBER,pNUM_FORM IN NUMBER,msg_resp_vis out VARCHAR2, vRole in varchar2,TestId in varchar2) is
    vDOCUMENTO      xmldom.DOMDocument;
    vELEMENTOS_ROOT xmldom.DOMElement;
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    v_clob          clob:='xxx';
    V_COD_PAIS_SCH_REPRES formulario.cod_pais_sch_repres%type;
    ValRepresentanteID conversao_vis.valor_vis%type;
  BEGIN
    select cod_pais_sch_repres into V_COD_PAIS_SCH_REPRES
    from formulario
    where ano_form = pANO_FORM and num_Form = pNUM_FORM;
    Funcoes.obtem_header_det('NSRetrieveFacialImageData',vContract_env, vOperation_env);
    if V_COD_PAIS_SCH_REPRES is not null then
        ValRepresentanteID := funcoes.obtem_valor_vis(V_COD_PAIS_SCH_REPRES,'CT70_USER');
    end if;
    PComum(vDOCUMENTO,vELEMENTOS_ROOT,'NSRetrieveFacialImageData',vHEADER_MESSAGEID,vContract_env, vOperation_env, null, null,vRole,TestId,ValRepresentanteID);
    PComBodyRetrieval(vDOCUMENTO, pANO_FORM, pNUM_FORM);

    /*AttachmentID*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'AttachmentID');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         vBioID);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));

    /*IncludeMasterData*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'IncludeMasterData');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         'true');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));

    /*IncludeBinaryData*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'IncludeBinaryData');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         'true');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));

    /*Escrever para ficheiro*/
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdta',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Application');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdtc',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Common');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:xsi',
                                          'http://www.w3.org/2001/XMLSchema-instance');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xsi:schemaLocation',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages' ||
                                          chr(13) || vCcaminhoXSD ||
                                          'NSRetrieveFacialImageData.xsd');

    /*xmldom.writeToFile(vDOCUMENTO,
                       vCcaminhoXML || 'RetrieveFacialImageData.xml');*/
    xmldom.writeToClob(vDOCUMENTO, v_clob);
    select replace(v_clob,'Header xmlns=""','Header') into v_clob from dual;
    select replace(v_clob,'Request xmlns=""','Request') into v_clob from dual;
    --funcoes.write_clob_tofile(vCcaminhoXML => vCcaminhoXML,vfilename => 'RetrieveFacialImageData',v_clob => v_clob);
    insert into temp_env_vis (id_env_vis,ano_form,num_form,cod_comm_vistos,message_xml,cri_uti,cri_dat)
    values(vHEADER_MESSAGEID,pANO_FORM,pNUM_FORM,32,v_clob,user,sysdate);
    --commit;
    --Chama VIS
    msg_resp_vis := funcoes.Envia_Vis(null,v_web_service_retrieval,null,vHEADER_MESSAGEID);

    /*Libertar os recursos*/
    xmldom.freeDocument(vDOCUMENTO);
  END;
  procedure PComBodyListRetrievals(vDOCUMENTO in out xmldom.DOMDocument, ano_form1 in number, num_form1 in number) is
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    v_valor_vis  conversao_vis.valor_vis%type;
    v_cid_pos    posto.cid_pos%type;
  BEGIN
    select funcoes.obtem_valor_vis(cod_pais,'PAIS'), cid_pos
    into  v_valor_vis, v_cid_pos
    from formulario f, posto p
    where f.cod_pos = p.cod_pos
    and ano_form = ano_form1 and num_form = num_form1;

    /*request*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Request');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    /*Authority*/
    vUSER_NODE.extend;
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Authority');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));

    vUSER_NODE.extend;
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:AuthorityLocation');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vELEMTENTO_ITEM));

    vUSER_NODE.extend;
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:Country');
    vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         /*v_valor_vis*/'0080.01');
    vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(6),
                                        xmldom.makeNode(vTEXTO_ITEM));

    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:Place');
    vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         /*v_cid_pos*/'TBILISI');
    vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(6),
                                        xmldom.makeNode(vTEXTO_ITEM));

    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:AuthorityName');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         'MNE');
                                         --'EMBASSY OF AUSTRIA');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(5),
                                        xmldom.makeNode(vTEXTO_ITEM));

    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:AuthorityType');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         '0001.01');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(5),
                                        xmldom.makeNode(vTEXTO_ITEM));
  end;
  procedure PLstApplicationsInGroup (pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,
                                     pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE,
                                     vGroupID in varchar2,
                                     msg_resp_vis out varchar2, vRole in varchar2,TestId in varchar2) is
    vDOCUMENTO      xmldom.DOMDocument;
    vELEMENTOS_ROOT xmldom.DOMElement;
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    v_clob          clob:='xxx';
    V_COD_PAIS_SCH_REPRES formulario.cod_pais_sch_repres%type;
    ValRepresentanteID conversao_vis.valor_vis%type;
    /*Constantes*/
    --vGroupID varchar2(6) := '123456';
  BEGIN
    select cod_pais_sch_repres into V_COD_PAIS_SCH_REPRES
    from formulario
    where ano_form = pANO_FORM and num_Form = pNUM_FORM;
    Funcoes.obtem_header_det('NSListApplicationsInGroup',vContract_env, vOperation_env);
    if V_COD_PAIS_SCH_REPRES is not null then
        ValRepresentanteID := funcoes.obtem_valor_vis(V_COD_PAIS_SCH_REPRES,'CT70_USER');
    end if;
    PComum(vDOCUMENTO,vELEMENTOS_ROOT,'NSListApplicationsInGroup',vHEADER_MESSAGEID,vContract_env, vOperation_env, null, null,vRole,TestId,ValRepresentanteID);
    PComBodyListRetrievals(vDOCUMENTO, pANO_FORM, pNUM_FORM);

    /*GroupID*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'GroupID');
    vUSER_NODE.extend;
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         vGroupID);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Escrever para ficheiro*/
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdta',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Application');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdtc',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Common');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:xsi',
                                          'http://www.w3.org/2001/XMLSchema-instance');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xsi:schemaLocation',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages' ||
                                          chr(13) || vCcaminhoXSD ||
                                          'NSListApplicationsInGroup.xsd');

    /*xmldom.writeToFile(vDOCUMENTO,
                       vCcaminhoXML || 'ListApplicationsInGroup.xml');*/
    xmldom.writeToClob(vDOCUMENTO, v_clob);
    select replace(v_clob,'Header xmlns=""','Header') into v_clob from dual;
    select replace(v_clob,'Request xmlns=""','Request') into v_clob from dual;
    --funcoes.write_clob_tofile(vCcaminhoXML => vCcaminhoXML,vfilename => 'ListApplicationsInGroup',v_clob => v_clob);
    insert into temp_env_vis (id_env_vis,ano_form,num_form,cod_comm_vistos,message_xml,cri_uti,cri_dat)
    values(vHEADER_MESSAGEID,pANO_FORM,pNUM_FORM,26,v_clob,user,sysdate);
    --commit;
    --Chama VIS
    msg_resp_vis := funcoes.Envia_Vis(null,v_web_service_retrieval,null,vHEADER_MESSAGEID);
    /*Libertar os recursos*/
    xmldom.freeDocument(vDOCUMENTO);
  END;
  procedure PLstApplicationsInFamilyGroup (pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,
                                           pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE,
                                           vGroupID in varchar2,msg_resp_vis out varchar2, vRole in varchar2,TestId in varchar2) is
    vDOCUMENTO      xmldom.DOMDocument;
    vELEMENTOS_ROOT xmldom.DOMElement;
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    v_clob          clob:='xxx';
    V_COD_PAIS_SCH_REPRES formulario.cod_pais_sch_repres%type;
    ValRepresentanteID conversao_vis.valor_vis%type;
    /*Constantes*/
    --vGroupID varchar2(6) := '123456';
  BEGIN
    select cod_pais_sch_repres into V_COD_PAIS_SCH_REPRES
    from formulario
    where ano_form = pANO_FORM and num_Form = pNUM_FORM;
    Funcoes.obtem_header_det('NSListApplicationsInFamilyGroup',vContract_env, vOperation_env);
    if V_COD_PAIS_SCH_REPRES is not null then
        ValRepresentanteID := funcoes.obtem_valor_vis(V_COD_PAIS_SCH_REPRES,'CT70_USER');
    end if;
    PComum(vDOCUMENTO,vELEMENTOS_ROOT,'NSListApplicationsInFamilyGroup',vHEADER_MESSAGEID,vContract_env, vOperation_env, null, null,vRole,TestId,ValRepresentanteID);
    PComBodyListRetrievals(vDOCUMENTO, pANO_FORM, pNUM_FORM);

    /*GroupID*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'GroupID');
    vUSER_NODE.extend;
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         vGroupID);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Escrever para ficheiro*/
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdta',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Application');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdtc',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Common');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:xsi',
                                          'http://www.w3.org/2001/XMLSchema-instance');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xsi:schemaLocation',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages' ||
                                          chr(13) || vCcaminhoXSD ||
                                          'NSListApplicationsInFamilyGroup.xsd');

    /*xmldom.writeToFile(vDOCUMENTO,
                       vCcaminhoXML || 'ListApplicationsInFamilyGroup.xml');*/
    xmldom.writeToClob(vDOCUMENTO, v_clob);
    select replace(v_clob,'Header xmlns=""','Header') into v_clob from dual;
    select replace(v_clob,'Request xmlns=""','Request') into v_clob from dual;
    --funcoes.write_clob_tofile(vCcaminhoXML => vCcaminhoXML,vfilename => 'ListApplicationsInFamilyGroup',v_clob => v_clob);
    insert into temp_env_vis (id_env_vis,ano_form,num_form,cod_comm_vistos,message_xml,cri_uti,cri_dat)
    values(vHEADER_MESSAGEID,pANO_FORM,pNUM_FORM,27,v_clob,user,sysdate);
    --commit;
    --Chama VIS
    msg_resp_vis := funcoes.Envia_Vis(null,v_web_service_retrieval,null,vHEADER_MESSAGEID);
    /*Libertar os recursos*/
    xmldom.freeDocument(vDOCUMENTO);
  END;
  procedure PLstVisaInGroup (pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,
                             pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE,
                             vGroupID in varchar2, msg_resp_vis out varchar2, vRole in varchar2,TestId in varchar2) is
    vDOCUMENTO      xmldom.DOMDocument;
    vELEMENTOS_ROOT xmldom.DOMElement;
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    v_clob          clob:='xxx';
    V_COD_PAIS_SCH_REPRES formulario.cod_pais_sch_repres%type;
    ValRepresentanteID conversao_vis.valor_vis%type;
  BEGIN
    select cod_pais_sch_repres into V_COD_PAIS_SCH_REPRES
    from formulario
    where ano_form = pANO_FORM and num_Form = pNUM_FORM;
    Funcoes.obtem_header_det('NSListVisaInGroup',vContract_env, vOperation_env);
    if V_COD_PAIS_SCH_REPRES is not null then
        ValRepresentanteID := funcoes.obtem_valor_vis(V_COD_PAIS_SCH_REPRES,'CT70_USER');
    end if;
    PComum(vDOCUMENTO,vELEMENTOS_ROOT,'NSListVisaInGroup',vHEADER_MESSAGEID,vContract_env, vOperation_env, null, null,vRole,TestId,ValRepresentanteID);
    PComBodyListRetrievals(vDOCUMENTO, pANO_FORM, pNUM_FORM);

    /*GroupID*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'GroupID');
    vUSER_NODE.extend;
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         vGroupID);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*Escrever para ficheiro*/
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdta',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Application');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdtc',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Common');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:xsi',
                                          'http://www.w3.org/2001/XMLSchema-instance');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xsi:schemaLocation',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages' ||
                                          chr(13) || vCcaminhoXSD ||
                                          'NSListVisaInGroup.xsd');

    /*xmldom.writeToFile(vDOCUMENTO,
                       vCcaminhoXML || 'ListVisaInGroup.xml');*/
    xmldom.writeToClob(vDOCUMENTO, v_clob);
    select replace(v_clob,'Header xmlns=""','Header') into v_clob from dual;
    select replace(v_clob,'Request xmlns=""','Request') into v_clob from dual;
    --funcoes.write_clob_tofile(vCcaminhoXML => vCcaminhoXML,vfilename => 'ListVisaInGroup',v_clob => v_clob);
    insert into temp_env_vis (id_env_vis,ano_form,num_form,cod_comm_vistos,message_xml,cri_uti,cri_dat)
    values(vHEADER_MESSAGEID,pANO_FORM,pNUM_FORM,29,v_clob,user,sysdate);
    --commit;
    --Chama VIS
    msg_resp_vis := funcoes.Envia_Vis(null,v_web_service_retrieval,null,vHEADER_MESSAGEID);
    /*Libertar os recursos*/
    xmldom.freeDocument(vDOCUMENTO);
  END;
  Procedure PLstFacialImageData(pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,
                              pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE, tipo IN varchar2, msg_resp_vis OUT VARCHAR2, vRole in varchar2,TestId in varchar2) is

    vDOCUMENTO      xmldom.DOMDocument;
    vELEMENTOS_ROOT xmldom.DOMElement;
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    v_clob          clob:='xxx';
    pVisaSticker    vinheta.num_vin%type;

    CURSOR CLREGS1 IS
      select A.*
        from FORMULARIO A
       WHERE A.ANO_FORM = pANO_FORM AND
             A.NUM_FORM = pNUM_FORM;
    CREGS1 FORMULARIO%ROWTYPE;
    ValRepresentanteID conversao_vis.valor_vis%type;
  BEGIN
      OPEN CLREGS1;
      FETCH CLREGS1 INTO CREGS1;
      IF CLREGS1%NOTFOUND THEN
        RAISE NO_DATA_FOUND;
      END IF;
      CLOSE CLREGS1;

      Funcoes.obtem_header_det('NSListFacialImageData',vContract_env, vOperation_env);
      if CREGS1.COD_PAIS_SCH_REPRES is not null then
        ValRepresentanteID := funcoes.obtem_valor_vis(CREGS1.COD_PAIS_SCH_REPRES,'CT70_USER');
      end if;
      PComum(vDOCUMENTO, vELEMENTOS_ROOT,'NSListFacialImageData',vHEADER_MESSAGEID,vContract_env, vOperation_env, null, null,vRole,TestId,ValRepresentanteID);
      PComBodyListRetrievals(vDOCUMENTO, pANO_FORM, pNUM_FORM);

      /*IdentifierChoice*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'IdentifierChoice');
      vUSER_NODE.extend;
      vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
      IF tipo = 'A' THEN
         /*ApplicationNumber*/
         vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:ApplicationNumber');
         vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

         vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,CREGS1.COD_PAIS_SCH_REF || CREGS1.REF_FORM_2);
         vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vTEXTO_ITEM));
      ELSIF tipo = 'V' THEN
         select num_vin
         into pVisaSticker
         from vinheta
         where ano_form = pANO_FORM and num_form = pNUM_FORM
         and est_vin = 'E';

         /*VisaStickerNumber*/
         vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:VisaStickerNumber');

         vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

         vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,pVisaSticker);

         vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vTEXTO_ITEM));
      END IF;


      /*Escrever para ficheiro*/
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdta',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Application');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdtc',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Common');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:xsi',
                                          'http://www.w3.org/2001/XMLSchema-instance');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xsi:schemaLocation',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages' ||
                                          chr(13) || vCcaminhoXSD ||
                                          'NSListFacialImageData.xsd');
      /*xmldom.writeToFile(vDOCUMENTO,
                         vCcaminhoXML || 'PListFacialImageData.xml');*/
      xmldom.writeToClob(vDOCUMENTO, v_clob);

      select replace(v_clob,'Header xmlns=""','Header') into v_clob from dual;
      select replace(v_clob,'Request xmlns=""','Request') into v_clob from dual;
      --funcoes.write_clob_tofile(vCcaminhoXML => vCcaminhoXML,vfilename => 'PListFacialImageData',v_clob => v_clob);
      insert into temp_env_vis (id_env_vis,ano_form,num_form,cod_comm_vistos,message_xml,cri_uti,cri_dat)
      values(vHEADER_MESSAGEID,pANO_FORM,pNUM_FORM,28,v_clob,user,sysdate);
      --commit;
      --Chama VIS
      msg_resp_vis := funcoes.Envia_Vis(null,v_web_service_retrieval,null,vHEADER_MESSAGEID);

      /*Libertar os recursos*/
      xmldom.freeDocument(vDOCUMENTO);
   end;
  procedure PLstRetrievalDossier(vApplicationNumber in formulario.ref_form_2%type, pVisaSticker in vinheta.num_vin%type, pANO_FORM in formulario.ano_form%type, pNUM_FORM in formulario.num_form%type, msg_resp_vis out VARCHAR2, vRole in varchar2,TestId in varchar2) is
    vDOCUMENTO      xmldom.DOMDocument;
    vELEMENTOS_ROOT xmldom.DOMElement;
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    V_COD_PAIS_SCH_REPRES formulario.cod_pais_sch_repres%type;
    ValRepresentanteID conversao_vis.valor_vis%type;
    /*Constantes*/
    v_clob          clob:='xxx';
  BEGIN
    select cod_pais_sch_repres into V_COD_PAIS_SCH_REPRES
    from formulario
    where ano_form = pANO_FORM and num_Form = pNUM_FORM;
    Funcoes.obtem_header_det('NSListApplicationsInDossier',vContract_env, vOperation_env);
    if V_COD_PAIS_SCH_REPRES is not null then
        ValRepresentanteID := funcoes.obtem_valor_vis(V_COD_PAIS_SCH_REPRES,'CT70_USER');
    end if;
    PComum(vDOCUMENTO,vELEMENTOS_ROOT,'NSListApplicationsInDossier',vHEADER_MESSAGEID,vContract_env, vOperation_env, null, '0000',vRole,TestId,ValRepresentanteID);

    PComBodyListRetrievals(vDOCUMENTO, pANO_FORM, pNUM_FORM);
    /*Action*/
   vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'Action');
   vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

   /*ApplicationExamination*/
   vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'ApplicationExamination');
   vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

   IF vApplicationNumber is not null THEN
      /*ApplicationNumber*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:ApplicationNumber');
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO, vApplicationNumber);
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vTEXTO_ITEM));
    END IF;
    IF pVisaSticker is not null THEN
      /*VisaStickerNumber*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:VisaStickerNumber');

      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,pVisaSticker);

      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vTEXTO_ITEM));
     END IF;
    /*Escrever para ficheiro*/
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdta',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Application');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdtc',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Common');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:xsi',
                                          'http://www.w3.org/2001/XMLSchema-instance');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xsi:schemaLocation',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages' ||
                                          chr(13) || vCcaminhoXSD ||
                                          'NSListApplicationsInDossier.xsd');
    /*xmldom.writeToFile(vDOCUMENTO,
                       vCcaminhoXML ||
                       'ListApplicationsInDossier.xml');*/
    xmldom.writeToClob(vDOCUMENTO, v_clob);
    select replace(v_clob,'Header xmlns=""','Header') into v_clob from dual;
    select replace(v_clob,'Request xmlns=""','Request') into v_clob from dual;
    --funcoes.write_clob_tofile(vCcaminhoXML => vCcaminhoXML,vfilename => 'ListApplicationsInDossier',v_clob => v_clob);
    insert into temp_env_vis (id_env_vis,ano_form,num_form,cod_comm_vistos,message_xml,cri_uti,cri_dat)
    values(vHEADER_MESSAGEID,pANO_FORM,pNUM_FORM,17,v_clob,user,sysdate);
    --commit;
    --Chama VIS
    msg_resp_vis := funcoes.Envia_Vis(null,v_web_service_retrieval,null,vHEADER_MESSAGEID);
    /*Libertar os recursos*/
    xmldom.freeDocument(vDOCUMENTO);
  END;
  procedure PLstRetrievalDossierOther(vApplicationNumber in formulario.ref_form_2%type, pVisaSticker in vinheta.num_vin%type, pANO_FORM in formulario.ano_form%type, pNUM_FORM in formulario.num_form%type, msg_resp_vis out VARCHAR2, vRole in varchar2,TestId in varchar2) is
    vDOCUMENTO      xmldom.DOMDocument;
    vELEMENTOS_ROOT xmldom.DOMElement;
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    /*Constantes*/
    v_clob          clob:='xxx';
    V_COD_PAIS_SCH_REPRES formulario.cod_pais_sch_repres%type;
    ValRepresentanteID conversao_vis.valor_vis%type;
  BEGIN
    select cod_pais_sch_repres into V_COD_PAIS_SCH_REPRES
    from formulario
    where ano_form = pANO_FORM and num_Form = pNUM_FORM;
    Funcoes.obtem_header_det('NSListApplicationsInDossier',vContract_env, vOperation_env);
    if V_COD_PAIS_SCH_REPRES is not null then
        ValRepresentanteID := funcoes.obtem_valor_vis(V_COD_PAIS_SCH_REPRES,'CT70_USER');
    end if;
    PComum(vDOCUMENTO,vELEMENTOS_ROOT,'NSListApplicationsInDossier',vHEADER_MESSAGEID,vContract_env, vOperation_env, 'ListDossierOther', '0021',vRole,TestId,ValRepresentanteID);

    PComBodyListRetrievals(vDOCUMENTO, pANO_FORM, pNUM_FORM);
    /*Action*/
   vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'Action');
   vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
    /*Other*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'Other');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

   IF vApplicationNumber is not null THEN
      /*ApplicationNumber*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:ApplicationNumber');
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO, vApplicationNumber);
      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vTEXTO_ITEM));
    END IF;
    IF pVisaSticker is not null THEN
      /*VisaStickerNumber*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdta:VisaStickerNumber');

      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,pVisaSticker);

      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vTEXTO_ITEM));
     END IF;
    /*Escrever para ficheiro*/
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdta',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Application');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdtc',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Common');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:xsi',
                                          'http://www.w3.org/2001/XMLSchema-instance');
    dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xsi:schemaLocation',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages' ||
                                          chr(13) || vCcaminhoXSD ||
                                          'NSListApplicationsInDossier.xsd');
    xmldom.writeToFile(vDOCUMENTO,
                       vCcaminhoXML ||
                       'ListApplicationsInDossier.xml');
    xmldom.writeToClob(vDOCUMENTO, v_clob);
    select replace(v_clob,'Header xmlns=""','Header') into v_clob from dual;
    select replace(v_clob,'Request xmlns=""','Request') into v_clob from dual;
    insert into temp_env_vis (id_env_vis,ano_form,num_form,cod_comm_vistos,message_xml,cri_uti,cri_dat)
    values(vHEADER_MESSAGEID,pANO_FORM,pNUM_FORM,17,v_clob,user,sysdate);
    --commit;
    --Chama VIS
    msg_resp_vis := funcoes.Envia_Vis(null,v_web_service_retrieval,null,vHEADER_MESSAGEID);
    /*Libertar os recursos*/
    xmldom.freeDocument(vDOCUMENTO);
  END;
  procedure PListBiometricData (pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,
                                pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE,
                                msg_resp_vis OUT VARCHAR2, vRole in varchar2,TestId in varchar2) is
    vDOCUMENTO      xmldom.DOMDocument;
    vELEMENTOS_ROOT xmldom.DOMElement;
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    v_clob          clob:='xxx';
    v_cod_pais_sch_ref formulario.cod_pais_sch_ref%type;
    v_ref_form_2       formulario.ref_form_2%type;
    V_COD_PAIS_SCH_REPRES formulario.cod_pais_sch_repres%type;
    ValRepresentanteID conversao_vis.valor_vis%type;
  BEGIN
    select f.cod_pais_sch_ref, f.ref_form_2, f.cod_pais_sch_repres
    into v_cod_pais_sch_ref, v_ref_form_2, v_cod_pais_sch_repres
    from formulario f
    where f.ano_form = pANO_FORM and f.num_form = pNUM_FORM;

    Funcoes.obtem_header_det('NSListBiometricData',vContract_env, vOperation_env);
    if V_COD_PAIS_SCH_REPRES is not null then
        ValRepresentanteID := funcoes.obtem_valor_vis(V_COD_PAIS_SCH_REPRES,'CT70_USER');
    end if;
    PComum(vDOCUMENTO,vELEMENTOS_ROOT,'NSListBiometricData',vHEADER_MESSAGEID,vContract_env, vOperation_env, null, null,vRole,TestId,ValRepresentanteID);
    PComBodyListRetrievals(vDOCUMENTO, pANO_FORM, pNUM_FORM);

    /*ApplicationNumber*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'ApplicationNumber');
    vUSER_NODE.extend;
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         v_cod_pais_sch_ref || v_ref_form_2);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));

    /*Escrever para ficheiro*/
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdta',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Application');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdtc',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Common');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:xsi',
                                          'http://www.w3.org/2001/XMLSchema-instance');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xsi:schemaLocation',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages' ||
                                          chr(13) || vCcaminhoXSD ||
                                          'NSListBiometricData.xsd');

    /*xmldom.writeToFile(vDOCUMENTO,
                       vCcaminhoXML || 'ListBiometricData.xml');*/
    xmldom.writeToClob(vDOCUMENTO, v_clob);
    select replace(v_clob,'Header xmlns=""','Header') into v_clob from dual;
    select replace(v_clob,'Request xmlns=""','Request') into v_clob from dual;
    --funcoes.write_clob_tofile(vCcaminhoXML => vCcaminhoXML,vfilename => 'ListBiometricData',v_clob => v_clob);
    insert into temp_env_vis (id_env_vis,ano_form,num_form,cod_comm_vistos,message_xml,cri_uti,cri_dat)
    values(vHEADER_MESSAGEID,pANO_FORM,pNUM_FORM,25,v_clob,user,sysdate);
    --commit;
    --Chama VIS
    msg_resp_vis := funcoes.Envia_Vis(null,v_web_service_retrieval,null,vHEADER_MESSAGEID);
    /*Libertar os recursos*/
    xmldom.freeDocument(vDOCUMENTO);
  END;
End;
/

prompt
prompt Creating package body VISXML_CS
prompt ===============================
prompt
create or replace package body rpv.VISXML_CS is
function ClobToBlob64(p_c in clob)
return blob is
return_blob blob;
buff_raw  raw(32767);
buff_string  varchar2(32767);
len_clob  integer;
len_buff  integer := 44;
begin
len_clob := dbms_lob.getlength(p_c);
dbms_lob.createtemporary(return_blob, true);
for i in 0..(ceil(len_clob/len_buff)-1) loop
 dbms_lob.read(p_c, len_buff, i*len_buff + 1, buff_string);
 buff_raw := utl_encode.base64_decode(utl_raw.cast_to_raw(buff_string));
 dbms_lob.writeappend(return_blob, utl_raw.length(buff_raw), buff_raw);
end loop;
return return_blob;
end ClobToBlob64;
function Extrai_Valor_XML(inpfile clob, nome_no varchar2, prefixo varchar2, nome_sub_no varchar2, posicao number)
 return clob is

doc            xmldom.DOMDocument;
node           xmldom.DOMNode;
node2      	   xmldom.DOMNode;
chldrn     	   xmldom.DOMNodeList;
len	   	       number;
xmlfile        CLOB;
p              xmlparser.parser;
--valor_no       varchar2(32000);
valor_no       clob;
flag           number(1):=0;
conta          number(10):=0;
pos1           number(10);
pos2           number(10);
begin
xmlfile := inpfile;
-- create a parser
p := xmlparser.newParser;
-- parse the XML document
xmlparser.ParseCLOB(p,xmlfile);
-- get document
doc := xmlparser.getDocument(p);
-- free the parser
xmlparser.freeParser(p);
-- get all elements
if nome_sub_no is null then
   chldrn := xmldom.getElementsByTagName(doc, nome_no);
elsif nome_sub_no is not null or posicao is not null then
   chldrn := xmldom.getElementsByTagName(doc, '*');
end if;
len := xmldom.getLength(chldrn);
for i in 0..len-1 loop
    node := xmldom.item(chldrn, i);
    node2 := xmldom.getFirstChild(node);

    if posicao is not null and xmldom.getNodeName(node) = prefixo || nome_no then
       conta := conta + 1;
    end if;

    if (xmldom.getNodeName(node) = prefixo || nome_no and conta = posicao) or (flag = 1) then
        if nome_sub_no is null then
           valor_no := xmldom.getNodeValue(node2);
           xmldom.freeDocument(doc);
           return(valor_no);
        else
           if xmldom.getNodeName(node) = prefixo || nome_sub_no then
              if nome_sub_no = 'DataSource' then
                  pos1 := instr(inpfile,'<ns3:DataSource>') + length('<ns3:DataSource>');
                  pos2 := instr(inpfile,'</ns3:DataSource>') + 1;
                  select substr(inpfile, pos1, length(inpfile) - ((length(inpfile)) - pos2) - pos1 -1) into valor_no from dual;
                  return(valor_no);
              else
                  valor_no := xmldom.getNodeValue(node2);
              end if;
              xmldom.freeDocument(doc);
              return(valor_no);
           elsif xmldom.getNodeName(node) in ('Begin','End','Place','Country','AuthorityName') and xmldom.getNodeName(node) = nome_sub_no then
              valor_no := xmldom.getNodeValue(node2);
              xmldom.freeDocument(doc);
              return(valor_no);
           end if;
        end if;
        flag := 1;
    end if;
end loop;
xmldom.freeDocument(doc);
return('nada');
exception when others then
   return('nada');
end;
function PSearchAppExamination (inpfile clob, ano_form1 number, num_form1 number, tipo1 varchar2)
 return number is

app_numb        varchar2(50);
photo_id       clob;
b              blob;
numero_applications number(10);
numero_dossiers     number(10);
v_apel              link_vis_manual.apel_candidato%type;
v_nome              link_vis_manual.nome_candidato%type;
v_dat_nasc          link_vis_manual.dat_nasc_candidato%type;
v_nac               link_vis_manual.nac_candidato%type;
v_estado            link_vis_manual.est_pedido_candidato%type;
v_estado_cod        link_vis_manual.est_pedido_candidato%type;
v_dat_ent           link_vis_manual.dat_ent_candidato%type;
v_dat_sai           link_vis_manual.dat_sai_candidato%type;
v_dur_est           link_vis_manual.dur_est_candidato%type;
v_num_vin           link_vis_manual.num_vin_candidato%type;
v_valido_para       link_vis_manual.valido_para_candidato%type;
v_dat_ini_vin       link_vis_manual.dat_ini_vin_candidato%type;
v_dat_fim_vin       link_vis_manual.dat_fim_vin_candidato%type;
v_dat_ini_vin_temp  varchar2(50);
v_dat_fim_vin_temp  varchar2(50);
v_num_ent_vin       link_vis_manual.num_ent_vin_candidato%type;
v_num_ent_vin_temp  varchar2(10);
v_dur_est_vin       link_vis_manual.dur_est_vin_candidato%type;
v_place_app         link_vis_manual.place_app_candidato%type;
v_country_app       link_vis_manual.country_app_candidato%type;
v_nome_autoridade   link_vis_manual.nome_autoridade_candidato%type;
v_attachmentid_finger_cand link_vis_manual.attachmentid_finger_candidato%type;
v_qualitycheck      link_vis_manual.fingers_qualitycheck%type;
v_RefusalGround     parecer_vis.cod_pare_vis%type;
v_dateofapplication link_vis_manual.dateofapplication%type;
v_num_doc_viag      link_vis_manual.num_doc_viag_candidato%type;
v_dat_emidoc        link_vis_manual.dat_emi_doc_viag_candidato%type;
v_dat_validoc       link_vis_manual.dat_vali_doc_viag_candidato%type;
v_finger            link_vis_manual.finger%type;
Rank                varchar2(5);
DossierRank         number(3);
NumbMatchesDossier  number(3);
posicao             number(3);
vmsg_resp_vis       clob;
encontrou           boolean;
conta               number(4);
v_nac_prt           formulario.cod_pais_nac_1%type;
v_nac_cod           pais.cod_pais%type;
v_sexo_prt          formulario.sexo%type;
v_sexo              varchar2(10);
controla_insert     number(1);
begin
    if visxml_cs.extrai_valor_xml(inpfile,'ReturnCode','',null,1) = funcoes.obtem_valor_vis('SUCESSO','ST13_RETURN_CODE') then
          if visxml_cs.extrai_valor_xml(inpfile,'InfoCode','',null,1) = funcoes.obtem_valor_vis('SEM DADOS','ST16_INFO_CODE') then
                if tipo1 = '6' then
                   insert into link_vis_manual (ano_form, num_form, vis_application, tratado, cri_uti, cri_dat, finger)
                   values(ano_form1, num_form1, 'N/E', 'S', user, sysdate, 'N');
                   return(0);
                else
                   return(98);
                end if;
          end if;
    else
          if visxml_cs.extrai_valor_xml(inpfile,'ErrorCode','',null,1) = '9000' then
             return(55);
          else
             return(99);
          end if;
    end if;
    select cod_pais_nac_1, sexo into v_nac_prt, v_sexo_prt
    from formulario
    where ano_form = ano_form1 and num_form = num_form1;
    controla_insert := 0;
    numero_dossiers := to_number(visxml_cs.extrai_valor_xml(inpfile,'NumberOfFoundDossiers','ns3:',null,1));
    numero_applications := to_number(visxml_cs.extrai_valor_xml(inpfile,'NumberOfFoundApplications','ns3:',null,1));
    if numero_dossiers = 1 and numero_applications = 1 then
        App_Numb := visxml_cs.extrai_valor_xml(inpfile,'ApplicationNumber','ns3:',null,1);
        v_apel := visxml_cs.extrai_valor_xml(inpfile,'Surname','ns3:','TransliteratedValue',1);
        v_nome := visxml_cs.extrai_valor_xml(inpfile,'Firstnames','ns3:','TransliteratedValue',1);
        v_dat_nasc := visxml_cs.extrai_valor_xml(inpfile,'DateOfBirth','ns3:',null,1);
        v_dat_nasc := substr(v_dat_nasc,1,4) || '/' || substr(v_dat_nasc,5,2) || '/' || substr(v_dat_nasc,7,2);
        v_sexo := visxml_cs.extrai_valor_xml(inpfile,'Sex','ns3:',null,1);
        begin
        select c.valor_rpv into v_sexo from conversao_vis c
        where c.valor_vis = v_sexo and c.tipo = 'SEXO';
        exception when no_data_found then
                  v_sexo := 'W';
        end;
        v_nac := replace(visxml_cs.extrai_valor_xml(inpfile,'NationalityForApplication','ns3:',null,1),'nada',null);
        if v_nac is not null then
        begin
        select p.des_pais, p.cod_pais into v_nac, v_nac_cod from conversao_vis c, pais p
        where c.valor_vis = v_nac and c.tipo = 'PAIS_NAC' and
        c.valor_rpv = p.cod_pais;
        exception when no_data_found then
                  v_nac := 'NACIONALIDADE INVÁLIDA';
        end;
        end if;
        v_estado_cod := visxml_cs.extrai_valor_xml(inpfile,'ApplicationStatus','ns3:',null,1);
        begin
        select valor_rpv into v_estado from conversao_vis
        where valor_vis = v_estado_cod and tipo = 'ST31_APP_STATUS';
        exception when no_data_found then
                  v_estado := 'ESTADO INVÁLIDO';
        end;
        v_dat_ent := replace(visxml_cs.extrai_valor_xml(inpfile,'IntendedDateOfArrival','ns3:',null,1),'nada',null);
        if v_dat_ent is not null then
           v_dat_ent := substr(v_dat_ent,1,4) || '/' || substr(v_dat_ent,5,2) || '/' || substr(v_dat_ent,7,2);
        end if;
        v_dat_sai := replace(visxml_cs.extrai_valor_xml(inpfile,'IntendedDateOfDeparture','ns3:',null,1),'nada',null);
        if v_dat_sai is not null then
           v_dat_sai := substr(v_dat_sai,1,4) || '/' || substr(v_dat_sai,5,2) || '/' || substr(v_dat_sai,7,2);
        end if;
        v_dur_est := replace(visxml_cs.extrai_valor_xml(inpfile,'DurationOfIntendedStay','ns3:',null,1),'nada',null);
        v_num_vin := replace(visxml_cs.extrai_valor_xml(inpfile,'VisaStickerNumber','ns3:',null,1),'nada',null);
        v_valido_para := replace(visxml_cs.extrai_valor_xml(inpfile,'TerritorialValidity','ns3:','ValidFor',1),'nada',null);
        v_dat_ini_vin_temp := replace(visxml_cs.extrai_valor_xml(inpfile,'VisaSticker','ns3:','Begin',1),'nada',null);
        v_dat_ini_vin := replace(substr(v_dat_ini_vin_temp,1,10),'-','/');
        v_dat_fim_vin_temp := replace(visxml_cs.extrai_valor_xml(inpfile,'VisaSticker','ns3:','End',1),'nada',null);
        v_dat_fim_vin := replace(substr(v_dat_fim_vin_temp,1,10),'-','/');
        v_num_ent_vin_temp := replace(visxml_cs.extrai_valor_xml(inpfile,'NumberOfEntries','ns3:',null,1),'nada',null);
        begin
        select valor_rpv into v_num_ent_vin from conversao_vis
        where valor_vis = v_num_ent_vin_temp and tipo = 'NUM_ENT';
        exception when no_data_found then
                  v_num_ent_vin := null;
        end;
        v_dur_est_vin := replace(visxml_cs.extrai_valor_xml(inpfile,'DurationOfStay','ns3:',null,1),'nada',null);
        v_place_app := substr(visxml_cs.extrai_valor_xml(inpfile,'ApplicationAuthority','ns3:','Place',1),1,50);
        v_country_app := visxml_cs.extrai_valor_xml(inpfile,'ApplicationAuthority','ns3:','Country',1);
        v_nome_autoridade := visxml_cs.extrai_valor_xml(inpfile,'ApplicationAuthority','ns3:','AuthorityName',1);
        v_attachmentid_finger_cand := visxml_cs.extrai_valor_xml(inpfile,'AttachmentID','ns3:',null,2);
        if nvl(v_attachmentid_finger_cand,'nada') = 'nada' then
           v_finger := 'N';
        else
           v_finger := 'S';
        end if;
        photo_id := visxml_cs.extrai_valor_xml(inpfile,'FacialImage','ns3:','DataSource',1);
        v_qualitycheck := visxml_cs.extrai_valor_xml(inpfile,'QualityCheckPassed','ns3:',null,1);
        v_dateofapplication := replace(substr(visxml_cs.extrai_valor_xml(inpfile,'DateOfApplication','ns3:',null,1),1,10),'-','/');
        if v_dateofapplication = 'nada' then
           v_dateofapplication := null;
        end if;
        v_num_doc_viag := visxml_cs.extrai_valor_xml(inpfile,'TravelDocument','ns3:','TravelDocumentNumber',1);
        v_dat_emidoc := replace(substr(visxml_cs.extrai_valor_xml(inpfile,'TravelDocument','ns3:','DateOfIssue',1),1,10),'-','/');
        v_dat_validoc := replace(substr(visxml_cs.extrai_valor_xml(inpfile,'TravelDocument','ns3:','ValidUntil',1),1,10),'-','/');

        if v_estado_cod = '0004' then
           posicao := 1;
           loop
               v_RefusalGround := visxml_cs.extrai_valor_xml(inpfile,'RefusalGround','ns3:',null,posicao);
               if v_RefusalGround = 'nada' then
                  exit;
               else
                  begin
                  insert into vis_link_status_detalhes(ano_form, num_form, cod_pare_vis, cri_uti, cri_dat,vis_application)
                  values(ano_form1, num_form1, v_RefusalGround, user, to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'),App_Numb);
                  exception when dup_val_on_index then
                            encontrou := pk_mail.fu_send_mail('pmarques99@gmail.com','vis_link_status_detalhes','Formulario ' || App_Numb || ' violou a chave de vis_link_status_detalhes. Verifique.'  ,'noreplyvistos@dgaccp.pt');
                  end;
               end if;
               posicao := posicao + 1;
            end loop;
        end if;
        if v_nac_cod = v_nac_prt and v_sexo = v_sexo_prt then
        controla_insert := 1;
        insert into link_vis_manual (ano_form, num_form, vis_application,foto_clob, tratado, cri_uti, cri_dat, apel_candidato, nome_candidato,
        dat_nasc_candidato, est_pedido_candidato, dat_ent_candidato, dat_sai_candidato,
        dur_est_candidato, num_vin_candidato, valido_para_candidato, dat_ini_vin_candidato, dat_fim_vin_candidato,
        num_ent_vin_candidato, dur_est_vin_candidato, place_app_candidato, attachmentid_finger_candidato, nac_candidato,fingers_qualitycheck,dateofapplication,dossier,country_app_candidato,nome_autoridade_candidato,num_doc_viag_candidato,dat_emi_doc_viag_candidato,dat_vali_doc_viag_candidato, finger)
        values(ano_form1, num_form1, App_Numb, photo_id, 'N', user, sysdate, v_apel, v_nome, v_dat_nasc, v_estado, v_dat_ent,
        v_dat_sai, v_dur_est, v_num_vin, v_valido_para, v_dat_ini_vin, v_dat_fim_vin,
        v_num_ent_vin, v_dur_est_vin, v_place_app, v_attachmentid_finger_cand,v_nac,v_qualitycheck,v_dateofapplication,1,v_country_app,v_nome_autoridade,v_num_doc_viag,v_dat_emidoc,v_dat_validoc, v_finger);
        begin
        update link_vis_manual
        set foto = visxml_cs.ClobToBlob64(replace(foto_clob,chr(10),''))
        where ano_form = ano_form1 and num_form = num_form1 and vis_application = App_Numb;
        exception when others then
                  null;
        end;
        BEGIN
        select foto
        into b
        from link_vis_manual
        where ano_form = ano_form1 and num_form = num_form1 and vis_application = App_Numb;
        exception
        when no_data_found then
          b := null;
        END;
        IF b is not null then
          funcoes.ExportBlob ('d:\fotos\tratadas\'||replace(App_Numb,'/','_')||'@'||TO_CHAR(num_form1)||'.jpg', b);
          update link_vis_manual
          set nome_fich_foto = replace(App_Numb,'/','_')||'@'||TO_CHAR(num_form1)||'.jpg'
          where ano_form = ano_form1 and num_form = num_form1 and vis_application = App_Numb;
        END IF;
        end if;
     elsif numero_dossiers = 1 and numero_applications > 1 then
       for i in 1..numero_applications loop
        App_Numb := visxml_cs.extrai_valor_xml(inpfile,'ApplicationNumber','ns3:',null,i);
        visxml.PRetrievalAppExamination(App_Numb, null,vmsg_resp_vis,ano_form1,num_form1,'0002',null);
        v_apel := visxml_cs.extrai_valor_xml(vmsg_resp_vis,'Surname','ns3:','TransliteratedValue',1);
        v_nome := visxml_cs.extrai_valor_xml(vmsg_resp_vis,'Firstnames','ns3:','TransliteratedValue',1);
        v_dat_nasc := visxml_cs.extrai_valor_xml(vmsg_resp_vis,'DateOfBirth','ns3:',null,1);
        v_dat_nasc := substr(v_dat_nasc,1,4) || '/' || substr(v_dat_nasc,5,2) || '/' || substr(v_dat_nasc,7,2);
        v_sexo := visxml_cs.extrai_valor_xml(vmsg_resp_vis,'Sex','ns3:',null,1);
        begin
        select c.valor_rpv into v_sexo from conversao_vis c
        where c.valor_vis = v_sexo and c.tipo = 'SEXO';
        exception when no_data_found then
                  v_sexo := 'W';
        end;
        v_nac := replace(visxml_cs.extrai_valor_xml(vmsg_resp_vis,'NationalityForApplication','ns3:',null,1),'nada',null);
        if v_nac is not null then
        begin
        select p.des_pais, p.cod_pais into v_nac, v_nac_cod from conversao_vis c, pais p
        where c.valor_vis = v_nac and c.tipo = 'PAIS_NAC' and
        c.valor_rpv = p.cod_pais;
        exception when no_data_found then
                  v_nac := 'NACIONALIDADE INVÁLIDA';
        end;
        end if;
        v_estado_cod := visxml_cs.extrai_valor_xml(vmsg_resp_vis,'ApplicationStatus','ns3:',null,1);
        begin
        select valor_rpv into v_estado from conversao_vis
        where valor_vis = v_estado_cod and tipo = 'ST31_APP_STATUS';
        exception when no_data_found then
                  v_estado := 'ESTADO INVÁLIDO';
        end;
        v_dat_ent := replace(visxml_cs.extrai_valor_xml(vmsg_resp_vis,'IntendedDateOfArrival','ns3:',null,1),'nada',null);
        if v_dat_ent is not null then
           v_dat_ent := substr(v_dat_ent,1,4) || '/' || substr(v_dat_ent,5,2) || '/' || substr(v_dat_ent,7,2);
        end if;
        v_dat_sai := replace(visxml_cs.extrai_valor_xml(vmsg_resp_vis,'IntendedDateOfDeparture','ns3:',null,1),'nada',null);
        if v_dat_sai is not null then
           v_dat_sai := substr(v_dat_sai,1,4) || '/' || substr(v_dat_sai,5,2) || '/' || substr(v_dat_sai,7,2);
        end if;
        v_dur_est := replace(visxml_cs.extrai_valor_xml(vmsg_resp_vis,'DurationOfIntendedStay','ns3:',null,1),'nada',null);
        v_num_vin := replace(visxml_cs.extrai_valor_xml(vmsg_resp_vis,'VisaStickerNumber','ns3:',null,1),'nada',null);
        v_valido_para := replace(visxml_cs.extrai_valor_xml(vmsg_resp_vis,'TerritorialValidity','ns3:','ValidFor',1),'nada',null);
        v_dat_ini_vin_temp := replace(visxml_cs.extrai_valor_xml(vmsg_resp_vis,'VisaSticker','ns3:','Begin',1),'nada',null);
        v_dat_ini_vin := replace(substr(v_dat_ini_vin_temp,1,10),'-','/');
        v_dat_fim_vin_temp := replace(visxml_cs.extrai_valor_xml(vmsg_resp_vis,'VisaSticker','ns3:','End',1),'nada',null);
        v_dat_fim_vin := replace(substr(v_dat_fim_vin_temp,1,10),'-','/');
        v_num_ent_vin_temp := replace(visxml_cs.extrai_valor_xml(vmsg_resp_vis,'NumberOfEntries','ns3:',null,1),'nada',null);
        begin
        select valor_rpv into v_num_ent_vin from conversao_vis
        where valor_vis = v_num_ent_vin_temp and tipo = 'NUM_ENT';
        exception when no_data_found then
                  v_num_ent_vin := null;
        end;
        v_dur_est_vin := replace(visxml_cs.extrai_valor_xml(vmsg_resp_vis,'DurationOfStay','ns3:',null,1),'nada',null);
        v_place_app := substr(visxml_cs.extrai_valor_xml(vmsg_resp_vis,'ApplicationAuthority','ns3:','Place',1),1,50);
        v_country_app := visxml_cs.extrai_valor_xml(vmsg_resp_vis,'ApplicationAuthority','ns3:','Country',1);
        v_nome_autoridade := visxml_cs.extrai_valor_xml(vmsg_resp_vis,'ApplicationAuthority','ns3:','AuthorityName',1);
        v_attachmentid_finger_cand := visxml_cs.extrai_valor_xml(vmsg_resp_vis,'AttachmentID','ns3:',null,2);
        if nvl(v_attachmentid_finger_cand,'nada') = 'nada' then
           v_finger := 'N';
        else
           v_finger := 'S';
        end if;
        photo_id := visxml_cs.extrai_valor_xml(vmsg_resp_vis,'FacialImage','ns3:','DataSource',1);
        v_qualitycheck := visxml_cs.extrai_valor_xml(vmsg_resp_vis,'QualityCheckPassed','ns3:',null,1);
        v_dateofapplication := replace(substr(visxml_cs.extrai_valor_xml(vmsg_resp_vis,'DateOfApplication','ns3:',null,1),1,10),'-','/');
        if v_dateofapplication = 'nada' then
           v_dateofapplication := null;
        end if;
        v_num_doc_viag := visxml_cs.extrai_valor_xml(vmsg_resp_vis,'TravelDocument','ns3:','TravelDocumentNumber',1);
        v_dat_emidoc := replace(substr(visxml_cs.extrai_valor_xml(vmsg_resp_vis,'TravelDocument','ns3:','DateOfIssue',1),1,10),'-','/');
        v_dat_validoc := replace(substr(visxml_cs.extrai_valor_xml(vmsg_resp_vis,'TravelDocument','ns3:','ValidUntil',1),1,10),'-','/');

        if v_estado_cod = '0004' then
           posicao := 1;
           loop
               v_RefusalGround := visxml_cs.extrai_valor_xml(vmsg_resp_vis,'RefusalGround','ns3:',null,posicao);
               if v_RefusalGround = 'nada' then
                  exit;
               else
                  begin
                  insert into vis_link_status_detalhes(ano_form, num_form, cod_pare_vis, cri_uti, cri_dat, vis_application)
                  values(ano_form1, num_form1, v_RefusalGround, user, to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'),App_Numb);
                  exception when dup_val_on_index then
                            encontrou := pk_mail.fu_send_mail('pmarques99@gmail.com','vis_link_status_detalhes','Formulario ' || App_Numb || ' violou a chave de vis_link_status_detalhes. Verifique.'  ,'noreplyvistos@dgaccp.pt');
                  end;
               end if;
               posicao := posicao + 1;
            end loop;
        end if;
        if v_nac_cod = v_nac_prt and v_sexo = v_sexo_prt then
        controla_insert := 1;
        insert into link_vis_manual (ano_form, num_form, vis_application,foto_clob, tratado, cri_uti, cri_dat, apel_candidato, nome_candidato,
        dat_nasc_candidato, est_pedido_candidato, dat_ent_candidato, dat_sai_candidato,
        dur_est_candidato, num_vin_candidato, valido_para_candidato, dat_ini_vin_candidato, dat_fim_vin_candidato,
        num_ent_vin_candidato, dur_est_vin_candidato, place_app_candidato, attachmentid_finger_candidato, nac_candidato,fingers_qualitycheck,dateofapplication,dossier,country_app_candidato,nome_autoridade_candidato,num_doc_viag_candidato,dat_emi_doc_viag_candidato,dat_vali_doc_viag_candidato, finger)
        values(ano_form1, num_form1, App_Numb, photo_id, 'N', user, sysdate, v_apel, v_nome, v_dat_nasc, v_estado, v_dat_ent,
        v_dat_sai, v_dur_est, v_num_vin, v_valido_para, v_dat_ini_vin, v_dat_fim_vin,
        v_num_ent_vin, v_dur_est_vin, v_place_app, v_attachmentid_finger_cand,v_nac,v_qualitycheck,v_dateofapplication,1,v_country_app,v_nome_autoridade,v_num_doc_viag,v_dat_emidoc,v_dat_validoc, v_finger);
        begin
        update link_vis_manual
        set foto = visxml_cs.ClobToBlob64(replace(foto_clob,chr(10),''))
        where ano_form = ano_form1 and num_form = num_form1 and vis_application = App_Numb;
        exception when others then
                       null;
        end;
        BEGIN
        select foto
        into b
        from link_vis_manual
        where ano_form = ano_form1 and num_form = num_form1 and vis_application = App_Numb;
        exception
        when no_data_found then
          b := null;
        END;
        IF b is not null then
          funcoes.ExportBlob ('d:\fotos\tratadas\'||replace(App_Numb,'/','_')||'@'||TO_CHAR(num_form1)||'.jpg', b);
          update link_vis_manual
          set nome_fich_foto = replace(App_Numb,'/','_')||'@'||TO_CHAR(num_form1)||'.jpg'
          where ano_form = ano_form1 and num_form = num_form1 and vis_application = App_Numb;
        END IF;
        end if;
       end loop;
     elsif numero_dossiers > 1 then
      conta := 1;
      for j in 1..numero_dossiers loop
        DossierRank := to_number(visxml_cs.extrai_valor_xml(inpfile,'DossierRank','ns3:',null,j));
        NumbMatchesDossier := to_number(visxml_cs.extrai_valor_xml(inpfile,'NumberOfMatchesInDossier','ns3:',null,j));
        for i in 1..NumbMatchesDossier loop
                Rank := visxml_cs.extrai_valor_xml(inpfile,'Rank','ns3:',null,conta);
                App_Numb := visxml_cs.extrai_valor_xml(inpfile,'ApplicationNumber','ns3:',null,conta);
                conta := conta + 1;
                visxml.PRetrievalAppExamination(App_Numb, null,vmsg_resp_vis,ano_form1,num_form1,'0002',null);
                v_apel := visxml_cs.extrai_valor_xml(vmsg_resp_vis,'Surname','ns3:','TransliteratedValue',1);
                v_nome := visxml_cs.extrai_valor_xml(vmsg_resp_vis,'Firstnames','ns3:','TransliteratedValue',1);
                v_dat_nasc := visxml_cs.extrai_valor_xml(vmsg_resp_vis,'DateOfBirth','ns3:',null,1);
                v_dat_nasc := substr(v_dat_nasc,1,4) || '/' || substr(v_dat_nasc,5,2) || '/' || substr(v_dat_nasc,7,2);
                v_sexo := visxml_cs.extrai_valor_xml(vmsg_resp_vis,'Sex','ns3:',null,1);
                begin
                select c.valor_rpv into v_sexo from conversao_vis c
                where c.valor_vis = v_sexo and c.tipo = 'SEXO';
                exception when no_data_found then
                  v_sexo := 'W';
                end;
                v_nac := replace(visxml_cs.extrai_valor_xml(vmsg_resp_vis,'NationalityForApplication','ns3:',null,1),'nada',null);
                if v_nac is not null then
                   begin
                   select p.des_pais, p.cod_pais into v_nac, v_nac_cod from conversao_vis c, pais p
                   where c.valor_vis = v_nac and c.tipo = 'PAIS_NAC' and
                   c.valor_rpv = p.cod_pais;
                   exception when no_data_found then
                             v_nac := 'NACIONALIDADE INVÁLIDA';
                   end;
                end if;
                v_estado_cod := visxml_cs.extrai_valor_xml(vmsg_resp_vis,'ApplicationStatus','ns3:',null,1);
                begin
                select valor_rpv into v_estado from conversao_vis
                where valor_vis = v_estado_cod and tipo = 'ST31_APP_STATUS';
                exception when no_data_found then
                  v_estado := 'ESTADO INVÁLIDO';
                end;
                v_dat_ent := replace(visxml_cs.extrai_valor_xml(vmsg_resp_vis,'IntendedDateOfArrival','ns3:',null,1),'nada',null);
                if v_dat_ent is not null then
                   v_dat_ent := substr(v_dat_ent,1,4) || '/' || substr(v_dat_ent,5,2) || '/' || substr(v_dat_ent,7,2);
                end if;
                v_dat_sai := replace(visxml_cs.extrai_valor_xml(vmsg_resp_vis,'IntendedDateOfDeparture','ns3:',null,1),'nada',null);
                if v_dat_sai is not null then
                   v_dat_sai := substr(v_dat_sai,1,4) || '/' || substr(v_dat_sai,5,2) || '/' || substr(v_dat_sai,7,2);
                end if;
                v_dur_est := replace(visxml_cs.extrai_valor_xml(vmsg_resp_vis,'DurationOfIntendedStay','ns3:',null,1),'nada',null);
                v_num_vin := replace(visxml_cs.extrai_valor_xml(vmsg_resp_vis,'VisaStickerNumber','ns3:',null,1),'nada',null);
                v_valido_para := replace(visxml_cs.extrai_valor_xml(vmsg_resp_vis,'TerritorialValidity','ns3:','ValidFor',1),'nada',null);
                v_dat_ini_vin_temp := replace(visxml_cs.extrai_valor_xml(vmsg_resp_vis,'VisaSticker','ns3:','Begin',1),'nada',null);
                v_dat_ini_vin := replace(substr(v_dat_ini_vin_temp,1,10),'-','/');
                v_dat_fim_vin_temp := replace(visxml_cs.extrai_valor_xml(vmsg_resp_vis,'VisaSticker','ns3:','End',1),'nada',null);
                v_dat_fim_vin := replace(substr(v_dat_fim_vin_temp,1,10),'-','/');
                v_num_ent_vin_temp := replace(visxml_cs.extrai_valor_xml(vmsg_resp_vis,'NumberOfEntries','ns3:',null,1),'nada',null);
                begin
                select valor_rpv into v_num_ent_vin from conversao_vis
                where valor_vis = v_num_ent_vin_temp and tipo = 'NUM_ENT';
                exception when no_data_found then
                  v_num_ent_vin := null;
                end;
                v_dur_est_vin := replace(visxml_cs.extrai_valor_xml(vmsg_resp_vis,'DurationOfStay','ns3:',null,1),'nada',null);
                v_place_app := substr(visxml_cs.extrai_valor_xml(vmsg_resp_vis,'ApplicationAuthority','ns3:','Place',1),1,50);
                v_country_app := visxml_cs.extrai_valor_xml(vmsg_resp_vis,'ApplicationAuthority','ns3:','Country',1);
                v_nome_autoridade := visxml_cs.extrai_valor_xml(vmsg_resp_vis,'ApplicationAuthority','ns3:','AuthorityName',1);
                v_attachmentid_finger_cand := visxml_cs.extrai_valor_xml(vmsg_resp_vis,'AttachmentID','ns3:',null,1*2);
                if nvl(v_attachmentid_finger_cand,'nada') = 'nada' then
                   v_finger := 'N';
                else
                   v_finger := 'S';
                end if;
                v_dateofapplication := replace(substr(visxml_cs.extrai_valor_xml(vmsg_resp_vis,'DateOfApplication','ns3:',null,1),1,10),'-','/');
                if v_dateofapplication = 'nada' then
                   v_dateofapplication := null;
                end if;

                photo_id := visxml_cs.extrai_valor_xml(vmsg_resp_vis,'FacialImage','ns3:','DataSource',1);
                v_qualitycheck := visxml_cs.extrai_valor_xml(vmsg_resp_vis,'QualityCheckPassed','ns3:',null,1);
                v_num_doc_viag := visxml_cs.extrai_valor_xml(vmsg_resp_vis,'TravelDocument','ns3:','TravelDocumentNumber',1);
                v_dat_emidoc := replace(substr(visxml_cs.extrai_valor_xml(vmsg_resp_vis,'TravelDocument','ns3:','DateOfIssue',1),1,10),'-','/');
                v_dat_validoc := replace(substr(visxml_cs.extrai_valor_xml(vmsg_resp_vis,'TravelDocument','ns3:','ValidUntil',1),1,10),'-','/');

                if v_estado_cod = '0004' then
                   posicao := 1;
                   loop
                      v_RefusalGround := visxml_cs.extrai_valor_xml(vmsg_resp_vis,'RefusalGround','ns3:',null,posicao);
                      if v_RefusalGround = 'nada' then
                         exit;
                      else
                         begin
                         insert into vis_link_status_detalhes(ano_form, num_form, cod_pare_vis, cri_uti, cri_dat, vis_application)
                         values(ano_form1, num_form1, v_RefusalGround, user, to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'),App_Numb);
                         exception when dup_val_on_index then
                                   encontrou := pk_mail.fu_send_mail('pmarques99@gmail.com','vis_link_status_detalhes','Formulario ' || App_Numb || ' violou a chave de vis_link_status_detalhes. Verifique.'  ,'noreplyvistos@dgaccp.pt');
                         end;
                      end if;
                      posicao := posicao + 1;
                   end loop;
                end if;
                if v_nac_cod = v_nac_prt and v_sexo = v_sexo_prt then
                controla_insert := 1;
                insert into link_vis_manual (ano_form, num_form, vis_application,foto_clob, tratado, cri_uti, cri_dat, apel_candidato, nome_candidato,
                dat_nasc_candidato, est_pedido_candidato, dat_ent_candidato, dat_sai_candidato,
                dur_est_candidato, num_vin_candidato, valido_para_candidato, dat_ini_vin_candidato, dat_fim_vin_candidato,
                num_ent_vin_candidato, dur_est_vin_candidato, place_app_candidato, attachmentid_finger_candidato,nac_candidato,fingers_qualitycheck,dateofapplication,dossier,country_app_candidato,nome_autoridade_candidato,num_doc_viag_candidato,dat_emi_doc_viag_candidato,dat_vali_doc_viag_candidato, finger)
                values(ano_form1, num_form1, App_Numb, photo_id, 'N', user, sysdate, v_apel, v_nome, v_dat_nasc, v_estado, v_dat_ent,
                v_dat_sai, v_dur_est, v_num_vin, v_valido_para, v_dat_ini_vin, v_dat_fim_vin,
                v_num_ent_vin, v_dur_est_vin, v_place_app, v_attachmentid_finger_cand,v_nac,v_qualitycheck,v_dateofapplication,DossierRank,v_country_app, v_nome_autoridade,v_num_doc_viag,v_dat_emidoc,v_dat_validoc, v_finger);

                begin
                update link_vis_manual
	              set foto = visxml_cs.ClobToBlob64(replace(foto_clob,chr(10),''))
	              where ano_form = ano_form1 and num_form = num_form1 and vis_application = App_Numb;
                exception when others then
                       null;
                end;
	              begin
	              select foto
	              into b
	              from link_vis_manual
	              where ano_form = ano_form1 and num_form = num_form1 and vis_application = App_Numb;
	              exception
	              when no_data_found then
		                 b := null;
	              end;

                if b is not null then
	                 funcoes.ExportBlob ('d:\fotos\tratadas\'||replace(App_Numb,'/','_')||'@'||TO_CHAR(num_form1)||'.jpg', b);
	                 update link_vis_manual
	                 set nome_fich_foto = replace(App_Numb,'/','_')||'@'||TO_CHAR(num_form1)||'.jpg'
	                 where ano_form = ano_form1 and num_form = num_form1 and vis_application = App_Numb;
	              end if;
                end if;
        end loop;
       end loop;
      end if;
      if controla_insert = 0 then
        insert into link_vis_manual (ano_form, num_form, vis_application, tratado, cri_uti, cri_dat, finger)
        values(ano_form1, num_form1, 'N/E', 'S', user, sysdate, 'N');
      end if;
      return(0);
exception
when xmldom.INDEX_SIZE_ERR then
   raise_application_error(-20120, 'Index Size error');

when xmldom.DOMSTRING_SIZE_ERR then
   raise_application_error(-20120, 'String Size error');

when xmldom.HIERARCHY_REQUEST_ERR then
   raise_application_error(-20120, 'Hierarchy request error');

when xmldom.WRONG_DOCUMENT_ERR then
   raise_application_error(-20120, 'Wrong doc error');

when xmldom.INVALID_CHARACTER_ERR then
   raise_application_error(-20120, 'Invalid Char error');

when xmldom.NO_DATA_ALLOWED_ERR then
   raise_application_error(-20120, 'Nod data allowed error');

when xmldom.NO_MODIFICATION_ALLOWED_ERR then
   raise_application_error(-20120, 'No mod allowed error');

when xmldom.NOT_FOUND_ERR then
   raise_application_error(-20120, 'Not found error');

when xmldom.NOT_SUPPORTED_ERR then
   raise_application_error(-20120, 'Not supported error');

when xmldom.INUSE_ATTRIBUTE_ERR then
   raise_application_error(-20120, 'In use attr error');

end;
end;
/

prompt
prompt Creating package body VISXML2
prompt =============================
prompt
create or replace package body rpv.VISXML2 is

 TYPE vTUSER_NODE IS TABLE OF xmldom.DOMNode;
  vUSER_NODE vTUSER_NODE := vTUSER_NODE();
  /*Constantes Globais*/
  vCcaminhoXSD varchar2(100) := 'M:\Simulator\XSD\VIS\nsmessages\';
  vHEADER_MESSAGEID varchar2(17);

  v_web_service_bio varchar2(2000):='http://62.62.52.222:20220/0022/AsyncBmsWS';
  msg_resp_vis varchar2(32767);
  vContract_env    tipo_comm_vistos.contract%type;
  vOperation_env   tipo_comm_vistos.operation%type;

  function Fdatetz(data in date) return varchar2 is
  begin
    /*execute immediate 'select dbtimezone from dual' into tz;
    return(trim(to_char(data,'yyyy-mm-dd') || 'T' || to_char(data,'hh24:mi:ss') ||substr(tz,1,6)));*/
    return(trim(to_char(data,'yyyy-mm-dd') || 'T' || to_char(data,'HH24:MI:SS') || to_char(systimestamp,'.FF3') || 'Z'));
  end;
  function FtrataNome(pNome              in varchar2,
                      pPosicaoPretendida in varchar2 /*N = NOME A = Apelido*/)
    return formulario.apel%type is
    RNome formulario.apel%type;
  begin
    /*Se pretender o Nome*/
    if upper(pPosicaoPretendida) = 'N' then
      if instr(pNome,' ') = 0 then
        /*Não tem apelido*/
        rnome := pNome;
      else
        rnome := substr(Pnome,1,instr(pNome,' ', -1) - 1);
      end if;
      /*Se pretender o Apelido*/
    elsif upper(pPosicaoPretendida) = 'A' then
      if instr(pNome,' ') = 0 then
        /*Não tem apelido*/
        rnome := ' ';
      else
        rnome := substr(Pnome,instr(pNome,' ', -1) + 1);
      end if;
    else
      rnome := upper(pnome);
    end if;
    return(rnome);
  end;
  procedure PComum(p_returnValue   out xmldom.DOMDocument,vELEMENTOS_ROOT out xmldom.DOMElement,
                   identificador in varchar2, vHEADER_MESSAGEID out varchar2, vContract in varchar2, vOperation in varchar2,
                   vEndUserID in varchar2, vVariant in varchar2, vRole in varchar2, vTest in varchar2, ValRepresentanteID in varchar2 DEFAULT null) is
    vDOCUMENTO xmldom.DOMDocument;
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    /*Constantes*/
    vHEADER_DateTime          varchar2(25) := Fdatetz(SYSDATE);
    vHEADER_DaEndUserID       varchar2(50) := vEndUserID;
    vHEADER_DaUser            varchar2(7)  := '0022.01';
    vHEADER_Role              varchar2(7)  := vRole;
    vHEADER_DaSystemID        varchar2(50)  := 'PT NS';
    vHEADER_Contract          varchar2(7)  := vContract;
    vHEADER_Operation         varchar2(7)  := vOperation;
    vHEADER_DaRepresentedUser varchar2(100):= ValRepresentanteID;
    vHEADER_Variant           varchar2(4)  := vVariant;
    vHEADER_Test              varchar2(255)  := vTest;
    v_prefix_vis              posto.prefix_vis%type;
  begin
    vDOCUMENTO := xmldom.newDOMDocument;
    xmldom.setVersion(vDOCUMENTO,
                      xmldom.getVersion(vDOCUMENTO));
    xmldom.setCharset(vDOCUMENTO,
                      xmldom.getCharset(vDOCUMENTO));
    vUSER_NODE.EXTEND;
    vUSER_NODE(1) := xmldom.makeNode(vDOCUMENTO);
    /*Identificador*/
    vELEMENTOS_ROOT := xmldom.createElement(vDOCUMENTO,
                                            identificador);
    vUSER_NODE.EXTEND;
    vUSER_NODE(2) := xmldom.appendChild(vUSER_NODE(1),
                                        xmldom.makeNode(vELEMENTOS_ROOT));
    vUSER_NODE.EXTEND;
    /*Header*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Header');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));

    vUSER_NODE.EXTEND;
    /*vdtc:MessageID*/
    select prefix_vis into v_prefix_vis
    from posto
    where cod_pos = Taref.Busca_Param_Glo1(3,null);
    select v_prefix_vis || to_char(seq_vis_messageid.nextval,'FM0000000000009')
    into vHEADER_MESSAGEID from dual;

    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:MessageID');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         vHEADER_MESSAGEID);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));

    /*vdtc:LogicalSessionID*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:LogicalSessionID');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         vHEADER_MESSAGEID);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));

    /*vdtc:DateTime*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:DateTime');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         vHEADER_DateTime);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));

    /*vdtc:EndUserID*/
    /*if vHEADER_DaEndUserID is not null then
       vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:EndUserID');
       vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
       vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         vHEADER_DaEndUserID);
       vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    end if;*/

    /*vdtc:User*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:User');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         vHEADER_DaUser);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*vdtc:EndUserRole*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:EndUserRole');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         vHEADER_Role);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));

    /*vdtc:SystemID*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:SystemID');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         vHEADER_DaSystemID);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));

    /*vdtc:Contract*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:Contract');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         vHEADER_Contract);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));

    /*vdtc:Operation*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:Operation');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         vHEADER_Operation);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    /*vdtc:RepresentedUser*/
    if vHEADER_DaRepresentedUser is not null then
       vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:RepresentedUser');
       vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
       vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         vHEADER_DaRepresentedUser);
       vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    end if;

    if vVariant is not null then
       /*vdtc:Variant*/
       vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:Variant');
       vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
       vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         vHEADER_Variant);
       vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    end if;
    if vTest is not null then
       /*vdtc:TestCaseID*/
       vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:TestCaseID');
       vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
       vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                             vHEADER_Test);
       vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    end if;
    vUSER_NODE.delete(3,4);

    /*Fim do Header*/
    p_returnValue := vDOCUMENTO;
  end;
  procedure PComBodySearch(vDOCUMENTO in out xmldom.DOMDocument, ano_form1 in number, num_form1 in number, identificador in varchar2) is
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    /*Constantes*/
    v_valor_vis  conversao_vis.valor_vis%type;
    v_cid_pos    posto.cid_pos%type;
    v_des_pos    posto.des_pos%type;
  BEGIN
    select funcoes.obtem_valor_vis(p.cod_pais,'PAIS'), p.cid_pos, p.des_pos
    into  v_valor_vis, v_cid_pos, v_des_pos
    from formulario f, posto p
    where f.cod_pos = p.cod_pos
    and ano_form = ano_form1 and num_form = num_form1;

    /*request*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Request');
    vUSER_NODE(3) := xmldom.appendChild(vUSER_NODE(2),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    /*Authority*/
    vUSER_NODE.extend;
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'Authority');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));

    vUSER_NODE.extend;
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:AuthorityLocation');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vELEMTENTO_ITEM));

    vUSER_NODE.extend;
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:Country');
    vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         v_valor_vis);
    vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(6),
                                        xmldom.makeNode(vTEXTO_ITEM));

    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:Place');
    vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         v_cid_pos);
    vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(6),
                                        xmldom.makeNode(vTEXTO_ITEM));

    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:AuthorityName');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         'MNE');
                                         --v_des_pos || ' ' || v_cid_pos);
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(5),
                                        xmldom.makeNode(vTEXTO_ITEM));

    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdtc:AuthorityType');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         '0001.01');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(5),
                                        xmldom.makeNode(vTEXTO_ITEM));

    /*MaxDossierCap*/
    /*vUSER_NODE.extend;
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'MaxDossierCap');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         vMaxDossiers);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));*/
    /*MaxMatchesInDossiers*/
    /*vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'MaxMatchesInDossier');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         vMaxMatches);
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));*/

    if identificador = 'NSSearch' then
       /*ExcludeAppsWithFingerprints*/
       vUSER_NODE.extend;
       vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'ExcludeAppsWithFingerprints');
       vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
       vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         'false');
       vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vTEXTO_ITEM));
    end if;

    /*OptionList*/
    /*vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'OptionList');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdta:FacialImageDataSourceIncluded');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         'true');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(5),
                                        xmldom.makeNode(vTEXTO_ITEM));

    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                            'vdta:FingerprintSetDataSourceIncluded');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                        xmldom.makeNode(vELEMTENTO_ITEM));
    vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                         'false');
    vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(5),
                                        xmldom.makeNode(vTEXTO_ITEM));*/

    /*Action*/
    vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'Action');
    vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

  end;
 function PSearchbyFingerPrint(pANO_FORM IN FORMULARIO.ANO_FORM%TYPE,
                               pNUM_FORM IN FORMULARIO.NUM_FORM%TYPE, msg_resp_vis OUT VARCHAR2, vRole in varchar2,TestId in varchar2,ambiente in varchar2 DEFAULT 'P') return number is
    vDOCUMENTO      xmldom.DOMDocument;
    vELEMENTOS_ROOT xmldom.DOMElement;
    vELEMTENTO_ITEM xmldom.DOMElement;
    vTEXTO_ITEM     xmldom.DOMText;
    dom_cast        xmldom.DOMCharacterData;
    p_Bio_Clob      clob; --temp_imagens.bio_clob%type;
    p_nome_fich_bio varchar2(100); --temp_imagens.nome_fich_bio%type;
    p_tipo_recolha_bio varchar2(10); --formulario.tipo_recolha_bio%type;
    v_clob          clob:='xxx';
    id 			        UTL_FILE.FILE_TYPE;
    filedata 		    VARCHAR2(2000);
    buf             varchar2(32000);
    amount          NUMBER := 1;
    offset          NUMBER := 1;
    tam             number(10);
    i               number(10):=1;
    V_COD_PAIS_SCH_REPRES formulario.cod_pais_sch_repres%type;
    ValRepresentanteID conversao_vis.valor_vis%type;
  BEGIN

    SELECT /*t.nome_fich_bio, a.tipo_recolha_bio,*/ a.COD_PAIS_SCH_REPRES
    INTO /*p_nome_fich_bio, p_tipo_recolha_bio,*/ V_COD_PAIS_SCH_REPRES
    FROM FORMULARIO A, TEMP_IMAGENS T, TEMP_IMAGENS_DET T2
    WHERE A.ANO_FORM = pANO_FORM AND
          A.NUM_FORM = pNUM_FORM AND
          T.NUM_ORDEM = T2.NUM_ORDEM AND
          A.REF_FORM_2 = T2.REF_FORM_2(+);

    IF p_nome_fich_bio is not null THEN
     Funcoes.obtem_header_det('NSSearchByFingerprint',vContract_env, vOperation_env);
     if V_COD_PAIS_SCH_REPRES is not null then
       ValRepresentanteID := funcoes.obtem_valor_vis(V_COD_PAIS_SCH_REPRES,'CT70_USER');
     end if;
     PComum(vDOCUMENTO, vELEMENTOS_ROOT,'NSSearchByFingerprint',vHEADER_MESSAGEID,vContract_env, vOperation_env, null, '0000',vRole,TestId,ValRepresentanteID);

     PComBodySearch(vDOCUMENTO, pANO_FORM, pNUM_FORM,'NSSearchByFingerprint');

      /*ApplicationExamination*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'ApplicationExamination');

      vUSER_NODE(5) := xmldom.appendChild(vUSER_NODE(4),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      /*FreshlyScannedFingerprintSet*/
      vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'FreshlyScannedFingerprintSet');

      vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(5),
                                          xmldom.makeNode(vELEMTENTO_ITEM));

      visxml2.Usa_NISTConverter(p_nome_fich_bio,'NPS');
      shell('D:\RPV\Base64\base64.exe -e' || ' "e:\ftp_postos\ImpressoesDigitais\Tratadas\' || p_nome_fich_bio || '_nps"' || ' "d:\RPV\Base64\' || p_nome_fich_bio ||'.txt"' );
      id := UTL_FILE.FOPEN_NCHAR('D:\RPV\Base64\Base64\', p_nome_fich_bio ||'.txt', 'r');
      loop
           begin
                UTL_FILE.GET_LINE_NCHAR(id,filedata);
                p_bio_Clob := p_bio_Clob || filedata;
           exception when no_data_found then
			          exit;
		       end;
      end loop;
      UTL_FILE.FCLOSE(id);

      tam := length(p_bio_clob);

      while i <= tam loop
          if i = 1 then
             dbms_lob.read(p_bio_clob,amount,1000,buf);
             buf := substr(p_bio_clob,i,1000);
             vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,buf);

             vUSER_NODE(6) := xmldom.appendChild(vUSER_NODE(6),
                                          xmldom.makeNode(vTEXTO_ITEM));

             dom_cast := xmldom.makeCharacterData(vUSER_NODE(6));
        else
             dbms_lob.read(p_bio_clob,amount,(offset * i),buf);
             buf := substr(p_bio_clob,i,1000);
             xmldom.appendData(dom_cast,buf);
			  end if;
        i := i + 1000;
      end loop;

      /*Escrever para ficheiro*/
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdta',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Application');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:vdtc',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/types/Common');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xmlns:xsi',
                                          'http://www.w3.org/2001/XMLSchema-instance');
      dsa_srv_makexml_mpt.p_setAttrString(vELEMENTOS_ROOT,
                                          'xsi:schemaLocation',
                                          'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages' ||
                                          chr(13) || vCcaminhoXSD ||
                                          'NSSearchByFingerprint.xsd');
      /*xmldom.writeToFile(vDOCUMENTO,
                         vCcaminhoXML || 'PSearchbyFingerPrint.xml');*/
      xmldom.writeToClob(vDOCUMENTO, v_clob);

      select replace(v_clob,'Header xmlns=""','Header') into v_clob from dual;
      select replace(v_clob,'Request xmlns=""','Request') into v_clob from dual;
      --funcoes.write_clob_tofile(vCcaminhoXML => vCcaminhoXML,vfilename => 'PSearchbyFingerPrint.xml',v_clob => v_clob);
      insert into temp_env_vis (id_env_vis,ano_form,num_form,cod_comm_vistos,message_xml,cri_uti,cri_dat)
      values(vHEADER_MESSAGEID,pANO_FORM,pNUM_FORM,16,v_clob,user,sysdate);
      commit;
      --Chama VIS
      msg_resp_vis := funcoes.Envia_Vis(null,v_web_service_bio,null,vHEADER_MESSAGEID, ambiente);

      /*Libertar os recursos*/
      xmldom.freeDocument(vDOCUMENTO);
    elsif p_tipo_recolha_bio is null then
      msg_resp_vis := 'true';
      return(0);
    ELSE
      msg_resp_vis := 'false';
      return(99);
    END IF;
    return(0);
  END;
PROCEDURE Usa_NISTConverter (nome_fich in varchar2, tipo in varchar2) IS
begin
shell('D:\RPV\Base64\Converter\NISTConverter.exe "e:\ftp_postos\ImpressoesDigitais\Tratadas\' || nome_fich || '" ' || tipo);
shell('ren "e:\ftp_postos\ImpressoesDigitais\Tratadas\' || nome_fich || '.out" "'  || nome_fich || '_' || tipo || '"');
end;
PROCEDURE Corrige_Notificacoes is
cursor c1 is
select ID_REC_VIS
from temp_rec_vis
where cod_comm_vistos = 46 and tratada = 'N';

v_id_rec_vis temp_rec_vis.id_rec_vis%type;
v_ano_form	temp_rec_vis.ano_form%type;
v_num_form	temp_rec_vis.num_form%type;
v_cod_comm_vistos temp_rec_vis.cod_comm_vistos%type;
x number;
flag number(1) := 0;
begin
open c1;
loop
	fetch c1 into v_id_rec_vis;
	exit when c1%notfound;
	begin
	select ano_form, num_form, cod_comm_vistos
	into v_ano_form, v_num_form, v_cod_comm_vistos
	from temp_rec_vis
	where id_rec_vis = v_id_rec_vis and ano_form is not null;
	exception when no_data_found then
		flag := 1;
	end;
	if flag = 0 then
  	update temp_rec_vis
		set ano_form = v_ano_form, num_form = v_num_form, cod_comm_vistos = v_cod_comm_vistos
		where id_rec_vis = v_id_rec_vis and ano_form is null;
		commit;
		x := tarefa_master.evolui_estado(v_ano_form, v_num_form);
		commit;
	else
		update temp_rec_vis
		set tratada = 'S'
		where id_rec_vis = v_id_rec_vis and ano_form is null;
	end if;
	flag := 0;
	commit;
end loop;
close c1;
end;
end;
/

prompt
prompt Creating package body VISXML3
prompt =============================
prompt
CREATE OR REPLACE PACKAGE BODY RPV.VISXML3
IS
   TYPE vTUSER_NODE IS TABLE OF xmldom.DOMNode;

   vUSER_NODE                vTUSER_NODE := vTUSER_NODE ();
   /*Constantes Globais*/
   vCcaminhoXML              VARCHAR2 (100) := 'C:\PSAT\LOAD\ENVIO\';
   vCcaminhoXSD              VARCHAR2 (100) := 'M:\Simulator\XSD\VIS\nsmessages\';
   vHEADER_MESSAGEID         VARCHAR2 (20);
   -- Web Services a serem usados a parti de 24/03/2010
   -- Assyncronas
   v_web_service             VARCHAR2 (2000)
      := 'http://192.168.177.130:18080/Broker-Project1-context-root/VISSyncPort';
   v_web_service_Unordered   VARCHAR2 (2000)
      := 'http://192.168.177.130:18080/Broker-Project1-context-root/VISSyncPort';
   v_web_service_bio         VARCHAR2 (2000)
      := 'http://192.168.177.130:18080/Broker-Project1-context-root/VISSyncPort';
   -- Syncronas
   v_web_service_retrieval   VARCHAR2 (2000)
      := 'http://192.168.177.130:18080/Broker-Project1-context-root/VISSyncPort';
   v_web_service_search      VARCHAR2 (2000)
      := 'http://192.168.177.130:18080/Broker-Project1-context-root/VISSyncPort';
   v_web_service_bio_sync    VARCHAR2 (2000)
      := 'http://192.168.177.130:18080/Broker-Project1-context-root/VISSyncPort';

   msg_resp_vis              VARCHAR2 (32767);
   vContract_env             tipo_comm_vistos.contract%TYPE;
   vOperation_env            tipo_comm_vistos.operation%TYPE;


   PROCEDURE ExportClob (p_file IN VARCHAR2, p_clob IN CLOB)
   AS
      LANGUAGE JAVA
      NAME 'ClobHandler.ExportClob(java.lang.String, oracle.sql.CLOB)' ;

   PROCEDURE write_clob_tofile (vCcaminhoXML   IN VARCHAR2,
                                vfilename      IN VARCHAR2,
                                v_clob         IN CLOB)
   IS
      buffer_size   CONSTANT BINARY_INTEGER := 32767;
      amount                 BINARY_INTEGER;
      offset                 NUMBER (38);
      file_handle            UTL_FILE.FILE_TYPE;
      buffer                 CLOB;
   BEGIN
      ExportClob (
            vCcaminhoXML
         || '\'
         || vfilename
         || '_'
         || TO_CHAR (SYSDATE, 'yyyymmdd hh24miss')
         || '.xml',
         v_clob);
   --ExportClob (vCcaminhoXML || '\' || vfilename || '.xml', v_clob);
   --NULL;
   END;

   PROCEDURE PComum (p_returnValue           OUT xmldom.DOMDocument,
                     vELEMENTOS_ROOT         OUT xmldom.DOMElement,
                     identificador        IN     VARCHAR2,
                     vHEADER_MESSAGEID       OUT VARCHAR2,
                     vContract            IN     VARCHAR2,
                     vOperation           IN     VARCHAR2,
                     vEndUserID           IN     VARCHAR2,
                     vVariant             IN     VARCHAR2,
                     vRole                IN     VARCHAR2,
                     vTest                IN     VARCHAR2,
                     ValRepresentanteID   IN     VARCHAR2 DEFAULT NULL)
   IS
      vDOCUMENTO                  xmldom.DOMDocument;
      vELEMTENTO_ITEM             xmldom.DOMElement;
      vTEXTO_ITEM                 xmldom.DOMText;
      /*Constantes*/
      vHEADER_DateTime            VARCHAR2 (25) := VISXML.Fdatetz (SYSDATE);
      vHEADER_DaEndUserID         VARCHAR2 (50) := vEndUserID;
      vHEADER_DaUser              VARCHAR2 (7) := '0022.01';
      vHEADER_Role                VARCHAR2 (7) := vRole;
      vHEADER_DaSystemID          VARCHAR2 (50) := 'PT NS';
      vHEADER_Contract            VARCHAR2 (7) := vContract;
      vHEADER_Operation           VARCHAR2 (7) := vOperation;
      vHEADER_DaRepresentedUser   VARCHAR2 (100) := ValRepresentanteID;
      vHEADER_Variant             VARCHAR2 (4) := vVariant;
      vHEADER_Test                VARCHAR2 (255) := vTest;
   BEGIN
      vDOCUMENTO := xmldom.newDOMDocument;
      --xmldom.setVersion(vDOCUMENTO,
      --                xmldom.getVersion(vDOCUMENTO));
      --xmldom.setCharset(vDOCUMENTO,
      --                xmldom.getCharset(vDOCUMENTO));
      vUSER_NODE.EXTEND;
      vUSER_NODE (1) := xmldom.makeNode (vDOCUMENTO);
      /*Identificador*/
      vELEMENTOS_ROOT := xmldom.createElement (vDOCUMENTO, identificador);
      vUSER_NODE.EXTEND;
      vUSER_NODE (2) :=
         xmldom.appendChild (vUSER_NODE (1),
                             xmldom.makeNode (vELEMENTOS_ROOT));
      vUSER_NODE.EXTEND;
      /*Header*/
      vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'Header');
      vUSER_NODE (3) :=
         xmldom.appendChild (vUSER_NODE (2),
                             xmldom.makeNode (vELEMTENTO_ITEM));

      vUSER_NODE.EXTEND;

      /*vdtc:MessageID*/
      SELECT 224 || TO_CHAR(seq_vis_messageid.NEXTVAL,'FM00000000000009')
        INTO vHEADER_MESSAGEID
        FROM DUAL;

      vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:MessageID');
      vUSER_NODE (4) :=
         xmldom.appendChild (vUSER_NODE (3),
                             xmldom.makeNode (vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, vHEADER_MESSAGEID);
      vUSER_NODE (4) :=
         xmldom.appendChild (vUSER_NODE (4), xmldom.makeNode (vTEXTO_ITEM));

      /*vdtc:LogicalSessionID*/
      vELEMTENTO_ITEM :=
         xmldom.createElement (vDOCUMENTO, 'vdtc:LogicalSessionID');
      vUSER_NODE (4) :=
         xmldom.appendChild (vUSER_NODE (3),
                             xmldom.makeNode (vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, vHEADER_MESSAGEID);
      vUSER_NODE (4) :=
         xmldom.appendChild (vUSER_NODE (4), xmldom.makeNode (vTEXTO_ITEM));

      /*vdtc:DateTime*/
      vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:DateTime');
      vUSER_NODE (4) :=
         xmldom.appendChild (vUSER_NODE (3),
                             xmldom.makeNode (vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, vHEADER_DateTime);
      vUSER_NODE (4) :=
         xmldom.appendChild (vUSER_NODE (4), xmldom.makeNode (vTEXTO_ITEM));

      /*vdtc:EndUserID*/
      /*if vHEADER_DaEndUserID is not null then
         vELEMTENTO_ITEM := xmldom.createElement(vDOCUMENTO,
                                              'vdtc:EndUserID');
         vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(3),
                                          xmldom.makeNode(vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode(vDOCUMENTO,
                                           vHEADER_DaEndUserID);
         vUSER_NODE(4) := xmldom.appendChild(vUSER_NODE(4),
                                          xmldom.makeNode(vTEXTO_ITEM));
      end if;*/

      /*vdtc:User*/
      vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:User');
      vUSER_NODE (4) :=
         xmldom.appendChild (vUSER_NODE (3),
                             xmldom.makeNode (vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, vHEADER_DaUser);
      vUSER_NODE (4) :=
         xmldom.appendChild (vUSER_NODE (4), xmldom.makeNode (vTEXTO_ITEM));
      /*vdtc:EndUserRole*/
      vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:EndUserRole');
      vUSER_NODE (4) :=
         xmldom.appendChild (vUSER_NODE (3),
                             xmldom.makeNode (vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, vHEADER_Role);
      vUSER_NODE (4) :=
         xmldom.appendChild (vUSER_NODE (4), xmldom.makeNode (vTEXTO_ITEM));

      /*vdtc:SystemID*/
      vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:SystemID');
      vUSER_NODE (4) :=
         xmldom.appendChild (vUSER_NODE (3),
                             xmldom.makeNode (vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, vHEADER_DaSystemID);
      vUSER_NODE (4) :=
         xmldom.appendChild (vUSER_NODE (4), xmldom.makeNode (vTEXTO_ITEM));

      /*vdtc:Contract*/
      vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:Contract');
      vUSER_NODE (4) :=
         xmldom.appendChild (vUSER_NODE (3),
                             xmldom.makeNode (vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, vHEADER_Contract);
      vUSER_NODE (4) :=
         xmldom.appendChild (vUSER_NODE (4), xmldom.makeNode (vTEXTO_ITEM));

      /*vdtc:Operation*/
      vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:Operation');
      vUSER_NODE (4) :=
         xmldom.appendChild (vUSER_NODE (3),
                             xmldom.makeNode (vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, vHEADER_Operation);
      vUSER_NODE (4) :=
         xmldom.appendChild (vUSER_NODE (4), xmldom.makeNode (vTEXTO_ITEM));

      /*vdtc:RepresentedUser*/
      IF vHEADER_DaRepresentedUser IS NOT NULL
      THEN
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdtc:RepresentedUser');
         vUSER_NODE (4) :=
            xmldom.appendChild (vUSER_NODE (3),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (vDOCUMENTO, vHEADER_DaRepresentedUser);
         vUSER_NODE (4) :=
            xmldom.appendChild (vUSER_NODE (4),
                                xmldom.makeNode (vTEXTO_ITEM));
      END IF;

      IF vVariant IS NOT NULL
      THEN
         /*vdtc:Variant*/
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:Variant');
         vUSER_NODE (4) :=
            xmldom.appendChild (vUSER_NODE (3),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, vHEADER_Variant);
         vUSER_NODE (4) :=
            xmldom.appendChild (vUSER_NODE (4),
                                xmldom.makeNode (vTEXTO_ITEM));
      END IF;

      IF vTest IS NOT NULL
      THEN
         /*vdtc:TestCaseID*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdtc:TestCaseID');
         vUSER_NODE (4) :=
            xmldom.appendChild (vUSER_NODE (3),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, vHEADER_Test);
         vUSER_NODE (4) :=
            xmldom.appendChild (vUSER_NODE (4),
                                xmldom.makeNode (vTEXTO_ITEM));
      END IF;

      vUSER_NODE.delete (3, 4);

      /*Fim do Header*/
      p_returnValue := vDOCUMENTO;
   END;


   PROCEDURE PApplicationCreateApplication (
      pANO_FORM      IN     FORMULARIO.ANO_FORM%TYPE,
      pNUM_FORM      IN     FORMULARIO.NUM_FORM%TYPE,
      msg_resp_vis      OUT VARCHAR2,
      link_app       IN     VARCHAR2,
      vRole          IN     VARCHAR2,
      TestId         IN     VARCHAR2,
      tudo           IN     VARCHAR2 DEFAULT 'S',
      ambiente       IN     VARCHAR2 DEFAULT 'P')
   IS
      vDOCUMENTO              xmldom.DOMDocument;
      vELEMENTOS_ROOT         xmldom.DOMElement;
      vELEMTENTO_ITEM         xmldom.DOMElement;
      vTEXTO_ITEM             xmldom.DOMText;
      v_clob                  CLOB := 'xxx';
      CREGS1                  FORMULARIO%ROWTYPE;
      CREGS2                  FORM_P%ROWTYPE;
      CREGSPosto              Posto%ROWTYPE;
      CREGSPais_Transito      Pais_Transito%ROWTYPE;
      vNomePai                FORMULARIO.FILIA%TYPE;
      vNomeMae                FORMULARIO.FILIA%TYPE;
      vCOD_CONC               concelho_sef.des_conc%TYPE;
      v_des_doc               documento.des_doc%TYPE;
      ValRepresentanteID      conversao_vis.valor_vis%TYPE;
      v_cod_pais              pais.cod_pais%TYPE;
      v_tipo_recolha_bio      BIOMETRIA_INFO.TIPO%TYPE;
      v_mot_nao_recolha_bio   BIOMETRIA_INFO.OBS_NA%TYPE;

      CURSOR CLREGS1
      IS
         SELECT A.*
           FROM FORMULARIO A
          WHERE A.ANO_FORM = pANO_FORM AND A.NUM_FORM = pNUM_FORM;

      CURSOR CLREGS2
      IS
         SELECT B.*
           FROM FORM_P B
          WHERE B.ANO_FORM = pANO_FORM AND B.NUM_FORM = pNUM_FORM;

      CURSOR CLREGSPosto (VCPosto IN posto.cod_pos%TYPE)
      IS
         SELECT B.*
           FROM Posto b
          WHERE b.cod_pos = vcposto;
   BEGIN
      OPEN CLREGS1;

      FETCH CLREGS1 INTO CREGS1;

      IF CLREGS1%NOTFOUND
      THEN
         RAISE NO_DATA_FOUND;
      END IF;

      CLOSE CLREGS1;

      OPEN CLREGS2;

      FETCH CLREGS2 INTO CREGS2;

      CLOSE CLREGS2;

      OPEN CLREGSposto (CREGS1.Cod_Pos);

      FETCH CLREGSposto INTO CREGSPosto;

      CLOSE CLREGSposto;

      BEGIN
         SELECT tipo, obs_na
           INTO v_tipo_recolha_bio, v_mot_nao_recolha_bio
           FROM biometria_info
          WHERE ANO_FORM = pANO_FORM AND NUM_FORM = pNUM_FORM;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            v_tipo_recolha_bio := NULL;
            v_mot_nao_recolha_bio := NULL;
      END;

      IF CREGS2.APEL_NASC = '+'
      THEN
         CREGS2.APEL_NASC := CREGS1.APEL;
      END IF;

      Funcoes.obtem_header_det ('NSCreateApplication',
                                vContract_env,
                                vOperation_env);

      IF CREGS1.COD_PAIS_SCH_REPRES IS NOT NULL
      THEN
         ValRepresentanteID :=
            funcoes.obtem_valor_vis (CREGS1.COD_PAIS_SCH_REPRES, 'CT70_USER');
      END IF;

      PComum (vDOCUMENTO,
              vELEMENTOS_ROOT,
              'NSCreateApplication',
              vHEADER_MESSAGEID,
              vContract_env,
              vOperation_env,
              NULL,
              NULL,
              vRole,
              TestId,
              ValRepresentanteID);
      /*Request*/
      vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'Request');
      --vUSER_NODE.extend;
      vUSER_NODE (3) :=
         xmldom.appendChild (vUSER_NODE (2),
                             xmldom.makeNode (vELEMTENTO_ITEM));
      vUSER_NODE.EXTEND;
      /*ApplicationNumber*/
      vELEMTENTO_ITEM :=
         xmldom.createElement (vDOCUMENTO, 'ApplicationNumber');
      vUSER_NODE (4) :=
         xmldom.appendChild (vUSER_NODE (3),
                             xmldom.makeNode (vELEMTENTO_ITEM));
      vTEXTO_ITEM :=
         xmldom.createTextNode (vDOCUMENTO,
                                cregs1.cod_pais_sch_ref || cregs1.ref_form_2);
      vUSER_NODE (4) :=
         xmldom.appendChild (vUSER_NODE (4), xmldom.makeNode (vTEXTO_ITEM));
      /*ApplicationData*/
      vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'ApplicationData');
      vUSER_NODE.EXTEND;
      vUSER_NODE (4) :=
         xmldom.appendChild (vUSER_NODE (3),
                             xmldom.makeNode (vELEMTENTO_ITEM));

      /*vdta:Applicant*/
      vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdta:Applicant');
      vUSER_NODE.EXTEND;
      vUSER_NODE (5) :=
         xmldom.appendChild (vUSER_NODE (4),
                             xmldom.makeNode (vELEMTENTO_ITEM));

      IF tudo = 'S'
      THEN
         /*vdta:Sex*/
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdta:Sex');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               funcoes.obtem_valor_vis (CREGS1.Sexo, 'SEXO'));
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:NationalityForApplication*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO,
                                  'vdta:NationalityForApplication');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               funcoes.obtem_valor_vis (CREGS1.COD_PAIS_NAC_1, 'PAIS_NAC'));
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vTEXTO_ITEM));
         /*vdta:NationalityAtBirth*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:NationalityAtBirth');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               funcoes.obtem_valor_vis (CREGS2.COD_PAIS_NASC, 'PAIS_NAC'));
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vTEXTO_ITEM));
      END IF;

      /*vdta:DateOfBirth*/
      vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdta:DateOfBirth');
      vUSER_NODE (6) :=
         xmldom.appendChild (vUSER_NODE (5),
                             xmldom.makeNode (vELEMTENTO_ITEM));
      vTEXTO_ITEM :=
         xmldom.createTextNode (
            vDOCUMENTO,
               SUBSTR (CREGS1.DAT_NASC, 1, 4)
            || SUBSTR (CREGS1.DAT_NASC, 6, 2)
            || SUBSTR (CREGS1.DAT_NASC, 9, 2));

      vUSER_NODE (6) :=
         xmldom.appendChild (vUSER_NODE (6), xmldom.makeNode (vTEXTO_ITEM));

      /*vdta:Name*/
      vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdta:Name');
      vUSER_NODE.EXTEND;
      vUSER_NODE (6) :=
         xmldom.appendChild (vUSER_NODE (5),
                             xmldom.makeNode (vELEMTENTO_ITEM));

      /*vdta:Surname*/
      vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdta:Surname');

      vUSER_NODE (7) :=
         xmldom.appendChild (vUSER_NODE (6),
                             xmldom.makeNode (vELEMTENTO_ITEM));
      /*vdta:SourceValue*/
      vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdta:SourceValue');
      xmldom.setAttribute (vELEMTENTO_ITEM, 'PreTransliterated', 'true');
      vUSER_NODE (7) :=
         xmldom.appendChild (vUSER_NODE (7),
                             xmldom.makeNode (vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, --replace(CREGS1.APEL,' ',','));
                                                       CREGS1.APEL);

      vUSER_NODE (7) :=
         xmldom.appendChild (vUSER_NODE (7), xmldom.makeNode (vTEXTO_ITEM));

      IF tudo = 'S'
      THEN
         /*vdta:Firstnames*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:Firstnames');

         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         /*vdta:SourceValue*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:SourceValue');
         xmldom.setAttribute (vELEMTENTO_ITEM, 'PreTransliterated', 'true');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, --replace(CREGS1.NOME,' ',','));
                                                          CREGS1.NOME);
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));


         IF NVL (CREGS2.APEL_NASC, '+') != '+'
         THEN
            /*vdta:SurnameAtBirth*/
            vELEMTENTO_ITEM :=
               xmldom.createElement (vDOCUMENTO, 'vdta:SurnameAtBirth');

            vUSER_NODE (6) :=
               xmldom.appendChild (vUSER_NODE (5),
                                   xmldom.makeNode (vELEMTENTO_ITEM));
            /*vdta:SourceValue*/
            vELEMTENTO_ITEM :=
               xmldom.createElement (vDOCUMENTO, 'vdta:SourceValue');
            xmldom.setAttribute (vELEMTENTO_ITEM,
                                 'PreTransliterated',
                                 'true');
            vUSER_NODE (6) :=
               xmldom.appendChild (vUSER_NODE (6),
                                   xmldom.makeNode (vELEMTENTO_ITEM));
            vTEXTO_ITEM :=
               xmldom.createTextNode (vDOCUMENTO, CREGS2.APEL_NASC);
            vUSER_NODE (6) :=
               xmldom.appendChild (vUSER_NODE (6),
                                   xmldom.makeNode (vTEXTO_ITEM));
         END IF;

         --RETIREI PARA ENTRAR EM PRODUÇÃO
         /*vdta:FormerSurnames*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:FormerSurnames');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         /*vdta:FormerSurname*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:FormerSurname');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         /*vdta:SourceValue*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:SourceValue');
         xmldom.setAttribute (vELEMTENTO_ITEM, 'PreTransliterated', 'true');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, 'N/A');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));


         IF CREGS1.apel_tut IS NOT NULL
         THEN
            /*vdta:ParentalAuthorityOrLegalGuardian*/
            vELEMTENTO_ITEM :=
               xmldom.createElement (vDOCUMENTO,
                                     'vdta:ParentalAuthorityOrLegalGuardian');
            vUSER_NODE.EXTEND;
            vUSER_NODE (6) :=
               xmldom.appendChild (vUSER_NODE (5),
                                   xmldom.makeNode (vELEMTENTO_ITEM));

            IF CREGS1.apel_tut IS NOT NULL
            THEN
               /*vdta:Surname*/
               vELEMTENTO_ITEM :=
                  xmldom.createElement (vDOCUMENTO, 'vdta:Surname');

               vUSER_NODE (7) :=
                  xmldom.appendChild (vUSER_NODE (6),
                                      xmldom.makeNode (vELEMTENTO_ITEM));
               /*vdta:SourceValue*/
               vELEMTENTO_ITEM :=
                  xmldom.createElement (vDOCUMENTO, 'vdta:SourceValue');
               xmldom.setAttribute (vELEMTENTO_ITEM,
                                    'PreTransliterated',
                                    'true');
               vUSER_NODE (7) :=
                  xmldom.appendChild (vUSER_NODE (7),
                                      xmldom.makeNode (vELEMTENTO_ITEM));
               vTEXTO_ITEM :=
                  xmldom.createTextNode (vDOCUMENTO, CREGS1.apel_tut);
               vUSER_NODE (7) :=
                  xmldom.appendChild (vUSER_NODE (7),
                                      xmldom.makeNode (vTEXTO_ITEM));
            END IF;

            IF CREGS1.nome_tut IS NOT NULL
            THEN
               /*vdta:Firstnames*/
               vELEMTENTO_ITEM :=
                  xmldom.createElement (vDOCUMENTO, 'vdta:Firstnames');

               vUSER_NODE (7) :=
                  xmldom.appendChild (vUSER_NODE (6),
                                      xmldom.makeNode (vELEMTENTO_ITEM));
               /*vdta:SourceValue*/
               vELEMTENTO_ITEM :=
                  xmldom.createElement (vDOCUMENTO, 'vdta:SourceValue');
               xmldom.setAttribute (vELEMTENTO_ITEM,
                                    'PreTransliterated',
                                    'true');

               vUSER_NODE (7) :=
                  xmldom.appendChild (vUSER_NODE (7),
                                      xmldom.makeNode (vELEMTENTO_ITEM));
               vTEXTO_ITEM :=
                  xmldom.createTextNode (vDOCUMENTO, CREGS1.nome_tut);
               vUSER_NODE (7) :=
                  xmldom.appendChild (vUSER_NODE (7),
                                      xmldom.makeNode (vTEXTO_ITEM));
            END IF;
         END IF;

         /*vdta:ApplicantsHomeAddress*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:ApplicantsHomeAddress');
         vUSER_NODE.EXTEND;
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         /*vdta:Country*/
         IF CREGS1.cod_pos IS NOT NULL
         THEN
            SELECT cod_pais
              INTO v_cod_pais
              FROM posto
             WHERE cod_pos = CREGS1.cod_pos;
         ELSE
            v_cod_pais := CREGS1.COD_PAIS_NAC_1;
         END IF;

         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdta:Country');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               funcoes.obtem_valor_vis (v_cod_pais, 'PAIS'));
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:Street*/
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdta:Street');

         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         /*vdta:SourceValue*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:SourceValue');
         xmldom.setAttribute (vELEMTENTO_ITEM, 'PreTransliterated', 'true');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, CREGS2.ENDER_ACT);
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:PlaceOfBirth*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:PlaceOfBirth');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         /*vdta:Country*/
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdta:Country');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               funcoes.obtem_valor_vis (CREGS2.COD_PAIS_NASC, 'PAIS_NAC'));
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:Place*/
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdta:Place');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         /*vdta:SourceValue*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:SourceValue');
         xmldom.setAttribute (vELEMTENTO_ITEM, 'PreTransliterated', 'true');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, CREGS1.LOC_NASC);

         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));
      END IF;

      /*vdta:ApplicationCoreData*/
      vELEMTENTO_ITEM :=
         xmldom.createElement (vDOCUMENTO, 'vdta:ApplicationCoreData');
      vUSER_NODE (5) :=
         xmldom.appendChild (vUSER_NODE (4),
                             xmldom.makeNode (vELEMTENTO_ITEM));

      /*vdta:Authority*/
      vUSER_NODE.EXTEND;
      vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdta:Authority');
      vUSER_NODE (6) :=
         xmldom.appendChild (vUSER_NODE (5),
                             xmldom.makeNode (vELEMTENTO_ITEM));

      vELEMTENTO_ITEM :=
         xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityUniqueID');
      vUSER_NODE (7) :=
         xmldom.appendChild (vUSER_NODE (6),
                             xmldom.makeNode (vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, CREGSPosto.loa_id);
      vUSER_NODE (7) :=
         xmldom.appendChild (vUSER_NODE (7), xmldom.makeNode (vTEXTO_ITEM));

      vUSER_NODE.EXTEND;
      vELEMTENTO_ITEM :=
         xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityLocation');
      vUSER_NODE (7) :=
         xmldom.appendChild (vUSER_NODE (6),
                             xmldom.makeNode (vELEMTENTO_ITEM));

      vUSER_NODE.EXTEND;
      vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:Country');
      vUSER_NODE (8) :=
         xmldom.appendChild (vUSER_NODE (7),
                             xmldom.makeNode (vELEMTENTO_ITEM));
      vTEXTO_ITEM :=
         xmldom.createTextNode (
            vDOCUMENTO,
            funcoes.obtem_valor_vis (CREGSPosto.COD_PAIS, 'PAIS'));
      vUSER_NODE (8) :=
         xmldom.appendChild (vUSER_NODE (8), xmldom.makeNode (vTEXTO_ITEM));

      vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:Place');
      vUSER_NODE (8) :=
         xmldom.appendChild (vUSER_NODE (7),
                             xmldom.makeNode (vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, CREGSPosto.CID_POS);
      vUSER_NODE (8) :=
         xmldom.appendChild (vUSER_NODE (8), xmldom.makeNode (vTEXTO_ITEM));

      vELEMTENTO_ITEM :=
         xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityName');
      vUSER_NODE (7) :=
         xmldom.appendChild (vUSER_NODE (6),
                             xmldom.makeNode (vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, 'MNE');
      vUSER_NODE (7) :=
         xmldom.appendChild (vUSER_NODE (7), xmldom.makeNode (vTEXTO_ITEM));

      vELEMTENTO_ITEM :=
         xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityType');
      vUSER_NODE (7) :=
         xmldom.appendChild (vUSER_NODE (6),
                             xmldom.makeNode (vELEMTENTO_ITEM));
      vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, '0001.01');
      vUSER_NODE (7) :=
         xmldom.appendChild (vUSER_NODE (7), xmldom.makeNode (vTEXTO_ITEM));

      IF tudo = 'S'
      THEN
         /*vdta:IntendedDateOfArrival*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:IntendedDateOfArrival');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               TO_CHAR (TO_DATE (CREGS1.dat_ent, 'YYYY/MM/DD'), 'YYYYMMDD'));
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vTEXTO_ITEM));
         /*vdta:IntendedDateOfDeparture*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:IntendedDateOfDeparture');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               TO_CHAR (TO_DATE (CREGS1.DAT_SAI, 'YYYY/MM/DD'), 'YYYYMMDD'));
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:DateOfApplication*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:DateOfApplication');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (vDOCUMENTO,
                                   VISXML.Fchartz (CREGS1.DAT_PED));
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:DurationOfIntendedStayOrTransit*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO,
                                  'vdta:DurationOfIntendedStayOrTransit');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, CREGS1.Dur_Esta);
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:VisaTypeRequested*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:VisaTypeRequested');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               funcoes.obtem_valor_vis (CREGS1.TIP_VIS_PED, 'VISA_TYPE'));
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vTEXTO_ITEM));
      END IF;

      /*vdta:FingerprintsNotRequired*/
      vELEMTENTO_ITEM :=
         xmldom.createElement (vDOCUMENTO, 'vdta:FingerprintsNotRequired');
      vUSER_NODE (6) :=
         xmldom.appendChild (vUSER_NODE (5),
                             xmldom.makeNode (vELEMTENTO_ITEM));

      --IF NVL (CREGS1.tipo_recolha_bio, 1) IN (0, 2, 3)
      IF NVL (v_tipo_recolha_bio, 1) IN (0, 2)
      THEN
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, 'false');
      ELSE
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, 'true');
      END IF;

      vUSER_NODE (6) :=
         xmldom.appendChild (vUSER_NODE (6), xmldom.makeNode (vTEXTO_ITEM));

      /*vdta:FingerprintsNotApplicable*/
      vELEMTENTO_ITEM :=
         xmldom.createElement (vDOCUMENTO, 'vdta:FingerprintsNotApplicable');
      vUSER_NODE (6) :=
         xmldom.appendChild (vUSER_NODE (5),
                             xmldom.makeNode (vELEMTENTO_ITEM));

      --IF NVL (CREGS1.tipo_recolha_bio, 1) IN (1, 2)
      IF NVL (v_tipo_recolha_bio, 1) IN (1, 2)
      THEN
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, 'true');
      ELSE
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, 'false');
      END IF;

      vUSER_NODE (6) :=
         xmldom.appendChild (vUSER_NODE (6), xmldom.makeNode (vTEXTO_ITEM));

      /*vdta:ReasonForFingerprintNotApplicable*/
      --Incluir a razão da N/A da recolha das impressões digitais
      --IF     NVL (CREGS1.tipo_recolha_bio, 1) IN (1, 2)
      --AND CREGS1.mot_nao_recolha_bio IS NOT NULL
      IF     NVL (v_tipo_recolha_bio, 1) IN (1, 2)
         AND v_mot_nao_recolha_bio IS NOT NULL
      THEN
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO,
                                  'vdta:ReasonForFingerprintNotApplicable');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         --vTEXTO_ITEM :=
         --   xmldom.createTextNode (vDOCUMENTO, CREGS1.mot_nao_recolha_bio);
         vTEXTO_ITEM :=
            xmldom.createTextNode (vDOCUMENTO, v_mot_nao_recolha_bio);
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vTEXTO_ITEM));
      END IF;

      IF tudo = 'S'
      THEN
         /*vdta:MemberStateOfFirstEntry*/
         IF CREGS1.FRON_1_ENT IS NOT NULL
         THEN
            vELEMTENTO_ITEM :=
               xmldom.createElement (vDOCUMENTO,
                                     'vdta:MemberStateOfFirstEntry');
            vUSER_NODE (6) :=
               xmldom.appendChild (vUSER_NODE (5),
                                   xmldom.makeNode (vELEMTENTO_ITEM));

            vTEXTO_ITEM :=
               xmldom.createTextNode (
                  vDOCUMENTO,
                  funcoes.obtem_valor_vis (CREGS1.FRON_1_ENT, 'CT70_USER'));
            vUSER_NODE (6) :=
               xmldom.appendChild (vUSER_NODE (6),
                                   xmldom.makeNode (vTEXTO_ITEM));
         END IF;

         /*vdta:MemberStatesOfDestination*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO,
                                  'vdta:MemberStatesOfDestination');

         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         /*vdta:MemberStateOfDestination*/
         IF CREGS1.DEST_PRIN IS NOT NULL
         THEN
            vELEMTENTO_ITEM :=
               xmldom.createElement (vDOCUMENTO,
                                     'vdta:MemberStateOfDestination');
            vUSER_NODE (7) :=
               xmldom.appendChild (vUSER_NODE (6),
                                   xmldom.makeNode (vELEMTENTO_ITEM));
            vTEXTO_ITEM :=
               xmldom.createTextNode (
                  vDOCUMENTO,
                  funcoes.obtem_valor_vis (CREGS1.DEST_PRIN, 'CT70_USER'));

            vUSER_NODE (7) :=
               xmldom.appendChild (vUSER_NODE (7),
                                   xmldom.makeNode (vTEXTO_ITEM));
         END IF;

         IF CREGS1.DEST_PRIN_2 IS NOT NULL
         THEN
            vELEMTENTO_ITEM :=
               xmldom.createElement (vDOCUMENTO,
                                     'vdta:MemberStateOfDestination');
            vUSER_NODE (7) :=
               xmldom.appendChild (vUSER_NODE (6),
                                   xmldom.makeNode (vELEMTENTO_ITEM));
            vTEXTO_ITEM :=
               xmldom.createTextNode (
                  vDOCUMENTO,
                  funcoes.obtem_valor_vis (CREGS1.DEST_PRIN_2, 'CT70_USER'));

            vUSER_NODE (7) :=
               xmldom.appendChild (vUSER_NODE (7),
                                   xmldom.makeNode (vTEXTO_ITEM));
         END IF;

         IF CREGS1.DEST_PRIN_3 IS NOT NULL
         THEN
            vELEMTENTO_ITEM :=
               xmldom.createElement (vDOCUMENTO,
                                     'vdta:MemberStateOfDestination');
            vUSER_NODE (7) :=
               xmldom.appendChild (vUSER_NODE (6),
                                   xmldom.makeNode (vELEMTENTO_ITEM));
            vTEXTO_ITEM :=
               xmldom.createTextNode (
                  vDOCUMENTO,
                  funcoes.obtem_valor_vis (CREGS1.DEST_PRIN_3, 'CT70_USER'));

            vUSER_NODE (7) :=
               xmldom.appendChild (vUSER_NODE (7),
                                   xmldom.makeNode (vTEXTO_ITEM));
         END IF;

         /*vdta:PlaceOfApplication*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:PlaceOfApplication');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         /*vdta:Country*/
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:Country');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               funcoes.obtem_valor_vis (CREGSPosto.COD_PAIS, 'PAIS'));
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:Place*/
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdta:Place');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         /*vdta:SourceValue*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:SourceValue');
         xmldom.setAttribute (vELEMTENTO_ITEM, 'PreTransliterated', 'true');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, CREGSPosto.CID_POS);

         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));
      END IF;

      IF tudo = 'S'
      THEN
         /*vdta:TravelDocument*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:TravelDocument');
         vUSER_NODE (5) :=
            xmldom.appendChild (vUSER_NODE (4),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         /*vdta:TravelDocumentType*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:TravelDocumentType');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               funcoes.obtem_valor_vis (CREGS1.COD_DOC, 'TIPO_PASS'));
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vTEXTO_ITEM));
         /*vdta:TravelDocumentNumber*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:TravelDocumentNumber');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (vDOCUMENTO, CREGS1.Num_Doc_Viag);
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:DateOfIssue*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:DateOfIssue');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               TO_CHAR (TO_DATE (CREGS2.DAT_EMI_DOC, 'YYYY/MM/DD'),
                        'YYYY-MM-DD'));
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:ValidUntil*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:ValidUntil');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               TO_CHAR (CREGS2.VALI_DOC_VIAG, 'YYYY-MM-DD'));
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vTEXTO_ITEM));

         IF funcoes.obtem_valor_vis (CREGS1.COD_DOC, 'TIPO_PASS') = '0007.01'
         THEN                                                    /*Se Outros*/
            SELECT des_doc
              INTO v_des_doc
              FROM documento
             WHERE cod_doc = CREGS1.COD_DOC;

            /*vdta:OtherTravelDocument*/
            vELEMTENTO_ITEM :=
               xmldom.createElement (vDOCUMENTO, 'vdta:OtherTravelDocument');
            vUSER_NODE (6) :=
               xmldom.appendChild (vUSER_NODE (5),
                                   xmldom.makeNode (vELEMTENTO_ITEM));
            vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, v_des_doc);
            vUSER_NODE (6) :=
               xmldom.appendChild (vUSER_NODE (6),
                                   xmldom.makeNode (vTEXTO_ITEM));
         END IF;

         /*vdta:IssuingAuthorityOfTravelDocument*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO,
                                  'vdta:IssuingAuthorityOfTravelDocument');

         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         /*vdta:CountryOfIssuingAuthority*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO,
                                  'vdta:CountryOfIssuingAuthority');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               funcoes.obtem_valor_vis (CREGS1.COD_PAIS_EMI_DOC, 'PAIS_NAC'));
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         IF    (    CREGS2.cod_conc_3 IS NOT NULL
                AND CREGS1.NOME_REFER_3 IS NOT NULL)
            OR (    CREGS2.cod_conc IS NOT NULL
                AND CREGS1.NOME_REFER_1 IS NOT NULL)
         THEN
            /*vdta:Host*/
            vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdta:Host');
            vUSER_NODE (5) :=
               xmldom.appendChild (vUSER_NODE (4),
                                   xmldom.makeNode (vELEMTENTO_ITEM));

            IF CREGS2.cod_conc_3 IS NOT NULL
            THEN
               SELECT cs.des_conc
                 INTO vCOD_CONC
                 FROM concelho_sef cs, direccao_sef ds
                WHERE     cs.cod_direc = ds.cod_direc
                      AND cs.cod_conc = CREGS2.COD_CONC_3;

               /*vdta:HostOrganisation*/
               vELEMTENTO_ITEM :=
                  xmldom.createElement (vDOCUMENTO, 'vdta:HostOrganisation');
               vUSER_NODE (6) :=
                  xmldom.appendChild (vUSER_NODE (5),
                                      xmldom.makeNode (vELEMTENTO_ITEM));

               /*vdta:Address*/
               vELEMTENTO_ITEM :=
                  xmldom.createElement (vDOCUMENTO, 'vdta:Address');
               vUSER_NODE (7) :=
                  xmldom.appendChild (vUSER_NODE (6),
                                      xmldom.makeNode (vELEMTENTO_ITEM));

               /*vdta:Country*/
               vELEMTENTO_ITEM :=
                  xmldom.createElement (vDOCUMENTO, 'vdta:Country');
               vUSER_NODE (8) :=
                  xmldom.appendChild (vUSER_NODE (7),
                                      xmldom.makeNode (vELEMTENTO_ITEM));
               vTEXTO_ITEM :=
                  xmldom.createTextNode (
                     vDOCUMENTO,
                     funcoes.obtem_valor_vis ('PRT', 'PAIS'));
               vUSER_NODE (8) :=
                  xmldom.appendChild (vUSER_NODE (8),
                                      xmldom.makeNode (vTEXTO_ITEM));

               /*vdta:Street*/
               vELEMTENTO_ITEM :=
                  xmldom.createElement (vDOCUMENTO, 'vdta:Street');

               vUSER_NODE (8) :=
                  xmldom.appendChild (vUSER_NODE (7),
                                      xmldom.makeNode (vELEMTENTO_ITEM));
               /*vdta:SourceValue*/
               vELEMTENTO_ITEM :=
                  xmldom.createElement (vDOCUMENTO, 'vdta:SourceValue');
               xmldom.setAttribute (vELEMTENTO_ITEM,
                                    'PreTransliterated',
                                    'true');
               vUSER_NODE (8) :=
                  xmldom.appendChild (vUSER_NODE (8),
                                      xmldom.makeNode (vELEMTENTO_ITEM));
               vTEXTO_ITEM :=
                  xmldom.createTextNode (vDOCUMENTO, CREGS2.ENDER_ESTAD_3);
               vUSER_NODE (8) :=
                  xmldom.appendChild (vUSER_NODE (8),
                                      xmldom.makeNode (vTEXTO_ITEM));

               /*vdta:City*/
               vELEMTENTO_ITEM :=
                  xmldom.createElement (vDOCUMENTO, 'vdta:City');

               vUSER_NODE (8) :=
                  xmldom.appendChild (vUSER_NODE (7),
                                      xmldom.makeNode (vELEMTENTO_ITEM));
               /*vdta:SourceValue*/
               vELEMTENTO_ITEM :=
                  xmldom.createElement (vDOCUMENTO, 'vdta:SourceValue');
               xmldom.setAttribute (vELEMTENTO_ITEM,
                                    'PreTransliterated',
                                    'true');
               vUSER_NODE (8) :=
                  xmldom.appendChild (vUSER_NODE (8),
                                      xmldom.makeNode (vELEMTENTO_ITEM));
               vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, vCOD_CONC);
               vUSER_NODE (8) :=
                  xmldom.appendChild (vUSER_NODE (8),
                                      xmldom.makeNode (vTEXTO_ITEM));

               /*vdta:Name*/
               vELEMTENTO_ITEM :=
                  xmldom.createElement (vDOCUMENTO, 'vdta:Name');
               vUSER_NODE (7) :=
                  xmldom.appendChild (vUSER_NODE (6),
                                      xmldom.makeNode (vELEMTENTO_ITEM));

               /*vdta:SourceValue*/
               vELEMTENTO_ITEM :=
                  xmldom.createElement (vDOCUMENTO, 'vdta:SourceValue');
               xmldom.setAttribute (vELEMTENTO_ITEM,
                                    'PreTransliterated',
                                    'true');
               vUSER_NODE (7) :=
                  xmldom.appendChild (vUSER_NODE (7),
                                      xmldom.makeNode (vELEMTENTO_ITEM));
               vTEXTO_ITEM :=
                  xmldom.createTextNode (vDOCUMENTO, CREGS1.NOME_REFER_3);
               vUSER_NODE (7) :=
                  xmldom.appendChild (vUSER_NODE (7),
                                      xmldom.makeNode (vTEXTO_ITEM));
            ELSIF CREGS2.cod_conc IS NOT NULL
            THEN
               SELECT cs.des_conc
                 INTO vCOD_CONC
                 FROM concelho_sef cs, direccao_sef ds
                WHERE     cs.cod_direc = ds.cod_direc
                      AND cs.cod_conc = CREGS2.COD_CONC;

               /*vdta:HostPerson*/
               vELEMTENTO_ITEM :=
                  xmldom.createElement (vDOCUMENTO, 'vdta:HostPerson');
               vUSER_NODE (6) :=
                  xmldom.appendChild (vUSER_NODE (5),
                                      xmldom.makeNode (vELEMTENTO_ITEM));

               /*vdta:Address*/
               vELEMTENTO_ITEM :=
                  xmldom.createElement (vDOCUMENTO, 'vdta:Address');
               vUSER_NODE (7) :=
                  xmldom.appendChild (vUSER_NODE (6),
                                      xmldom.makeNode (vELEMTENTO_ITEM));

               /*vdta:Country*/
               vELEMTENTO_ITEM :=
                  xmldom.createElement (vDOCUMENTO, 'vdta:Country');
               vUSER_NODE (8) :=
                  xmldom.appendChild (vUSER_NODE (7),
                                      xmldom.makeNode (vELEMTENTO_ITEM));
               vTEXTO_ITEM :=
                  xmldom.createTextNode (
                     vDOCUMENTO,
                     funcoes.obtem_valor_vis ('PRT', 'PAIS'));
               vUSER_NODE (8) :=
                  xmldom.appendChild (vUSER_NODE (8),
                                      xmldom.makeNode (vTEXTO_ITEM));

               /*vdta:Street*/
               vELEMTENTO_ITEM :=
                  xmldom.createElement (vDOCUMENTO, 'vdta:Street');

               vUSER_NODE (8) :=
                  xmldom.appendChild (vUSER_NODE (7),
                                      xmldom.makeNode (vELEMTENTO_ITEM));
               /*vdta:SourceValue*/
               vELEMTENTO_ITEM :=
                  xmldom.createElement (vDOCUMENTO, 'vdta:SourceValue');
               xmldom.setAttribute (vELEMTENTO_ITEM,
                                    'PreTransliterated',
                                    'true');
               vUSER_NODE (8) :=
                  xmldom.appendChild (vUSER_NODE (8),
                                      xmldom.makeNode (vELEMTENTO_ITEM));
               vTEXTO_ITEM :=
                  xmldom.createTextNode (vDOCUMENTO, CREGS2.ENDER_ESTAD);
               vUSER_NODE (8) :=
                  xmldom.appendChild (vUSER_NODE (8),
                                      xmldom.makeNode (vTEXTO_ITEM));

               /*vdta:City*/
               vELEMTENTO_ITEM :=
                  xmldom.createElement (vDOCUMENTO, 'vdta:City');

               vUSER_NODE (8) :=
                  xmldom.appendChild (vUSER_NODE (7),
                                      xmldom.makeNode (vELEMTENTO_ITEM));
               /*vdta:SourceValue*/
               vELEMTENTO_ITEM :=
                  xmldom.createElement (vDOCUMENTO, 'vdta:SourceValue');
               xmldom.setAttribute (vELEMTENTO_ITEM,
                                    'PreTransliterated',
                                    'true');
               vUSER_NODE (8) :=
                  xmldom.appendChild (vUSER_NODE (8),
                                      xmldom.makeNode (vELEMTENTO_ITEM));
               vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, vCOD_CONC);
               vUSER_NODE (8) :=
                  xmldom.appendChild (vUSER_NODE (8),
                                      xmldom.makeNode (vTEXTO_ITEM));

               /*vdta:Name*/
               vELEMTENTO_ITEM :=
                  xmldom.createElement (vDOCUMENTO, 'vdta:Name');
               vUSER_NODE (7) :=
                  xmldom.appendChild (vUSER_NODE (6),
                                      xmldom.makeNode (vELEMTENTO_ITEM));

               /*vdta:Surname*/
               vELEMTENTO_ITEM :=
                  xmldom.createElement (vDOCUMENTO, 'vdta:Surname');

               vUSER_NODE (8) :=
                  xmldom.appendChild (vUSER_NODE (7),
                                      xmldom.makeNode (vELEMTENTO_ITEM));

               /*vdta:SourceValue*/
               vELEMTENTO_ITEM :=
                  xmldom.createElement (vDOCUMENTO, 'vdta:SourceValue');
               xmldom.setAttribute (vELEMTENTO_ITEM,
                                    'PreTransliterated',
                                    'true');
               vUSER_NODE (8) :=
                  xmldom.appendChild (vUSER_NODE (8),
                                      xmldom.makeNode (vELEMTENTO_ITEM));

               IF INSTR (CREGS1.NOME_REFER_1, ' ') = 0
               THEN
                  vTEXTO_ITEM :=
                     xmldom.createTextNode (vDOCUMENTO, CREGS1.NOME_REFER_1);
               ELSE
                  vTEXTO_ITEM :=
                     xmldom.createTextNode (
                        vDOCUMENTO,
                        --replace(substr(CREGS1.NOME_REFER_1,instr(CREGS1.NOME_REFER_1,' ') + 1 ),' ',','));
                        SUBSTR (CREGS1.NOME_REFER_1,
                                INSTR (CREGS1.NOME_REFER_1, ' ') + 1));
               END IF;

               vUSER_NODE (8) :=
                  xmldom.appendChild (vUSER_NODE (8),
                                      xmldom.makeNode (vTEXTO_ITEM));

               IF INSTR (CREGS1.NOME_REFER_1, ' ') <> 0
               THEN
                  /*vdta:Firstnames*/
                  vELEMTENTO_ITEM :=
                     xmldom.createElement (vDOCUMENTO, 'vdta:Firstnames');

                  vUSER_NODE (8) :=
                     xmldom.appendChild (vUSER_NODE (7),
                                         xmldom.makeNode (vELEMTENTO_ITEM));

                  /*vdta:SourceValue*/
                  vELEMTENTO_ITEM :=
                     xmldom.createElement (vDOCUMENTO, 'vdta:SourceValue');
                  xmldom.setAttribute (vELEMTENTO_ITEM,
                                       'PreTransliterated',
                                       'true');
                  vUSER_NODE (8) :=
                     xmldom.appendChild (vUSER_NODE (8),
                                         xmldom.makeNode (vELEMTENTO_ITEM));
                  vTEXTO_ITEM :=
                     xmldom.createTextNode (
                        vDOCUMENTO,
                        SUBSTR (CREGS1.NOME_REFER_1,
                                1,
                                INSTR (CREGS1.NOME_REFER_1, ' ') - 1));
                  vUSER_NODE (8) :=
                     xmldom.appendChild (vUSER_NODE (8),
                                         xmldom.makeNode (vTEXTO_ITEM));
               END IF;
            END IF;
         END IF;

         IF CREGS1.Cod_Prof IS NOT NULL
         THEN
            IF CREGS1.Cod_Prof = '31' AND CREGS2.Ent_Patr IS NOT NULL
            THEN
               /*vdta:EducationalEstablishment*/
               vELEMTENTO_ITEM :=
                  xmldom.createElement (vDOCUMENTO,
                                        'vdta:EducationalEstablishment');
               vUSER_NODE (5) :=
                  xmldom.appendChild (vUSER_NODE (4),
                                      xmldom.makeNode (vELEMTENTO_ITEM));
               /*vdta:EducationalEstablishmentName*/
               vELEMTENTO_ITEM :=
                  xmldom.createElement (vDOCUMENTO,
                                        'vdta:EducationalEstablishmentName');
               vUSER_NODE (6) :=
                  xmldom.appendChild (vUSER_NODE (5),
                                      xmldom.makeNode (vELEMTENTO_ITEM));

               /*vdta:SourceValue*/
               vELEMTENTO_ITEM :=
                  xmldom.createElement (vDOCUMENTO, 'vdta:SourceValue');
               xmldom.setAttribute (vELEMTENTO_ITEM,
                                    'PreTransliterated',
                                    'true');

               vUSER_NODE (6) :=
                  xmldom.appendChild (vUSER_NODE (6),
                                      xmldom.makeNode (vELEMTENTO_ITEM));
               vTEXTO_ITEM :=
                  xmldom.createTextNode (vDOCUMENTO, CREGS2.Ent_Patr);
               vUSER_NODE (6) :=
                  xmldom.appendChild (vUSER_NODE (6),
                                      xmldom.makeNode (vTEXTO_ITEM));
            END IF;

            /*vdta:Occupation*/
            vELEMTENTO_ITEM :=
               xmldom.createElement (vDOCUMENTO, 'vdta:Occupation');
            vUSER_NODE (5) :=
               xmldom.appendChild (vUSER_NODE (4),
                                   xmldom.makeNode (vELEMTENTO_ITEM));
            /*vdta:Occupation*/
            vELEMTENTO_ITEM :=
               xmldom.createElement (vDOCUMENTO, 'vdta:Occupation');
            vUSER_NODE (6) :=
               xmldom.appendChild (vUSER_NODE (5),
                                   xmldom.makeNode (vELEMTENTO_ITEM));

            vTEXTO_ITEM :=
               xmldom.createTextNode (
                  vDOCUMENTO,
                  funcoes.obtem_valor_vis (CREGS1.Cod_Prof, 'PROF'));
            vUSER_NODE (6) :=
               xmldom.appendChild (vUSER_NODE (6),
                                   xmldom.makeNode (vTEXTO_ITEM));

            IF CREGS2.Ent_Patr IS NOT NULL
            THEN
               /*vdta:EmployerName*/
               vELEMTENTO_ITEM :=
                  xmldom.createElement (vDOCUMENTO, 'vdta:EmployerName');

               vUSER_NODE (6) :=
                  xmldom.appendChild (vUSER_NODE (5),
                                      xmldom.makeNode (vELEMTENTO_ITEM));
               /*vdta:SourceValue*/
               vELEMTENTO_ITEM :=
                  xmldom.createElement (vDOCUMENTO, 'vdta:SourceValue');
               xmldom.setAttribute (vELEMTENTO_ITEM,
                                    'PreTransliterated',
                                    'true');

               vUSER_NODE (6) :=
                  xmldom.appendChild (vUSER_NODE (6),
                                      xmldom.makeNode (vELEMTENTO_ITEM));
               vTEXTO_ITEM :=
                  xmldom.createTextNode (vDOCUMENTO, CREGS2.Ent_Patr);
               vUSER_NODE (6) :=
                  xmldom.appendChild (vUSER_NODE (6),
                                      xmldom.makeNode (vTEXTO_ITEM));
            END IF;
         END IF;

         /*vdta:MainPurposesOfJourney*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:MainPurposesOfJourney');
         vUSER_NODE (5) :=
            xmldom.appendChild (vUSER_NODE (4),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         /*vdta:MainPurposeOfJourney*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:MainPurposeOfJourney');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               funcoes.obtem_valor_vis (CREGS1.cod_esta_1, 'MOTIVO_ESTADA'));
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:MainPurposeOfJourney*/
         IF CREGS1.cod_esta_2 IS NOT NULL
         THEN
            vELEMTENTO_ITEM :=
               xmldom.createElement (vDOCUMENTO, 'vdta:MainPurposeOfJourney');
            vUSER_NODE (6) :=
               xmldom.appendChild (vUSER_NODE (5),
                                   xmldom.makeNode (vELEMTENTO_ITEM));
            vTEXTO_ITEM :=
               xmldom.createTextNode (
                  vDOCUMENTO,
                  funcoes.obtem_valor_vis (CREGS1.cod_esta_2,
                                           'MOTIVO_ESTADA'));
            vUSER_NODE (6) :=
               xmldom.appendChild (vUSER_NODE (6),
                                   xmldom.makeNode (vTEXTO_ITEM));
         END IF;

         /*vdta:MainPurposeOfJourney*/
         IF CREGS1.cod_esta_3 IS NOT NULL
         THEN
            vELEMTENTO_ITEM :=
               xmldom.createElement (vDOCUMENTO, 'vdta:MainPurposeOfJourney');
            vUSER_NODE (6) :=
               xmldom.appendChild (vUSER_NODE (5),
                                   xmldom.makeNode (vELEMTENTO_ITEM));
            vTEXTO_ITEM :=
               xmldom.createTextNode (
                  vDOCUMENTO,
                  funcoes.obtem_valor_vis (CREGS1.cod_esta_3,
                                           'MOTIVO_ESTADA'));
            vUSER_NODE (6) :=
               xmldom.appendChild (vUSER_NODE (6),
                                   xmldom.makeNode (vTEXTO_ITEM));


            vELEMTENTO_ITEM :=
               xmldom.createElement (vDOCUMENTO, 'vdta:MainPurposeOfJourney');
            vUSER_NODE (6) :=
               xmldom.appendChild (vUSER_NODE (5),
                                   xmldom.makeNode (vELEMTENTO_ITEM));
            vTEXTO_ITEM :=
               xmldom.createTextNode (
                  vDOCUMENTO,
                  funcoes.obtem_valor_vis ('01', 'MOTIVO_ESTADA'));
            vUSER_NODE (6) :=
               xmldom.appendChild (vUSER_NODE (6),
                                   xmldom.makeNode (vTEXTO_ITEM));

            vELEMTENTO_ITEM :=
               xmldom.createElement (vDOCUMENTO, 'vdta:MainPurposeOfJourney');
            vUSER_NODE (6) :=
               xmldom.appendChild (vUSER_NODE (5),
                                   xmldom.makeNode (vELEMTENTO_ITEM));
            vTEXTO_ITEM :=
               xmldom.createTextNode (
                  vDOCUMENTO,
                  funcoes.obtem_valor_vis ('02', 'MOTIVO_ESTADA'));
            vUSER_NODE (6) :=
               xmldom.appendChild (vUSER_NODE (6),
                                   xmldom.makeNode (vTEXTO_ITEM));
         END IF;
      END IF;

      IF link_app IS NOT NULL
      THEN
         /*PreviousApplicationNumber*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'PreviousApplicationNumber');
         vUSER_NODE (4) :=
            xmldom.appendChild (vUSER_NODE (3),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, link_app);
         vUSER_NODE (4) :=
            xmldom.appendChild (vUSER_NODE (4),
                                xmldom.makeNode (vTEXTO_ITEM));
      END IF;

      /*Escrever para ficheiro*/
      dsa_srv_makexml_mpt.p_setAttrString (
         vELEMENTOS_ROOT,
         'xmlns',
         'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages');
      dsa_srv_makexml_mpt.p_setAttrString (
         vELEMENTOS_ROOT,
         'xmlns:vdta',
         'http://www.europa.eu/schengen/vis/xsd/v2/types/Application');
      dsa_srv_makexml_mpt.p_setAttrString (
         vELEMENTOS_ROOT,
         'xmlns:vdtc',
         'http://www.europa.eu/schengen/vis/xsd/v2/types/Common');
      dsa_srv_makexml_mpt.p_setAttrString (
         vELEMENTOS_ROOT,
         'xmlns:xsi',
         'http://www.w3.org/2001/XMLSchema-instance');
      dsa_srv_makexml_mpt.p_setAttrString (
         vELEMENTOS_ROOT,
         'xsi:schemaLocation',
            'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages'
         || CHR (13)
         || vCcaminhoXSD
         || 'NSCreateApplication.xsd');

      /*xmldom.writeToFile(vDOCUMENTO,
                         vCcaminhoXML || 'ApplicationCreateApplication' || TO_CHAR(sysdate,'yyyy/mm/dd hh24:mi:ss') ||'.xml');*/
      xmldom.writeToClob (vDOCUMENTO, v_clob);

      SELECT REPLACE (v_clob, 'Header xmlns=""', 'Header')
        INTO v_clob
        FROM DUAL;

      SELECT REPLACE (v_clob, 'Request xmlns=""', 'Request')
        INTO v_clob
        FROM DUAL;

        /*
      write_clob_tofile (vCcaminhoXML   => vCcaminhoXML,
                         vfilename      => 'ApplicationCreateApplication',
                         v_clob         => v_clob);
*/
      INSERT INTO temp_env_vis (id_env_vis,
                                ano_form,
                                num_form,
                                cod_comm_vistos,
                                message_xml,
                                cri_uti,
                                cri_dat)
           VALUES (vHEADER_MESSAGEID,
                   pANO_FORM,
                   pNUM_FORM,
                   1,
                   v_clob,
                   USER,
                   SYSDATE);

      --commit;
      --Chama VIS

      msg_resp_vis :=
         Funcoes.Envia_Vis (NULL,
                    v_web_service,
                    NULL,
                    vHEADER_MESSAGEID,
                    ambiente);

      /*Libertar os recursos*/
      xmldom.freeDocument (vDOCUMENTO);
   END;

   PROCEDURE encode_to_base64 (p_blob IN BLOB, v_result OUT CLOB)
   IS
      v_clob             CLOB;
      --v_result clob;
      v_offset           INTEGER;
      v_chunk_size       BINARY_INTEGER := (48 / 4) * 3;
      v_buffer_varchar   VARCHAR2 (48);
      v_buffer_raw       RAW (48);
   BEGIN
      DBMS_LOB.createtemporary (v_clob, TRUE);
      v_offset := 1;

      FOR i IN 1 .. CEIL (DBMS_LOB.getlength (p_blob) / v_chunk_size)
      LOOP
         DBMS_LOB.read (p_blob,
                        v_chunk_size,
                        v_offset,
                        v_buffer_raw);
         v_buffer_raw := UTL_ENCODE.base64_encode (v_buffer_raw);
         v_buffer_varchar := UTL_RAW.cast_to_varchar2 (v_buffer_raw);
         DBMS_LOB.writeappend (v_clob,
                               LENGTH (v_buffer_varchar),
                               v_buffer_varchar);
         v_offset := v_offset + v_chunk_size;
      END LOOP;

      v_result := v_clob;
      DBMS_LOB.freetemporary (v_clob);
   --return v_result;
   END;

   PROCEDURE PAttAppDatAddBiom (pANO_FORM       IN     FORMULARIO.ANO_FORM%TYPE,
                                pNUM_FORM       IN     FORMULARIO.NUM_FORM%TYPE,
                                estado_tarefa      OUT NUMBER,
                                tipo            IN     VARCHAR2,
                                msg_resp_vis       OUT VARCHAR2,
                                vRole           IN     VARCHAR2,
                                TestId          IN     VARCHAR2)
   IS
      vDOCUMENTO              xmldom.DOMDocument;
      vELEMENTOS_ROOT         xmldom.DOMElement;
      vELEMTENTO_ITEM         xmldom.DOMElement;
      vTEXTO_ITEM             xmldom.DOMText;
      v_clob                  CLOB := 'xxx';
      dom_cast                xmldom.DOMCharacterData;
      v_bf_foto               temp_imagens.foto%TYPE;
      v_blob_Bio              biometria_info.BIO%TYPE;
      p_Foto_Clob             CLOB;
      vApplicationNumber      formulario.ref_form_2%TYPE;
      v_cod_pais_sch_ref      formulario.cod_pais_sch_ref%TYPE;
      v_cod_pais              posto.cod_pais%TYPE;
      v_cid_pos               posto.cid_pos%TYPE;
      v_des_pos               posto.des_pos%TYPE;
      v_bio_clob              CLOB;
      id                      UTL_FILE.FILE_TYPE;
      filedata                VARCHAR2 (1000);
      buf                     VARCHAR2 (32000);
      l_amt                   NUMBER := 1;
      offset                  NUMBER := 1;
      tam                     NUMBER (10);
      i                       NUMBER (10) := 1;
      V_COD_PAIS_SCH_REPRES   formulario.cod_pais_sch_repres%TYPE;
      ValRepresentanteID      conversao_vis.valor_vis%TYPE;
      v_loa_id                posto.loa_id%TYPE;

      v_dir                   VARCHAR2 (250);
      v_file_name_foto        VARCHAR2 (100);
      bf                      BFILE;
      b                       BLOB;
      src_offset              INTEGER := 1;
      dest_offset             INTEGER := 1;
   BEGIN
      BEGIN
         SELECT f.ref_form_2,
                t.foto,
                B.BIO,
                f.cod_pais_sch_ref,
                p.cod_pais,
                p.cid_pos,
                p.des_pos,
                P.LOA_ID
           INTO vApplicationNumber,
                v_bf_foto,
                v_blob_Bio,
                v_cod_pais_sch_ref,
                v_cod_pais,
                v_cid_pos,
                v_des_pos,
                v_loa_id
           FROM formulario f,
                temp_imagens t,
                temp_imagens_det d,
                posto p,
                biometria_info b
          WHERE     f.ano_form = pANO_FORM
                AND f.num_form = pNUM_FORM
                AND f.ref_form_2 = d.ref_form_2
                AND t.foto IS NOT NULL
                AND f.cod_pos = p.cod_pos
                AND t.num_ordem = d.num_ordem
                AND f.ANO_FORM = B.ANO_FORM(+)
                AND f.NUM_FORM = B.NUM_FORM(+);
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            estado_tarefa := 99;
      END;

      SELECT f.ref_form_2, f.cod_pais_sch_ref, f.COD_PAIS_SCH_REPRES
        INTO vApplicationNumber, v_cod_pais_sch_ref, V_COD_PAIS_SCH_REPRES
        FROM formulario f
       WHERE f.ano_form = pANO_FORM AND f.num_form = pNUM_FORM;

      Funcoes.obtem_header_det ('NSAddBiometricData',
                                vContract_env,
                                vOperation_env);

      IF V_COD_PAIS_SCH_REPRES IS NOT NULL
      THEN
         ValRepresentanteID :=
            funcoes.obtem_valor_vis (V_COD_PAIS_SCH_REPRES, 'CT70_USER');
      END IF;

      PComum (vDOCUMENTO,
              vELEMENTOS_ROOT,
              'NSAddBiometricData',
              vHEADER_MESSAGEID,
              vContract_env,
              vOperation_env,
              NULL,
              NULL,
              vRole,
              TestId,
              ValRepresentanteID);

      IF NVL (estado_tarefa, 0) <> 99
      THEN
         /*Request*/
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'Request');
         vUSER_NODE (3) :=
            xmldom.appendChild (vUSER_NODE (2),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         /*Authority*/
         vUSER_NODE.EXTEND;
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'Authority');
         vUSER_NODE (4) :=
            xmldom.appendChild (vUSER_NODE (3),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityUniqueID');
         vUSER_NODE (5) :=
            xmldom.appendChild (vUSER_NODE (4),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, v_loa_id);
         vUSER_NODE (5) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vTEXTO_ITEM));


         vUSER_NODE.EXTEND;
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityLocation');
         vUSER_NODE (5) :=
            xmldom.appendChild (vUSER_NODE (4),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         vUSER_NODE.EXTEND;
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:Country');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               funcoes.obtem_valor_vis (v_cod_pais, 'PAIS'));
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vTEXTO_ITEM));

         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:Place');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, v_cid_pos);
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vTEXTO_ITEM));

         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityName');
         vUSER_NODE (5) :=
            xmldom.appendChild (vUSER_NODE (4),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, 'MNE');
         --v_des_pos || ' ' || v_cid_pos);
         vUSER_NODE (5) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vTEXTO_ITEM));

         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityType');
         vUSER_NODE (5) :=
            xmldom.appendChild (vUSER_NODE (4),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, '0001.01');
         vUSER_NODE (5) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*ApplicationNumber*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'ApplicationNumber');
         vUSER_NODE.EXTEND;
         vUSER_NODE (4) :=
            xmldom.appendChild (vUSER_NODE (3),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (vDOCUMENTO,
                                   v_cod_pais_sch_ref || vApplicationNumber);
         vUSER_NODE (4) :=
            xmldom.appendChild (vUSER_NODE (4),
                                xmldom.makeNode (vTEXTO_ITEM));
         /*BiometricData*/
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'BiometricData');
         vUSER_NODE (4) :=
            xmldom.appendChild (vUSER_NODE (3),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         IF tipo = 'FINGER'
         THEN
            encode_to_base64 (v_blob_bio, v_bio_clob);
            /*FingerprintSet*/
            vELEMTENTO_ITEM :=
               xmldom.createElement (vDOCUMENTO, 'vdta:FingerprintSet');
            vUSER_NODE (5) :=
               xmldom.appendChild (vUSER_NODE (4),
                                   xmldom.makeNode (vELEMTENTO_ITEM));

            /*MasterData*/
            vELEMTENTO_ITEM :=
               xmldom.createElement (vDOCUMENTO, 'vdta:MasterData');
            vUSER_NODE (6) :=
               xmldom.appendChild (vUSER_NODE (5),
                                   xmldom.makeNode (vELEMTENTO_ITEM));

            /*FingerprintSetType*/
            vELEMTENTO_ITEM :=
               xmldom.createElement (vDOCUMENTO, 'vdta:FingerprintSetType');
            vUSER_NODE.EXTEND;
            vUSER_NODE (7) :=
               xmldom.appendChild (vUSER_NODE (6),
                                   xmldom.makeNode (vELEMTENTO_ITEM));
            vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, '0001.01');
            vUSER_NODE (7) :=
               xmldom.appendChild (vUSER_NODE (7),
                                   xmldom.makeNode (vTEXTO_ITEM));

            /*DataSource*/
            vELEMTENTO_ITEM :=
               xmldom.createElement (vDOCUMENTO, 'vdta:DataSource');
            vUSER_NODE.EXTEND;
            vUSER_NODE (6) :=
               xmldom.appendChild (vUSER_NODE (5),
                                   xmldom.makeNode (vELEMTENTO_ITEM));

            tam := LENGTH (v_bio_clob);

            WHILE i <= tam
            LOOP
               IF i = 1
               THEN
                  DBMS_LOB.read (v_bio_clob,
                                 l_amt,
                                 1000,
                                 buf);
                  buf := SUBSTR (v_bio_clob, i, 1000);
                  vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, buf);

                  vUSER_NODE (6) :=
                     xmldom.appendChild (vUSER_NODE (6),
                                         xmldom.makeNode (vTEXTO_ITEM));

                  dom_cast := xmldom.makeCharacterData (vUSER_NODE (6));
               ELSE
                  DBMS_LOB.read (v_bio_clob,
                                 l_amt,
                                 (offset * i),
                                 buf);
                  buf := SUBSTR (v_bio_clob, i, 1000);
                  xmldom.appendData (dom_cast, buf);
               END IF;

               i := i + 1000;
            END LOOP;
         ELSIF tipo = 'PHOTO'
         THEN
            IF v_bf_foto IS NOT NULL
            THEN
               DBMS_LOB.FILEGETNAME (v_bf_foto, v_dir, v_file_name_foto);
               DBMS_OUTPUT.put_line ('Nome fich: ' || v_file_name_foto);
               bf := BFILENAME ('FOTOGRAFIAS', v_file_name_foto);
               DBMS_LOB.open (bf, DBMS_LOB.file_readonly);
               DBMS_LOB.createtemporary (b, TRUE);
               DBMS_LOB.loadBlobFromFile (b,
                                          bf,
                                          DBMS_LOB.lobmaxsize,
                                          dest_offset,
                                          src_offset);
               DBMS_LOB.close (bf);

               encode_to_base64 (b, p_Foto_Clob);
            END IF;

            /*FacialImage*/
            vELEMTENTO_ITEM :=
               xmldom.createElement (vDOCUMENTO, 'vdta:FacialImage');
            vUSER_NODE (5) :=
               xmldom.appendChild (vUSER_NODE (4),
                                   xmldom.makeNode (vELEMTENTO_ITEM));

            /*MasterData*/
            vELEMTENTO_ITEM :=
               xmldom.createElement (vDOCUMENTO, 'vdta:MasterData');
            vUSER_NODE (6) :=
               xmldom.appendChild (vUSER_NODE (5),
                                   xmldom.makeNode (vELEMTENTO_ITEM));
            /*ImageType*/
            vELEMTENTO_ITEM :=
               xmldom.createElement (vDOCUMENTO, 'vdta:ImageType');
            vUSER_NODE.EXTEND;
            vUSER_NODE (7) :=
               xmldom.appendChild (vUSER_NODE (6),
                                   xmldom.makeNode (vELEMTENTO_ITEM));
            vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, '0001.01');
            vUSER_NODE (7) :=
               xmldom.appendChild (vUSER_NODE (7),
                                   xmldom.makeNode (vTEXTO_ITEM));

            /*DataSource*/
            vELEMTENTO_ITEM :=
               xmldom.createElement (vDOCUMENTO, 'vdta:DataSource');
            vUSER_NODE.EXTEND;
            vUSER_NODE (6) :=
               xmldom.appendChild (vUSER_NODE (5),
                                   xmldom.makeNode (vELEMTENTO_ITEM));

            tam := LENGTH (p_Foto_Clob);

            WHILE i <= tam
            LOOP
               IF i = 1
               THEN
                  DBMS_LOB.read (p_Foto_Clob,
                                 l_amt,
                                 1000,
                                 buf);
                  buf := SUBSTR (p_Foto_Clob, i, 1000);
                  vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, buf);

                  vUSER_NODE (6) :=
                     xmldom.appendChild (vUSER_NODE (6),
                                         xmldom.makeNode (vTEXTO_ITEM));

                  dom_cast := xmldom.makeCharacterData (vUSER_NODE (6));
               ELSE
                  DBMS_LOB.read (p_Foto_Clob,
                                 l_amt,
                                 (offset * i),
                                 buf);
                  buf := SUBSTR (p_Foto_Clob, i, 1000);
                  xmldom.appendData (dom_cast, buf);
               END IF;

               i := i + 1000;
            END LOOP;
         END IF;

         /*Escrever para ficheiro*/
         dsa_srv_makexml_mpt.p_setAttrString (
            vELEMENTOS_ROOT,
            'xmlns',
            'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages');
         dsa_srv_makexml_mpt.p_setAttrString (
            vELEMENTOS_ROOT,
            'xmlns:vdta',
            'http://www.europa.eu/schengen/vis/xsd/v2/types/Application');
         dsa_srv_makexml_mpt.p_setAttrString (
            vELEMENTOS_ROOT,
            'xmlns:vdtc',
            'http://www.europa.eu/schengen/vis/xsd/v2/types/Common');
         dsa_srv_makexml_mpt.p_setAttrString (
            vELEMENTOS_ROOT,
            'xmlns:xsi',
            'http://www.w3.org/2001/XMLSchema-instance');
         dsa_srv_makexml_mpt.p_setAttrString (
            vELEMENTOS_ROOT,
            'xsi:schemaLocation',
               'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages'
            || CHR (13)
            || vCcaminhoXSD
            || 'NSAddBiometricData.xsd');
         /*xmldom.writeToFile(vDOCUMENTO,
                            vCcaminhoXML ||
                            'AttachApplicationDataAddBiometricData.xml');*/
         xmldom.writeToClob (vDOCUMENTO, v_clob);

         SELECT REPLACE (v_clob, 'Header xmlns=""', 'Header')
           INTO v_clob
           FROM DUAL;

         SELECT REPLACE (v_clob, 'Request xmlns=""', 'Request')
           INTO v_clob
           FROM DUAL;

         /*
          write_clob_tofile (
             vCcaminhoXML   => vCcaminhoXML,
             vfilename      => 'AttachApplicationDataAddBiometricData',
             v_clob         => v_clob);
         */
         INSERT INTO temp_env_vis (id_env_vis,
                                   ano_form,
                                   num_form,
                                   cod_comm_vistos,
                                   message_xml,
                                   cri_uti,
                                   cri_dat)
              VALUES (vHEADER_MESSAGEID,
                      pANO_FORM,
                      pNUM_FORM,
                      7,
                      v_clob,
                      USER,
                      SYSDATE);

         --commit;
         --Chama VIS

         msg_resp_vis :=
            funcoes.Envia_Vis (NULL,
                                   v_web_service,
                                   NULL,
                                   vHEADER_MESSAGEID);
         estado_tarefa := 0;

         /*Libertar os recursos*/
         xmldom.freeDocument (vDOCUMENTO);
      END IF;
   END;


   PROCEDURE PDecCreateAppDec (V_Num_App   IN VARCHAR2,
                               V_Dec_Aut   IN VARCHAR2,
                               v_Tipo      IN VARCHAR2,
                               v_Valor     IN VARCHAR2,
                               vRole       IN VARCHAR2,
                               TestId      IN VARCHAR2,
                               ambiente    IN VARCHAR2 DEFAULT 'P')
   IS
      CURSOR c1
      IS
         SELECT i.cod_pare_vis
           FROM indef_justifica_parecer i, formulario f
          WHERE     i.ano_form = f.ano_form
                AND i.num_form = f.num_form
                AND f.ref_form_2 = V_Num_App
                AND i.origem = V_Dec_Aut;

      CURSOR c2
      IS
         SELECT i.cod_pare_vis
           FROM indef_justifica_parecer i, formulario f
          WHERE     i.ano_form = f.ano_form
                AND i.num_form = f.num_form
                AND f.ref_form_2 = V_Num_App
                AND i.reapr = 'S';

      CURSOR c3
      IS
         SELECT i.cod_pare_vis
           FROM indef_justifica_parecer i, formulario f
          WHERE     i.ano_form = f.ano_form
                AND i.num_form = f.num_form
                AND f.ref_form_2 = V_Num_App;

      vDOCUMENTO              xmldom.DOMDocument;
      vELEMENTOS_ROOT         xmldom.DOMElement;
      vELEMTENTO_ITEM         xmldom.DOMElement;
      vTEXTO_ITEM             xmldom.DOMText;
      v_clob                  CLOB := 'xxx';
      pANO_FORM               formulario.ano_form%TYPE;
      pNUM_FORM               formulario.num_form%TYPE;
      v_cod_pais_sch_ref      formulario.cod_pais_sch_ref%TYPE;
      v_COD_PAIS              posto.cod_pais%TYPE;
      v_CID_POS               posto.cid_pos%TYPE;
      v_des_pos               posto.des_pos%TYPE;
      v_cod_pare_vis          indef_justifica_parecer.cod_pare_vis%TYPE;
      v_dat_emi               vinheta.dat_emi%TYPE;
      V_COD_PAIS_SCH_REPRES   formulario.cod_pais_sch_repres%TYPE;
      ValRepresentanteID      conversao_vis.valor_vis%TYPE;
      v_loa_id                posto.loa_id%TYPE;
   BEGIN
      SELECT f.ano_form,
             f.num_form,
             f.cod_pais_sch_ref,
             p.cod_pais,
             p.cid_pos,
             p.des_pos,
             f.COD_PAIS_SCH_REPRES,
             p.loa_id
        INTO pANO_FORM,
             pNUM_FORM,
             v_cod_pais_sch_ref,
             v_COD_PAIS,
             v_CID_POS,
             v_des_pos,
             V_COD_PAIS_SCH_REPRES,
             v_loa_id
        FROM formulario f, posto p
       WHERE ref_form_2 = V_Num_App AND f.cod_pos = p.cod_pos;

      Funcoes.obtem_header_det ('NSCreateApplicationDecision',
                                vContract_env,
                                vOperation_env);

      IF V_COD_PAIS_SCH_REPRES IS NOT NULL
      THEN
         ValRepresentanteID :=
            funcoes.obtem_valor_vis (V_COD_PAIS_SCH_REPRES, 'CT70_USER');
      END IF;

      IF v_tipo = 'RV'
      THEN
         PComum (vDOCUMENTO,
                 vELEMENTOS_ROOT,
                 'NSCreateApplicationDecision',
                 vHEADER_MESSAGEID,
                 vContract_env,
                 vOperation_env,
                 NULL,
                 '0010',
                 vRole,
                 TestId,
                 ValRepresentanteID);
      ELSIF v_tipo = 'RE'
      THEN
         PComum (vDOCUMENTO,
                 vELEMENTOS_ROOT,
                 'NSCreateApplicationDecision',
                 vHEADER_MESSAGEID,
                 vContract_env,
                 vOperation_env,
                 NULL,
                 '0009',
                 vRole,
                 TestId,
                 ValRepresentanteID);
      ELSIF v_tipo = 'W'
      THEN
         PComum (vDOCUMENTO,
                 vELEMENTOS_ROOT,
                 'NSCreateApplicationDecision',
                 vHEADER_MESSAGEID,
                 vContract_env,
                 vOperation_env,
                 NULL,
                 '0008',
                 vRole,
                 TestId,
                 ValRepresentanteID);
      ELSIF v_tipo = 'G'
      THEN
         PComum (vDOCUMENTO,
                 vELEMENTOS_ROOT,
                 'NSCreateApplicationDecision',
                 vHEADER_MESSAGEID,
                 vContract_env,
                 vOperation_env,
                 NULL,
                 '0011',
                 vRole,
                 TestId,
                 ValRepresentanteID);
      END IF;

      /*Request*/
      vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'Request');
      vUSER_NODE (3) :=
         xmldom.appendChild (vUSER_NODE (2),
                             xmldom.makeNode (vELEMTENTO_ITEM));
      /*ApplicationNumber*/
      vELEMTENTO_ITEM :=
         xmldom.createElement (vDOCUMENTO, 'ApplicationNumber');
      vUSER_NODE.EXTEND;
      vUSER_NODE (4) :=
         xmldom.appendChild (vUSER_NODE (3),
                             xmldom.makeNode (vELEMTENTO_ITEM));
      vTEXTO_ITEM :=
         xmldom.createTextNode (vDOCUMENTO, v_cod_pais_sch_ref || v_Num_App);
      vUSER_NODE (4) :=
         xmldom.appendChild (vUSER_NODE (4), xmldom.makeNode (vTEXTO_ITEM));
      /*ApplicationDecision*/
      vELEMTENTO_ITEM :=
         xmldom.createElement (vDOCUMENTO, 'ApplicationDecision');
      vUSER_NODE (4) :=
         xmldom.appendChild (vUSER_NODE (3),
                             xmldom.makeNode (vELEMTENTO_ITEM));

      --REFUSEVISA - RV
      --REFUSEEXAMINATION - RE
      --WITHDRAW - W
      --GRANT - G

      IF V_TIPO = 'RV'
      THEN
         /*vdta:RefuseVisa*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:RefuseVisa');
         vUSER_NODE (5) :=
            xmldom.appendChild (vUSER_NODE (4),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         /*vdta:Authority*/
         vUSER_NODE.EXTEND;
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:Authority');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vUSER_NODE.EXTEND;
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityUniqueID');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, v_loa_id);
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         vUSER_NODE.EXTEND;
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityLocation');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         vUSER_NODE.EXTEND;
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:Country');
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               funcoes.obtem_valor_vis (v_COD_PAIS, 'PAIS'));
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (8),
                                xmldom.makeNode (vTEXTO_ITEM));

         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:Place');
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, v_cid_pos);
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (8),
                                xmldom.makeNode (vTEXTO_ITEM));

         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityName');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, 'MNE');
         --v_des_pos || ' ' || v_cid_pos);
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityType');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, '0001.01');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:DecisionDate*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:DecisionDate');
         vUSER_NODE.EXTEND;
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         vTEXTO_ITEM :=
            xmldom.createTextNode (vDOCUMENTO, VISXML.Fdatetz (SYSDATE));

         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vTEXTO_ITEM));


         /*vdta:DecisionPlace*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:DecisionPlace');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         /*vdta:Country*/
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:Country');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               funcoes.obtem_valor_vis (v_COD_PAIS, 'PAIS'));
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:Place*/
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdta:Place');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         /*vdta:SourceValue*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:SourceValue');
         xmldom.setAttribute (vELEMTENTO_ITEM, 'PreTransliterated', 'true');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, v_CID_POS);

         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:RefusalGrounds*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:RefusalGrounds');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         IF V_Dec_Aut <> 'MNE'
         THEN
            IF V_Dec_Aut NOT IN ('REAPR', 'TODOS')
            THEN
               OPEN c1;

               LOOP
                  FETCH c1 INTO v_cod_pare_vis;

                  EXIT WHEN c1%NOTFOUND;

                  /*vdta:RefusalGround*/
                  vELEMTENTO_ITEM :=
                     xmldom.createElement (vDOCUMENTO, 'vdta:RefusalGround');
                  vUSER_NODE.EXTEND;
                  vUSER_NODE (7) :=
                     xmldom.appendChild (vUSER_NODE (6),
                                         xmldom.makeNode (vELEMTENTO_ITEM));
                  vTEXTO_ITEM :=
                     xmldom.createTextNode (vDOCUMENTO, v_cod_pare_vis);
                  vUSER_NODE (7) :=
                     xmldom.appendChild (vUSER_NODE (7),
                                         xmldom.makeNode (vTEXTO_ITEM));
               END LOOP;

               CLOSE c1;
            ELSIF V_Dec_Aut = 'REAPR'
            THEN
               OPEN c2;

               LOOP
                  FETCH c2 INTO v_cod_pare_vis;

                  EXIT WHEN c2%NOTFOUND;

                  /*vdta:RefusalGround*/
                  vELEMTENTO_ITEM :=
                     xmldom.createElement (vDOCUMENTO, 'vdta:RefusalGround');
                  vUSER_NODE.EXTEND;
                  vUSER_NODE (7) :=
                     xmldom.appendChild (vUSER_NODE (6),
                                         xmldom.makeNode (vELEMTENTO_ITEM));
                  vTEXTO_ITEM :=
                     xmldom.createTextNode (vDOCUMENTO, v_cod_pare_vis);
                  vUSER_NODE (7) :=
                     xmldom.appendChild (vUSER_NODE (7),
                                         xmldom.makeNode (vTEXTO_ITEM));
               END LOOP;

               CLOSE c2;
            ELSIF V_Dec_Aut = 'TODOS'
            THEN
               OPEN c3;

               LOOP
                  FETCH c3 INTO v_cod_pare_vis;

                  EXIT WHEN c3%NOTFOUND;

                  /*vdta:RefusalGround*/
                  vELEMTENTO_ITEM :=
                     xmldom.createElement (vDOCUMENTO, 'vdta:RefusalGround');
                  vUSER_NODE.EXTEND;
                  vUSER_NODE (7) :=
                     xmldom.appendChild (vUSER_NODE (6),
                                         xmldom.makeNode (vELEMTENTO_ITEM));
                  vTEXTO_ITEM :=
                     xmldom.createTextNode (vDOCUMENTO, v_cod_pare_vis);
                  vUSER_NODE (7) :=
                     xmldom.appendChild (vUSER_NODE (7),
                                         xmldom.makeNode (vTEXTO_ITEM));
               END LOOP;

               CLOSE c3;
            END IF;
         ELSE
            /*vdta:RefusalGround*/
            vELEMTENTO_ITEM :=
               xmldom.createElement (vDOCUMENTO, 'vdta:RefusalGround');
            vUSER_NODE.EXTEND;
            vUSER_NODE (7) :=
               xmldom.appendChild (vUSER_NODE (6),
                                   xmldom.makeNode (vELEMTENTO_ITEM));
            vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, v_valor);
            vUSER_NODE (7) :=
               xmldom.appendChild (vUSER_NODE (7),
                                   xmldom.makeNode (vTEXTO_ITEM));
         END IF;
      END IF;

      IF V_TIPO = 'RE'
      THEN
         /*vdta:DiscontinueExamination*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:DiscontinueExamination');
         vUSER_NODE (5) :=
            xmldom.appendChild (vUSER_NODE (4),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         /*vdta:Authority*/
         vUSER_NODE.EXTEND;
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:Authority');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         vUSER_NODE.EXTEND;
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityUniqueID');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, v_loa_id);
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         vUSER_NODE.EXTEND;
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityLocation');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         vUSER_NODE.EXTEND;
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:Country');
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               funcoes.obtem_valor_vis (v_COD_PAIS, 'PAIS'));
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (8),
                                xmldom.makeNode (vTEXTO_ITEM));

         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:Place');
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, v_cid_pos);
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (8),
                                xmldom.makeNode (vTEXTO_ITEM));

         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityName');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, 'MNE');
         --v_des_pos || ' ' || v_cid_pos);
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityType');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, '0001.01');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:DecisionDate*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:DecisionDate');
         vUSER_NODE.EXTEND;
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         vTEXTO_ITEM :=
            xmldom.createTextNode (vDOCUMENTO, VISXML.Fdatetz (SYSDATE));

         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:DecisionPlace*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:DecisionPlace');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         /*vdta:Country*/
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:Country');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               funcoes.obtem_valor_vis (v_COD_PAIS, 'PAIS'));
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:Place*/
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdta:Place');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         /*vdta:SourceValue*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:SourceValue');
         xmldom.setAttribute (vELEMTENTO_ITEM, 'PreTransliterated', 'true');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, v_CID_POS);

         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:CompetentToExamine*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:CompetentToExamine');
         vUSER_NODE.EXTEND;
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, v_valor);
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vTEXTO_ITEM));
      END IF;

      IF V_TIPO = 'W'
      THEN
         /*vdta:CloseApplication*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:CloseApplication');
         vUSER_NODE (5) :=
            xmldom.appendChild (vUSER_NODE (4),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         /*vdta:Authority*/
         vUSER_NODE.EXTEND;
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:Authority');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         vUSER_NODE.EXTEND;
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityUniqueID');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, v_loa_id);
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         vUSER_NODE.EXTEND;
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityLocation');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         vUSER_NODE.EXTEND;
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:Country');
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               funcoes.obtem_valor_vis (v_COD_PAIS, 'PAIS'));
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (8),
                                xmldom.makeNode (vTEXTO_ITEM));

         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:Place');
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, v_cid_pos);
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (8),
                                xmldom.makeNode (vTEXTO_ITEM));

         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityName');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, 'MNE');
         --v_des_pos || ' ' || v_cid_pos);
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityType');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, '0001.01');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:DecisionDate*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:DecisionDate');
         vUSER_NODE.EXTEND;
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (vDOCUMENTO, VISXML.Fdatetz (SYSDATE));
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:ClosingGrounds*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:ClosingGrounds');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         /*vdta:ClosingGround*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:ClosingGround');
         vUSER_NODE.EXTEND;
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, v_valor);
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));
      END IF;

      IF V_TIPO = 'G'
      THEN
         /*vdta:GrantVisa*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:GrantVisa');
         vUSER_NODE (5) :=
            xmldom.appendChild (vUSER_NODE (4),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         /*vdta:Authority*/
         vUSER_NODE.EXTEND;
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:Authority');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vUSER_NODE.EXTEND;
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityUniqueID');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, v_loa_id);
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         vUSER_NODE.EXTEND;
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityLocation');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         vUSER_NODE.EXTEND;
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:Country');
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               funcoes.obtem_valor_vis (v_COD_PAIS, 'PAIS'));
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (8),
                                xmldom.makeNode (vTEXTO_ITEM));

         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:Place');
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, v_cid_pos);
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (8),
                                xmldom.makeNode (vTEXTO_ITEM));

         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityName');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, 'MNE');
         --v_des_pos || ' ' || v_cid_pos);
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityType');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, '0001.01');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         SELECT dat_emi
           INTO v_dat_emi
           FROM vinheta
          WHERE     ano_form = pANO_FORM
                AND num_form = pNUM_FORM
                AND est_vin = 'E';

         /*vdta:DecisionDate*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:DecisionDate');
         vUSER_NODE.EXTEND;
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               VISXML.Fdatetz (TO_DATE (v_dat_emi, 'yyyy/mm/dd')));
         --Fdatetz(SYSDATE));

         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vTEXTO_ITEM));
         /*vdta:DecisionPlace*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:DecisionPlace');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         /*vdta:Country*/
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:Country');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               funcoes.obtem_valor_vis (v_COD_PAIS, 'PAIS'));
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:Place*/
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdta:Place');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         /*vdta:SourceValue*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:SourceValue');
         xmldom.setAttribute (vELEMTENTO_ITEM, 'PreTransliterated', 'true');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, v_CID_POS);

         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));
      END IF;

      /*Escrever para ficheiro*/

      dsa_srv_makexml_mpt.p_setAttrString (
         vELEMENTOS_ROOT,
         'xmlns',
         'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages');
      dsa_srv_makexml_mpt.p_setAttrString (
         vELEMENTOS_ROOT,
         'xmlns:vdta',
         'http://www.europa.eu/schengen/vis/xsd/v2/types/Application');
      dsa_srv_makexml_mpt.p_setAttrString (
         vELEMENTOS_ROOT,
         'xmlns:vdtc',
         'http://www.europa.eu/schengen/vis/xsd/v2/types/Common');
      dsa_srv_makexml_mpt.p_setAttrString (
         vELEMENTOS_ROOT,
         'xmlns:xsi',
         'http://www.w3.org/2001/XMLSchema-instance');
      dsa_srv_makexml_mpt.p_setAttrString (
         vELEMENTOS_ROOT,
         'xsi:schemaLocation',
            'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages'
         || CHR (13)
         || vCcaminhoXSD
         || 'NSCreateApplicationDecision.xsd');

      /*
      xmldom.writeToFile(vDOCUMENTO,
                         vCcaminhoXML ||
                         'DecisionCreateApplicationDecision.xml');
      */

      xmldom.writeToClob (vDOCUMENTO, v_clob);

      SELECT REPLACE (v_clob, 'Header xmlns=""', 'Header')
        INTO v_clob
        FROM DUAL;

      SELECT REPLACE (v_clob, 'Request xmlns=""', 'Request')
        INTO v_clob
        FROM DUAL;

      /*
        write_clob_tofile (
           vCcaminhoXML   => vCcaminhoXML,
           vfilename      => 'DecisionCreateApplicationDecision',
           v_clob         => v_clob);
      */
      INSERT INTO temp_env_vis (id_env_vis,
                                ano_form,
                                num_form,
                                cod_comm_vistos,
                                message_xml,
                                cri_uti,
                                cri_dat)
           VALUES (vHEADER_MESSAGEID,
                   pANO_FORM,
                   pNUM_FORM,
                   6,
                   v_clob,
                   USER,
                   SYSDATE);

      --commit;
      --Chama VIS

      msg_resp_vis :=
         funcoes.Envia_Vis (NULL,
                            v_web_service,
                            NULL,
                            vHEADER_MESSAGEID,
                            ambiente);

      /*Libertar os recursos*/
      xmldom.freeDocument (vDOCUMENTO);
   END;


   PROCEDURE PDecCreateVisCreatDec (
      pANO_FORM         IN FORMULARIO.ANO_FORM%TYPE,
      pNUM_FORM         IN FORMULARIO.NUM_FORM%TYPE,
      pSticker_ID       IN VARCHAR2,
      pSticker_ID_Old   IN VARCHAR2,
      v_tipo            IN VARCHAR2,
      vRole             IN VARCHAR2,
      TestId            IN VARCHAR2,
      ambiente          IN VARCHAR2 DEFAULT 'P',
      pSticker_FilledManually IN VARCHAR2 DEFAULT 'false')
   IS
      vDOCUMENTO              xmldom.DOMDocument;
      vELEMENTOS_ROOT         xmldom.DOMElement;
      vELEMTENTO_ITEM         xmldom.DOMElement;
      vTEXTO_ITEM             xmldom.DOMText;
      v_clob                  CLOB := 'xxx';
      vApplicationNumber      formulario.ref_form_2%TYPE;
      vCod_Pais_Nac_1         formulario.cod_pais_nac_1%TYPE;
      vCod_Pais_Sch_Ref       formulario.cod_pais_sch_ref%TYPE;
      v_cod_pais              posto.cod_pais%TYPE;
      v_cid_pos               posto.cid_pos%TYPE;
      v_des_pos               posto.des_pos%TYPE;
      V_COD_PAIS_SCH_REPRES   formulario.cod_pais_sch_repres%TYPE;
      ValRepresentanteID      conversao_vis.valor_vis%TYPE;
      v_loa_id                posto.loa_id%TYPE;

      TYPE TerCurTyp IS REF CURSOR;

      c_territory             TerCurTyp;
      max_array               NUMBER (5);
      paises_menos            VARCHAR (500);
      v_territory             pais.des_pais%TYPE;
      c_where                 VARCHAR (500);
      v_stmt_str              VARCHAR (500);

      CURSOR CVIN
      IS
         SELECT A.*
           FROM VINHETA A
          WHERE     A.NUM_VIN = pSticker_ID
                AND A.ANO_FORM = pANO_FORM
                AND A.NUM_FORM = pNUM_FORM;

      CURSOR CVIN_OLD
      IS
         SELECT A.*
           FROM VINHETA A
          WHERE A.NUM_VIN = pSticker_ID;

      CURSOR CVIN2
      IS
         SELECT A.*
           FROM VINHETA A
          WHERE     A.ANO_FORM = pANO_FORM
                AND A.NUM_FORM = pNUM_FORM
                AND A.EST_VIN = 'E';

      CRVIN                   VINHETA%ROWTYPE;
   BEGIN
      IF pSticker_ID IS NOT NULL
      THEN
         IF pSticker_ID_Old IS NOT NULL
         THEN
            OPEN CVIN_OLD;

            FETCH CVIN_OLD INTO CRVIN;

            IF CVIN_OLD%NOTFOUND
            THEN
               RAISE NO_DATA_FOUND;
            END IF;

            CLOSE CVIN_OLD;
         ELSE
            OPEN CVIN;

            FETCH CVIN INTO CRVIN;

            IF CVIN%NOTFOUND
            THEN
               RAISE NO_DATA_FOUND;
            END IF;

            CLOSE CVIN;
         END IF;
      ELSE
         OPEN CVIN2;

         FETCH CVIN2 INTO CRVIN;

         IF CVIN2%NOTFOUND
         THEN
            RAISE NO_DATA_FOUND;
         END IF;

         CLOSE CVIN2;
      END IF;

      SELECT f.ref_form_2,
             f.cod_pais_nac_1,
             f.cod_pais_sch_ref,
             p.cod_pais,
             p.cid_pos,
             p.des_pos,
             f.COD_PAIS_SCH_REPRES,
             p.loa_id
        INTO vApplicationNumber,
             vCod_Pais_Nac_1,
             vCod_Pais_Sch_Ref,
             v_cod_pais,
             v_cid_pos,
             v_des_pos,
             V_COD_PAIS_SCH_REPRES,
             v_loa_id
        FROM formulario f, posto p
       WHERE     f.ano_form = pANO_FORM
             AND f.num_form = pNUM_FORM
             AND f.cod_pos = p.cod_pos;

      Funcoes.obtem_header_det ('NSCreateVisaCreationDecision',
                                vContract_env,
                                vOperation_env);

      IF V_COD_PAIS_SCH_REPRES IS NOT NULL
      THEN
         ValRepresentanteID :=
            funcoes.obtem_valor_vis (V_COD_PAIS_SCH_REPRES, 'CT70_USER');
      END IF;

      IF v_tipo = 'I'
      THEN
         PComum (vDOCUMENTO,
                 vELEMENTOS_ROOT,
                 'NSCreateVisaCreationDecision',
                 vHEADER_MESSAGEID,
                 vContract_env,
                 vOperation_env,
                 NULL,
                 '0012',
                 vRole,
                 TestId,
                 ValRepresentanteID);
      ELSIF v_tipo = 'E'
      THEN
         PComum (vDOCUMENTO,
                 vELEMENTOS_ROOT,
                 'NSCreateVisaCreationDecision',
                 vHEADER_MESSAGEID,
                 vContract_env,
                 vOperation_env,
                 NULL,
                 '0013',
                 vRole,
                 TestId,
                 ValRepresentanteID);
      END IF;

      /*Request*/
      vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'Request');
      vUSER_NODE (3) :=
         xmldom.appendChild (vUSER_NODE (2),
                             xmldom.makeNode (vELEMTENTO_ITEM));
      /*ApplicationNumber*/
      vELEMTENTO_ITEM :=
         xmldom.createElement (vDOCUMENTO, 'ApplicationNumber');
      vUSER_NODE.EXTEND;
      vUSER_NODE (4) :=
         xmldom.appendChild (vUSER_NODE (3),
                             xmldom.makeNode (vELEMTENTO_ITEM));
      vTEXTO_ITEM :=
         xmldom.createTextNode (vDOCUMENTO,
                                vCod_Pais_Sch_Ref || vApplicationNumber);
      vUSER_NODE (4) :=
         xmldom.appendChild (vUSER_NODE (4), xmldom.makeNode (vTEXTO_ITEM));
      /*VisaCreationDecision*/
      vELEMTENTO_ITEM :=
         xmldom.createElement (vDOCUMENTO, 'VisaCreationDecision');
      vUSER_NODE (4) :=
         xmldom.appendChild (vUSER_NODE (3),
                             xmldom.makeNode (vELEMTENTO_ITEM));

      --ExtendVisaWithNewSticker - E
      --IssueVisa - I

      IF V_TIPO = 'I'
      THEN
         /*vdta:IssueVisa*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:IssueVisa');
         vUSER_NODE (5) :=
            xmldom.appendChild (vUSER_NODE (4),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         /*vdta:Authority*/
         vUSER_NODE.EXTEND;
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:Authority');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         vUSER_NODE.EXTEND;
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityUniqueID');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, v_loa_id);
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         vUSER_NODE.EXTEND;
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityLocation');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         vUSER_NODE.EXTEND;
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:Country');
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               funcoes.obtem_valor_vis (v_COD_PAIS, 'PAIS'));
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (8),
                                xmldom.makeNode (vTEXTO_ITEM));

         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:Place');
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, v_cid_pos);
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (8),
                                xmldom.makeNode (vTEXTO_ITEM));

         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityName');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, 'MNE');
         --v_des_pos || ' ' || v_cid_pos);
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityType');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, '0001.01');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:DecisionDate*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:DecisionDate');
         vUSER_NODE.EXTEND;
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               VISXML.Fdatetz (TO_DATE (CRVIN.DAT_EMI, 'YYYY/MM/DD')));
         --Fdatetz(SYSDATE));

         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:DecisionPlace*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:DecisionPlace');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         /*vdta:Country*/
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:Country');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               funcoes.obtem_valor_vis (v_COD_PAIS, 'PAIS'));
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:Place*/
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdta:Place');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         /*vdta:SourceValue*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:SourceValue');
         xmldom.setAttribute (vELEMTENTO_ITEM, 'PreTransliterated', 'true');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, v_CID_POS);

         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:VisaSticker*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:VisaSticker');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         /*vdta:VisaStickerNumber*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:VisaStickerNumber');
         vUSER_NODE.EXTEND;
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (vDOCUMENTO,
                                   REPLACE (CRVIN.NUM_VIN, 'P', 'PRT0'));

         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:VisaType*/
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdta:VisaType');
         vUSER_NODE.EXTEND;
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         /*vdta:VisaNewType*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:VisaNewType');
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               funcoes.obtem_valor_vis (CRVIN.tip_vis, 'VISA_TYPE_VIN'));
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (8),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:VisaStickerFilledInManually*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO,
                                  'vdta:VisaStickerFilledInManually');
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, pSticker_FilledManually);
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (8),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:PeriodOfValidity*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:PeriodOfValidity');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         /*vdtc:Begin*/
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:Begin');
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               VISXML.Fdatetz (TO_DATE (CRVIN.DAT_INI, 'YYYY/MM/DD')));
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (8),
                                xmldom.makeNode (vTEXTO_ITEM));
         /*vdtc:End*/
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:End');
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               VISXML.Fdatetz (TO_DATE (CRVIN.DAT_FIN, 'YYYY/MM/DD')));
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (8),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:DurationOfStay*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:DurationOfStay');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, CRVIN.dur_esta);
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:NumberOfEntries*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:NumberOfEntries');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               funcoes.obtem_valor_vis (CRVIN.num_ent, 'NUM_ENT'));
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:TerritorialValidity*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:TerritorialValidity');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         /*vdta:TravelTerritories*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:TravelTerritories');
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         IF CRVIN.vin_para LIKE '%(%'
         THEN                                     --Sinal - na emissão vinheta
            SELECT   (  LENGTH (CRVIN.vin_para)
                      - LENGTH (REPLACE (CRVIN.vin_para, ',')))
                   + 1
              INTO max_array
              FROM DUAL;

            SELECT SUBSTR (CRVIN.vin_para, 20, LENGTH (CRVIN.vin_para) - 20)
              INTO paises_menos
              FROM DUAL;

            IF max_array = 1
            THEN
               c_where := '(' || '''' || paises_menos || '''' || ')';
            ELSE
               FOR i IN 1 .. max_array
               LOOP
                  IF c_where IS NULL
                  THEN
                     c_where :=
                        '(' || '''' || SUBSTR (paises_menos, 1, 2) || '''';
                  ELSE
                     c_where :=
                           c_where
                        || ','
                        || ''''
                        || SUBSTR (paises_menos, 3 * i - 2, 2)
                        || '''';
                  END IF;

                  IF i = max_array
                  THEN
                     c_where := c_where || ')';
                  END IF;
               END LOOP;
            END IF;

            v_stmt_str :=
                  'select p.des_pais from pais_sch ps, pais p where ps.cod_pais_sch = p.cod_pais and sigla_pais not in '
               || c_where;

            OPEN c_territory FOR v_stmt_str;

            LOOP
               FETCH c_territory INTO v_territory;

               EXIT WHEN c_territory%NOTFOUND;
               vELEMTENTO_ITEM :=
                  xmldom.createElement (vDOCUMENTO, 'vdta:TravelTerritory');
               vUSER_NODE (9) :=
                  xmldom.appendChild (vUSER_NODE (8),
                                      xmldom.makeNode (vELEMTENTO_ITEM));
               vTEXTO_ITEM :=
                  xmldom.createTextNode (
                     vDOCUMENTO,
                     funcoes.obtem_valor_vis (UPPER (v_territory),
                                              'CT06_TERRITORY'));
               vUSER_NODE (9) :=
                  xmldom.appendChild (vUSER_NODE (9),
                                      xmldom.makeNode (vTEXTO_ITEM));
            END LOOP;

            CLOSE c_territory;
         ELSIF SUBSTR (CRVIN.vin_para, 3, 1) = ','
         THEN                                     --Sinal + na emissão vinheta
            SELECT   (  LENGTH (CRVIN.vin_para)
                      - LENGTH (REPLACE (CRVIN.vin_para, ',')))
                   + 1
              INTO max_array
              FROM DUAL;

            FOR i IN 1 .. max_array
            LOOP
               IF c_where IS NULL
               THEN
                  c_where :=
                     '(' || '''' || SUBSTR (CRVIN.vin_para, 1, 2) || '''';
               ELSE
                  c_where :=
                        c_where
                     || ','
                     || ''''
                     || SUBSTR (CRVIN.vin_para, 3 * i - 2, 2)
                     || '''';
               END IF;

               IF i = max_array
               THEN
                  c_where := c_where || ')';
               END IF;
            END LOOP;

            v_stmt_str :=
                  'select p.des_pais from pais_sch ps, pais p where ps.cod_pais_sch = p.cod_pais and sigla_pais in '
               || c_where;

            OPEN c_territory FOR v_stmt_str;

            LOOP
               FETCH c_territory INTO v_territory;

               EXIT WHEN c_territory%NOTFOUND;
               vELEMTENTO_ITEM :=
                  xmldom.createElement (vDOCUMENTO, 'vdta:TravelTerritory');
               vUSER_NODE (9) :=
                  xmldom.appendChild (vUSER_NODE (8),
                                      xmldom.makeNode (vELEMTENTO_ITEM));
               vTEXTO_ITEM :=
                  xmldom.createTextNode (
                     vDOCUMENTO,
                     funcoes.obtem_valor_vis (UPPER (v_territory),
                                              'CT06_TERRITORY'));
               vUSER_NODE (9) :=
                  xmldom.appendChild (vUSER_NODE (9),
                                      xmldom.makeNode (vTEXTO_ITEM));
            END LOOP;

            CLOSE c_territory;
         ELSE
            /*vdta:TravelTerritory*/
            vELEMTENTO_ITEM :=
               xmldom.createElement (vDOCUMENTO, 'vdta:TravelTerritory');
            vUSER_NODE (9) :=
               xmldom.appendChild (vUSER_NODE (8),
                                   xmldom.makeNode (vELEMTENTO_ITEM));
            vTEXTO_ITEM :=
               xmldom.createTextNode (
                  vDOCUMENTO,
                  funcoes.obtem_valor_vis (UPPER (CRVIN.vin_para),
                                           'CT06_TERRITORY'));
            vUSER_NODE (9) :=
               xmldom.appendChild (vUSER_NODE (9),
                                   xmldom.makeNode (vTEXTO_ITEM));
         END IF;

         /*vdta:ValidFor*/
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdta:ValidFor');
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, CRVIN.vin_para);
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (8),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:IssuanceOnSeparateSheet*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:IssuanceOnSeparateSheet');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, 'false');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vTEXTO_ITEM));
      ELSIF V_TIPO = 'E'
      THEN
         /*vdta:ExtendVisa*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:ExtendVisa');
         vUSER_NODE (5) :=
            xmldom.appendChild (vUSER_NODE (4),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         /*vdta:Authority*/
         vUSER_NODE.EXTEND;
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:Authority');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         vUSER_NODE.EXTEND;
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityUniqueID');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, v_loa_id);
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         vUSER_NODE.EXTEND;
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityLocation');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         vUSER_NODE.EXTEND;
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:Country');
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               funcoes.obtem_valor_vis (v_COD_PAIS, 'PAIS'));
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (8),
                                xmldom.makeNode (vTEXTO_ITEM));

         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:Place');
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, v_cid_pos);
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (8),
                                xmldom.makeNode (vTEXTO_ITEM));

         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityName');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, 'MNE');
         --v_des_pos || ' ' || v_cid_pos);
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdtc:AuthorityType');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, '0001.01');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:DecisionDate*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:DecisionDate');
         vUSER_NODE.EXTEND;
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, VISXML.Fdatetz (SYSDATE));

         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:DecisionPlace*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:DecisionPlace');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         /*vdta:Country*/
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:Country');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               funcoes.obtem_valor_vis (v_COD_PAIS, 'PAIS'));
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:Place*/
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdta:Place');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         /*vdta:SourceValue*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:SourceValue');
         xmldom.setAttribute (vELEMTENTO_ITEM, 'PreTransliterated', 'true');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, v_CID_POS);

         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:VisaSticker*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:VisaSticker');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         /*vdta:VisaStickerNumber*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:VisaStickerNumber');
         vUSER_NODE.EXTEND;
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (vDOCUMENTO,
                                   REPLACE (CRVIN.NUM_VIN, 'P', 'PRT0'));
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));
         /*vdta:VisaType*/
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdta:VisaType');
         vUSER_NODE.EXTEND;
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         /*vdta:VisaNewType*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:VisaNewType');
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               funcoes.obtem_valor_vis (CRVIN.tip_vis, 'VISA_TYPE_VIN'));
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (8),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:VisaStickerFilledInManually*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO,
                                  'vdta:VisaStickerFilledInManually');
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, pSticker_FilledManually);
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (8),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:PeriodOfValidity*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:PeriodOfValidity');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         /*vdtc:Begin*/
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:Begin');
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               VISXML.Fdatetz (TO_DATE (CRVIN.DAT_INI, 'YYYY/MM/DD')));
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (8),
                                xmldom.makeNode (vTEXTO_ITEM));
         /*vdtc:End*/
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdtc:End');
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               VISXML.Fdatetz (TO_DATE (CRVIN.DAT_FIN, 'YYYY/MM/DD')));
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (8),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:DurationOfStay*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:DurationOfStay');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, CRVIN.dur_esta);
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:NumberOfEntries*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:NumberOfEntries');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               funcoes.obtem_valor_vis (CRVIN.num_ent, 'NUM_ENT'));
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:TerritorialValidity*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:TerritorialValidity');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         /*vdta:TravelTerritories*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:TravelTerritories');
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         /*vdta:TravelTerritory*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:TravelTerritory');
         vUSER_NODE (9) :=
            xmldom.appendChild (vUSER_NODE (8),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (
               vDOCUMENTO,
               funcoes.obtem_valor_vis (UPPER (CRVIN.vin_para),
                                        'CT06_TERRITORY'));
         vUSER_NODE (9) :=
            xmldom.appendChild (vUSER_NODE (9),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:ValidFor*/
         vELEMTENTO_ITEM := xmldom.createElement (vDOCUMENTO, 'vdta:ValidFor');
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, CRVIN.vin_para);
         vUSER_NODE (8) :=
            xmldom.appendChild (vUSER_NODE (8),
                                xmldom.makeNode (vTEXTO_ITEM));
         /*vdta:IssuanceOnSeparateSheet*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:IssuanceOnSeparateSheet');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, 'false');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:ExtensionGrounds*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:ExtensionGrounds');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));

         /*vdta:ExtensionGround*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO, 'vdta:ExtensionGround');
         vUSER_NODE.EXTEND;
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM := xmldom.createTextNode (vDOCUMENTO, '0003.01');
         vUSER_NODE (7) :=
            xmldom.appendChild (vUSER_NODE (7),
                                xmldom.makeNode (vTEXTO_ITEM));

         /*vdta:PreviousVisaStickerNumber*/
         vELEMTENTO_ITEM :=
            xmldom.createElement (vDOCUMENTO,
                                  'vdta:PreviousVisaStickerNumber');
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (5),
                                xmldom.makeNode (vELEMTENTO_ITEM));
         vTEXTO_ITEM :=
            xmldom.createTextNode (vDOCUMENTO,
                                   REPLACE (pSticker_ID_Old, 'P', 'PRT0'));
         vUSER_NODE (6) :=
            xmldom.appendChild (vUSER_NODE (6),
                                xmldom.makeNode (vTEXTO_ITEM));
      END IF;

      /*Escrever para ficheiro*/

      dsa_srv_makexml_mpt.p_setAttrString (
         vELEMENTOS_ROOT,
         'xmlns',
         'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages');
      dsa_srv_makexml_mpt.p_setAttrString (
         vELEMENTOS_ROOT,
         'xmlns:vdta',
         'http://www.europa.eu/schengen/vis/xsd/v2/types/Application');
      dsa_srv_makexml_mpt.p_setAttrString (
         vELEMENTOS_ROOT,
         'xmlns:vdtc',
         'http://www.europa.eu/schengen/vis/xsd/v2/types/Common');
      dsa_srv_makexml_mpt.p_setAttrString (
         vELEMENTOS_ROOT,
         'xmlns:xsi',
         'http://www.w3.org/2001/XMLSchema-instance');
      dsa_srv_makexml_mpt.p_setAttrString (
         vELEMENTOS_ROOT,
         'xsi:schemaLocation',
            'http://www.europa.eu/schengen/vis/xsd/v2/nsmessages'
         || CHR (13)
         || vCcaminhoXSD
         || 'NSCreateVisaCreateDecision.xsd');

      /*xmldom.writeToFile(vDOCUMENTO,
                         vCcaminhoXML ||
                         'DecisionCreateVisaCreationDecision.xml');*/
      xmldom.writeToClob (vDOCUMENTO, v_clob);

      SELECT REPLACE (v_clob, 'Header xmlns=""', 'Header')
        INTO v_clob
        FROM DUAL;

      SELECT REPLACE (v_clob, 'Request xmlns=""', 'Request')
        INTO v_clob
        FROM DUAL;

      /*
      write_clob_tofile (
         vCcaminhoXML   => vCcaminhoXML,
         vfilename      => 'DecisionCreateVisaCreationDecision',
         v_clob         => v_clob);
      */
      INSERT INTO temp_env_vis (id_env_vis,
                                ano_form,
                                num_form,
                                cod_comm_vistos,
                                message_xml,
                                cri_uti,
                                cri_dat)
           VALUES (vHEADER_MESSAGEID,
                   pANO_FORM,
                   pNUM_FORM,
                   9,
                   v_clob,
                   USER,
                   SYSDATE);

      --commit;
      --Chama VIS
      msg_resp_vis :=
         funcoes.Envia_Vis (NULL,
                            v_web_service,
                            NULL,
                            vHEADER_MESSAGEID,
                            ambiente);

      /*Libertar os recursos*/
      xmldom.freeDocument (vDOCUMENTO);
   END;


    PROCEDURE P_EXE_PED_VIS IS
        MAX_TENTATIVAS  CONSTANT NUMBER(1) := 5;
        ESTADO_ENVIADO  CONSTANT NUMBER(1) := 0;
        ESTADO_OK       CONSTANT NUMBER(1) := 1;
        ESTADO_SEMRESP  CONSTANT NUMBER(1) := 2;
        ESTADO_NAOAPLI  CONSTANT NUMBER(1) := 3;

        v_ano_form FORMULARIO.ANO_FORM%TYPE;
        v_num_form FORMULARIO.NUM_FORM%TYPE;
        v_cod_pare FORMULARIO.COD_PARE%TYPE;

        v_num_vin VINHETA.NUM_VIN%TYPE;

        v_dados VARCHAR2(100);
        v_msg_ok NUMBER(1) := 0;

        v_MSG_RESP_VIS clob;

        v_conta pls_integer := 0;
        v_upd_parecer pls_integer := 0;
        v_sair pls_integer := 0;
        v_msg5_proc pls_integer := 0;

        v_Ret_Val NUMBER(2) := 0;

        v_obs PED_EMITIR_VISTOS.OBS%TYPE;

    BEGIN
        FOR i IN (SELECT * FROM PED_EMITIR_VISTOS WHERE (F_PROC IS NULL OR F_PROC = 'N'))
        LOOP
            v_upd_parecer := 0;
            v_sair := 0;
            v_msg5_proc := 0;

            dbms_output.put_line('A processar: '|| i.REF_FORM_2);

            BEGIN
                SELECT ANO_FORM, NUM_FORM, COD_PARE
                INTO v_ano_form, v_num_form, v_cod_pare
                FROM FORMULARIO
                WHERE REF_FORM_2 = i.REF_FORM_2;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    v_obs := 'Não existe o PRT';
                    dbms_output.put_line(v_obs);
                    UPDATE PED_EMITIR_VISTOS SET f_proc = 'E', obs = v_obs WHERE REF_FORM_2 = i.REF_FORM_2;
                    COMMIT;
            END;

            -------------------------------------
            -- MENSAGEM 1 - CREATE APPLICATION --
            -------------------------------------
            IF i.f_est_msg1 IS NULL THEN
                -- envia a msg
                RPV.VISXML3.PAPPLICATIONCREATEAPPLICATION ( v_ano_form, v_num_form, v_MSG_RESP_VIS, NULL, '0002', NULL, 'S', 'P' );

                -- MENSAGEM ENVIADA
                UPDATE PED_EMITIR_VISTOS SET f_est_msg1 = ESTADO_ENVIADO, num_tentativas = 0 WHERE REF_FORM_2 = i.REF_FORM_2;
                COMMIT;
                --CONTINUE; -- sai
                v_sair := 1;
            ELSE
                IF i.f_est_msg1 in (ESTADO_ENVIADO, ESTADO_SEMRESP) THEN
                    -- faz retrieve
                    v_msg_ok := 0;
                    --DBMS_LOB.CREATETEMPORARY(MSG_RESP_VIS, true);
                    RPV.VISXML.PRETRIEVALAPPEXAMINATION ( 'PRT'||i.ref_form_2, NULL, v_MSG_RESP_VIS, v_ano_form, v_num_form, '0002', NULL, 'P' );
                    --
                    v_dados := RPV.VISXML_CS.Extrai_Valor_XML(v_MSG_RESP_VIS, 'InfoCode', '', null, 1);
                    --
                    IF v_dados = 'nada' THEN
                        v_dados := RPV.VISXML_CS.Extrai_Valor_XML(v_MSG_RESP_VIS, 'DateOfBirth', 'ns3:', null, 1);
                        IF v_dados != 'nada' THEN
                            v_msg_ok := 1;
                        END IF;
                    END IF;
                    --DEPENDENDO DO RESULTADO
                    IF (v_msg_ok = 1) THEN
                        UPDATE PED_EMITIR_VISTOS SET f_est_msg1 = ESTADO_OK, num_tentativas = num_tentativas + 1 WHERE REF_FORM_2 = i.REF_FORM_2;
                        COMMIT;
                    ELSE
                        IF NVL(i.num_tentativas,0) + 1 = MAX_TENTATIVAS THEN
                            UPDATE PED_EMITIR_VISTOS SET f_proc = 'E', f_est_msg1 = ESTADO_SEMRESP, num_tentativas = NVL(num_tentativas,0) + 1 WHERE REF_FORM_2 = i.REF_FORM_2;
                            COMMIT;
                            --CONTINUE; -- sai
                            v_sair := 1;
                        ELSE
                            UPDATE PED_EMITIR_VISTOS SET f_est_msg1 = ESTADO_SEMRESP, num_tentativas = NVL(num_tentativas,0) + 1 WHERE REF_FORM_2 = i.REF_FORM_2;
                            COMMIT;
                            --CONTINUE; -- sai
                            v_sair := 1;
                        END IF;
                    END IF;
                END IF;
            END IF;

            IF v_sair = 0 THEN
                ------------------------
                -- MENSAGEM 2 - PHOTO --
                ------------------------
                IF i.f_est_msg2 IS NULL THEN
                    -- envia a msg
                    RPV.VISXML3.PATTAPPDATADDBIOM ( v_ano_form, v_num_form, v_RET_VAL, 'PHOTO', v_MSG_RESP_VIS, '0002', NULL );
                    -- MENSAGEM ENVIADA
                    UPDATE PED_EMITIR_VISTOS SET f_est_msg2 = ESTADO_ENVIADO, num_tentativas = 0 WHERE REF_FORM_2 = i.REF_FORM_2;
                    COMMIT;
                    --CONTINUE; -- sai
                    v_sair := 1;
                ELSE
                    IF i.f_est_msg2 in (ESTADO_ENVIADO, 2) THEN
                        -- faz retrieve
                        v_msg_ok := 0;
                        --DBMS_LOB.CREATETEMPORARY(MSG_RESP_VIS, true);
                        RPV.VISXML.PRETRIEVALAPPEXAMINATION ( 'PRT'||i.ref_form_2, NULL, v_MSG_RESP_VIS, v_ano_form, v_num_form, '0002', NULL, 'P' );
                        --
                        v_dados := RPV.VISXML_CS.Extrai_Valor_XML(v_MSG_RESP_VIS, 'AttachmentID', 'ns3:', null, 1);
                        IF v_dados != 'nada' THEN
                            v_msg_ok := 1;
                        END IF;
                        --
                        --DEPENDENDO DO RESULTADO
                        IF (v_msg_ok = 1) THEN
                            UPDATE PED_EMITIR_VISTOS SET f_est_msg2 = ESTADO_OK, num_tentativas = num_tentativas + 1 WHERE REF_FORM_2 = i.REF_FORM_2;
                            COMMIT;
                        ELSE
                            IF NVL(i.num_tentativas,0) + 1 = MAX_TENTATIVAS THEN
                                UPDATE PED_EMITIR_VISTOS SET f_proc = 'E', f_est_msg2 = ESTADO_SEMRESP, num_tentativas = NVL(num_tentativas,0) + 1 WHERE REF_FORM_2 = i.REF_FORM_2;
                                COMMIT;
                                --CONTINUE; -- sai
                                v_sair := 1;
                            ELSE
                                UPDATE PED_EMITIR_VISTOS SET f_est_msg2 = ESTADO_SEMRESP, num_tentativas = NVL(num_tentativas,0) + 1 WHERE REF_FORM_2 = i.REF_FORM_2;
                                COMMIT;
                                --CONTINUE; -- sai
                                v_sair := 1;
                            END IF;
                        END IF;
                    END IF;
                END IF;

                IF v_sair = 0 THEN
                    --------------------------
                    -- MENSAGEM 3 - FINGER --
                    -------------------------
                    IF i.f_est_msg3 IS NULL THEN

                        -- verifica se há dados biometricos para enviar
                        SELECT count(*) into v_conta FROM BIOMETRIA_INFO WHERE ANO_FORM = v_ano_form AND NUM_FORM = v_num_form AND bio IS NOT NULL;

                        IF v_conta = 0 THEN
                             UPDATE PED_EMITIR_VISTOS SET f_est_msg3 = ESTADO_NAOAPLI, num_tentativas = 0 WHERE REF_FORM_2 = i.REF_FORM_2;
                             COMMIT;
                             v_upd_parecer := 1;
                        ELSE
                            -- envia a msg
                            RPV.VISXML3.PATTAPPDATADDBIOM ( v_ano_form, v_num_form, v_RET_VAL, 'FINGER', v_MSG_RESP_VIS, '0002', NULL );

                            -- MENSAGEM ENVIADA
                            UPDATE PED_EMITIR_VISTOS SET f_est_msg3 = ESTADO_ENVIADO, num_tentativas = 0 WHERE REF_FORM_2 = i.REF_FORM_2;
                            COMMIT;
                            --CONTINUE; -- sai
                            v_sair := 1;
                        END IF;
                    ELSE
                        IF i.f_est_msg3 in (ESTADO_ENVIADO, ESTADO_SEMRESP) THEN
                            -- faz retrieve
                            v_msg_ok := 0;
                            --DBMS_LOB.CREATETEMPORARY(MSG_RESP_VIS, true);
                            RPV.VISXML.PRETRIEVALAPPEXAMINATION ( 'PRT'||i.ref_form_2, NULL, v_MSG_RESP_VIS, v_ano_form, v_num_form, '0002', NULL, 'P' );
                            --
                            v_dados := RPV.VISXML_CS.Extrai_Valor_XML(v_MSG_RESP_VIS, 'AttachmentID', 'ns3:', null, 2);
                            IF v_dados != 'nada' THEN
                                v_msg_ok := 1;
                            END IF;
                            --
                            --DEPENDENDO DO RESULTADO
                            IF (v_msg_ok = 1) THEN
                                UPDATE PED_EMITIR_VISTOS SET f_est_msg3 = ESTADO_OK, num_tentativas = num_tentativas + 1 WHERE REF_FORM_2 = i.REF_FORM_2;
                                COMMIT;
                                v_upd_parecer := 1;
                            ELSE
                                IF NVL(i.num_tentativas,0) + 1 = MAX_TENTATIVAS THEN
                                    UPDATE PED_EMITIR_VISTOS SET f_proc = 'E', f_est_msg3 = ESTADO_SEMRESP, num_tentativas = NVL(num_tentativas,0) + 1 WHERE REF_FORM_2 = i.REF_FORM_2;
                                    COMMIT;
                                    --CONTINUE; -- sai
                                    v_sair := 1;
                                ELSE
                                    UPDATE PED_EMITIR_VISTOS SET f_est_msg3 = ESTADO_SEMRESP, num_tentativas = NVL(num_tentativas,0) + 1 WHERE REF_FORM_2 = i.REF_FORM_2;
                                    COMMIT;
                                    --CONTINUE; -- sai
                                    v_sair := 1;
                                END IF;
                            END IF;
                        END IF;
                    END IF;
                    --
                    -----------------------
                    -- UPDATE DO PARECER --
                    -----------------------
                    IF v_upd_parecer = 1 AND v_cod_pare IS NULL THEN
                        -- update formulario
                        update formulario set cod_pare = '1' where ref_form_2 = i.ref_form_2 and cod_pare IS NULL;
                        IF SQL%ROWCOUNT = 1 THEN
                            -- evolui estado
                            v_Ret_Val := RPV.TAREFA_MASTER.EVOLUI_ESTADO ( v_ANO_FORM, v_NUM_FORM, 'A' );
                        END IF;
                        COMMIT;

                    END IF;
                    --

                    IF v_sair = 0 THEN

                        -- VALIDA SE EXISTE VINHETA --
                        BEGIN
                            SELECT num_vin into v_num_vin FROM VINHETA WHERE ANO_FORM = v_ano_form AND NUM_FORM = v_num_form AND EST_VIN = 'E';
                        EXCEPTION
                            WHEN NO_DATA_FOUND THEN
                                v_obs := 'Não tem vinheta, não pode prosseguir com a concessão/emissão.';
                                dbms_output.put_line(v_obs);
                                IF i.obs IS NULL OR i.obs != v_obs THEN
                                    UPDATE PED_EMITIR_VISTOS SET obs = v_obs WHERE REF_FORM_2 = i.REF_FORM_2;
                                    COMMIT;
                                    --CONTINUE;
                                END IF;
                                v_sair := 1;
                            WHEN TOO_MANY_ROWS THEN
                                v_obs := 'Tem mais de uma vinheta válida, não pode prosseguir com a concessão/emissão.';
                                dbms_output.put_line(v_obs);
                                IF i.obs IS NULL OR i.obs != v_obs THEN
                                    UPDATE PED_EMITIR_VISTOS SET obs = v_obs WHERE REF_FORM_2 = i.REF_FORM_2;
                                    COMMIT;
                                    --CONTINUE;
                                END IF;
                                v_sair := 1;
                        END;

                        IF v_sair = 0 THEN
                            --------------------------
                            -- MENSAGEM 4 - DECISAO --
                            --------------------------
                            IF i.f_est_msg4 IS NULL THEN
                                -- envia a msg
                                RPV.VISXML3.PDECCREATEAPPDEC ( i.ref_form_2, NULL, 'G', NULL, '0002', NULL, 'P' );
                                -- MENSAGEM ENVIADA
                                UPDATE PED_EMITIR_VISTOS SET f_est_msg4 = ESTADO_ENVIADO, num_tentativas = 0, obs = NULL WHERE REF_FORM_2 = i.REF_FORM_2;
                                COMMIT;
                                --CONTINUE; -- sai
                                v_sair := 1;

                            ELSE
                                IF i.f_est_msg4 in (ESTADO_ENVIADO, ESTADO_SEMRESP) THEN
                                    -- faz retrieve
                                    v_msg_ok := 0;
                                    --
                                    RPV.VISXML.PRETRIEVALAPPEXAMINATION ( 'PRT'||i.ref_form_2, NULL, v_MSG_RESP_VIS, v_ano_form, v_num_form, '0002', NULL, 'P' );
                                    --
                                    v_dados := RPV.VISXML_CS.Extrai_Valor_XML(v_MSG_RESP_VIS, 'DecisionID', 'ns3:', null, 1);
                                    IF v_dados != 'nada' THEN
                                        v_msg_ok := 1;
                                    END IF;
                                    --
                                    --DEPENDENDO DO RESULTADO
                                    IF (v_msg_ok = 1) THEN
                                        UPDATE PED_EMITIR_VISTOS SET f_est_msg4 = ESTADO_OK, num_tentativas = num_tentativas + 1 WHERE REF_FORM_2 = i.REF_FORM_2;
                                        COMMIT;
                                    ELSE
                                        IF NVL(i.num_tentativas,0) + 1 = MAX_TENTATIVAS THEN
                                            UPDATE PED_EMITIR_VISTOS SET f_proc = 'E', f_est_msg4 = ESTADO_SEMRESP, num_tentativas = NVL(num_tentativas,0) + 1 WHERE REF_FORM_2 = i.REF_FORM_2;
                                            COMMIT;
                                            --CONTINUE; -- sai
                                            v_sair := 1;
                                        ELSE
                                            UPDATE PED_EMITIR_VISTOS SET f_est_msg4 = ESTADO_SEMRESP, num_tentativas = NVL(num_tentativas,0) + 1 WHERE REF_FORM_2 = i.REF_FORM_2;
                                            COMMIT;
                                            --CONTINUE; -- sai
                                            v_sair := 1;
                                        END IF;
                                    END IF;
                                END IF;
                            END IF;

                            IF v_sair = 0 THEN
                                -----------------------------
                                -- MENSAGEM 5 - CREATE VIS --
                                -----------------------------
                                IF i.f_est_msg5 IS NULL THEN
                                    -- envia a msg
                                    --
                                    RPV.VISXML3.PDECCREATEVISCREATDEC ( v_ANO_FORM, v_NUM_FORM, v_num_vin, NULL, 'I', '0002', NULL, 'P', 'false' );
                                    --
                                    -- MENSAGEM ENVIADA
                                    UPDATE PED_EMITIR_VISTOS SET f_est_msg5 = ESTADO_ENVIADO, num_tentativas = 0 WHERE REF_FORM_2 = i.REF_FORM_2;
                                    COMMIT;
                                    --CONTINUE; -- sai
                                    v_sair := 1;

                                ELSE
                                    IF i.f_est_msg5 in (ESTADO_ENVIADO, ESTADO_SEMRESP) THEN
                                        -- faz retrieve
                                        v_msg_ok := 0;
                                        --
                                        RPV.VISXML.PRETRIEVALAPPEXAMINATION ( 'PRT'||i.ref_form_2, NULL, v_MSG_RESP_VIS, v_ano_form, v_num_form, '0002', NULL, 'P' );
                                        --
                                        v_dados := RPV.VISXML_CS.Extrai_Valor_XML(v_MSG_RESP_VIS, 'VisaStickerNumber', 'ns3:', null, 1);
                                        IF v_dados != 'nada' THEN
                                            v_msg_ok := 1;
                                        END IF;
                                        --
                                        --DEPENDENDO DO RESULTADO
                                        IF (v_msg_ok = 1) THEN
                                            UPDATE PED_EMITIR_VISTOS SET f_est_msg5 = ESTADO_OK, num_tentativas = num_tentativas + 1 WHERE REF_FORM_2 = i.REF_FORM_2;
                                            COMMIT;
                                            v_msg5_proc := 1;
                                        ELSE
                                            IF NVL(i.num_tentativas,0) + 1 = MAX_TENTATIVAS THEN
                                                UPDATE PED_EMITIR_VISTOS SET f_proc = 'E', f_est_msg5 = ESTADO_SEMRESP, num_tentativas = NVL(num_tentativas,0) + 1 WHERE REF_FORM_2 = i.REF_FORM_2;
                                                COMMIT;
                                                --CONTINUE; -- sai
                                                v_sair := 1;
                                            ELSE
                                                UPDATE PED_EMITIR_VISTOS SET f_est_msg5 = ESTADO_SEMRESP, num_tentativas = NVL(num_tentativas,0) + 1 WHERE REF_FORM_2 = i.REF_FORM_2;
                                                COMMIT;
                                                --CONTINUE; -- sai
                                                v_sair := 1;
                                            END IF;
                                        END IF;
                                    END IF;
                                END IF;

                                --
                                IF v_msg5_proc = 1 THEN
                                    UPDATE PED_EMITIR_VISTOS SET f_proc = 'S' WHERE REF_FORM_2 = i.REF_FORM_2;
                                    COMMIT;
                                END IF;
                            END IF;

                        END IF;
                    END IF;
                END IF;
            END IF;
        END LOOP;
    END;

END;
/

prompt
prompt Creating package body WEBSERVICE_VIS
prompt ====================================
prompt
create or replace package body rpv.WEBSERVICE_VIS is
procedure trata_msg_vis_assyn(var_msgid varchar2, var_corrid varchar2, var_mess varchar2) is
videntif            temp_rec_vis_ws.identif%type;
begin
      SELECT SEQ_REC_VIS.NEXTVAL INTO videntif FROM DUAL;
      insert into temp_rec_vis_ws(identif,msgid,corrid,msg,tratada)
      values(videntif,var_msgid,var_corrid,var_mess,'N');
      commit;
end;
procedure trata_msg_vis_assyn_f(var_msgid varchar2, var_corrid varchar2, var_mess varchar2) is

v_ano_form          temp_env_vis.ano_form%type;
v_num_form          temp_env_vis.num_form%type;
v_cod_comm_vistos   temp_env_vis.cod_comm_vistos%type;
v_num_ordem         temp_rec_vis.num_ordem%type;
retorno             varchar2(500);
v_de_decision_id    temp_rec_vis.de_decision_id%type:=null;
v_sqlcode	          number;
v_sqlerrm	          varchar2(240);
x                   number;
v_ref_form_2        formulario.ref_form_2%type;
encontrou           boolean;
v_descricao         tipo_comm_vistos.descricao%type;
codigo_erro         clob;
begin
      begin
      select ano_form, num_form, cod_comm_vistos
      into v_ano_form, v_num_form, v_cod_comm_vistos
      from temp_env_vis
      where id_env_vis = to_number(var_corrid);
      exception when no_data_found then
                v_ano_form := null;
      end;
     if v_ano_form is not null then
         if visxml_cs.extrai_valor_xml(var_mess,'ReturnCode','',null,1) = funcoes.obtem_valor_vis('INSUCESSO','ST13_RETURN_CODE') then
            select f.ref_form_2 into v_ref_form_2
            from formulario f, posto p
            where f.num_form = v_num_form and f.ano_form = v_ano_form
            and f.cod_pos = p.cod_pos;
            select descricao into v_descricao
            from tipo_comm_vistos
            where cod_comm_vistos = v_cod_comm_vistos;
            if v_cod_comm_vistos = 16  then
               codigo_erro := visxml_cs.extrai_valor_xml(var_mess,'ErrorCode',null,null,1);
               if codigo_erro = '1413' then
                  encontrou := pk_mail.fu_send_mail('pmarques99@gmail.com','ALERTA DO VIS','O formulário ' || v_ref_form_2 || ' recebeu um ALERTA do VIS para a fraca qualidade das impressões digitais!','noreplyvistos@dgaccp.pt');
               else
                  encontrou := pk_mail.fu_send_mail('pmarques99@gmail.com',v_ref_form_2 || ' - Erro no VIS','O formulário ' || v_ref_form_2 || ' recebeu um erro no VIS para a mensagem ' || var_corrid || ' (' || v_descricao || ')','noreplyvistos@dgaccp.pt');
               end if;
            elsif v_cod_comm_vistos = 22 then
               codigo_erro := visxml_cs.extrai_valor_xml(var_mess,'ErrorCode',null,null,1);
               if codigo_erro = '9000' then
                  insert into corrige_vis(codigo, ano_form, num_form, cri_dat, tratada, id_rec_vis, cod_comm_vistos)
                  values(seq_bug_vis.nextval,v_ano_form, v_num_form, sysdate, 'N',to_number(var_corrid),v_cod_comm_vistos);
               end if;
               encontrou := pk_mail.fu_send_mail('pmarques99@gmail.com',v_ref_form_2 || ' - Erro no VIS','O formulário ' || v_ref_form_2 || ' recebeu um erro no VIS para a mensagem ' || var_corrid || ' (' || v_descricao || ')','noreplyvistos@dgaccp.pt');
            elsif v_cod_comm_vistos = 7 then
               codigo_erro := visxml_cs.extrai_valor_xml(var_mess,'ErrorCode',null,null,1);
               if codigo_erro in ('9000','9008') then
                  insert into corrige_vis(codigo, ano_form, num_form, cri_dat, tratada, id_rec_vis,cod_comm_vistos)
                  values(seq_bug_vis.nextval,v_ano_form, v_num_form, sysdate, 'N',to_number(var_corrid),v_cod_comm_vistos);
               end if;
               encontrou := pk_mail.fu_send_mail('pmarques99@gmail.com',v_ref_form_2 || ' - Erro no VIS','O formulário ' || v_ref_form_2 || ' recebeu um erro no VIS para a mensagem ' || var_corrid || ' (' || v_descricao || ')','noreplyvistos@dgaccp.pt');
            elsif v_cod_comm_vistos = 6 then
               codigo_erro := visxml_cs.extrai_valor_xml(var_mess,'ErrorCode',null,null,1);
               if codigo_erro = '0008' then
                  insert into corrige_vis(codigo, ano_form, num_form, cri_dat, tratada, id_rec_vis,cod_comm_vistos)
                  values(seq_bug_vis.nextval,v_ano_form, v_num_form, sysdate, 'N',to_number(var_corrid),v_cod_comm_vistos);
               end if;
               encontrou := pk_mail.fu_send_mail('pmarques99@gmail.com',v_ref_form_2 || ' - Erro no VIS','O formulário ' || v_ref_form_2 || ' recebeu um erro no VIS para a mensagem ' || var_corrid || ' (' || v_descricao || ')','noreplyvistos@dgaccp.pt');
            else
               encontrou := pk_mail.fu_send_mail('pmarques99@gmail.com',v_ref_form_2 || ' - Erro no VIS','O formulário ' || v_ref_form_2 || ' recebeu um erro no VIS para a mensagem ' || var_corrid || ' (' || v_descricao || ')','noreplyvistos@dgaccp.pt');
            end if;
         end if;
         select seq_vis_numordem.nextval into v_num_ordem from dual;
         if v_cod_comm_vistos = 7 then
            if visxml_cs.extrai_valor_xml(var_mess,'ReturnCode','',null,1) = funcoes.obtem_valor_vis('SUCESSO','ST13_RETURN_CODE') then
                 v_de_decision_id := visxml_cs.extrai_valor_xml(var_mess,'AttachmentID','ns2:',null,1);
            end if;
         end if;

         if v_cod_comm_vistos = 22 then
            if visxml_cs.extrai_valor_xml(var_mess,'ReturnCode','',null,1) = funcoes.obtem_valor_vis('SUCESSO','ST13_RETURN_CODE') then
                 v_de_decision_id := visxml_cs.extrai_valor_xml(var_mess,'NewAttachmentID','ns2:',null,1);
            end if;
         end if;
         --Regista a resposta na tabela respectiva
         begin
         insert into temp_rec_vis(id_rec_vis,num_ordem,ano_form,num_form,cod_comm_vistos,message_xml,tratada,cri_uti,cri_dat,de_decision_id)
         values(to_number(var_corrid),v_num_ordem,v_ano_form,v_num_form,v_cod_comm_vistos,var_mess,'N',user,sysdate,v_de_decision_id);
         exception when others then
                   v_sqlcode := sqlcode;
	                 v_sqlerrm := sqlerrm;
                   insert into horta (conteudo,xmlfield) values('ERRO WEBSERVICE - ' || to_char(v_sqlcode) || '---' || v_sqlerrm,var_mess);
                   commit;
         end;
         if v_cod_comm_vistos = 4 then
             x := tarefa_master.evolui_estado(v_ano_form, v_num_form);
         else
             commit;
             x := tarefa_master.evolui_estado(v_ano_form, v_num_form);
             commit;
         end if;
      elsif v_ano_form is null and v_cod_comm_vistos is not null then

         select seq_vis_numordem.nextval into v_num_ordem from dual;
         begin
         insert into temp_rec_vis(id_rec_vis,num_ordem,ano_form,num_form,cod_comm_vistos,message_xml,tratada,cri_uti,cri_dat,de_decision_id)
         values(to_number(var_corrid),v_num_ordem,v_ano_form,v_num_form,v_cod_comm_vistos,var_mess,'N',user,sysdate,v_de_decision_id);
         exception when others then
                   v_sqlcode := sqlcode;
	                 v_sqlerrm := sqlerrm;
                   insert into horta (conteudo,xmlfield) values('ERRO WEBSERVICE - ' || to_char(v_sqlcode) || '---' || v_sqlerrm,var_mess);
                   commit;
         end;
         commit;
      -- para as notificações em que não temos dados no temp_env_vis
      elsif v_ano_form is null and v_cod_comm_vistos is null then

         select seq_vis_numordem.nextval into v_num_ordem from dual;
         encontrou := pk_mail.fu_send_mail('pmarques99@gmail.com','Notificacao VIS','Notificacao do VIS para a mensagem ' || var_corrid ,'noreplyvistos@dgaccp.pt');
         begin
         insert into temp_rec_vis(id_rec_vis,num_ordem,ano_form,num_form,cod_comm_vistos,message_xml,tratada,cri_uti,cri_dat,de_decision_id)
         values(to_number(var_corrid),v_num_ordem,v_ano_form,v_num_form,'46',var_mess,'N',user,sysdate,v_de_decision_id);
         exception when others then
                   v_sqlcode := sqlcode;
	                 v_sqlerrm := sqlerrm;
                   insert into horta (conteudo,xmlfield) values('ERRO WEBSERVICE - ' || to_char(v_sqlcode) || '---' || v_sqlerrm,var_mess);
                   commit;
         end;
         commit;
      end if;
end;
end WEBSERVICE_VIS;
/

prompt
prompt Creating package body WEBUTIL_DB
prompt ================================
prompt
CREATE OR REPLACE PACKAGE BODY RPV.WEBUTIL_DB AS
  m_binaryData   BLOB;
  m_blobTable    VARCHAR2(60);
  m_blobColumn   VARCHAR2(60);
  m_blobWhere    VARCHAR2(1024);
  m_mode         CHAR(1);
  m_lastError    PLS_INTEGER := 0;
  m_sourceLength PLS_INTEGER := 0;
  m_bytesRead    PLS_INTEGER := 0;
  MAX_READ_BYTES PLS_INTEGER := 4096;

  -- internal Program Units
  PROCEDURE Reset;

  PROCEDURE Reset is
  BEGIN
    m_blobTable     := null;
    m_blobColumn    := null;
    m_blobWhere     := null;
    m_mode          := null;
    m_lastError     := 0;
    m_sourceLength  := 0;
    m_bytesRead     := 0;
  END Reset;


  FUNCTION  OpenBlob(blobTable in VARCHAR2, blobColumn in VARCHAR2, blobWhere in VARCHAR2, openMode in VARCHAR2, chunkSize PLS_INTEGER default null) return BOOLEAN is
    result BOOLEAN := false;
    stmtFetch   VARCHAR2(2000);
    hit    PLS_INTEGER;
  BEGIN
    -- New transaction clean up
    reset;

    m_blobTable  := blobTable;
    m_blobColumn := blobColumn;
    m_blobWhere  := blobWhere;
    m_mode       := upper(openMode);

    if chunkSize is not null then
      if chunkSize > 16384 then
        MAX_READ_BYTES := 16384;
      else
        MAX_READ_BYTES := chunkSize;
      end if;
    end if;

    -- check the target row exists
    stmtFetch := 'select count(*) from '||m_blobTable||' where '||m_blobWhere;
    EXECUTE IMMEDIATE stmtFetch into hit;

    if hit = 1 then
      if m_mode = 'W' then
        DBMS_LOB.CREATETEMPORARY(m_binaryData,false);
        DBMS_LOB.OPEN(m_binaryData,DBMS_LOB.LOB_READWRITE);
        m_sourceLength := 0;
        result := true;
      elsif m_mode = 'R' then
        stmtFetch := 'select '||m_blobColumn||' from '||m_blobTable||' where '||m_blobWhere;
        EXECUTE IMMEDIATE stmtFetch into m_binaryData;
        if m_binaryData is not null then
          m_sourceLength := dbms_lob.getlength(m_binaryData);
          if m_sourceLength > 0 then
            result := true;
          else
            m_lastError := 110;
          end if;
        else
          m_lastError := 111;
        end if;
      else
          m_lastError := 112;
      end if; -- mode
    else
      -- too many rows
      m_lastError := 113;
    end if; -- Hit
    return result;
  END OpenBlob;

  FUNCTION  CloseBlob(checksum in PLS_INTEGER) return BOOLEAN is
    sourceBlob  BLOB;
    stmtFetch   VARCHAR2(2000);
    stmtInit    VARCHAR2(2000);
    result      BOOLEAN := false;
  BEGIN
    if m_mode = 'W' then
      m_sourceLength := DBMS_LOB.GETLENGTH(m_binaryData);
    end if;

    -- checksum
    if checksum = m_sourceLength then
      if m_mode = 'W' then
        -- get the locator to the table blob
        stmtFetch := 'select '||m_blobColumn||' from '||m_blobTable||' where '||m_blobWhere||' for update';
        EXECUTE IMMEDIATE stmtFetch into sourceBlob;

        -- Check the blob has been initialised
        -- and if it's not empty clear it out
        if sourceBlob is null then
          stmtInit := 'update '||m_blobTable||' set '||m_blobColumn||'=EMPTY_BLOB()  where '||m_blobWhere;
          EXECUTE IMMEDIATE stmtInit;
          EXECUTE IMMEDIATE stmtFetch into sourceBlob;
        elsif dbms_lob.getlength(sourceBlob) > 0 then
          dbms_lob.TRIM(sourceBlob,0);
        end if;
        -- now replace the table data with the temp BLOB
        DBMS_LOB.APPEND(sourceBlob,m_binaryData);
        DBMS_LOB.CLOSE(m_binaryData);
        result := true;
      else
       -- todo
        null;
      end if; --mode
    else
      m_lastError := 115;
    end if; --checksum
    return result;
  END CloseBlob;

  PROCEDURE WriteData(data in VARCHAR2) is
    rawData raw(16384);
  BEGIN
    rawData := utl_encode.BASE64_DECODE(utl_raw.CAST_TO_RAW(data));
    dbms_lob.WRITEAPPEND(m_binaryData, utl_raw.LENGTH(rawData), rawData);
  END WriteData;


  FUNCTION ReadData return VARCHAR is
    rawData     RAW(16384);
    bytesToRead PLS_INTEGER;
  BEGIN
    bytesToRead :=  (m_sourceLength - m_bytesRead);
    if bytesToRead >  MAX_READ_BYTES then
      bytesToRead := MAX_READ_BYTES;
    end if;
    DBMS_LOB.READ(m_binaryData, bytesToRead, (m_bytesRead + 1), rawData);
    m_bytesRead := m_bytesRead + bytesToRead;
    return UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(rawData));
  END ReadData;

  FUNCTION GetLastError return PLS_INTEGER is
  BEGIN
    return m_lastError;
  END GetLastError;


  FUNCTION GetSourceLength  return PLS_INTEGER is
  BEGIN
    return m_sourceLength;
  END GetSourceLength;

  FUNCTION GetSourceChunks  return PLS_INTEGER is
   chunks PLS_INTEGER;
  BEGIN
    chunks := floor(m_sourceLength/MAX_READ_BYTES);
    if mod(m_sourceLength,MAX_READ_BYTES) > 0 then
      chunks := chunks+1;
    end if;
    return chunks;
  END GetSourceChunks;

END;
/

prompt
prompt Creating trigger AGENDAMENTOS_TRG
prompt =================================
prompt
CREATE OR REPLACE TRIGGER RPV.AGENDAMENTOS_TRG
BEFORE INSERT ON AGENDAMENTOS
FOR EACH ROW
BEGIN
  SELECT AGENDAMENTOS_SEQ.NEXTVAL INTO :NEW.ID_AGENDAMENTOS FROM DUAL;
END;
/

prompt
prompt Creating trigger DBT_BIOMETRIA_INFO_INS_P
prompt =========================================
prompt
CREATE OR REPLACE TRIGGER RPV."DBT_BIOMETRIA_INFO_INS_P" BEFORE INSERT ON RPV.BIOMETRIA_INFO REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE
v_teste_data date;
BEGIN
v_teste_data := to_date(:new.dat_nasc,'yyyy/mm/dd');
END;
/

prompt
prompt Creating trigger DBT_ENVIO_UPD
prompt ==============================
prompt
CREATE OR REPLACE TRIGGER RPV.DBT_ENVIO_UPD
AFTER  UPDATE  OF
   TIP_DEST
 ON RPV.ENVIO
REFERENCING
 NEW AS NEW
 OLD AS OLD
FOR EACH ROW


when (
 NEW.EST_ENVIO = 'S' AND OLD.EST_ENVIO = 'P'
)
DECLARE
--
-- NOTAS:
--
-- 1. Nas requisições (Q) foram apenas considerados itens isolados.
-- 2. Idem nas Vinhetas, Lotes de Vinhetas, Redireccionamentos e Reapreciações.
--
BEGIN
  DECLARE
     contador integer := 0;
     werro integer;
     wtipo_form VARCHAR2(1);
     --
     CURSOR curs_id_campo IS
        SELECT * FROM id_campo_form
		WHERE tip_form = wtipo_form
		AND   dir_comm = 'E'
		order by ordem_form, num_camp, ordem;
     --
     CURSOR curs_form IS
        SELECT f.tip_vis_conced, f.vin_para FROM formulario f
     WHERE
        (f.ano_form = :new.for_ano_form
        AND f.num_form = :new.for_num_form)
	OR
	(f.ano_form = :new.formsch_ano_form
	AND f.num_form = :new.formsch_num_form);
     --

     cursor c_anexos is
        select a.nome_fich,t.descr tipo_anexos
          from anexos a, tipo_anexos t
         where a.anexo_id = t.anexo_id
           and a.ano_form = :new.formr_ano_form
           and a.num_form = :new.formr_num_form
	   and a.tip_form = 'R';
     r_anexos c_anexos%rowtype;

     cursor c_anexos_i is
        select a.nome_fich,t.descr tipo_anexos
          from anexos a, tipo_anexos t
         where a.anexo_id = t.anexo_id
           and a.ano_form = :new.formi_ano_form
           and a.num_form = :new.formi_num_form
	   and a.cod_ser_i =  :new.formi_cod_ser
	   and a.num_ord_i = :new.formi_num_ord
	   and a.ord_form_i = :new.formi_ord_form_i
	   and a.tip_form = 'I'
	   and a.tip_i = 'E';
     r_anexos_i c_anexos_i%rowtype;

     cursor c_anexos_n is
        select a.nome_fich,t.descr tipo_anexos
          from anexos a, tipo_anexos t
         where a.anexo_id = t.anexo_id
           and a.ano_form = :new.formap_ano_form
           and a.num_form = :new.formap_num_form
	   and a.tip_form = 'N';
     r_anexos_n c_anexos_n%rowtype;

     wid			id_campo_form%ROWTYPE;
--   wtip_vis_conced		VARCHAR2(2);
     wtip_vis_conced		formulario.tip_vis_conced%TYPE;
     wvin_para			formulario.vin_para%TYPE;
     wmsgid			NUMBER(10);
     wendereco			VARCHAR2(80);
     wdes_importanc		VARCHAR2(240);
     wconteudo			VARCHAR2(120);
     wnome_var			VARCHAR2(120);
     wnome_aux			VARCHAR2(120);
     waux			integer;
     v_assunto			VARCHAR2(80);
     v_enviou			temp_env.enviou%type;
     --
     v_contador                 number(3);
  BEGIN
     --
     SELECT temp_env_msgid.nextval
     INTO wmsgid
     FROM dual;

     --
     IF :new.tip_form_envio = 'P' THEN
        OPEN curs_form;
        FETCH curs_form INTO wtip_vis_conced, wvin_para;
        IF curs_form%NOTFOUND THEN
           RAISE NO_DATA_FOUND;
        END IF;
  	    IF :new.tip_dest = 'S' THEN
	       IF wtip_vis_conced IS NULL THEN
                  wtipo_form := 'A';
               ELSE
                  wtipo_form := 'C';
               END IF;
            ELSE
	       wtipo_form := 'P';
	    END IF;
        CLOSE curs_form;
     ELSE
        wtipo_form := :new.tip_form_envio;
     END IF;
     --
     ---> tratamento da tabela TEMP_ENV
     --
     SELECT rv_meaning INTO   wdes_importanc
     FROM   cg_ref_codes
     WHERE  rv_domain = 'DOM_TIP_IMPOR'
     AND    rv_low_value = :new.importanc_envio;
  --
     IF wtipo_form IN ('A', 'C') THEN
	v_assunto := SUBSTR(:new.assunto, 1, 19)||'.'||wtipo_form;
	ELSE
	v_assunto := :new.assunto;
     END IF;

    INSERT INTO temp_env(
        msgid,
        primary,
        priority,
        importance,
        subject,
        enviou,
        post_scheng,
        enviar_tip_form_envio,
        enviar_ref_ped_envio,
        enviar_num_msg_envio)
     VALUES(
        wmsgid,
        :new.endereco_envio,
        wdes_importanc,
        'NORMAL',
        v_assunto,
        'N',
        :new.tip_dest,
        wtipo_form,
        :new.ref_ped_envio,
        :new.num_msg_envio);

     --
     -- TRATAMENTOS DE ANEXOS
     --
     if :new.tip_form_envio = 'R' then
        v_contador := 0;
        open c_anexos;
        loop
             fetch c_anexos into r_anexos;
             exit when c_anexos%notfound;

             v_contador := v_contador + 1;
             insert into temp_env_anexos ( envia_msgid, num_linha, tipo_anexos, nome_fich)
             values ( wmsgid, v_contador, r_anexos.tipo_anexos, r_anexos.nome_fich);
        end loop;
        close c_anexos;

     end if;

     if :new.tip_form_envio = 'I' then
        v_contador := 0;
        open c_anexos_i;
        loop
             fetch c_anexos_i into r_anexos_i;
             exit when c_anexos_i%notfound;

             v_contador := v_contador + 1;
             insert into temp_env_anexos ( envia_msgid, num_linha, tipo_anexos, nome_fich)
             values ( wmsgid, v_contador, r_anexos_i.tipo_anexos, r_anexos_i.nome_fich);

        end loop;
        close c_anexos_i;

     end if;

     if :new.tip_form_envio = 'N' then
        v_contador := 0;
        open c_anexos_n;
        loop
             fetch c_anexos_n into r_anexos_n;
             exit when c_anexos_n%notfound;

             v_contador := v_contador + 1;
             insert into temp_env_anexos ( envia_msgid, num_linha, tipo_anexos, nome_fich)
             values ( wmsgid, v_contador, r_anexos_n.tipo_anexos, r_anexos_n.nome_fich);

        end loop;
        close c_anexos_n;

     end if;
  --
  ---> tratamento da tabela TEMP_ENV_DETALHE
  --
     OPEN curs_id_campo;
  --
     LOOP -- ciclo exterior (tratamento das linhas existentes para o formulário)
  --
        FETCH curs_id_campo INTO wid;
        EXIT WHEN curs_id_campo%NOTFOUND;
     --
        IF SUBSTR(wid.nome_var, 1, 1) = '@' THEN
     --
     ---> itens para leitura em tabela própria
     --
           waux := enviar_pk.trata_tabela(SUBSTR(wid.nome_var, 2),
				 nvl(:new.for_ano_form, :new.formsch_ano_form),
				 nvl(:new.for_num_form, :new.formsch_num_form), :new.grupo_id_grupo, contador,
                 wmsgid, wid.num_camp /*, :new.tip_form_envio, :new.ref_ped_envio, :new.num_msg_envio*/);
           IF waux > 0 AND wid.obrigatorio = 'S' THEN
--insert into HORTA(campo,conteudo,erro)
--values(wid.nome_var,'Campo obrigatório em falta',waux);
	          RAISE NO_DATA_FOUND;
           END IF;
       ELSE
           waux := INSTR(wid.nome_var, '||');
           IF waux = 0 THEN
-----------------> itens isolados
              IF wid.nome_var = 'ENVIO.REF_PED_ENVIO'THEN
                 wconteudo := :new.ref_ped_envio;
              ELSIF
                 wid.nome_var = 'ENVIO.IMPORTANC_ENVIO'THEN
                 wconteudo := :new.importanc_envio;
              ELSIF
                 wid.nome_var = 'ENVIO.DAT_ENVIO'THEN
                 wconteudo := TO_CHAR(:new.dat_envio, 'YYYYMMDD');
	      ELSIF
		 wid.nome_var = 'SYSDATE' THEN
		 wconteudo := TO_CHAR(sysdate,'YYYYMMDD');
              ELSE
  		 IF :new.tip_form_envio in ('Q','V','L','R','N') THEN
		    wconteudo := enviar2_pk.wname_in(
			      wid.nome_var,
				   	wid.formato_entrada,
				   	:new.req_cod_pos,
				   	:new.req_ano_req,
				   	:new.req_num_req,
	          nvl(:new.formr_ano_form, nvl(:new.for_ano_form,:new.formap_ano_form)),
	          nvl(:new.formr_num_form, nvl(:new.for_num_form,:new.formap_num_form)),
				   	NULL,
				   	NULL,
				   	:new.formr_ord_form_r,
	          :new.ref_ped_envio,
	          :new.num_msg_envio,
				   	:new.vin_num_vin,
	          werro,
					  wvin_para);
	               IF werro > 0 then
	                  RAISE NO_DATA_FOUND;
	               END IF;
                 ELSIF :new.tip_form_envio = 'I' THEN
			wconteudo := enviar2_pk.wname_in(
			       		wid.nome_var,
					wid.formato_entrada,
				   	:new.req_cod_pos,
				   	:new.req_ano_req,
				   	:new.req_num_req,
					NVL(:new.for_ano_form, :new.formi_ano_form),
					NVL(:new.for_num_form, :new.formi_num_form),
					:new.formi_cod_ser,
					:new.formi_num_ord,
					:new.formi_ord_form_i,
					:new.ref_ped_envio,
					:new.num_msg_envio,
					:new.vin_num_vin,
					werro);
	                 IF werro > 0 then
	                    RAISE NO_DATA_FOUND;
	                 END IF;
		ELSE
	                 wconteudo := enviar_pk.wname_in(wid.nome_var,
        	            wid.formato_entrada,
                	    wtipo_form,
	                    :new.formb_ref_form_b,
	                    :new.formb_ord_form_b,
	                    :new.vin_num_vin,
	                    :new.forme_ref_form_e,
	                    :new.forme_ord_form_e,
			                nvl(:new.for_ano_form, nvl(:new.formsch_ano_form, :new.formi_ano_form)),
	                    nvl(:new.for_num_form, nvl(:new.formsch_num_form, :new.formi_num_form)),
			                :new.grupo_id_grupo,
                      :new.notificacao_ref_form_2,
                      :new.formi_cod_ser,
  	                  :new.formi_num_ord,
               	      :new.formi_ord_form_i,
	                    :new.ref_ped_envio,
	                    :new.num_msg_envio,
	                    werro);
	                 IF werro > 0 AND werro < 900 THEN
--insert into HORTA(campo,conteudo,erro)
--values(wid.nome_var,wconteudo,werro);
                      RAISE NO_DATA_FOUND;
	                 END IF;
		     END IF;
              END IF;
              IF wconteudo IS NULL AND wid.obrigatorio = 'S' THEN
	         IF wid.defeito is not NULL then
		    wconteudo := wid.defeito;
		 ELSE
--insert into HORTA(campo,conteudo,erro)
--values(wid.nome_var,wconteudo,werro);
	            RAISE NO_DATA_FOUND;
		 END IF;
              END IF;
              --
              IF wconteudo IS NOT NULL THEN
                 contador := contador + 1;
                 INSERT INTO temp_env_detalhe(
                    envia_msgid,
                    num_linha,
                    num_campo,
                    conteudo)
                 VALUES(
                    wmsgid,
                    contador,
                    TO_CHAR(wid.num_camp, 'FM009'),
                    ltrim(wconteudo));
              END IF;
	ELSE
           --
--------------> concatenação de vários itens
           --
              wnome_var := wid.nome_var;
              wconteudo := NULL;
           --
              LOOP
                  wnome_aux := SUBSTR(wnome_var, 1, waux -1);
--insert into HORTA(campo,conteudo,erro)
--values(wnome_aux,WNOME_AUX,werro);
                  wconteudo := wconteudo||enviar_pk.wname_in(wnome_aux,
							wid.formato_entrada,
							wtipo_form,
							:new.formb_ref_form_b,
							:new.formb_ord_form_b,
							:new.vin_num_vin,
							:new.forme_ref_form_e,
							:new.forme_ord_form_e,
							nvl(:new.for_ano_form,
								nvl(:new.formsch_ano_form,
								nvl(:new.formi_ano_form, nvl(:new.formr_ano_form,:new.formap_ano_form)))),
							nvl(:new.for_num_form,
								nvl(:new.formsch_num_form,
								nvl(:new.formi_num_form, nvl(:new.formr_num_form, :new.formap_num_form)))),
              :new.grupo_id_grupo,
              :new.notificacao_ref_form_2,
              :new.formi_cod_ser,
					    :new.formi_num_ord,
					    :new.formi_ord_form_i,
							:new.ref_ped_envio,
							:new.num_msg_envio,
							werro);
				  IF werro > 0 AND werro < 900 THEN
--insert into HORTA(campo,conteudo,erro)
--values(wnome_aux,wconteudo,werro);
                     			RAISE NO_DATA_FOUND;
		                  END IF;
                  wnome_var := SUBSTR(wnome_var, waux+2);
                  waux		:= INSTR(wnome_var, '||');
				  IF waux = 0 THEN
                     wconteudo := wconteudo||enviar_pk.wname_in(wnome_var,
						wid.formato_entrada,
						wtipo_form,
						:new.formb_ref_form_b,
						:new.formb_ord_form_b,
						:new.vin_num_vin,
						:new.forme_ref_form_e,
						:new.forme_ord_form_e,
						nvl(:new.for_ano_form,
							nvl(:new.formsch_ano_form,
							NVL(:new.formi_ano_form, :new.formr_ano_form))),
						nvl(:new.for_num_form,
							nvl(:new.formsch_num_form,
							nvl(:new.formi_num_form, :new.formr_num_form))),
            :new.grupo_id_grupo,
            :new.notificacao_ref_form_2,
            :new.formi_cod_ser,
				                :new.formi_num_ord,
				                :new.formi_ord_form_i,
						:new.ref_ped_envio,
						:new.num_msg_envio,
						werro);
					IF werro > 0 AND werro < 900 THEN
--insert into HORTA(campo,conteudo,erro)
--values(wnome_aux,wconteudo,werro);
                       			RAISE NO_DATA_FOUND;
					END IF;
                        EXIT;
			END IF;
		END LOOP;
           --
            IF wconteudo IS NULL AND wid.obrigatorio = 'S' THEN
			   IF wid.defeito IS NOT NULL THEN
				  wconteudo := wid.defeito;
			   ELSE
                              RAISE NO_DATA_FOUND;
			   END IF;
            END IF;
           --
            IF wconteudo IS NOT NULL THEN
               contador := contador + 1;
               INSERT INTO temp_env_detalhe(
                    envia_msgid,
                    num_linha,
                    num_campo,
                    conteudo)
               VALUES(
		    wmsgid,
                    contador,
                    TO_CHAR(wid.num_camp, 'FM009'),
                    ltrim(wconteudo));
            END IF;
           --
        END IF;
        --
     END IF;
  --
  -- fim do ciclo exterior
  --
  END LOOP;
  --
  CLOSE curs_id_campo;
  --
  END;
END;
/

prompt
prompt Creating trigger DBT_FORM_B_INS_P
prompt =================================
prompt
CREATE OR REPLACE TRIGGER RPV.DBT_FORM_B_INS_P
AFTER  UPDATE
 ON FORM_B
FOR EACH ROW


DECLARE
--
-- No posto, ou Ã© um pedido de prorrogaÃ§Ã£o ou
--Ã© um parecer do paÃ­s (AUTORIZADO ou INDEFERIDO), caso em que
--actualizar (FORM_SCH.COD_PARE
--tem que chamar evolui_estado(...).
--
     wret integer;
     evol integer;
     wpare_conc varchar2(1);
     wdat_lim_resp date;
     --
BEGIN
--
    BEGIN
	select pare_conc into wpare_conc
		from parecer
		where cod_pare = :new.cod_pare;
	exception when NO_DATA_FOUND then
		wpare_conc := 'N';
    END;
    IF wpare_conc = 'N' then
--
---> Tratamento dos formulÃ¡rios B recebidos com pedido de prorrogaÃ§Ã£o
--
	select dat_lim_resp into wdat_lim_resp
		from formulario
		where ano_form = :new.ano_form
		  and num_form = :new.num_form;
--
	if :new.praz_sup is null then
		wdat_lim_resp := wdat_lim_resp + TAREF.busca_param_glo1(27);
	else
		wdat_lim_resp := wdat_lim_resp + :new.praz_sup;
	end if;
--
	update formulario
		set dat_lim_resp = wdat_lim_resp
		where ano_form = :new.ano_form
		  and num_form = :new.num_form;
--
    ELSE
--
---> Tratamento dos formulÃ¡rios B recebidos com autorizaÃ§Ã£o ou indeferimento
--
	update formulario
		set cod_pare = :new.cod_pare
		where ano_form = :new.ano_form
		  and num_form = :new.num_form;
--
    END IF;
--
END;
/

prompt
prompt Creating trigger DBT_FORM_E_INS
prompt ===============================
prompt
CREATE OR REPLACE TRIGGER RPV.DBT_FORM_E_INS
AFTER  INSERT
 ON FORM_E
FOR EACH ROW

when (  NEW.ANO_FORM IS NULL AND NEW.NUM_FORM IS NULL AND NEW.ANO_FORM_SCH IS NULL AND  NEW.NUM_FORM_SCH IS NULL AND NEW.COD_PAIS IS NULL AND  NEW.REF_FORM_B IS NULL AND  NEW.ORD_FORM_B IS NULL  AND NEW.TIP_FORM != 'E' )
DECLARE
-- Preenche Envio se FÃ´r feito automÃ¡ticamente quando recebe e
-- der um erro.
CURSOR c_envio IS
   SELECT NVL(MAX(num_msg_envio), 0) FROM envio
WHERE
   tip_form_envio = 'E'
   AND ref_ped_envio = :new.ref_form_e;
--
wref_form_e VARCHAR2(19);
word_form_e NUMBER(2);
wpais_prt PAIS.COD_PAIS%TYPE ;
--
CURSOR c_recep IS
   SELECT * FROM recep
WHERE
   forme_ref_form_e = wref_form_e
   AND forme_ord_form_e = word_form_e;
--
w_recep recep%ROWTYPE;
--
--CURSOR c_det_b IS
--	SELECT  * from temp_rec_detalhe
--		where num_campo = '040'
--		  and recebe_num_fich = w_recep.recebe_num_fich;
--
--w_det_b temp_rec_detalhe%ROWTYPE;
--
wassunto VARCHAR2(50);
wnum_msg_envio NUMBER(2);
--
wendereco_envio VARCHAR2(120);
wtip_envio VARCHAR2(1);
wflag_insere BOOLEAN := TRUE;
--
wpais_envio PAIS_SCH.cod_pais_sch%TYPE;
CURSOR c_endereco_sch IS
	SELECT END_ENVIO from Pais_Sch
		where COD_PAIS_SCH = wpais_envio;
wend_envio PAIS_SCH.END_ENVIO%TYPE;
BEGIN
   wpais_prt := Taref.Busca_Param_Glo1(1,NULL) ; /* Parametro global para portugal */
   --
   OPEN c_envio;
   FETCH c_envio INTO wnum_msg_envio;
   IF c_envio%NOTFOUND THEN
      wnum_msg_envio := 0;
   END IF;
   CLOSE c_envio;
   --
   wnum_msg_envio := wnum_msg_envio + 1;
   --
   wref_form_e := :new.ref_form_e;
   word_form_e := :new.ord_form_e;
   --
   OPEN c_recep;
   FETCH c_recep INTO w_recep;
   IF c_recep%NOTFOUND THEN
      wendereco_envio := NULL;
      wtip_envio := 'F';
   ELSE
      wtip_envio := 'R';
      wendereco_envio := w_recep.endereco_orig;
   END IF;
   CLOSE c_recep;
   --
   if :new.tip_form = 'B' then
/*
	   open c_det_b;
	   fetch c_det_b into w_det_b;
	   if c_det_b%NOTFOUND then
		wflag_insere := FALSE;
	   else
		wassunto := w_det_b.conteudo;
	   end if;
	   close c_det_b;
*/
	   wassunto := REGRAS.CONTEUDO_CAMPO(w_recep.recebe_num_fich,'040')||'.E';
   else
	   wassunto := substr(w_recep.assunto,1,19)||'.E';
   end if;
   --
   wpais_envio := substr(wassunto,1,3);
   If wpais_envio = WPais_PRT then
	NULL; /* endereco de envio para o posto - nÃ£o pode acontecer (FORM_E para POSTO)???*/
     else
	OPEN c_endereco_sch;
	FETCH c_endereco_sch INTO wend_envio;
	IF c_endereco_sch%NOTFOUND THEN /* Chegou de um pais que nÃ£o Ã© de Schengen ??? */
	  wend_envio := NULL;
	END IF;
	CLOSE c_endereco_sch;
	wendereco_envio := wend_envio;
   End if ;
   if wflag_insere then
     INSERT INTO envio(
         tip_form_envio,
         ref_ped_envio,
         num_msg_envio,
         tip_dest,
         importanc_envio,
         assunto,
         dat_envio,
         uti_envio,
         est_envio,
         tip_envio,
         endereco_envio,
         dr_ndr,
         seq_envio,
         forme_ref_form_e,
         forme_ord_form_e)
     VALUES
      (
         'E',
         :new.ref_form_e,
         wnum_msg_envio,
         'S',
         'N',
         wassunto,
         sysdate,
         user,
         'P',
         wtip_envio,
         wendereco_envio,
         'S',
         envio_seq_envio.nextval,
         :new.ref_form_e,
         :new.ord_form_e);
     /*
     -- --> envio automÃ¡tico do formulÃ¡rio E --
     update envio
     set est_envio = 'S'
     where
     tip_form_envio = 'E' and
     ref_ped_envio = :new.ref_form_e and
     num_msg_envio = wnum_msg_envio;
     -- */
  end if;
END;
/

prompt
prompt Creating trigger DBT_FORM_I_INS_P
prompt =================================
prompt
CREATE OR REPLACE TRIGGER RPV.DBT_FORM_I_INS_P
AFTER  INSERT
 ON FORM_I
FOR EACH ROW

DECLARE
--  Pedidos de esclarecimento (CENTRAL -> POSTOS)
--
--  No posto sÃ³ faz update se DEVE_AGUARD = 'S' e se
-- tiver sido aumentada a data limite de resposta do formulario.
--
--
	CURSOR c_form IS
		SELECT * from FORMULARIO
			WHERE ano_form = :new.ano_form
			AND num_form = :new.num_form;
	wform formulario%ROWTYPE;
--
	CURSOR c_posto IS
		SELECT * from POSTO
		WHERE cod_pos = wform.cod_pos AND circ_aut = 'S';
	wposto POSTO%ROWTYPE;
--
	wenvia varchar2(1) := 'N';

	wref_ped_envio	 varchar2(19);
	wassunto	 varchar2(50);
	wtip_envio 	 varchar2(1);
	wendereco_envio  varchar2(120);
	wdat_ini_praz 	 date;
	wdat_lim_resp 	 date;
        v_num_msg_envio  envio.num_msg_envio%type;
	v_sqlcode	 NUMBER;
--
BEGIN
--
--- Se deve aguardar autorizaÃ§Ã£o expressa
--- entÃ£o deve prolongar a data limite de resposta do formulÃ¡rio
--
  if nvl(:new.tip_i,'R') = 'R' then
	select dat_ini_praz, dat_lim_resp
	  into wdat_ini_praz, wdat_lim_resp
	  from formulario
		where ano_form = :new.ano_form
		  and num_form = :new.num_form;
	wdat_ini_praz := wdat_ini_praz + to_number(taref.busca_param_glo1(31, null));
        if TRUNC(wdat_lim_resp) < TRUNC(wdat_ini_praz) then
		update formulario
		   set dat_lim_resp = wdat_ini_praz,
		       autoriz_expr = :new.deve_aguard
		where ano_form = :new.ano_form
		  and num_form = :new.num_form;
	elsif :new.deve_aguard = 'S' then
		update formulario
		   set autoriz_expr = 'S'
		where ano_form = :new.ano_form
		  and num_form = :new.num_form;
	end if;
   else
--
--- Se deve aguardar autorizaÃ§Ã£o expressa
--- entÃ£o deve prolongar a data limite de resposta do formulÃ¡rio
--
	OPEN c_form;
	FETCH c_form INTO wform;
		IF c_form%NOTFOUND then
			CLOSE c_form;
			RAISE NO_DATA_FOUND;
		END IF;
--
-- deve enviar sempre que Ã© feito um pedido de informaÃ§Ã£o
--
	/*wref_ped_envio := 'I'||to_char(:new.ano_form,'FM0009')||
			       to_char(:new.num_form,'FM0000009')||
			       :new.cod_ser||to_char(:new.num_ord,'FM09')||
			       to_char(:new.ord_form_i,'FM09');*/
	wref_ped_envio := wform.cod_pais_sch_ref||wform.ref_form_2||wform.ref_form_3;
	wassunto := wform.cod_pais_sch_ref||wform.ref_form_2||wform.ref_form_3||'.I';
	-- Se o modo de inserÃ§Ã£o for automÃ¡tico, vai por Rede, senÃ£o vai por Fax
	IF NVL(wform.mod_in, 'A') != 'A' THEN
		 wtip_envio := 'F';
	ELSE
		 wtip_envio := 'R';
	END IF;
	OPEN c_posto;
	FETCH c_posto into wposto;
	IF c_posto%NOTFOUND then
		CLOSE c_posto;
		wendereco_envio := null;
	ELSE
		CLOSE c_posto;
		wendereco_envio := wposto.end_envio;
	END IF;
--
        select nvl(max(num_msg_envio),0) + 1  into v_num_msg_envio
        from envio
        where formi_ano_form = :new.ano_form and formi_num_form = :new.num_form;
     INSERT INTO envio(
           tip_form_envio,
           ref_ped_envio,
           num_msg_envio,
           tip_dest,
           importanc_envio,
           assunto,
           dat_envio,
           uti_envio,
           est_envio,
           tip_envio,
           endereco_envio,
           dr_ndr,
           seq_envio,
          formi_cod_ser,
          formi_ano_form,
          formi_num_form,
          formi_num_ord,
          formi_ord_form_i
           )
     VALUES
        (
           'I',
           wref_ped_envio,
           v_num_msg_envio,
           'C',
           '3',
           wassunto,
           sysdate,
           user,
           'P',
           wtip_envio,
           wendereco_envio,
           'S',
           envio_seq_envio.nextval,
          :new.cod_ser,
          :new.ano_form,
         :new.num_form,
         :new.num_ord,
         :new.ord_form_i
           );
    IF c_form%ISOPEN THEN CLOSE c_form;
    END IF;
   end if;
--
END;
/

prompt
prompt Creating trigger DBT_FORMP_INS_P
prompt ================================
prompt
CREATE OR REPLACE TRIGGER "RPV".DBT_FORMP_INS_P
BEFORE INSERT
 ON FORM_P
FOR EACH ROW

BEGIN
   IF :new.ender_act IS NULL THEN
      :new.ped_normal := 'N';
   ELSE
      :new.ped_normal := 'S';
   END IF;
END;
/

prompt
prompt Creating trigger DBT_FORMP_UPD_P
prompt ================================
prompt
CREATE OR REPLACE TRIGGER RPV.DBT_FORMP_UPD_P
BEFORE UPDATE
 ON FORM_P
FOR EACH ROW

DECLARE
CURSOR c1 IS
	SELECT e.ref_ped_envio, e.num_msg_envio
	FROM envio e
	WHERE 	e.tip_form_envio = 'P'
	AND   	e.for_ano_form = :new.ano_form
	AND	e.for_num_form = :new.num_form
	AND	e.est_envio != 'P' FOR UPDATE OF e.est_envio;
v_ref_ped_envio		envio.ref_ped_envio%TYPE;
v_num_msg_envio		envio.num_msg_envio%TYPE;
BEGIN
   IF :new.ender_act IS NULL THEN
      :new.ped_normal := 'N';
   ELSE
      :new.ped_normal := 'S';
   END IF;
   IF :new.ped_normal = 'S' and :old.ped_normal = 'N' AND
      NVL(:new.cons_central, 'S') = 'S' THEN
	OPEN c1;
	FETCH c1 INTO v_ref_ped_envio, v_num_msg_envio;
	IF c1%FOUND THEN 	-- JÃ¡ foi enviado um formulÃ¡rio P para a Central e Ã© necessÃ¡rio
				-- enviar um que tenha as alteraÃ§Ãµes feitas posteriormente
		IF Taref.Envia_FormP(:new.ano_form, :new.num_form) THEN NULL;
		END IF;
	END IF;
	CLOSE c1;
   END IF;
END;
/

prompt
prompt Creating trigger DBT_FORMULARIO_INS_P
prompt =====================================
prompt
CREATE OR REPLACE TRIGGER RPV.DBT_FORMULARIO_INS_P
BEFORE INSERT
 ON FORMULARIO
FOR EACH ROW

DECLARE v_cod_pos	posto.cod_pos%TYPE := Taref.Busca_Param_Glo1(3, null);
BEGIN
IF v_cod_pos = TO_NUMBER(SUBSTR(:new.ref_form_2, 1, 4)) THEN -- Se nÃ£o for Redireccionamento
   UPDATE contador_posto				     -- nÃ£o hÃ¡ actualizaÃ§Ã£o do nÂº
   SET num_form = TO_NUMBER(SUBSTR(:new.ref_form_2, 9))	     -- da referÃªncia
   WHERE	Ano = TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY'))
   AND		Cod_Pos = v_cod_pos;
   IF SQL%NOTFOUND THEN
	INSERT INTO contador_posto(cod_pos, ano, num_form)
	VALUES(	v_cod_pos,
		TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY')),
		TO_NUMBER(SUBSTR(:new.ref_form_2, 9)));
   END IF;
--ELSE
--SELECT RPV.SEQ_FORMULARIO.NEXTVAL INTO :new.num_form from dual;
END IF;
:new.cri_dat_est := substr(:new.cri_dat,1,10);
END;
/

prompt
prompt Creating trigger DBT_FORMULARIO_UPD_AUD_PREV
prompt ============================================
prompt
CREATE OR REPLACE TRIGGER RPV.DBT_FORMULARIO_UPD_AUD_PREV
BEFORE UPDATE
 ON FORMULARIO
FOR EACH ROW

when (OLD.AUD_PREVIA = 'P' AND NEW.AUD_PREVIA = 'R')
BEGIN

   Funcoes.Envio_Aud_Previa (:new.ano_form, :new.num_form,
   :new.cod_pais_sch_ref||:new.ref_form_2||:new.ref_form_3);
END;
/

prompt
prompt Creating trigger DBT_FORMULARIO_UPD_CONS_VIS
prompt ============================================
prompt
CREATE OR REPLACE TRIGGER RPV.DBT_FORMULARIO_UPD_CONS_VIS
BEFORE UPDATE
 ON FORMULARIO
FOR EACH ROW

when (OLD.NOME <> NEW.NOME OR OLD.APEL <> NEW.APEL OR OLD.DAT_NASC <> NEW.DAT_NASC OR
  OLD.COD_PAIS_NAC_1 <> NEW.COD_PAIS_NAC_1 OR OLD.SEXO <> NEW.SEXO)
BEGIN
   delete from link_vis_manual
   where ano_form = :new.ano_form and num_form = :new.num_form;
   :new.consulta_vis := 'N';
   :new.consulta_nsis := 'N';
END;
/

prompt
prompt Creating trigger DBT_FORMULARIO_UPD_CONS_VIS_G
prompt ==============================================
prompt
CREATE OR REPLACE TRIGGER RPV.DBT_FORMULARIO_UPD_CONS_VIS_G
BEFORE UPDATE
 ON FORMULARIO
FOR EACH ROW

when (OLD.IND_GRUPO is not null AND NEW.IND_GRUPO is NULL)
BEGIN
   delete from link_vis_manual
   where ano_form = :new.ano_form and num_form = :new.num_form;
   :new.consulta_vis := 'N';
   :new.consulta_nsis := 'N';
END;
/

prompt
prompt Creating trigger DBT_FORMULARIO_UPD_P
prompt =====================================
prompt
CREATE OR REPLACE TRIGGER "RPV".DBT_FORMULARIO_UPD_P
BEFORE UPDATE
 ON FORMULARIO
FOR EACH ROW

when (NVL(OLD.REAPR, 'N') = 'N' AND NVL(NEW.REAPR, 'N') = 'S'               )
DECLARE CURSOR C1 IS
	SELECT COUNT(*) FROM FORM_R
	WHERE ANO_FORM = :NEW.ANO_FORM
	AND   NUM_FORM = :NEW.NUM_FORM;
V_CONTA	NUMBER(2);
BEGIN

   :new.cod_pare := NULL;
/*
   :new.cod_pare_pos := 1;
*/
   OPEN C1;
   FETCH C1 INTO V_CONTA;
   CLOSE C1;
   /*V_CONTA := V_CONTA + 1;
   INSERT INTO form_r (
	ANO_FORM,
	NUM_FORM,
	ORD_FORM_R,
	DAT_REAPR,
	CRI_DAT,
	CRI_UTI)
   VALUES (
	:NEW.ANO_FORM,
	:NEW.NUM_FORM,
	V_CONTA,
	SYSDATE,
        TO_CHAR(SYSDATE, 'YYYY/MM/DD HH24:MI:SS'),
	USER); */
   Funcoes.Envio_Reapr (:new.ano_form, :new.num_form,
			:new.cod_pais_sch_ref||:new.ref_form_2||:new.ref_form_3,
			v_conta);
END;
/

prompt
prompt Creating trigger DBT_FORMZ_INS_P
prompt ================================
prompt
CREATE OR REPLACE TRIGGER RPV.DBT_FORMZ_INS_P
AFTER  INSERT
 ON FORM_Z
FOR EACH ROW

DECLARE
	CURSOR C IS
		SELECT DAT_LIM_RESP FROM FORMULARIO
		WHERE ANO_FORM = :NEW.ANO_FORM
		  AND NUM_FORM = :NEW.NUM_FORM FOR UPDATE OF dat_lim_resp;
	WDAT_LIM_RESP DATE;
BEGIN
	OPEN C;
	FETCH C INTO WDAT_LIM_RESP;
	IF C%NOTFOUND THEN
		CLOSE C;
		RAISE NO_DATA_FOUND;
	END IF;
	IF WDAT_LIM_RESP IS NULL THEN
		UPDATE FORMULARIO
			SET DAT_LIM_RESP = (:NEW.DAT_CONCED_PED - 1)
			WHERE CURRENT OF c;
	END IF;
	CLOSE C;
END;
/

prompt
prompt Creating trigger DBT_INDEF_JUST_PARECER_INS_C
prompt =============================================
prompt
CREATE OR REPLACE TRIGGER RPV.dbt_indef_just_parecer_ins_c
BEFORE INSERT
ON indef_justifica_parecer
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW

BEGIN
   IF :new.reapr is null THEN
      :new.reapr := 'N';
   END IF;
END;
/

prompt
prompt Creating trigger DBT_INS_LOTE_VIN_P
prompt ===================================
prompt
CREATE OR REPLACE TRIGGER "RPV".DBT_INS_LOTE_VIN_P
AFTER  INSERT
 ON LOTE_VIN
FOR EACH ROW

DECLARE
	CURSOR c2 IS
	SELECT r.* FROM requisicao r
	WHERE 	r.ano_req = :NEW.ano_req
	AND	r.num_req = :NEW.num_req
	AND	r.cod_pos = :NEW.cod_pos FOR UPDATE OF r.qt_satis;
	r_requisicao	requisicao%ROWTYPE;
BEGIN
	OPEN c2;
	FETCH c2 INTO r_requisicao;
		UPDATE requisicao r
		SET r.qt_satis = NVL(r.qt_satis, 0) + (:NEW.lim_max - :NEW.lim_min + 1)
		WHERE CURRENT OF c2;
	CLOSE c2;
END;
/

prompt
prompt Creating trigger DBT_LOTE_CONS
prompt ==============================
prompt
CREATE OR REPLACE TRIGGER "RPV".DBT_LOTE_CONS
BEFORE UPDATE
OF COD_SER
, DAT_LOTE
, ORD_LOTE
OR DELETE
 ON LOTE_CONSULTA
FOR EACH ROW

when (NEW.COD_SER <> OLD.COD_SER OR NEW.DAT_LOTE <> OLD.DAT_LOTE OR NEW.ORD_LOTE <> OLD.ORD_LOTE  )
DECLARE
  --
  --
  dummy VARCHAR2(1);
BEGIN
  SELECT distinct 'x'
  INTO
     dummy
  FROM
     form_ser
  WHERE
     form_ser.cod_ser = :old.cod_ser AND
     form_ser.dat_lote = :old.dat_lote AND
     form_ser.ord_lote = :old.ord_lote;
  RAISE DUP_VAL_ON_INDEX;
  EXCEPTION WHEN NO_DATA_FOUND THEN
  NULL;
END;
/

prompt
prompt Creating trigger DBT_RECEP_INS
prompt ==============================
prompt
CREATE OR REPLACE TRIGGER "RPV".DBT_RECEP_INS
AFTER  INSERT
 ON TEMP_REC
FOR EACH ROW

BEGIN
  DECLARE
     --
     wref_ped_recep	recep.ref_ped_recep%TYPE;
     west_recep		recep.est_recep%TYPE := 'N';
     wimport 		cg_ref_codes.rv_abbreviation%TYPE;
     wtmp		temp_rec%ROWTYPE;
     werro		NUMBER(5);
     Werro_sup		temp_rec_detalhe.num_campo%type;
     wcontador		recep.num_msg_recep%type;
     --
     CURSOR c_det IS
        SELECT * FROM temp_rec_detalhe
     WHERE
        recebe_num_fich = :new.num_fich
	order by num_campo;
     --
     wdet temp_rec_detalhe%ROWTYPE;
     --
     wcampo_ant varchar2(5);
     wordem number(2);
     --
     CURSOR c_id IS
        SELECT * FROM id_campo_form
     WHERE
        tip_form = :new.tipo_form
	AND dir_comm = 'R'
        AND num_camp = to_number(wdet.num_campo)
        AND ordem = wordem;
     ---
     wid id_campo_form%ROWTYPE;
     --
     CURSOR c_det2 IS
        SELECT * FROM temp_rec_detalhe
     WHERE
        recebe_num_fich = :new.num_fich
        AND num_campo like to_char(wid.num_camp,'FM009');
     --
  BEGIN
     --
  ---> Fase 2 : ValidaÃ§Ã£o dos campos
  --
  OPEN c_det;
  LOOP
     --
     --> Leitura de cada ROW da tabela TEMP_REC_DETALHE
     --
     FETCH c_det INTO wdet;
     IF c_det%NOTFOUND THEN
        EXIT;
     END IF;
     --
     --> detecÃ§Ã£o das linhas com o mesmo nÃºmero de campo
     --
     if wdet.num_campo like wcampo_ant then
	wordem := wordem + 1;
     else
	wordem := 1;
     end if;
     --
     --> Teste Ã  tabela ID_CAMPO_FORM
     --
     OPEN c_id;
     FETCH c_id INTO wid;
     IF C_id%NOTFOUND THEN
         werro := 1; --->
         werro_sup := wdet.num_campo;
         --> campo nÃ£o existente na tabela
     END IF;
     CLOSE c_id;
     --
  END LOOP;
  --
  CLOSE c_det;
  --
  BEGIN
	select rv_abbreviation
          into wimport
		from cg_ref_codes
		where rv_meaning = :new.importance
		and rv_domain = 'DOM_TIP_IMPOR';
  exception when others then
	wimport := 3;
  END;
  --
  --> definiÃ§Ã£o do nÃºmero de ordem do formulÃ¡rio em RECEP
  --
  wref_ped_recep := SUBSTR(:new.subject, 1, length(:new.subject)-2);
  	BEGIN
	     SELECT NVL(MAX(num_msg_recep), 0)
	     INTO wcontador
	     FROM recep
	     WHERE tip_form_recep = :new.tipo_form
	     AND   ref_ped_recep = wref_ped_recep;
	EXCEPTION WHEN OTHERS THEN
	     RAISE NO_DATA_FOUND;
	END;
	wcontador := wcontador + 1;
  --
  BEGIN
     INSERT INTO recep(
           tip_form_recep,
           ref_ped_recep,
           num_msg_recep,
           tip_orig,
           importanc_recep,
           assunto,
           dat_recep,
           uti_recep,
           est_recep,
           dat_chegou,
           endereco_orig,
           recebe_num_fich)
     VALUES
        (
           :new.tipo_form,
           wref_ped_recep,
           wcontador,
           :new.post_scheng,
           wimport,
           :new.subject,
           TO_DATE(SUBSTR(:new.submission_time, 1, 12), 'RRMMDDHH24MISS'),
           user,
           west_recep,
           TO_DATE(SUBSTR(:new.submission_time, 1, 12), 'RRMMDDHH24MISS'),
           substr(:new.originator,1,120),
           :new.num_fich);
  EXCEPTION
     WHEN OTHERS THEN
     RAISE NO_DATA_FOUND;
  END;
  --
  --
  END;
END;
/

prompt
prompt Creating trigger DBT_RECEP_UPD
prompt ==============================
prompt
CREATE OR REPLACE TRIGGER RPV.DBT_RECEP_UPD
BEFORE UPDATE
 ON RECEP
FOR EACH ROW

when ( old.est_recep = 'N' and new.est_recep = 'L'                                 )
DECLARE
     --
     CURSOR c_rec IS
        SELECT * FROM temp_rec
     WHERE
        num_fich = :new.recebe_num_fich;
     --
     CURSOR c_form (referencia varchar2) IS
	SELECT ano_form, num_form FROM formulario
	WHERE  cod_pais_sch_ref = SUBSTR(referencia, 1, 3)
	AND    ref_form_2	= SUBSTR(referencia, 4, 14)
	AND    ref_form_3 	= SUBSTR(referencia, 18, 2);
     v_ano_form		formulario.ano_form%TYPE;
     v_num_form		formulario.num_form%TYPE;
     v_existe_form	BOOLEAN;
     --
     w_rec		temp_rec%ROWTYPE;
     --
     wano 		number;
     wseg 		number;
     wseg2    formulario_web.num_form_web%type;
     docs		varchar2(1);
     wref_form_b_e 	RECEP.FORMB_REF_FORM_B%TYPE;
     V_COD_SER		SERVICO.COD_SER%TYPE;
     v_num_ord		FORM_I.NUM_ORD%TYPE;
     v_ord_form_i	FORM_I.ORD_FORM_I%TYPE;
     v_evol		number;
     --
  BEGIN
     --
     OPEN c_rec;
     FETCH c_rec INTO w_rec;
     IF c_rec%NOTFOUND THEN
        --> incongruencia na base de dados <--
        RAISE NO_DATA_FOUND;
     END IF;
     CLOSE c_rec;
     --
     IF :new.tip_form_recep = 'B'
     THEN
	OPEN c_form (:old.ref_ped_recep);
	FETCH c_form INTO v_ano_form, v_num_form;
	CLOSE c_form ;
        :new.for_ano_form := v_ano_form;
        :new.for_num_form := v_num_form;
	wref_form_b_e := REGRAS.CONTEUDO_CAMPO(w_rec.num_fich,'001');
        wseg := receber_pk.ord_formb_seg(wref_form_b_e);
        receber_pk.insere_form_b(w_rec.num_fich, wref_form_b_e, wseg, nvl(:new.tip_orig, 'R'));
        receber_pk.insere_indef_justifica_parecer(w_rec.num_fich, v_ano_form, v_num_form);
        --
        :new.formb_ref_form_b := wref_form_b_e;
        :new.formb_ord_form_b := wseg;
--
     ELSIF :new.tip_form_recep = 'V'
     THEN
	:new.vin_num_vin := receber_pk.insere_vinheta2(w_rec.num_fich);
--
     ELSIF :new.tip_form_recep = 'P'
     THEN
        wseg :=receber_pk.num_form_seg;
	WAno := TO_NUMBER(TO_CHAR(sysdate, 'YYYY')) ;
	receber_pk.insere_formulario(w_rec.num_fich, :new.tip_form_recep,
		WAno, wseg, SUBSTR(:new.ref_ped_recep, 1, 19), v_existe_form);
        IF NOT v_existe_form THEN
           receber_pk.insere_form_p(w_rec.num_fich, WAno, wseg);
           receber_pk.insere_descendente(w_rec.num_fich, WAno, wseg);
           receber_pk.insere_pais_transito(w_rec.num_fich,	WAno, wseg);
           receber_pk.insere_form_doc(w_rec.num_fich, WAno, wseg);
           receber_pk.insere_vistos_3_anos(w_rec.num_fich, WAno, wseg);
           receber_pk.insere_meios_subsistencia(w_rec.num_fich, WAno, wseg);
           if :new.vin_num_vin IS NOT NULL THEN
              receber_pk.insere_vinheta(:new.tip_form_recep,w_rec.num_fich, WAno, wseg);
           end if;
        END IF;
        --
	:new.for_ano_form := WAno;
        :new.for_num_form := wseg;
--	evol := tarefa_master.evolui_estado (Wano, wseg, 'A');
--
     ELSIF :new.tip_form_recep = 'L'
     THEN
	receber_pk.insere_lote_vin(w_rec.num_fich);
	:new.req_cod_pos := to_number(substr(:new.assunto,1,4));
	:new.req_ano_req := TO_NUMBER(SUBSTR(TO_CHAR(SYSDATE, 'YYYY'), 1, 2)||(substr(:new.assunto,5,2)));
	:new.req_num_req := to_number(substr(:new.assunto,7,2));
--
     ELSIF :new.tip_form_recep = 'D'
     THEN
	OPEN c_form (:old.ref_ped_recep);
	FETCH c_form INTO v_ano_form, v_num_form;
	CLOSE c_form ;
	:new.posred_ano_form := v_ano_form;
	:new.posred_num_form := v_num_form;
	receber_pk.insere_redir(w_rec.num_fich, v_ano_form, v_num_form,
				:new.posred_ord_pos_redir);
--
     ELSIF :new.tip_form_recep = 'R'
     THEN
	receber_pk.insere_form_r(w_rec.num_fich);
	:new.formr_ano_form := to_number(substr(:new.assunto,2,4));
	:new.formr_num_form := to_number(substr(:new.assunto,6,7));
	:new.formr_ord_form_r := to_number(substr(:new.assunto,13,2));
--
     ELSIF :new.tip_form_recep = 'I'
     THEN
	OPEN c_form (:old.ref_ped_recep);
	FETCH c_form INTO v_ano_form, v_num_form;
	CLOSE c_form;
        :new.formi_ano_form := v_ano_form;
        :new.formi_num_form := v_num_form;
	receber_pk.insere_form_i(w_rec.num_fich, v_ano_form, v_num_form, v_cod_ser, v_num_ord, v_ord_form_i);
	:new.formi_cod_ser := v_cod_ser;
	:new.formi_ord_form_i := v_ord_form_i;
	:new.formi_num_ord := v_num_ord;
--
     ELSIF :new.tip_form_recep = 'Z'
     THEN
        OPEN c_form (:old.ref_ped_recep);
        FETCH c_form INTO v_ano_form, v_num_form;
        CLOSE c_form;
        :new.formz_ano_form := v_ano_form;
        :new.formz_num_form := v_num_form;
	receber_pk.insere_form_z(w_rec.num_fich, v_ano_form, v_num_form);
--
     ELSIF :new.tip_form_recep = 'S'
     THEN
        wseg :=receber_pk.num_form_seg;
	WAno := TO_NUMBER(TO_CHAR(sysdate, 'YYYY')) ;
	receber_pk.insere_formulario_legaliz(w_rec.num_fich, :new.tip_form_recep,
		WAno, wseg, SUBSTR(:new.ref_ped_recep, 1, 19), v_existe_form, docs);

        receber_pk.insere_form_p_legaliz(w_rec.num_fich, WAno, wseg);
--	if docs = 'N' then
	receber_pk.insere_form_doc_legaliz(w_rec.num_fich, WAno, wseg, docs);
--	end if;

	:new.for_ano_form := WAno;
        :new.for_num_form := wseg;
--
     ELSIF :new.tip_form_recep = 'W' then
           wseg := to_number(substr(:new.assunto,4,14));
           wseg2 := 'W' || to_char(to_number(substr(:new.assunto,4,14)));
           receber_pk.insere_formulario_web(w_rec.num_fich, :new.tip_form_recep,
		       wseg2, SUBSTR(:new.ref_ped_recep, 1, 19));
           if :new.num_msg_recep = 1 then
              receber_pk.insere_meios_subsistencia_web(w_rec.num_fich, wseg2);
              receber_pk.insere_vistos_3_anos_web(w_rec.num_fich, wseg2);
           end if;
     ELSIF :new.tip_form_recep = 'O' then
           receber_pk.insere_reag_alertas(w_rec.num_fich);
     END IF;
--
  END;
/

prompt
prompt Creating trigger DBT_REQUISICAO_INS_P
prompt =====================================
prompt
CREATE OR REPLACE TRIGGER RPV.DBT_REQUISICAO_INS_P
AFTER  INSERT
 ON REQUISICAO
FOR EACH ROW

DECLARE
  --
  wref_ped_envio 	envio.ref_ped_envio%TYPE;
  wendereco 		envio.endereco_envio%TYPE;
  wseq_ped 		envio.num_msg_envio%TYPE;
  wtip_envio 		envio.tip_envio%TYPE;
  wcirc_aut 		posto.circ_aut%TYPE;
  BEGIN
     wref_ped_envio := 'Q'||SUBSTR(TO_CHAR(:new.cod_pos, '0009'), 2) ||
     				SUBSTR(TO_CHAR(:new.ano_req, '0009'), 2) ||
			 	SUBSTR(TO_CHAR(:new.num_req, '009'), 2);
--     SELECT NVL(MAX(num_msg_envio), 0)
--     INTO wseq_ped
--     FROM envio
--     WHERE ref_ped_envio = wref_ped_envio
--     AND tip_form_envio = 'Q';
--     wseq_ped := wseq_ped + 1;
     BEGIN
        SELECT p.end_envio, p.circ_aut
        INTO wendereco, wcirc_aut
        FROM posto p
        WHERE p.cod_pos = :new.cod_pos;
     EXCEPTION
        WHEN NO_DATA_FOUND THEN
        wendereco := NULL;
        wcirc_aut := 'N';
     END;
     IF wcirc_aut = 'S'THEN
        wtip_envio := 'R';
     ELSE
        wtip_envio := 'F';
     END IF;
     INSERT INTO envio
        (  tip_form_envio,
           ref_ped_envio,
           num_msg_envio,
           tip_dest,
           importanc_envio,
           assunto,
           uti_envio,
           est_envio,
           tip_envio,
           endereco_envio,
           dr_ndr,
           req_cod_pos,
           req_ano_req,
           req_num_req,
           dat_envio)
     VALUES
        (
           'Q',
           wref_ped_envio,
           1,  -- SÃ³ hÃ¡ um envio para cada RequisiÃ§Ã£o
           'C',
           '3',
           wref_ped_envio|| '.Q',
           user,
           'P',
           wtip_envio,
           wendereco,
           'S',
           :new.cod_pos,
           :new.ano_req,
           :new.num_req,
	   sysdate);
  END;
/

prompt
prompt Creating trigger DBT_TEMP_ENV_VISMAIL_INS
prompt =========================================
prompt
CREATE OR REPLACE TRIGGER RPV.DBT_TEMP_ENV_VISMAIL_INS
AFTER  INSERT
 ON TEMP_ENV_VISMAIL
FOR EACH ROW

DECLARE
v_end_envio posto.end_envio%type;
BEGIN
      select end_envio into v_end_envio
      from posto
      where cod_pos = taref.busca_param_glo1(3);
      INSERT INTO envio(
              tip_form_envio,
              ref_ped_envio,
              num_msg_envio,
              tip_dest,
              importanc_envio,
              assunto,
              dat_envio,
              uti_envio,
              est_envio,
              tip_envio,
              endereco_envio,
              dr_ndr,
              seq_envio)
     VALUES
           (
              'J',
              :new.messageid,
              1,
              'C',
              '3',
              :new.messageid||'.J',
              sysdate,
              user,
              'P',
              'R',
              v_end_envio,
              'S',
              envio_seq_envio.nextval);

EXCEPTION
WHEN OTHERS THEN RAISE NO_DATA_FOUND;
END;
/

prompt
prompt Creating trigger DBT_TEMP_REPS_INS
prompt ==================================
prompt
CREATE OR REPLACE TRIGGER RPV.DBT_TEMP_REPS_INS
BEFORE INSERT
 ON TEMP_REPS
FOR EACH ROW

DECLARE
	cursor c1 IS
	SELECT enviar_tip_form_envio,
	enviar_ref_ped_envio, enviar_num_msg_envio, post_scheng
	FROM temp_env
	WHERE msgid = :new.envia_msgid;
	v_tip_form_envio envio.tip_form_envio%TYPE;
	v_ref_ped_envio	 envio.ref_ped_envio%TYPE;
	v_num_msg_envio	 envio.num_msg_envio%TYPE;
	v_post_scheng	 temp_env.post_scheng%TYPE;
	CURSOR c2 IS
	SELECT e.* FROM envio e
	WHERE  e.tip_form_envio = v_tip_form_envio
	AND    e.ref_ped_envio = v_ref_ped_envio
	AND    e.num_msg_envio = v_num_msg_envio FOR UPDATE OF dat_dr, est_envio,
							uti_envio, assunto;
	v_envio		envio%ROWTYPE;
	v_data		DATE;
BEGIN
   IF :new.data_env IS NOT NULL THEN
	IF  SUBSTR(:new.data_env, 5, 1) not like '-' THEN
		:new.data_env := TO_CHAR(TO_DATE(SUBSTR(:new.data_env, 1, 12), 'rrmmddhh24miss'),
			'yyyy-mm-dd hh24:mi:ss');
	END IF;
        v_data := TO_DATE(:new.data_env, 'yyyy-mm-dd hh24:mi:ss');
   END IF;
   OPEN c1;
   FETCH c1 INTO v_tip_form_envio, v_ref_ped_envio, v_num_msg_envio, v_post_scheng;
   IF c1%NOTFOUND THEN CLOSE c1; RETURN;
   END IF;
   CLOSE c1;
   OPEN c2;
   FETCH c2 INTO v_envio;
   IF c2%NOTFOUND THEN CLOSE c2; RETURN;
   END IF;
   IF :new.delivery like 'NON%' THEN
	   UPDATE envio
   	   SET 	dat_dr = v_data,
       		est_envio = 'P',
		uti_envio = user
   	   WHERE CURRENT OF c2;
   ELSE
	   UPDATE envio
   	   SET 	dat_dr = v_data,
       		est_envio = 'E'
   	   WHERE CURRENT OF c2;
   END IF;
   CLOSE c2;
END;
/

prompt
prompt Creating trigger DBT_VINHETA_BEF_INS
prompt ====================================
prompt
CREATE OR REPLACE TRIGGER RPV.DBT_VINHETA_BEF_INS
BEFORE INSERT
 ON VINHETA
FOR EACH ROW


BEGIN
:new.cri_dat_est := substr(:new.cri_dat,1,10);
END;
/

prompt
prompt Creating trigger DBT_VINHETA_INS
prompt ================================
prompt
CREATE OR REPLACE TRIGGER RPV.DBT_VINHETA_INS
AFTER  INSERT
 ON VINHETA
FOR EACH ROW

when (NEW.ANO_LOTE IS NOT NULL AND NEW.NUM_LOTE IS NOT NULL)
DECLARE
  wlote lote_vin%ROWTYPE;
--
  CURSOR c1 IS
	SELECT * from LOTE_VIN
	  WHERE ano_lote = :new.ano_lote
            AND num_lote = :new.num_lote
	    AND est_lote = 'P'
	  ORDER by ano_lote, num_lote;
BEGIN
  update lote_vin
	set ult_num = :new.num_vin,
	    ult_dat = sysdate
	where ano_lote = :new.ano_lote
	  and num_lote = :new.num_lote
	  and :new.num_vin > ult_num;
  if FUNCOES.EH_POSTO then
	select * into wlote from lote_vin
 	  where ano_lote = :new.ano_lote
	    and num_lote = :new.num_lote;
	if wlote.ult_num = wlote.lim_max then
		update lote_vin
		  set est_lote = 'T'
		where ano_lote = :new.ano_lote
		  and num_lote = :new.num_lote;
--
		open c1;
		fetch c1 into wlote;
		if c1%NOTFOUND then
			null;
		else
			update lote_vin
			  set est_lote = 'E'
			where ano_lote = wlote.ano_lote
			  and num_lote = wlote.num_lote;
		end if;
		close c1;
	end if;
  end if;
exception when others then
	null;
END;
/

prompt
prompt Creating trigger DBT_VINHETA_INS_P
prompt ==================================
prompt
CREATE OR REPLACE TRIGGER RPV.DBT_VINHETA_INS_P
AFTER  INSERT
 ON VINHETA
FOR EACH ROW

DECLARE
     CURSOR c_envio IS
        SELECT * FROM envio
     WHERE :new.ano_form = FOR_ANO_FORM
     AND   :new.num_form = FOR_NUM_FORM
     AND   EST_ENVIO = 'E';
     --
--     w_envio envio%ROWTYPE;
     --
     CURSOR c_posto IS
        SELECT * FROM posto
     WHERE
        cod_pos = :new.cod_pos;
     --
     w_posto posto%ROWTYPE;
     --
     wtip_envio VARCHAR2(1);
     --
     wlote lote_vin%ROWTYPE;
     --
--
  CURSOR c1 IS
	SELECT * from LOTE_VIN
	  WHERE ano_lote = :new.ano_lote
            AND num_lote = :new.num_lote
	    AND cod_pos  = :new.cod_pos
	    AND est_lote in ('E','U')
	FOR UPDATE OF ult_num, ult_dat, est_lote;
  CURSOR c2 IS
	SELECT v.vvtl FROM t_visto v
	WHERE v.tip_vis = :new.tip_vis;
  v_vvtl	t_visto.vvtl%TYPE;
  CURSOR c3 IS
	SELECT p.ped_normal, p.cons_central FROM form_p p
	WHERE p.ano_form = :new.ano_form
	AND   p.num_form = :new.num_form;
  v_ped_normal		form_p.ped_normal%TYPE;
  v_cons_central	form_p.cons_central%TYPE;
  BEGIN
     OPEN c1;
     FETCH c1 INTO wlote;
     IF c1%NOTFOUND THEN RAISE DUP_VAL_ON_INDEX;
     END IF;
     --
     --
     OPEN c_posto;
     FETCH c_posto INTO w_posto;
     IF c_posto%NOTFOUND THEN
        w_posto.end_envio := NULL;
     END IF;
     CLOSE c_posto;
     IF w_posto.end_envio IS NULL THEN
        wtip_envio := 'F';
     ELSE
        wtip_envio := 'R';
     END IF;
-- Caso seja uma Vinheta concedida sem ter sido pedido o Parecer Ã  Central, quando Ã© enviada
-- a comunicaÃ§Ã£o referente Ã  Vinheta, deve ser tambÃ©m enviado um FormulÃ¡rio P, de modo a
-- actualizar a Base de Dados da Central
     OPEN c3;
     FETCH c3 INTO v_ped_normal, v_cons_central;
        IF c3%NOTFOUND THEN RAISE NO_DATA_FOUND;
        END IF;
     CLOSE c3;
     IF NVL(v_cons_central, 'S') = 'N' THEN
        IF Taref.Envia_FormP (:new.ano_form, :new.num_form) THEN NULL;
        ELSE
            RAISE NO_DATA_FOUND;
        END IF;
     END IF;
     --
     INSERT INTO envio(
              tip_form_envio,
              ref_ped_envio,
              num_msg_envio,
              tip_dest,
              importanc_envio,
              assunto,
              dat_envio,
              uti_envio,
              est_envio,
              tip_envio,
              endereco_envio,
              dr_ndr,
              seq_envio,
              vin_num_vin,
	      for_ano_form,
	      for_num_form)
     VALUES
           (
              'V',
              :new.num_vin,
              1,
              'C',
              '3',
              :new.num_vin||'.V',
              sysdate,
              user,
              'P',
              wtip_envio,
              w_posto.end_envio,
              'S',
              envio_seq_envio.nextval,
              :new.num_vin,
	      :new.ano_form,
	      :new.num_form);
     UPDATE lote_vin
     SET  ult_num = TO_NUMBER(SUBSTR(:new.num_vin, 2)),
	  ult_dat = sysdate,
	  est_lote = decode(wlote.lim_max, TO_NUMBER(SUBSTR(:new.num_vin, 2)), 'T', est_lote)
     WHERE CURRENT OF c1;
     CLOSE c1;
EXCEPTION
WHEN OTHERS THEN RAISE NO_DATA_FOUND;
END;
/

prompt
prompt Creating trigger DBT_VINHETA_UPD_P
prompt ==================================
prompt
CREATE OR REPLACE TRIGGER RPV.DBT_VINHETA_UPD_P
AFTER  UPDATE
 ON VINHETA
FOR EACH ROW

when (OLD.EST_VIN = 'E' AND NEW.EST_VIN = 'N'                  )
BEGIN
   DELETE FROM ENVIO
   WHERE TIP_FORM_ENVIO= 'V'
   AND VIN_NUM_VIN = :OLD.NUM_VIN;
   DELETE FROM FORM_EST WHERE COD_EST = 'VEM' AND
   COD_TAREF = 'AGU_VEXP' AND NUM_FORM = :NEW.NUM_FORM
   AND ANO_FORM = :NEW.ANO_FORM;
   UPDATE FORMULARIO
   SET EMITE_VIN = 'S'
   WHERE ANO_FORM = :NEW.ANO_FORM AND NUM_FORM = :NEW.NUM_FORM;
   IF SQL%NOTFOUND THEN NULL;
   END IF;
END;
/

prompt
prompt Creating trigger FORM_EST_TRG
prompt =============================
prompt
CREATE OR REPLACE TRIGGER RPV.FORM_EST_TRG
BEFORE INSERT ON FORM_EST
FOR EACH ROW
BEGIN
  IF :NEW.COD_TAREF = 'AGU_VIN' THEN
     UPDATE FORMULARIO SET EMITE_VIN = 'S'
     WHERE ANO_FORM = :NEW.ANO_FORM AND NUM_FORM = :NEW.NUM_FORM;
  END IF;

  IF :NEW.COD_EST = 'VEX' AND :NEW.COD_TAREF = 'FIM_PED' THEN
     UPDATE FORMULARIO SET EMITE_VIN = 'E'
     WHERE ANO_FORM = :NEW.ANO_FORM AND NUM_FORM = :NEW.NUM_FORM;
  END IF;

  IF :NEW.COD_EST = 'VEM' AND :NEW.COD_TAREF = 'AGU_VEXP' THEN
     UPDATE FORMULARIO SET EMITE_VIN = 'V'
     WHERE ANO_FORM = :NEW.ANO_FORM AND NUM_FORM = :NEW.NUM_FORM;
  END IF;

  IF :NEW.COD_EST = 'CAN' AND :NEW.COD_TAREF = 'FIM_PED' THEN
      UPDATE FORMULARIO SET EMITE_VIN = NULL
      WHERE ANO_FORM = :NEW.ANO_FORM AND NUM_FORM = :NEW.NUM_FORM;
  END IF;
END;
/

prompt
prompt Creating trigger FORMULARIO_WEB_LIMPA_AGENDA
prompt ============================================
prompt
CREATE OR REPLACE TRIGGER RPV.FORMULARIO_WEB_LIMPA_AGENDA
AFTER UPDATE ON FORMULARIO_WEB
FOR EACH ROW
when (NVL(OLD.NUM_FORM,0) != NVL(NEW.NUM_FORM,0))
BEGIN
  IF TRUNC(:NEW.DATA_AGENDAMENTO) > TRUNC(SYSDATE) THEN
     INSERT INTO LIMPA_AGENDA(NUM_FORM_WEB,TIPO,TRATADO,CRI_UTI,CRI_DAT)
     VALUES(TO_NUMBER(SUBSTR(:NEW.NUM_FORM_WEB,2)),'P','N',USER,TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS'));
  END IF;
END;
/

prompt
prompt Creating trigger FORMULARIO_WEB_TRG
prompt ===================================
prompt
CREATE OR REPLACE TRIGGER RPV.FORMULARIO_WEB_TRG
BEFORE INSERT ON FORMULARIO_WEB
FOR EACH ROW
BEGIN
  :NEW.CRI_UTI := USER;
END;
/


spool off
